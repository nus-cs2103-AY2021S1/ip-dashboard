[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "seanjyjy": 1
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    mainClassName \u003d \u0027duke.Launcher\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\" "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "seanjyjy": 17
    }
  },
  {
    "path": "config/travis/check-eof-newline.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "# Checks that all text files end with a newline."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "ret\u003d0"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "# Preserve filename with spaces by only splitting on newlines."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "IFS\u003d\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        echo \"ERROR:$filename:$line: no newline at EOF.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 18
    }
  },
  {
    "path": "config/travis/check-line-endings.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "# Checks for prohibited line endings."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "# Prohibited line endings: \\r\\n"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ret \u003d 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 19
    }
  },
  {
    "path": "config/travis/check-trailing-whitespace.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "# Checks for trailing whitespace"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        # Only warn for markdown files (*.md) to accomodate text editors"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        # which do not properly handle trailing whitespace."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        # (e.g. GitHub web editor)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if ($1 ~ /\\.md$/) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            severity \u003d \"WARN\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            severity \u003d \"ERROR\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            ret \u003d 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        print severity, $1, $2, \" trailing whitespace.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 26
    }
  },
  {
    "path": "config/travis/run-checks.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "ret\u003d0 \u0026\u0026"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "for checkscript in \"$dir\"/check-*; do"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    if ! \"$checkscript\"; then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 11
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Duke is the name of this program. It acts as a CLI app that reads and save"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * the user inputs. You can use it to record down tasks and marking the progress"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * of it."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Initialize the Duke object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        storage.retrieve(tasks);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //@@ Oleg Mikhailov"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    //Reused https://stackoverflow.com/questions/26311470/what-is-the-equivalent-of-javascript-settimeout-in-java"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // added Lambdas before."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static void setTimeout(Runnable runnable, int delay) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        new Thread(() -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                Thread.sleep(delay);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                runnable.run();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                System.err.println(e);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }).start();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String reply \u003d c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (reply.equals(ui.goodBye())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                setTimeout(()-\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    Platform.exit();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    System.exit(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                }, 1000);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return reply;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public TaskList retrieveTaskList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "seanjyjy": 62
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.visualui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            MainWindow mainWindow \u003d new MainWindow();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.setRoot(mainWindow);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Scene scene \u003d new Scene(mainWindow);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            scene.getStylesheets().add(\"view/MainWindow.css\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke, stage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 33
    }
  },
  {
    "path": "src/main/java/duke/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.DuplicateException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatDateException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatDeadlineException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatEventException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the add command of the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Mainly: event, deadline, todo."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String ADDED_NOTIFICATION \u003d \"Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates an AddCommand object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param inputArr Array of length 2 that contains information of the user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 0, contains the type of command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 1, contains the message of the command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public AddCommand(String[] inputArr) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(inputArr);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws InvalidFormatDeadlineException,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            InvalidFormatEventException, InvalidFormatDateException, UnknownCommandException, DuplicateException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return addTask(inputArr[0], inputArr[1], ui, tasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Adds the given task into the task list. Expected format for the date in message is YYYY-MM-DD HHMM or"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * YYYY-MM-DD HHMM. If type is of todo, date can be omitted."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param type Type of task that is being entered (todo, event, deadline)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param message Details of the task that the user entered."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param ui Object that deals with interactions with the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A string message showing the information of the task that has been added."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws InvalidFormatDeadlineException Throws an exception when the format of \u0027message\u0027 is wrong."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws InvalidFormatEventException Throws an exception when the format of \u0027message\u0027 is wrong."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws InvalidFormatDateException Throws an exception when the format of \u0027message\u0027 is wrong."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private String addTask(String type, String message, Ui ui, TaskList tasks) throws InvalidFormatDeadlineException,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            InvalidFormatEventException, InvalidFormatDateException, UnknownCommandException, DuplicateException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String[] dateTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case Parser.KEYWORD_TODO:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            task \u003d new ToDo(message);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case Parser.KEYWORD_DEADLINE:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            dateTime \u003d message.split(\" /by \", 2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // checking if the input is valid"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (dateTime.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                throw new InvalidFormatDeadlineException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            task \u003d new Deadline(dateTime[0], Parser.formatDateTime(dateTime[1]));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case Parser.KEYWORD_EVENT:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            dateTime \u003d message.split(\" /at \", 2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // checking if the input is valid"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (dateTime.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                throw new InvalidFormatEventException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            task \u003d new Event(dateTime[0], Parser.formatDateTime(dateTime[1]));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new UnknownCommandException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (checkDuplicates(tasks, task)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new DuplicateException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return ui.messageFormatter(ADDED_NOTIFICATION, task.toString(), printNumTask(tasks));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public boolean checkDuplicates(TaskList taskList, Task task) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return taskList.checkExistBefore(task);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 90
    }
  },
  {
    "path": "src/main/java/duke/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the bye command of the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates an ByeCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param inputArr Array of length 2 that contains information of the user input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 0, contains the type of command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 1, contains the message of the command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ByeCommand(String[] inputArr) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(inputArr);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return endProgram(tasks, ui, storage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Save and store the relevant information into local storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param ui Object that deals with interactions with the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param storage Object that contains the saved list of tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A String message that informs the user that the program will be ending."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private String endProgram(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String bye \u003d ui.goodBye();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        storage.record(tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return bye;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 41
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.DuplicateException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatDateException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatDeadlineException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatEventException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the command of the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String KEYWORD_ERR \u003d \"Sorry something went wrong. Duke crashed X.X\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected String[] inputArr;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a Command object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param inputArr Array of length 2 that contains information of the user input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 0, contains the type of command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 1, contains the message of the command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    Command(String[] inputArr) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.inputArr \u003d inputArr;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Prints the error message when duke crashes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static void printErr() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        System.out.println(KEYWORD_ERR);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Display out the number of task in the user\u0027s list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks the task object containing the list of task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String printNumTask(TaskList tasks) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return String.format(\"Now you have %d tasks in the list.\\n\", tasks.size());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Mainly for polymorphism."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param ui Object that deals with interactions with the user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param storage Object that deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws UnknownCommandException,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            InvalidFormatDeadlineException, InvalidFormatEventException, InvalidFormatDateException, DuplicateException;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 54
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the delete command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String INVALID_INPUT \u003d \"Invalid input for delete\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String DELETE_NOTIFICATION \u003d \"Noted. I\u0027ve removed this task:\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a DeleteCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param inputArr Array of length 2 that contains information of the user input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 0, contains the type of command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 1, contains the message of the command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public DeleteCommand(String[] inputArr) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(inputArr);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return deleteTask(parseInt(inputArr[1]), ui, tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Deletes the task at that index in the list. If the index \u0027pos\u0027 less than of equals to 0 or greater than the size"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * of the list, a message will printed, notifying the user of the invalid input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param pos Index of the task to be deleted in the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param ui Object that deals with interactions with the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A string message notifying which task has been deleted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private String deleteTask(int pos, Ui ui, TaskList tasks) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (pos \u003c\u003d 0 || pos \u003e tasks.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return ui.messageFormatter(INVALID_INPUT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Task task \u003d tasks.get(pos - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            tasks.remove(pos - 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return ui.messageFormatter(DELETE_NOTIFICATION, task.toString(), printNumTask(tasks));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 52
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the done command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String INVALID_INPUT \u003d \"Invalid input for done\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a DoneCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param inputArr Array of length 2 that contains information of the user input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 0, contains the type of command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 1, contains the message of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public DoneCommand(String[] inputArr) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(inputArr);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return marking(parseInt(inputArr[1]), ui, tasks);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Marks the task at that index \u0027pos\u0027 of the list. If the index \u0027pos\u0027 is less than or equals to 0 or greater than"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * the size of the list, a message will printed, notifying the user of the invalid input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param pos Index of the task to be marked in the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param ui Object that deals with interactions with the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A String message that this particular task is marked or has been marked before."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private String marking(int pos, Ui ui, TaskList tasks) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (pos \u003c\u003d 0 || tasks.size() \u003c pos) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return ui.messageFormatter(INVALID_INPUT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Task task \u003d tasks.get(pos - 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return ui.messageFormatter(task.markAsDone());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 50
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the find command of the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String FIND_SUCCESS \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a FindCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param inputArr Array of length 2 that contains information of the user input"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 0, contains the type of command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 1, contains the message of the command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public FindCommand(String[] inputArr) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(inputArr);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return findTasks(tasks, inputArr[1], ui);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Find and displays the list of task based on the user\u0027s input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object that contains the list of tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param keyword The task that the user is looking for."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A String message stating all the tasks that contains the particular keyword that"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * the user has keyed in."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private String findTasks(TaskList tasks, String keyword, Ui ui) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        StringBuilder finalMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Task task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String description \u003d task.getDescription().toLowerCase();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (description.contains(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                finalMessage.append(task.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (finalMessage.toString().equals(\"\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String noTask \u003d String.format(\"No available task matches %s\\n\", keyword);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return ui.messageFormatter(noTask);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assert finalMessage.toString().length() \u003e 0 : \"Message is empty\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return ui.messageFormatter(FIND_SUCCESS, finalMessage.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 54
    }
  },
  {
    "path": "src/main/java/duke/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String EXTRA_SPACE \u003d \"    \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String unsureString \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String listingString \u003d \"Here are the list of commands available:\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String S1 \u003d \"1. list\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String S2 \u003d \"2. bye\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String S3 \u003d \"3. todo \\\u0027task name\\\u0027 (e.g. todo task 1)\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String S4 \u003d \"4. delete ___ (e.g. delete 1)  *Note that it should be a value more than 0*\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String S5 \u003d \"5. done ___ (e.g. done 1)  *Note that it should be a value more than 0*\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String S6 \u003d \"6. find ___ (e.g. find book) *Note that only 1 keyword is allowed*\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String S7 \u003d \"7. remind _ _ (e.g.remind 1 y)\" + \"\\n\" + EXTRA_SPACE"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \" *Sets reminder on task 1 in task list , y or n represents yes or no respectively*\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String S8 \u003d \"8. deadline \\\u0027task name\\\u0027 /by \\\u0027any date format\\\u0027 \" + \"\\n\" + EXTRA_SPACE"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \"(e.g. deadline project /by YYYY-MM-DD HHMM or YYYY-MM-DD)\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String S9 \u003d \"9. event \\\u0027event name\\\u0027 /at \\\u0027any date format\\\u0027 \" + \"\\n\" + EXTRA_SPACE"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \"(e.g. event project /at YYYY-MM-DD HHMM or YYYY-MM-DD)\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a HelpCommand object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param inputArr Array of length 2 that contains information of the user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 0, contains the type of command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 1, contains the message of the command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public HelpCommand(String[] inputArr) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(inputArr);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return getListOfCommands();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Generates the list of commands available in Duke"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A list of commands available in Duke"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String getListOfCommands() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return unsureString + listingString + S1 + S2 + S3 + S4 + S5 + S6 + S7 + S8 + S9;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 47
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the add command of the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String EMPTY_MSG \u003d \"Your list is empty!!!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String SHOW_TASK \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates an ListCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param inputArr Array of length 2 that contains information of the user input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 0, contains the type of command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 1, contains the message of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ListCommand(String[] inputArr) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(inputArr);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return showListTasks(tasks, ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Printing out all the task in the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param ui Object that deals with interactions with the user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A string representing the information of the list of tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private String showListTasks(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return ui.messageFormatter(EMPTY_MSG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assert tasks.size() \u003e 0 : \"Invalid task list, giving a negative size\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            StringBuffer finalMessage \u003d new StringBuffer(SHOW_TASK).append(\"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            IntStream.range(1, tasks.size() + 1).forEach(num -\u003e finalMessage.append(num).append(\". \")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    .append(tasks.get(num - 1)).append(\"\\n\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return ui.messageFormatter(finalMessage.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 51
    }
  },
  {
    "path": "src/main/java/duke/commands/ReminderCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ReminderCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates an ReminderCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param inputArr Array of length 2 that contains information of the user input"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 0, contains the type of command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 1, contains the message of the command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ReminderCommand(String[] inputArr) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(inputArr);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return setReminder(inputArr[1], tasks);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Remind the user about upcoming deadlines."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param command Representing the target task and its reminder option."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A string message confirm the task to be reminded"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private String setReminder(String command, TaskList tasks) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String[] result \u003d command.split(\" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Task task \u003d tasks.get(Integer.parseInt(result[0]) - 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return task.setReminder(result[1].equals(\"y\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 38
    }
  },
  {
    "path": "src/main/java/duke/commands/UnknownCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates an unknown command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class UnknownCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public UnknownCommand(String[] inputArr) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(inputArr);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * To throw the unknown command exception."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param ui Object that deals with interactions with the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param storage Object that deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws UnknownCommandException Throws an unknown command exception when user\u0027s input is not recognized."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws UnknownCommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        throw new UnknownCommandException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 28
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public abstract class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/DuplicateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class DuplicateException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String DUPLICATE_EXCEPTION \u003d \" ☹ OOPS! This specific task exist before!\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public DuplicateException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(DUPLICATE_EXCEPTION);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyTextException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class EmptyTextException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String EMPTY_EXCEPTION \u003d \" ☹ OOPS! You must fill in the text for %s\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public EmptyTextException(String text) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(String.format(EMPTY_EXCEPTION, text));"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFormatByeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class InvalidFormatByeException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String BYE_EXCEPTION \u003d \" ☹ OOPS! Did you mean bye? \""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \"(Note: There should not be anything behind bye)\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InvalidFormatByeException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(BYE_EXCEPTION);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFormatDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class InvalidFormatDateException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String DATE_EXCEPTION \u003d \" ☹ OOPS! A proper date format would be YYYY-MM-DD HHMM \""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \"(e.g. 2019-10-15 1600) or YYYY-MM-DD (e.g. 2019-10-15)\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InvalidFormatDateException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(DATE_EXCEPTION);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFormatDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class InvalidFormatDeadlineException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String DEADLINE_EXCEPTION \u003d \" ☹ OOPS! A proper deadline format would be like, \""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \"e.g. deadline \\\u0027task name\\\u0027 /by \\\u0027YYYY-MM-DD HHMM or YYYY-MM-DD\\\u0027\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InvalidFormatDeadlineException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(DEADLINE_EXCEPTION);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFormatDeleteException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class InvalidFormatDeleteException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String DELETE_EXCEPTION \u003d \" ☹ OOPS! A proper delete format would be like e.g. delete \""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \"\\\u0027an integer that is between 1(if list is not empty) to the number of items in the list\\\u0027\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InvalidFormatDeleteException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(DELETE_EXCEPTION);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFormatDoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class InvalidFormatDoneException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String DONE_EXCEPTION \u003d \" ☹ OOPS! A proper done format would be like  e.g. done \""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \"\\\u0027an integer that is between 1(if list is not empty) to the number of items in the list\\\u0027\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InvalidFormatDoneException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(DONE_EXCEPTION);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFormatEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class InvalidFormatEventException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String EVENT_EXCEPTION \u003d \" ☹ OOPS! A proper event format would be like, \""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \"e.g. event \\\u0027event name\\\u0027 /at \\\u0027YYYY-MM-DD HHMM or YYYY-MM-DD\\\u0027\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InvalidFormatEventException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(EVENT_EXCEPTION);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFormatFindException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class InvalidFormatFindException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String FIND_EXCEPTION \u003d \" ☹ OOPS! A proper find format would be like, e.g. find \\\u0027keyword\\\u0027 \""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \"(Note that only 1 keyword is allowed.)\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InvalidFormatFindException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(FIND_EXCEPTION);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFormatHelpException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class InvalidFormatHelpException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String HELP_EXCEPTION \u003d \" ☹ OOPS! Did you mean help? \""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \"(Note: There should not be anything behind help)\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InvalidFormatHelpException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(HELP_EXCEPTION);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFormatListException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class InvalidFormatListException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String LIST_EXCEPTION \u003d \" ☹ OOPS! Did you mean list? \""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \"(Note: There should not be anything behind list)\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InvalidFormatListException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(LIST_EXCEPTION);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFormatReminderException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class InvalidFormatReminderException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String REMINDER_EXCEPTION \u003d \" ☹ OOPS! A proper remind format would be like, \""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + \"e.g. remind \\\u0027index in task list\\\u0027 \\\u0027y or n\\\u0027 \";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InvalidFormatReminderException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(REMINDER_EXCEPTION);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public UnknownCommandException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(\"Sorry I don\u0027t know what that means. Type \\\"help\\\" to view the list of commands available\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 7
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.ByeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.ReminderCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.UnknownCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.EmptyTextException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatByeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatDateException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatDeleteException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatDoneException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatFindException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatHelpException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatListException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatReminderException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates reading the user\u0027s input and making sense of it."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static final String KEYWORD_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String KEYWORD_BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String KEYWORD_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String KEYWORD_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String KEYWORD_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String KEYWORD_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String KEYWORD_HELP \u003d \"help\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String KEYWORD_REMIND \u003d \"remind\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Checking if the user\u0027s string input is a number."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @ param str the inputted user\u0027s index for tasks."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @  return boolean value of true if user\u0027s string input is a number, false otherwise."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static boolean isNumber(String str) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            int num \u003d parseInt(str);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *Formats the user\u0027s input timing into a LocalDateTime format."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @ param dateAndTime The inputted user\u0027s timing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A LocalDateTime object that contains the information of the timing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @ throws InvalidFormatDateException If the inputted user\u0027s timing is not of the correct format:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * YYYY-MM-DD HHMM or YYYY-MM-DD, an exception will be thrown to notify the user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static LocalDateTime formatDateTime(String dateAndTime) throws InvalidFormatDateException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assert dateAndTime !\u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String[] dateFormat \u003d dateAndTime.split(\" \", 2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String[] date \u003d dateFormat[0].split(\"-\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String time;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (dateFormat.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // case where he nvr input in the time"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            time \u003d \"2359\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (date.length !\u003d 3) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                throw new InvalidFormatDateException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            time \u003d dateFormat[1];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // case where he inputs in the time"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (date.length !\u003d 3 || time.length() !\u003d 4) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                throw new InvalidFormatDateException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assert date !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assert time !\u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            int year \u003d Integer.parseInt(date[0]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            int month \u003d Integer.parseInt(date[1]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            int day \u003d Integer.parseInt(date[2]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            int hour \u003d Integer.parseInt(time.substring(0, 2));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            int minute \u003d Integer.parseInt(time.substring(2));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return LocalDateTime.of(year, month, day, hour, minute);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (DateTimeException | NumberFormatException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new InvalidFormatDateException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Making sense of the user\u0027s input and outputting the relevant commands to the input."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @ param message The inputted user\u0027s command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A command object that executes the user\u0027s command."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @ throws InvalidFormatByeException Throws an InvalidFormatByeException when the format of Bye is incorrect."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @ throws InvalidFormatListException Throws an InvalidFormatListException when the format of List is incorrect."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @ throws InvalidFormatDoneException Throws an InvalidFormatDoneException when the format of Done is incorrect."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @ throws EmptyTextException Throws an EmptyTextException when the user did not specific anything after the"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * command."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @ throws InvalidFormatDeleteException Throws an InvalidFormatDeleteException when the format of Delete is"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *incorrect."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static Command parse(String message) throws InvalidFormatByeException, InvalidFormatListException,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            InvalidFormatDoneException, EmptyTextException, InvalidFormatDeleteException, InvalidFormatFindException,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            InvalidFormatHelpException, InvalidFormatReminderException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assert message !\u003d null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String[] inputArr \u003d message.trim().replaceAll(\"  +\", \" \").split(\" \", 2);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        inputArr[0] \u003d inputArr[0].toLowerCase();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        switch(inputArr[0]) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case KEYWORD_BYE:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (inputArr.length !\u003d 1) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                throw new InvalidFormatByeException();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    ByeCommand(inputArr);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case KEYWORD_LIST:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (inputArr.length !\u003d 1) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                throw new InvalidFormatListException();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    ListCommand(inputArr);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case KEYWORD_HELP:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (inputArr.length !\u003d 1) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                throw new InvalidFormatHelpException();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new HelpCommand(inputArr);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case KEYWORD_DONE:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // checking if the input is valid"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (inputArr.length \u003d\u003d 1 || !isNumber(inputArr[1])) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                throw new InvalidFormatDoneException();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new DoneCommand(inputArr);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case KEYWORD_DELETE:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // checking if the input is valid"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (inputArr.length \u003d\u003d 1 || !isNumber(inputArr[1])) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                throw new InvalidFormatDeleteException();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new DeleteCommand(inputArr);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case KEYWORD_FIND:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (inputArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                throw new InvalidFormatFindException();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr2 \u003d inputArr[1].split(\" \");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (inputArr2.length \u003e 1) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                throw new InvalidFormatFindException();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new FindCommand(inputArr);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case KEYWORD_REMIND:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (inputArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                throw new InvalidFormatReminderException();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr3 \u003d inputArr[1].split(\" \");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (inputArr3.length !\u003d 2) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                throw new InvalidFormatReminderException();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new ReminderCommand(inputArr);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case KEYWORD_EVENT:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case KEYWORD_DEADLINE:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case KEYWORD_TODO:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // checking if the input is valid"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (inputArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                throw new EmptyTextException(inputArr[0]);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new AddCommand(inputArr);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new UnknownCommand(inputArr);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 177
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the storing and retrieving of information into the hard-disk"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Checking if a particular task is completed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param s A string encoding whether a task is completed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return Returns true if the task is completed, false otherwise."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private boolean isTaskDone(String s) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return !s.equals(\"0\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Checking if a particular task has reminder on."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param s A string encoding whether a task has reminder on."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return Returns true if the task has reminder on, false otherwise."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private boolean isReminderOn(String s) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return !s.equals(\"0\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param path The directory that to be created."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void createFilePath(Path path) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assert path !\u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Files.createDirectories(path);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a CSV file for the user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param file The CSV file to be created."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void createCsv(File file) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assert file !\u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        file.createNewFile();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Recording down the list of tasks that the user have during this session."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param file The CSV file to record down the information."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void savingFileInfo(File file, TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assert file !\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assert tasks !\u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            bufferedWriter.write(tasks.get(i).formatStyling());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        bufferedWriter.close();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * When the user exits, records the data back into the user\u0027s file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void record(TaskList tasks) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assert tasks !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String dir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Path path \u003d Paths.get(dir, \"duke.Duke\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // checking if path exist"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (!Files.exists(path)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                createFilePath(path);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Path filePath \u003d Paths.get(dir, \"duke.Duke\", \"todoList.csv\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            File file \u003d filePath.toFile();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // checking if file exist"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                createCsv(file);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // saving file"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            savingFileInfo(file, tasks);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Command.printErr();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the user\u0027s data and load into the system."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void retrieve(TaskList tasks) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String dir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Path path \u003d Paths.get(dir, \"duke.Duke\", \"todoList.csv\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (path.toFile().exists()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                BufferedReader bufferedReader \u003d Files.newBufferedReader(path);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                String line \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                while (line !\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    String[] info \u003d line.split(\",\", 5);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    // todo format type description done reminderOn"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    // event format type at description done reminderOn"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    // deadline format type by description done reminderOn"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    switch (info[0]) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    case Parser.KEYWORD_TODO:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        tasks.add(new ToDo(info[1], isTaskDone(info[2]), isReminderOn(info[3])));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    case Parser.KEYWORD_EVENT:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        tasks.add(new Event(info[2], info[1], isTaskDone(info[3]), isReminderOn(info[4])));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    case Parser.KEYWORD_DEADLINE:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        tasks.add(new Deadline(info[2], info[1], isTaskDone(info[3]), isReminderOn(info[4])));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        throw new UnknownCommandException();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    line \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            } catch (IOException | UnknownCommandException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                Command.printErr();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 149
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the deadline task that user has inputted."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final DateTimeFormatter Format_Date_Time \u003d DateTimeFormatter.ofPattern(\"EEEE, dd MMM yyyy, h:mma\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a deadline object the containing details of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param taskDeadline LocalDateTime format of the time."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Deadline(String description, LocalDateTime taskDeadline) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(description, 0, taskDeadline);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a deadline object the containing details of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param taskDeadline String format of the time. Either YYYY-MM-DD HHMM or"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                     YYYY-MM-DD(Will be reformatted with 2359 as HHMM)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param isDone Boolean value of whether a task is completed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param isReminderOn Boolean value of whether this task needs a reminder."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Deadline(String description, String taskDeadline, boolean isDone, boolean isReminderOn) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(description, isDone, isReminderOn, 0, LocalDateTime.parse(taskDeadline));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Returns a proper styling to be recorded into CSV."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A format to be recorded into CSV."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String formatStyling() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return String.format(\"deadline,%s%s\", getDueDate(), super.formatStyling());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + getDueDate().format(Format_Date_Time) + \")\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 46
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the event task that user has inputted."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final DateTimeFormatter Format_Date_Time \u003d DateTimeFormatter.ofPattern(\"EEEE, dd MMM yyyy, h:mma\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a event object the containing details of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param eventTime LocalDateTime format of the time."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Event(String description, LocalDateTime eventTime) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(description, 0, eventTime);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a event object the containing details of the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param eventTime String format of the time. Either YYYY-MM-DD HHMM or"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                  YYYY-MM-DD(Will be reformatted with 2359 as HHMM)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param isDone Boolean value of whether a task is completed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param isReminderOn Boolean value of whether this task needs a reminder"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Event(String description, String eventTime, boolean isDone, boolean isReminderOn) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(description, isDone, isReminderOn, 0, LocalDateTime.parse(eventTime));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Returns a proper styling to be recorded into CSV."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A format to be recorded into CSV."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String formatStyling() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return String.format(\"event,%s%s\", getDueDate(), super.formatStyling());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + getDueDate().format(Format_Date_Time) + \")\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 47
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the task that user has inputted."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TASK_MARKED_BEFORE \u003d \"This task has already been marked!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TASK_MARKED \u003d \"Nice! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TASK_REMINDER_ON \u003d \"The reminder of this task %s, has been activated\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TASK_REMINDER_OFF \u003d \"The reminder of this task %s, has been deactivated\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TICK \u003d \"\\u2714\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String CROSS \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected boolean isReminderOn;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected int priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected LocalDateTime dueDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a task object the containing details of the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.isReminderOn \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a task object the containing details of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param isDone Boolean value representing whether a task is completed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.isReminderOn \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a task object the containing details of the task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param priority Integer value denoting the priority of the task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Task(String description, int priority) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.isReminderOn \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a task object the containing details of the task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param priority Integer value denoting the priority of the task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param dueDate LocalDateTime object denoting the due date of the task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Task(String description, int priority, LocalDateTime dueDate) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a task object the containing details of the task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param isDone Boolean value of whether a task is completed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param isReminderOn Boolean value of whether this task needs a reminder."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param priority Integer value denoting the priority of the task."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Task(String description, boolean isDone, boolean isReminderOn, int priority) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.isReminderOn \u003d isReminderOn;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a task object the containing details of the task."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param isDone Boolean value of whether a task is completed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param isReminderOn Boolean value of whether this task needs a reminder."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param priority Integer value denoting the priority of the task."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param dueDate LocalDateTime object denoting the due date of the task."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Task(String description, boolean isDone, boolean isReminderOn, int priority, LocalDateTime dueDate) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.isReminderOn \u003d isReminderOn;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Displays a cross if task is not done, a tick otherwise."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return Byte encoding strings of the symbols tick or X."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return (isDone ? TICK : CROSS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Marks the task as completed."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String markAsDone() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return TASK_MARKED_BEFORE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return TASK_MARKED + \"\\n\" + this.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Set the status of reminder option."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param status boolean value denote the status of reminder option."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String setReminder(boolean status) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        isReminderOn \u003d status;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (status) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return String.format(TASK_REMINDER_ON, description);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return String.format(TASK_REMINDER_OFF, description);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Returns a proper styling to be recorded into CSV."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A format to be recorded into CSV."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String formatStyling() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return String.format(\",%s,%d,%d\\n\", description, getTaskStatus(), getReminderStatus());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * If a task has a reminder on, return 1 else 0."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return An integer coded for the reminder status of the task."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public int getReminderStatus() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return isReminderOn ? 1 : 0;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * If a task is completed, return 1 else 0."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return An integer coded for the completed status of the task."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public int getTaskStatus() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return isDone ? 1 : 0;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the details of the task."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A string representing the details of the task."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the priority of the task."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return Integer representing the priority of the task."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the due date of the task."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A LocalDateTime object representing the due date."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public LocalDateTime getDueDate() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return dueDate;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 181
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the todo task that user has inputted."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a todo object the containing details of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(description, 1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a todo object the containing details of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param isDone Boolean value of whether a task is completed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ToDo(String description, boolean isDone, boolean isReminderOn) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(description, isDone, isReminderOn, 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Returns a proper styling to be recorded into CSV."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A format to be recorded into CSV."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String formatStyling() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return String.format(\"todo%s\", super.formatStyling());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 42
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates containing all the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ArrayList\u003cTask\u003e listTasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        listTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Return the number of tasks in the list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return Integer value of the size of the list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return listTasks.size();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the task at that index \u0027n\u0027 of the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param n Integer value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A task at that index \u0027n\u0027."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Task get(int n) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return listTasks.get(n);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Adds the tasks into the list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param t Task to be added."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void add(Task t) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        listTasks.add(t);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Removes the task as that index \u0027n\u0027 of the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param n Integer value."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void remove(int n) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        listTasks.remove(n);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * set the task at that index \u0027n\u0027 of the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param index Integer value."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param task Task to be inserted."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void set(int index, Task task) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        listTasks.set(index, task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Compares the task priority for reminder *Todo takes the highest priority*."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param task1 First task"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param task2 Second task"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return returns true if task1 is more important in terms of type and deadline than task2"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public boolean compare(Task task1, Task task2) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (task1.getPriority() \u003e task2.getPriority()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // implies task1 is of todo and task2 is event/deadline"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else if (task1.getPriority() \u003c task2.getPriority()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // implies task2 is of todo and task1 is event/deadline"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else { // same type"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (task1.getPriority() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                // both task are of task todo"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                // both task are of event/deadline"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                return task1.getDueDate().isBefore(task2.getDueDate());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Sort the task in the list according to due dates *Todo takes the highest priority*."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void sortByDueDate() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        sort(this, 0, this.size() - 1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void sort(TaskList taskList, int left, int right) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (left \u003c right) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            int mid \u003d (left + right) / 2;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            sort(taskList, left, mid);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            sort(taskList, mid + 1, right);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            merge(taskList, left, mid, mid + 1, right);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void merge(TaskList taskList, int left1, int right1, int left2, int right2) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        int left \u003d left1;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        int right \u003d left2;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        int tempIdx \u003d 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Task[] temp \u003d new Task[right2 - left1 + 1];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        while (left \u003c\u003d right1 \u0026\u0026 right \u003c\u003d right2) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (compare(taskList.get(left), (taskList.get(right)))) { // implement comparator"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                temp[tempIdx++] \u003d taskList.get(left++);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                temp[tempIdx++] \u003d taskList.get(right++);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        while (right \u003c\u003d right2) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            temp[tempIdx++] \u003d taskList.get(right++);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        while (left \u003c\u003d right1) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            temp[tempIdx++] \u003d taskList.get(left++);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        for (int i \u003d 0; i \u003c temp.length; i++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            taskList.set(i + left1, temp[i]);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Checks if a task already exist in the list of tasks."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param task The new to be added task."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return Boolean value representing whether the task exist in the lsit of tasks."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public boolean checkExistBefore(Task task) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        for (int i \u003d 0; i \u003c listTasks.size(); i++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (listTasks.get(i).toString().substring(7).equals(task.toString().substring(7))) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 141
    }
  },
  {
    "path": "src/main/java/duke/ui/textui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.ui.textui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the reaction of duke to the user\u0027s input"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String GOODBYE_MSG \u003d \"Bye ^.^, Hope to see you again soon!!!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String HELLO_DUKE \u003d \"Welcome back\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Greets the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String greetings() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return messageFormatter(HELLO_DUKE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Saying goodbye to user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String goodBye() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return messageFormatter(GOODBYE_MSG);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Prints the error \u0027msg\u0027."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param msg Error message to be printed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String printException(String msg) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return messageFormatter(msg);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Formatter to format any message. Easily customizable"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param messageList messages to be wrapped around the formatter."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String messageFormatter(String... messageList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        StringBuffer finalMessage \u003d new StringBuffer();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Stream.of(messageList).forEachOrdered(message -\u003e finalMessage.append(message).append(\"\\n\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return finalMessage.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 43
    }
  },
  {
    "path": "src/main/java/duke/ui/visualui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.ui.visualui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String USER_SPEECH_BUBBLE \u003d \"-fx-background-radius: 12 12 0 12;\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String DUKE_SPEECH_BUBBLE \u003d \"-fx-background-radius: 12 12 12 0;\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final int IMAGE_SIZE \u003d 80;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox speechBubble;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private DialogBox(Stage stage, String text, Image img, String user) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        dialog.getStylesheets().add(\"view/DialogBox.css\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (user.equals(\"user\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            speechBubble.setStyle(USER_SPEECH_BUBBLE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            speechBubble.setStyle(DUKE_SPEECH_BUBBLE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        speechBubble.getStylesheets().add(\"view/DialogBox.css\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Rectangle clip \u003d new Rectangle(displayPicture.getFitWidth(), displayPicture.getFitHeight());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        clip.setArcWidth(IMAGE_SIZE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        clip.setArcHeight(IMAGE_SIZE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        displayPicture.setClip(clip);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static DialogBox getUserDialog(Stage stage, String text, Image img) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return new DialogBox(stage, text, img, \"user\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static DialogBox getDukeDialog(Stage stage, String text, Image img) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        var db \u003d new DialogBox(stage, text, img, \"duke\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 80
    }
  },
  {
    "path": "src/main/java/duke/ui/visualui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.ui.visualui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ScrollPane userScreen;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox reminderSection;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Image stitch \u003d new Image(this.getClass().getResourceAsStream(\"/images/stitch.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Image welcomeStitch \u003d new Image(this.getClass().getResourceAsStream(\"/images/welcomestitch.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        userScreen.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setDuke(Duke duke, Stage stage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String greet \u003d ui.greetings();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.stage \u003d stage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        dialogContainer.getChildren().addAll(OpeningBox.getOpeningMessage(greet, welcomeStitch));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        userScreen.prefWidthProperty().bind(stage.widthProperty());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        loadReminderList(duke.retrieveTaskList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                DialogBox.getUserDialog(stage, input, user),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                DialogBox.getDukeDialog(stage, response, stitch)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Checks the list of task to see which is marked as reminders and display to the users these tasks in a sorted."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * order by time."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void loadReminderList(TaskList taskList) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        TaskList reminderList \u003d new TaskList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (taskList.get(i).getReminderStatus() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                reminderList.add(taskList.get(i));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        reminderList.sortByDueDate();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        for (int i \u003d 0; i \u003c reminderList.size(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            reminderSection.getChildren().addAll(ReminderDisplay.getReminderDisplay(reminderList.get(i)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 83
    }
  },
  {
    "path": "src/main/java/duke/ui/visualui/OpeningBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.ui.visualui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * UI design that shows Duke logo at the start"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class OpeningBox extends VBox {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Label greetingMessage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private OpeningBox(String greetingText, Image img) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/OpeningBox.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        greetingMessage.setText(greetingText);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        greetingMessage.getStylesheets().add(\"view/OpeningBox.css\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static OpeningBox getOpeningMessage(String greetingText, Image img) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return new OpeningBox(greetingText, img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 40
    }
  },
  {
    "path": "src/main/java/duke/ui/visualui/ReminderDisplay.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.ui.visualui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.text.FontWeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Displays all the task that users have set on reminder."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ReminderDisplay extends VBox {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final DateTimeFormatter Format_Date_Time \u003d DateTimeFormatter.ofPattern(\"EEEE, dd MMM yyyy, h:mma\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final Insets INSETS \u003d new Insets(10, 10, 0, 10);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final int TEXT_SPACE__HEIGHT \u003d 40;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final int TEXT_CENTERING \u003d 7;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TEXT_DATE \u003d \"Date: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TEXT_TIME \u003d \"Time: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TEXT_EMPTY \u003d \"-\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TEXT_COMPLETED \u003d \"Completed: \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TEXT_COLON \u003d \": \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TEXT_COMMA \u003d \", \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TEXT_TICK \u003d \"\\u2714\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TEXT_CROSS \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TODO_BACKGROUND \u003d \"-fx-background-color: #648DFC;\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String EVENT_BACKGROUND \u003d \"-fx-background-color: #072AC8;\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String DEADLINE_BACKGROUND \u003d \"-fx-background-color: #8FADFD\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String DISPLAY_FONT \u003d \"Helvetica\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final int DISPLAY_SIZE \u003d 12;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TITLE_COLOR \u003d \"#363f80\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String DESCRIPTION_COLOR \u003d \"#8E8FB5\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TextFlow description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TextFlow isDone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TextFlow date;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private VBox bar;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TextFlow time;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ReminderDisplay(String ... taskDetails) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/ReminderDisplay.fxml\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            this.getStylesheets().add(\"view/reminderText.css\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        createReminderList(taskDetails);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static ReminderDisplay getReminderDisplay(Task task) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String isDone \u003d Integer.toString(task.getTaskStatus());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new ReminderDisplay(description, isDone, \"Todo\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new ReminderDisplay(description, isDone, \"Event\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    task.getDueDate().format(Format_Date_Time));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new ReminderDisplay(description, isDone, \"Deadline\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    task.getDueDate().format(Format_Date_Time));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assert false : \"invalid task type\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a text array that constitute the text header of a specific color and text description of a"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * specific color"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param title"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Text[] createText(String title, String description) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Text text1 \u003d new Text(title);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        text1.setFill(Color.web(TITLE_COLOR));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        text1.setFont(Font.font(DISPLAY_FONT, FontWeight.BOLD, DISPLAY_SIZE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Text text2 \u003d new Text(description);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        text2.setFill(Color.web(DESCRIPTION_COLOR));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        text2.setFont(Font.font(DISPLAY_FONT, FontWeight.BOLD, DISPLAY_SIZE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return new Text[]{text1, text2};"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setPadding() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        time.setPadding(INSETS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        date.setPadding(INSETS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        description.setPadding(INSETS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        isDone.setPadding(INSETS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setHeight() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        description.setPrefHeight(TEXT_SPACE__HEIGHT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        isDone.setPrefHeight(TEXT_SPACE__HEIGHT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        date.setPrefHeight(TEXT_SPACE__HEIGHT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        time.setPrefHeight(TEXT_SPACE__HEIGHT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        description.translateYProperty().setValue(TEXT_CENTERING);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        isDone.translateYProperty().setValue(TEXT_CENTERING);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        date.translateYProperty().setValue(TEXT_CENTERING);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        time.translateYProperty().setValue(TEXT_CENTERING);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setBarColor(String task) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        switch (task.toLowerCase()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case Parser.KEYWORD_TODO:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            bar.setStyle(TODO_BACKGROUND);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case Parser.KEYWORD_EVENT:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            bar.setStyle(EVENT_BACKGROUND);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        case Parser.KEYWORD_DEADLINE:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            bar.setStyle(DEADLINE_BACKGROUND);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assert false : \"Invalid task\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates the display for the list of tasks that is set on reminder."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param taskDetails A list of details regarding the task."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void createReminderList(String ... taskDetails) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Text[] dateText;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Text[] timeText;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Text[] descriptionText \u003d createText(taskDetails[2] + TEXT_COLON, taskDetails[0]);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Text[] isDoneText \u003d createText(TEXT_COMPLETED, taskDetails[1].equals(\"0\") ? TEXT_TICK : TEXT_CROSS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (taskDetails.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] dateTimeArray \u003d taskDetails[3].split(TEXT_COMMA);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            dateText \u003d createText(TEXT_DATE, dateTimeArray[0] + TEXT_COMMA + dateTimeArray[1]);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            timeText \u003d createText(TEXT_TIME, dateTimeArray[2]);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            dateText \u003d createText(TEXT_DATE, TEXT_EMPTY);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            timeText \u003d createText(TEXT_TIME, TEXT_EMPTY);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setHeight();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setPadding();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        date.getChildren().addAll(dateText[0], dateText[1]);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        time.getChildren().addAll(timeText[0], timeText[1]);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        description.getChildren().addAll(descriptionText[0], descriptionText[1]);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        isDone.getChildren().addAll(isDoneText[0], isDoneText[1]);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setBarColor(taskDetails[2]);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 159
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cfx:root fx:id\u003d\"interaction\" "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         alignment\u003d\"TOP_RIGHT\" "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         maxHeight\u003d\"Infinity\" "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         type\u003d\"javafx.scene.layout.HBox\" "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/8.0.171\" "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cVBox translateY\u003d\"10\" "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "              fx:id\u003d\"speechBubble\" "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "              styleClass\u003d\"speechBubble\" "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "              alignment\u003d\"TOP_RIGHT\" "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "              maxHeight\u003d\"-Infinity\" "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "              spacing\u003d\"5.0\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cLabel fx:id\u003d\"dialog\" "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                       styleClass\u003d\"textStyling\" "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                       text\u003d\"Label\" "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                       wrapText\u003d\"true\" "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                       minWidth\u003d\"20\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                       maxWidth\u003d\"600\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                       lineSpacing\u003d\"2\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cVBox translateY\u003d\"40\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "              alignment\u003d\"BOTTOM_CENTER\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cImageView fx:id\u003d\"displayPicture\" "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                       fitHeight\u003d\"80.0\" "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                       fitWidth\u003d\"80.0\" "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                       pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 44
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cfx:root type\u003d\"javafx.scene.layout.AnchorPane\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         maxWidth\u003d\"Infinity\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         minWidth\u003d\"1100\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         prefWidth\u003d\"1100\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         fx:controller\u003d\"duke.ui.visualui.MainWindow\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cGridPane fx:id\u003d\"GridPane\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                  AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                  AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                  AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                  AnchorPane.topAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cRowConstraints vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cVBox"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        fx:id\u003d\"reminderSection\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        styleClass\u003d\"reminderSectionStyling\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        minWidth\u003d\"200\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        GridPane.columnIndex\u003d\"0\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        GridPane.columnSpan\u003d\"1\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        GridPane.rowIndex\u003d\"0\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        GridPane.rowSpan\u003d\"4\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cTextField styleClass\u003d\"textFieldStyling\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                           fx:id\u003d\"userInput\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                           onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                           minHeight\u003d\"41.0\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                           maxWidth\u003d\"Infinity\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                           AnchorPane.bottomAnchor\u003d\"1.0\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                           GridPane.columnIndex\u003d\"1\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                           GridPane.rowIndex\u003d\"3\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                           GridPane.valignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                           promptText\u003d\"Enter your command here...\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                           focusTraversable\u003d\"false\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                           prefWidth\u003d\"1500\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cButton fx:id\u003d\"sendButton\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        mnemonicParsing\u003d\"false\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        minHeight\u003d\"41.0\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        minWidth\u003d\"76.0\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        text\u003d\"\u003e\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        GridPane.columnIndex\u003d\"3\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        GridPane.rowIndex\u003d\"3\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        GridPane.valignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        styleClass\u003d\"buttonStyling\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        AnchorPane.bottomAnchor\u003d\"12.0\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        AnchorPane.rightAnchor\u003d\"8.0\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cScrollPane  fx:id\u003d\"userScreen\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                             hbarPolicy\u003d\"NEVER\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                             hvalue\u003d\"1.0\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                             fitToWidth\u003d\"true\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                             vvalue\u003d\"1.0\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                             maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                             GridPane.columnIndex\u003d\"1\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                             GridPane.rowIndex\u003d\"0\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                             GridPane.columnSpan\u003d\"4\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                             styleClass\u003d\"userScreenStyling\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    \u003ccontent\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        \u003cVBox styleClass\u003d\"mainBodyStyling\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                              fx:id\u003d\"dialogContainer\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                              minHeight\u003d\"559\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                              maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                              minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        \u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                                \u003cInsets bottom\u003d\"45.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    \u003c/content\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 102
    }
  },
  {
    "path": "src/main/resources/view/OpeningBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cfx:root maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         maxWidth\u003d\"Infinity\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         type\u003d\"javafx.scene.layout.VBox\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cImageView fx:id\u003d\"displayPicture\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                           fitHeight\u003d\"100.0\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                           fitWidth\u003d\"100.0\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                           pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cLabel styleClass\u003d\"textStyling\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "               alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "               maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "               fx:id\u003d\"greetingMessage\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "               text\u003d\"Label\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "               wrapText\u003d\"true\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "               maxWidth\u003d\"Infinity\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 32
    }
  },
  {
    "path": "src/main/resources/view/ReminderDisplay.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003cfx:root maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         maxWidth\u003d\"Infinity\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         type\u003d\"javafx.scene.layout.VBox\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003cHBox maxHeight\u003d\"120\" prefWidth\u003d\"190\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cVBox prefWidth\u003d\"10\" "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                  maxHeight\u003d\"120\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                  prefHeight\u003d\"120\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                  fx:id\u003d\"bar\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                  translateX\u003d\"-1\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                  translateY\u003d\"-1\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003cVBox prefWidth\u003d\"180\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                  prefHeight\u003d\"100\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                  maxHeight\u003d\"100\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cTextFlow fx:id\u003d\"description\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                          prefWidth\u003d\"180\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                          styleClass\u003d\"descriptionStyling\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cTextFlow fx:id\u003d\"isDone\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                          prefWidth\u003d\"180\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                          styleClass\u003d\"isDoneStyling\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cTextFlow fx:id\u003d\"date\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                          prefWidth\u003d\"180\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                          styleClass\u003d\"dateStyling\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \u003cTextFlow fx:id\u003d\"time\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                          prefWidth\u003d\"180\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                          styleClass\u003d\"timeStyling\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 46
    }
  },
  {
    "path": "src/test/java/duke/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.EmptyTextException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatByeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatDateException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatDeleteException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatDoneException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatFindException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatListException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Parser p;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        p \u003d new Parser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    class FormatDateTime {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void testFormatDateTime() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                LocalDateTime obj \u003d LocalDateTime.of(2020, 8, 25, 16, 23);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                assertEquals(obj, p.formatDateTime(\"2020-08-25 1623\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            } catch (InvalidFormatDateException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Testing the InvalidFormatDateException in the method FormatDateTime\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void writeInvalidFormatDateException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatDateException.class, () -\u003e p.formatDateTime(\"2020/20/13 1600\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Testing the DateTimeException in the method FormatDateTime (receives InvalidFormatDateException)\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void writeInvalidDateTimeException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatDateException.class, () -\u003e p.formatDateTime(\"2020-30-30 1600\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    class Parse {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // missing on how to test created objects"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Testing the UnknownCommandException in the method Parse\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void testUnknownCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(UnknownCommandException.class, () -\u003e p.parse(\"blah\").execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Testing the InvalidFormatByeException in the method Parse\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void writeInvalidFormatByeException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatByeException.class, () -\u003e p.parse(\"bye 2\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Testing the InvalidFormatListException in the method Parse\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void writeInvalidFormatListException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatListException.class, () -\u003e p.parse(\"list 2\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Testing the InvalidFormatDoneException in the method Parse\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void writeInvalidFormatDoneException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatDoneException.class, () -\u003e p.parse(\"done here\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Testing the EmptyTextException in the method Parse\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void writeEmptyTextException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(EmptyTextException.class, () -\u003e p.parse(\"todo\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Testing the InvalidFormatDeleteException in the method Parse\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void writeInvalidFormatDeleteException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatDeleteException.class, () -\u003e p.parse(\"delete\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Testing the InvalidFormatDeleteException in the method Parse\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void writeInvalidFormatFindException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatFindException.class, () -\u003e p.parse(\"find hello world\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 103
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        task \u003d new Task(\"hello world\", false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void testMarkAsDone() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String taskCompletedMessage \u003d task.markAsDone();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String str \u003d \"Nice! I\u0027ve marked this task as done:\\n[\\u2714] hello world\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(str, taskCompletedMessage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void formatStyling() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String str \u003d \",hello world,0,0\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(str, task.formatStyling());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 26
    }
  },
  {
    "path": "src/test/java/duke/tasklist/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TaskList task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        task \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        for (int i \u003d 0; i \u003c 3; i++) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            task.add(new Task(\"hello world \" + i));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void testSize() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(3, task.size());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void testGet() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(\"[\" + \"\\u2718\" + \"] hello world 2\", task.get(2).toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void testAdd() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // add again to test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        task.add(new Task(\"hello world 3\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(4, 4);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void testRemove() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        task.remove(2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 41
    }
  },
  {
    "path": "src/test/java/duke/ui/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.textui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String HELLO_DUKE \u003d \"Welcome back\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String GOODBYE_MSG \u003d \"Bye ^.^, Hope to see you again soon!!!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @DisplayName(\"formatter for input message\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void testMessageFormatter() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String messageFormatterMessage \u003d ui.messageFormatter(\"hello world\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String str \u003d \"hello world\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(str, messageFormatterMessage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @DisplayName(\"user\u0027s login greetings\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void testGreetings() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String greetingMessage \u003d ui.greetings();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String str \u003d HELLO_DUKE + \"\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(str, greetingMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @DisplayName(\"user\u0027s logout message\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void testGoodBye() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String goodbyeMessage \u003d ui.goodBye();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String str \u003d GOODBYE_MSG + \"\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(str, goodbyeMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @DisplayName(\"error message\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void testPrintException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String errorMessage \u003d ui.printException(\"ERROR\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String str \u003d \"ERROR\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(str, errorMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 48
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "blah"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "delete 0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "todo"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "todo duke.task 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "toDo duke.task 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "deadline duke.task 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "deadline finish project Duke /by today 2:00am"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "deadline finish project Alpha /by 2020-08-23 0400"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "deadline finish project Beta/by 2020-08-23"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "deadline finish project2 Charlie/at today 2:01am"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "event"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "event duke.task 4"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "event project meeting Donkey/at Mon 2-4pm"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "event finish project Eerie/at 2020-08-23 0400"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "event finish project Faster/at 2020-08-23"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "event project meeting Delta/by Wednesday 3-4pm"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "find project"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "list 2"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "bye 2"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "blah"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 32
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "REM run the program, feed duke.commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "seanjyjy": 3
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "if"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  ! ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    find ../src/main/java -name \"*.java\" \u003esources.txt"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  )"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "# run the program, feed duke.commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "java -classpath ../bin Main \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "seanjyjy": 8
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/ui/Ui.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/OpeningBox.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/parser/Parser.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/storage/Storage.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/tasklist/TaskList.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/DialogBox.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/Main.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/task/Event.java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/task/Task.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/task/Deadline.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/task/ToDo.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/commands/ByeCommand.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/commands/DeleteCommand.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/commands/ListCommand.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/commands/UnknownCommand.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/commands/Command.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/commands/AddCommand.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/commands/FindCommand.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/commands/DoneCommand.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/MainWindow.java"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/Duke.java"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/Launcher.java"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/InvalidFormatListException.java"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/InvalidFormatFindException.java"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/InvalidFormatByeException.java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/EmptyTextException.java"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/InvalidFormatDoneException.java"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/InvalidFormatDeleteException.java"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/InvalidFormatDeadlineException.java"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/InvalidFormatEventException.java"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/InvalidFormatDateException.java"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/UnknownCommandException.java"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/DukeException.java"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 33
    }
  }
]
