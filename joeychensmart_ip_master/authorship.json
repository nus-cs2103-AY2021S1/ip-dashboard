[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "# Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "This application was written for CS2103T - Software Engineering, as part of its Individual Project. Is not actually useful so do not use this for your daily workflow (though I would be flattered)."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "![ui sample](https://github.com/JoeyChenSmart/ip/raw/master/docs/Ui.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "User guide can be found [here](https://github.com/JoeyChenSmart/ip/tree/master/docs)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "# Acknowledgements"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "## External Libraries Used"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " - [Google Gson](https://github.com/google/gson) - To store data in JSON format."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " - [Apache Commons-cli](https://github.com/apache/commons-cli) - To handle the commands."
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 8,
      "-": 4
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    implementation group: \u0027commons-cli\u0027, name: \u0027commons-cli\u0027, version: \u00271.4\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    mainClassName \u003d \"duke.Main\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 20,
      "-": 44
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Duke is a personal assistant that can help remember important tasks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "and deadlines for you!"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "## 2. Features "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "### 2.1 Adding a Todo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Adds a todo item to the list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "The item can be a string containing spaces."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Format: `todo ITEM`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Shortcut: `t ITEM`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " - `todo make user guide`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " - `t submit homework`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "### 2.2 Adding an Event"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Adds an event with a date to the list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "The item can be a string containing spaces."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "The format of the date is `YYYY-MM-DD`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Format: `event ITEM -at DATE`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Shortcut: `e ITEM -at DATE`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " - `event amazing product guide reveal -at 2020-09-13`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " - `e sleep -at 2020-10-11`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "### 2.3 Adding a Deadline"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Adds a deadline with a date to the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "The item can be a string containing spaces."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "The format of the date is `YYYY-MM-DD`."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Format: `deadline ITEM -by DATE`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Shortcut: `d ITEM -by DATE`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " - `deadline homework -by 2020-09-13`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " - `d finish project -by 2020-10-11`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "### 2.4 Listing items"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Lists all items that are recorded."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Shortcut: `l`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "### 2.5 Find an item"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Searches for an item in the list using the keyword provided."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Format: `find KEYWORD`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Shortcut: `f KEYWORD`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " - `find homework`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " - `f project`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "### 2.6 Mark an item as done"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Mark an item on the list as completed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "The index is the number of the item in the list command."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Format: `done INDEX`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Shortcut: `c INDEX`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " - `done 5`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " - `c 12`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "### 2.7 Delete an item"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Removes an item permanently from the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "The index is the number of the item in the list command."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "The indexes of the subsequent items will be updated accordingly."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Shortcut: `x INDEX`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " - `delete 1`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " - `x 3`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "### 2.8 Add a new macro"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "**Warning: this is an advanced feature!**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Adds a macro to run several commands in succession."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "NOTE: allows you to use one of the arguments as a command, allowing"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "you to build higher order commands but also potentially infinite loops."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "**USE WITH CAUTION**."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "#### How it works"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Macros accept *arguments* that can be substituted as variables into a series"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "of commands defined by a user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Arguments are strings with associated option names added after the macro"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "name."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Arguments with no associated option name are called *Unnamed arguments*."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "E.g. in the macro `sample abc -t test -v test2`, the macro\u0027s name is"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " `sample`. `test` and `test2` are"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "arguments associated to the options `t` and `v` respectively, and"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "`abc` is an unnamed argument."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Arguments to the macro can be substituted in the commands using the syntax:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "`\\ARGUMENT_NAME`."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Unnamed arguments can be substituted using the syntax: `\\$`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "Format: `macro MACRO_NAME ARGUMENT_1 ARGUMENT_2 ... ; "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "COMMAND_NAME_1 ARGUMENTS_TO_COMMAND \\REUSED_ARGUMENT; COMMAND_NAME_2...`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "#### Example 1"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "`macro spEvent -at ; event special \\$ -at \\at`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " Example usage of this macro: `spEvent test -at 2020-09-13`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " The following command will be executed by the macro: `event special test -at 2020-09-13`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " i.e. in `event special \\$ -at \\at`, `\\$` and `\\at` will be substituted with"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "  `test` and `2020-09-13` respectively."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "#### Example 2"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "`macro doubleTodo ; todo \\$ ; todo second \\$`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " Example usage of this macro: `doubleTodo hello`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " The following commands will be executed by the macro: `todo hello` and `todo second hello`. "
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 127,
      "-": 10
    }
  },
  {
    "path": "src/main/java/duke/Context.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.command.MacroList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * A record class written verbosely since java does not support records. Contains everything the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * parser/commands/macros need to run (TaskList, Ui, MacroList)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class Context {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final MacroList macroList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Constructor for the record class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param taskList TaskList to be used"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param ui Ui to be used"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Context(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assert taskList !\u003d null \u0026\u0026 ui !\u003d null : \"taskList and ui should not be null\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.macroList \u003d new MacroList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public TaskList getTaskList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Ui getUi() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public MacroList getMacroList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return macroList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 39
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Context context;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Constructor for the Duke object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Duke(Ui ui) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assert ui !\u003d null : \"ui should never be null\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.storage \u003d new Storage(\"duke.json\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.taskList \u003d this.storage.load();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            ui.systemMessage(e.getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.context \u003d new Context(this.taskList, this.ui);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.parser \u003d new Parser(this.context);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.context.getMacroList().addDefaultMacros();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.ui.start();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Calls the next iteration of Duke. Uses Ui#nextLine as input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * for the next command, runs that command and sends the output"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * to Ui#systemMessage. Any errors will also be sent to"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Ui#systemMessage."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void nextIteration() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String input \u003d ui.nextLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            parser.parseAndRun(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.storage.save(this.taskList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            ui.systemMessage(e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 52,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.ui.Cli;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.ui.Gui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Entrypoint to the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Main function/entrypoint. Will create a new Duke instance and begin"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * interaction with the user immediately."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Takes in one optional command line argument: --cli"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * which starts Duke in cli mode."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param args command line arguments."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (args.length \u003e 0 \u0026\u0026 args[0].equals(\"--cli\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            Ui ui \u003d new Cli();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            Duke duke \u003d new Duke(ui);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            while (ui.isActive()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                duke.nextIteration();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            Application.launch(Gui.class, args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 31
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.Option;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.Options;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Stores all the commands to be run."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public enum Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    TODO(\"todo\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CommandLibrary.TODO_COMMAND),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    DEADLINE(\"deadline\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CommandLibrary.DEADLINE_COMMAND,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Option.builder(\"by\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            .required(true)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            .hasArg()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            .build()),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    EVENT(\"event\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CommandLibrary.EVENT_COMMAND,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Option.builder(\"at\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            .required(true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            .hasArg()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            .build()),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    LIST(\"list\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CommandLibrary.LIST_COMMAND),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    BYE(\"bye\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CommandLibrary.BYE_COMMAND),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    DONE(\"done\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CommandLibrary.DONE_COMMAND),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    DELETE(\"delete\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CommandLibrary.DELETE_COMMAND),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    FIND(\"find\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CommandLibrary.FIND_COMMAND);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final CommandExecutable exec;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Options options;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    Command(String name, CommandExecutable exec, Option ... optionArray) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.exec \u003d exec;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.options \u003d new Options();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (Option option : optionArray) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            options.addOption(option);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public CommandExecutable getExec() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.exec;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Options getOptions() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.options;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static Command getCommandByName(String name) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (Command command : Command.values()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            if (command.name.equals(name)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                return command;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        throw DukeException.Errors.UNKNOWN_COMMAND.create();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Checks if the queried command exists."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param name checks if there exists a command with this name."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return true if name is a registered command."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static boolean hasCommand(String name) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (Command command : Command.values()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            if (command.name.equals(name)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 79
    }
  },
  {
    "path": "src/main/java/duke/command/CommandExecutable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.CommandLine;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.Context;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Lambda type for executable commands to be launched by the parser."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "@FunctionalInterface"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public interface CommandExecutable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void run(Context context, CommandLine arguments) throws DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 14
    }
  },
  {
    "path": "src/main/java/duke/command/CommandLibrary.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.CommandLine;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.exception.DukeCustomException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "class CommandLibrary {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    // TODO: will CommandLine ever give us nulls? have to check."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    static final CommandExecutable DEADLINE_COMMAND \u003d (context, args) -\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String description \u003d getUnusedArgs(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String time \u003d args.getOptionValue(\"by\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String message \u003d context.getTaskList().add(new Deadline(description, time));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        context.getUi().systemMessage(message);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    };"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    static final CommandExecutable EVENT_COMMAND \u003d (context, args) -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String description \u003d getUnusedArgs(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String time \u003d args.getOptionValue(\"at\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String message \u003d context.getTaskList().add(new Event(description, time));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        context.getUi().systemMessage(message);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    };"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    static final CommandExecutable TODO_COMMAND \u003d (context, args) -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String description \u003d getUnusedArgs(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String message \u003d context.getTaskList().add(new Todo(description));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        context.getUi().systemMessage(message);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    };"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    static final CommandExecutable DELETE_COMMAND \u003d (context, args) -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        int index \u003d parseInt(getUnusedArgs(args));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (index \u003e context.getTaskList().size()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw DukeException.Errors.DELETE_OUT_OF_RANGE.create();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Task selected \u003d context.getTaskList().deleteItem(index - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        context.getUi().systemMessage(\"sir this task has been remove sir:\\n  \" + selected);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    };"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    static final CommandExecutable DONE_COMMAND \u003d (context, args) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        int index \u003d parseInt(getUnusedArgs(args));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (index \u003e context.getTaskList().size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw DukeException.Errors.DONE_OUT_OF_RANGE.create();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Task selected \u003d context.getTaskList().markItem(index - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        context.getUi().systemMessage(\"afternoon sir i have mark this task done sir:\\n  \" + selected);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    };"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    static final CommandExecutable LIST_COMMAND \u003d (context, args) -\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        context.getUi().systemMessage(context.getTaskList().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    static final CommandExecutable BYE_COMMAND \u003d (context, args) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        context.getUi().close();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        context.getUi().systemMessage(\"bye sir thanks for using me sir hope to see you again sir\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    };"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    static final CommandExecutable FIND_COMMAND \u003d (context, args) -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        List\u003cTask\u003e items \u003d context.getTaskList().getItemsList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String keyword \u003d getUnusedArgs(args);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            // if description does not contain string"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            if (!items.get(i).getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                items.set(i, null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        context.getUi().systemMessage(\"sir i found your items sir look:\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        context.getUi().systemMessage(TaskList.enumerateItems(items));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    };"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static String getUnusedArgs(CommandLine args) throws DukeCustomException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        List\u003cString\u003e unconsumedArgs \u003d args.getArgList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (unconsumedArgs.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new DukeCustomException(\"this command requires non-empty arguments.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return String.join(\" \", unconsumedArgs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static int parseInt(String input) throws DukeCustomException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return Integer.parseInt(input);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new DukeCustomException(\"unexpected input, expected integer input.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 82
    }
  },
  {
    "path": "src/main/java/duke/command/Macro.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.CommandLine;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.Option;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.Options;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.Context;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.exception.DukeCustomException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Macro class that deals with user-created macros. Possibly turing complete (this"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * is a bad thing and should be addressed)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class Macro {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final List\u003cString\u003e commands;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Options options;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private Macro(String name, List\u003cString\u003e commands, Options options) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.commands \u003d commands;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.options \u003d options;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Creates a new macro using the String declaration."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param declaration Macro declaration string. Format in the user guide."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return Macro that was created"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws DukeException if declaration has the wrong format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static Macro newMacro(String declaration) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // note: following line also trims whitespace between semicolons."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String[] inputSplitBySemicolon \u003d declaration.split(\" *; *\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String[] macroNameAndArgs \u003d inputSplitBySemicolon[0].split(\"\\\\s+\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String[] commands \u003d Arrays.copyOfRange(inputSplitBySemicolon, 1, inputSplitBySemicolon.length);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String macroName \u003d macroNameAndArgs[0];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Options options \u003d parseOptions(Arrays.copyOfRange(macroNameAndArgs, 1, macroNameAndArgs.length));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return new Macro(macroName, Arrays.asList(commands), options);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static Options parseOptions(String[] macroArgs) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Options options \u003d new Options();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            for (int i \u003d 0; i \u003c macroArgs.length; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                String name \u003d macroArgs[i];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                String description \u003d \"macro argument \" + name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                Option option \u003d new Option(name, true, description);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                option.setRequired(true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                options.addOption(option);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw DukeException.Errors.MACRO_DEFINITION_ERROR.create();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return options;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Options getOptions() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.options;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Executes the macro. Can be used as a CommandExecutable."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param context context for execution."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param args command line arguments parsed using commons-cli."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws DukeException if any command in the macro encounters an error."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void execute(Context context, CommandLine args) throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Parser parser \u003d new Parser(context);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String[] commands \u003d this.substituteAll(args);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        int lastCommandIndex \u003d 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            for (lastCommandIndex \u003d 0; lastCommandIndex \u003c commands.length; lastCommandIndex++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                parser.parseAndRun(commands[lastCommandIndex]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            /* note: not factoring out code below because its only used here and its"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "               purpose/what it\u0027s doing is obvious. */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            DukeCustomException toThrow \u003d new DukeCustomException(e.getMessage());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String errorLocation \u003d \"An error occurred when executing this command:\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + commands[lastCommandIndex];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String doneCommands \u003d lastCommandIndex \u003d\u003d 0 ? \"\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                : \"\\n\\nThe following commands executed successfully:\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + String.join(\"\\n\", Arrays.copyOfRange(commands, 0, lastCommandIndex));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String notDoneCommands \u003d lastCommandIndex + 1 \u003d\u003d commands.length ? \"\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                : \"\\n\\n The following commands were not executed:\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + String.join(\"\\n\", Arrays.copyOfRange(commands, lastCommandIndex + 1, commands.length));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            toThrow.setExtraMessage(errorLocation + doneCommands + notDoneCommands);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw toThrow;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Substitutes all the arguments into the macro, and returns the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * substituted commands as a list. Exposed mainly for testing."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String[] substituteAll(CommandLine args) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String[] output \u003d new String[this.commands.size()];"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (int i \u003d 0; i \u003c this.commands.size(); i++) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            output[i] \u003d substitute(args, this.commands.get(i));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private String substitute(CommandLine args, String line) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // TODO possibly use a StringBuilder here instead for performance."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (Iterator\u003cOption\u003e i \u003d args.iterator(); i.hasNext(); ) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            Option option \u003d i.next();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String from \u003d option.getOpt();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String to \u003d args.getOptionValue(from);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            line \u003d line.replaceAll(\"\\\\\\\\\" + from, to);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String unusedArgs \u003d String.join(\" \", args.getArgList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // regex is matching for \"\\$\"."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return line.replaceAll(\"\\\\\\\\\\\\$\", unusedArgs).trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 131
    }
  },
  {
    "path": "src/main/java/duke/command/MacroList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Container for macros. Ensures a macro\u0027s name is not taken before"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * allowing it to be added."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class MacroList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    // TODO: handle infinite loops: disable macros internally?"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private Map\u003cString, Macro\u003e macros;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public MacroList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.macros \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public boolean hasMacro(String name) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.macros.containsKey(name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private boolean isMacroNameTaken(String name) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.hasMacro(name) || Command.hasCommand(name);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Adds a macro to the MacroList silently (no ui interaction)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param declaration Macro declaration string. Refer to the user guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws DukeException if the macro\u0027s name has already been taken."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void addMacro(String declaration) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Macro newMacro \u003d Macro.newMacro(declaration);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (this.isMacroNameTaken(newMacro.getName())) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw DukeException.Errors.MACRO_ALREADY_DEFINED.create();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.macros.put(newMacro.getName(), newMacro);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Adds a macro to the MacroList. Prints a success message to the Ui."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param declaration Macro declaration string. Refer to the user guide."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws DukeException if the macro\u0027s name has already been taken."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void addMacro(String declaration, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.addMacro(declaration);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        ui.systemMessage(\"macro have been add ;)\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Add default macro shortcuts for the user into the MacroList."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void addDefaultMacros() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String[] macros \u003d {\"t; todo \\\\$\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"e at; event \\\\$ -at \\\\at\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"d by; deadline \\\\$ -by \\\\by\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"x; delete \\\\$\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"f; find \\\\$\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"c; done \\\\$\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"l; list\"};"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (String macro : macros) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                this.addMacro(macro);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                // should never happen, but if it does:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                assert false : \"default macro definition failed:\" + e.getMessage();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Macro getMacro(String name) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.macros.get(name);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 76
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeCustomException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * DukeException which allows custom messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Also includes a setExtraMessage function to add another"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * error message to be displayed (one time use)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class DukeCustomException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private String extraMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public DukeCustomException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Adds a message only if the extraMessage was not set"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * previously."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param extraMessage message to attach."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void setExtraMessage(String extraMessage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (this.extraMessage \u003d\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.extraMessage \u003d extraMessage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String message \u003d super.getMessage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (extraMessage !\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            message +\u003d \"\\n\\n\" + extraMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 32
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Custom exception class for Duke-related exceptions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Enum containing each error type. A new DukeException can be created using"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * DukeException.Errors.EXCEPTION_NAME.create()."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public enum Errors {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        UNKNOWN_COMMAND(\"sorry sir i dont understand your command sir\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + \"please enter again sir thank you sir\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        DONE_OUT_OF_RANGE(\"sir that number is too many for the list sir please\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + \"choose a lower number for the list please sir\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        DELETE_OUT_OF_RANGE(\"sir that number is too many for the list sir please\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + \"choose a lower number for the list please sir\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        DATE_PARSE_ERROR(\"sir the date of format is wrong sir please try\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + \"\\\"yyyy-mm-dd\\\", eg \\\"2020-08-24\\\" sir\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        FILE_READ_ERROR(\"sir there is some error in read file i make new list ok?\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        FILE_WRITE_ERROR(\"sir there is some error in write file, oopsies!\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        MACRO_ALREADY_DEFINED(\"sir that\u0027s name\u0027s been already taken! please try make new name\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        MACRO_DEFINITION_ERROR(\"sir that is invalid macro definition format, oopsies!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        private final String message;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Errors(String message) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.message \u003d message;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public DukeException create() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return new DukeException(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public DukeException(Errors error) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        super(error.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    protected DukeException(String customMessage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        super(customMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 43
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.CommandLine;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.CommandLineParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.DefaultParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.HelpFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.Options;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.Context;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.command.CommandExecutable;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.command.Macro;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.exception.DukeCustomException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Class to parse raw input from user and run commands from the input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Context context;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final CommandLineParser parser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final HelpFormatter formatter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Constructor for Parser."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param context Context object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Parser(Context context) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assert context !\u003d null : \"context cannot be null\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.context \u003d context;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.parser \u003d new DefaultParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.formatter \u003d new HelpFormatter();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Returns the help String created using commons-cli\u0027s HelpFormatter."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param command Name of command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param options Options for command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return formatted help string."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private String getHelp(String command, Options options) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        StringWriter stringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(stringWriter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.formatter.printHelp("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            printWriter,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.formatter.getWidth(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            command,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            options,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.formatter.getLeftPadding(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.formatter.getDescPadding(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return stringWriter.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Parses the String input, then runs the respective Command (if input is valid)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * using the Parser object\u0027s internal TaskList and Ui objects."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param input String raw input from user."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws DukeException If there are any parse errors, or Command has any errors."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseAndRun(String input) throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String[] inputSplitBySpace \u003d input.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (inputSplitBySpace.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw DukeException.Errors.UNKNOWN_COMMAND.create();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String commandName \u003d inputSplitBySpace[0];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String[] args \u003d Arrays.copyOfRange(inputSplitBySpace, 1, inputSplitBySpace.length);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (\"macro\".equals(commandName)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String joinedArgs \u003d String.join(\" \", args);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.context.getMacroList().addMacro(joinedArgs, this.context.getUi());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } else if (Command.hasCommand(commandName)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            Command command \u003d Command.getCommandByName(commandName);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            runCommand(commandName, command.getExec(), command.getOptions(), args);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } else if (this.context.getMacroList().hasMacro(commandName)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            Macro macro \u003d this.context.getMacroList().getMacro(commandName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            runCommand(commandName, macro::execute, macro.getOptions(), args);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw DukeException.Errors.UNKNOWN_COMMAND.create();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private void runCommand(String name, CommandExecutable exec, Options options, String[] args)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        throws DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            CommandLine cmd \u003d this.parser.parse(options, args);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            exec.run(this.context, cmd);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (DukeCustomException toThrow) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            toThrow.setExtraMessage(getHelp(name, options));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw toThrow;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            DukeCustomException toThrow \u003d new DukeCustomException(e.getMessage());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            toThrow.setExtraMessage(getHelp(name, options));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw toThrow;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 105
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.io.Reader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import com.google.gson.JsonArray;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import com.google.gson.JsonDeserializer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import com.google.gson.JsonParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import com.google.gson.JsonSerializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Class to store TaskList objects as json files."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static final GsonBuilder GSON_BUILDER \u003d new GsonBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static final JsonSerializer\u003cTaskList\u003e TASK_LIST_SERIALIZER \u003d (src, typeOfSrc, context) -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        JsonArray list \u003d new JsonArray();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (Task task : src.getItemsList()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            JsonElement elem \u003d context.serialize(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            elem.getAsJsonObject().addProperty(\"taskType\", task.getTaskIdentifier());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            list.add(elem);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    };"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static final JsonDeserializer\u003cTaskList\u003e TASK_LIST_DESERIALIZER \u003d (json, typeOfT, context) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        JsonArray taskElems \u003d json.getAsJsonArray();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (JsonElement elem : taskElems) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            JsonObject elemObject \u003d elem.getAsJsonObject();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            Task task \u003d deserializeSingleTask(elemObject);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return new TaskList(tasks);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    };"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        GSON_BUILDER.registerTypeAdapter(TaskList.class, TASK_LIST_SERIALIZER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        GSON_BUILDER.registerTypeAdapter(TaskList.class, TASK_LIST_DESERIALIZER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Gson gsonObject;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Constructor for Storage."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param filePath Relative String filepath to the input json file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assert filePath !\u003d null : \"filePath cannot be null\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.gsonObject \u003d GSON_BUILDER.create();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static Task deserializeSingleTask(JsonObject elemObject) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String description \u003d elemObject.get(\"description\").getAsString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String taskType \u003d elemObject.get(\"taskType\").getAsString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String time \u003d parseDate(elemObject.get(\"date\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                task \u003d new Todo(description);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                task \u003d new Event(description, time);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                task \u003d new Deadline(description, time);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                throw new JsonParseException(\"Invalid task type.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new JsonParseException(\"Invalid date format.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (elemObject.get(\"isDone\").getAsBoolean()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static String parseDate(JsonElement elem) throws JsonParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (elem \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        JsonObject obj \u003d elem.getAsJsonObject();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            int year \u003d obj.get(\"year\").getAsInt();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            int month \u003d obj.get(\"month\").getAsInt();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            int date \u003d obj.get(\"day\").getAsInt();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return String.format(\"%04d-%02d-%02d\", year, month, date);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new JsonParseException(\"Invalid date format.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Saves TaskList in Json format to the filepath supplied to the constructor."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param taskList TaskList to save."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws DukeException If there is any IOException."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void save(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try (FileWriter fw \u003d new FileWriter(this.filePath)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.gsonObject.toJson(taskList, TaskList.class, fw);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw DukeException.Errors.FILE_WRITE_ERROR.create();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Loads TaskList from a previously saved Json file. Uses filepath supplied to constructor."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return TaskList parsed from Json file."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws DukeException If any parsing errors occur (wrong format, etc)."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public TaskList load() throws DukeException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Path path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (!path.toFile().isFile()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try (Reader reader \u003d Files.newBufferedReader(path)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return gsonObject.fromJson(reader, TaskList.class);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw DukeException.Errors.FILE_READ_ERROR.create();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 144
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Represents a Deadline item in Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class Deadline extends TimeTask {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Deadline(String description, String time) throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        super(description, time);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getTaskIdentifier() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getDateDescriptor() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return \"by\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 20
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Represents an Event item in Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class Event extends TimeTask {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Event(String description, String time) throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        super(description, time);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getTaskIdentifier() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getDateDescriptor() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return \"at\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 20
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Abstract class for Task-related classes to inherit from."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    protected Task(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assert description !\u003d null : \"description should not be null\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * An ID of the task, e.g. \"T\" for Todo, \"D\" for Deadline, etc."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Used in Json serialization (Storage class)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return String ID of task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public abstract String getTaskIdentifier();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assert this.getTaskIdentifier() !\u003d null : \"task identifier string needs to be defined properly.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String checkMark \u003d this.isDone ? \"X\" : \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return squareBox(this.getTaskIdentifier())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + squareBox(checkMark)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + this.description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Getter function for description."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return String description."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private String squareBox(String str) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return \"[\" + str + \"]\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 48
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Wrapper for the list of Tasks stored in Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final List\u003cTask\u003e items;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public TaskList(List\u003cTask\u003e items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.items \u003d items;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public List\u003cTask\u003e getItemsList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return new ArrayList\u003c\u003e(this.items);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.items.size();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Adds a new Task to the TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Returns a formatted String that should be printed to the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param task Task to add."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return String output to print."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String add(Task task) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.items.add(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return \"morning sir i have added this to the list sir:\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"\\ni counted all your number of tasks sir it is \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + this.items.size()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \" sir\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Formats a List of Tasks into a human readable list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Ignore null indices. This is used for the find command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param items List of items to print."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return formatted String."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static String enumerateItems(List\u003cTask\u003e items) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        StringBuilder numberedItems \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            Task item \u003d items.get(i);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            if (item !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                numberedItems.append(i + 1).append(\". \").append(item).append(\"\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return numberedItems.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return enumerateItems(this.items);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Calls the markAsDone method of the Task stored in this TaskList at index idx."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param index Index of Task to markAsDone."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return Task of item that was just marked."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Task markItem(int index) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Task selected \u003d this.items.get(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        selected.markAsDone();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return selected;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Task deleteItem(int idx) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.items.remove(idx);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 79
    }
  },
  {
    "path": "src/main/java/duke/task/TimeTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "abstract class TimeTask extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    protected TimeTask(String description, String dateString) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.date \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw DukeException.Errors.DATE_PARSE_ERROR.create();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Date descriptor used to format output."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * e.g. \"at\" for Event (Event at ...)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Used only for toString formatting. Does not affect Command\u0027s match function."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return String date descriptor."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public abstract String getDateDescriptor();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    protected String dateString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assert this.getDateDescriptor() !\u003d null : \"date descriptor needs to be defined properly\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return super.toString()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \" (\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + this.getDateDescriptor()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \": \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + this.dateString()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \")\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 43
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Represents a Todo item in Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getTaskIdentifier() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 15
    }
  },
  {
    "path": "src/main/java/duke/ui/Cli.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Class implementing Ui as a command line interface (stdio)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class Cli implements Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static final String LOGO \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        \"               /,   ,|   ,|     \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"           /| /(  ,\u0027 / ,//      \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"        \\\\`( |/ /,\u0027  (,/ |      \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"         \\\\ \\\\ ` `   `  /--,    \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"       _,_\\\\ `  ` `  ``  /__    \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"        \u0027-.____________`  /     \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"          [  \\\\@,    :] `--,-..-\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"          [__________]__,\u0027-._/  \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"           )\u0027o\\\\ \u0027 o) \\\\/ )       hello sir\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"           \\\\  /   __  ./        its me your assistant sir\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"            \\\\\u003d`   \u003d\u003d,\\\\..        how may i be of service sir\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"             \\\\ -. `,\u0027 (        \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"             \\\\`--\u0027\u0027    \\\\.     \\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static final String HORIZONTAL_RULE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        \"    ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Scanner scanner;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private boolean isActive;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Constructor for Ui object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Cli() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.isActive \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String nextLine() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.scanner.nextLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public boolean isActive() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.isActive;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Closes this Ui object, and sets isActive() to false."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assert this.isActive : \"Cli instance should not be closed twice or closed before initialization.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.scanner.close();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.isActive \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assert !this.isActive : \"Cli instance should not be initialized twice.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.isActive \u003d true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.systemMessage(LOGO);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void systemMessage(String input) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        System.out.println(HORIZONTAL_RULE + indent(input) + \"\\n\" + HORIZONTAL_RULE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private String indent(String original) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return \"     \" + original.replace(\"\\n\", \"\\n     \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 70
    }
  },
  {
    "path": "src/main/java/duke/ui/Gui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.ui.fxcomponents.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * \u0027Main\u0027 class of the GUI component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class Gui extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Gui.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setup();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 32
    }
  },
  {
    "path": "src/main/java/duke/ui/GuiHelper.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Container for messages from Duke to the GUI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class GuiHelper implements Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private boolean isActive \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private List\u003cString\u003e commandOutput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private boolean isNotConsumed \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public GuiHelper() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.commandOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assert !this.isActive : \"GuiHelper instance should not be initialized twice.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.isActive \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assert this.isActive : \"GuiHelper instance should not be closed twice or closed before initialization.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.isActive \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public boolean isActive() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return isActive;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String nextLine() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.userInput;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void systemMessage(String input) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.isNotConsumed \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.commandOutput.add(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Returns the output from the Duke Command if any,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * else returns Optional.empty()."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * If an output is returned, will mark it as \u0027consumed\u0027,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * and subsequent calls to consumeCommandOutput() will return"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Optional.empty() until new a new Command from Duke is run."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return Output from Duke Command if this is the first invocation"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * and output from the Command is not empty, Optional.empty() otherwise."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Optional\u003cList\u003cString\u003e\u003e consumeCommandOutput() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (this.isNotConsumed) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            List\u003cString\u003e result \u003d this.commandOutput;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.isNotConsumed \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.commandOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return Optional.of(result);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void setUserInput(String input) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.userInput \u003d input;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 73
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Class to handle and abstract Ui (currently stdio) operations."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Queries if the Ui is active or not."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return true if ui object is active."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    boolean isActive();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Used to activate the Ui object, sending the welcome"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * message and allowing it to use its I/O functions."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Sets isActive to true."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void start();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Deactivates the Ui object and disables its I/O functions."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Sets isActive to false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void close();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Returns the next line entered by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return String of user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    String nextLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Outputs a message to the user. Output is differentiated"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * from user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param input to be sent to the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void systemMessage(String input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 39
    }
  },
  {
    "path": "src/main/java/duke/ui/fxcomponents/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.ui.fxcomponents;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * DialogBox to contain messages from the user and Duke."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // @@author se-edu-reused"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Reused with modifications from the module\u0027s tutorial."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dialog.setMinHeight(Label.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dialog.setText(text);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.displayPicture.setImage(img);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a dialog box for messages sent by the user."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox createUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a dialog box for the output of commands from Duke."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox createDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 20,
      "-": 48
    }
  },
  {
    "path": "src/main/java/duke/ui/fxcomponents/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.ui.fxcomponents;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.ui.GuiHelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * MainWindow component of the GUI. Contains additional logic to"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * format and display messages."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // @@author se-edu-reused"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Reused with modifications from the module\u0027s tutorial."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollArea;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox outputContainer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiHelper guiHelper;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/naturo.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollArea.vvalueProperty().bind(outputContainer.heightProperty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (input.matches(\"\\\\s*\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            // ignore if user sends empty input/only whitespaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiHelper.setUserInput(input);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userMessage(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.duke.nextIteration();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!this.guiHelper.isActive()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            this.closeWindow();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiHelper.consumeCommandOutput().ifPresent((messages) -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            for (String message : messages) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                this.dukeMessage(message);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u0027constructor\u0027 for this component."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the component."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiHelper \u003d new GuiHelper();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.duke \u003d new Duke(guiHelper);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.sendWelcomeMessage();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void sendWelcomeMessage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        final String welcomeMessage \u003d \"hello sir\\nits me your assistant sir\\nhow may i be of service sir\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dukeMessage(welcomeMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void closeWindow() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Somehow this.getScene... doesn\u0027t work but sendButton.getScene... does"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Stage stage \u003d (Stage) sendButton.getScene().getWindow();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.close();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void dukeMessage(String message) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        outputContainer.getChildren().add(DialogBox.createDukeDialog(message, dukeImage));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void userMessage(String message) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        outputContainer.getChildren().add(DialogBox.createUserDialog(message, userImage));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 18,
      "-": 76
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"430.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" prefWidth\u003d\"500.0\" maxHeight\u003d\"Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \u003cFont name\u003d\"Trebuchet MS\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"200.0\" fitWidth\u003d\"200.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 20
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"800.0\" prefWidth\u003d\"594.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.fxcomponents.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"528.0\" layoutY\u003d\"756.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"45.0\" prefWidth\u003d\"65.0\" text\u003d\"Enter\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"-1.0\" layoutY\u003d\"756.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"45.0\" prefWidth\u003d\"529.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollArea\" prefHeight\u003d\"757.0\" prefWidth\u003d\"594.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \u003cVBox fx:id\u003d\"outputContainer\" prefWidth\u003d\"560.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 19
    }
  },
  {
    "path": "src/test/java/duke/command/CommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class CommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    //TODO add more tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 12
    }
  },
  {
    "path": "src/test/java/duke/command/MacroTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.CommandLine;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.DefaultParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.apache.commons.cli.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class MacroTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Macro testMacro;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public MacroTest() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.testMacro \u003d Macro.newMacro(\"et a; event \\\\$ --at \\\\a; todo attend \\\\$ at \\\\a\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testMacro_createdWithCorrectOptions() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertTrue(testMacro.getOptions().hasOption(\"a\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testMacro_getsCreatedCorrectly() throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        DefaultParser parser \u003d new DefaultParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        CommandLine cmd \u003d parser.parse(testMacro.getOptions(), new String[]{\"test\", \"-a\", \"2020-11-11\"});"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertArrayEquals(new String[]{\"event test --at 2020-11-11\", \"todo attend test at 2020-11-11\"},"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            testMacro.substituteAll(cmd));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 29
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Deadline deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public DeadlineTest() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        deadline \u003d new Deadline(\"test\", \"2020-08-24\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testTimeWrongFormat_ThrowsException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            new Deadline(\"test\", \"bad input\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testIdentifier_CorrectOutput() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(\"D\", deadline.getTaskIdentifier());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testToString_CorrectOutput() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(\"[D][ ] test (by: Aug 24 2020)\", deadline.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testMarkAsDone_ChangesOutput() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        deadline.markAsDone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(\"[D][X] test (by: Aug 24 2020)\", deadline.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 38
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Event event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public EventTest() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        event \u003d new Event(\"test\", \"2020-08-24\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testTimeWrongFormat_ThrowsException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            new Event(\"test\", \"bad input\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testIdentifier_CorrectOutput() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(\"E\", event.getTaskIdentifier());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testToString_CorrectOutput() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(\"[E][ ] test (at: Aug 24 2020)\", event.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testMarkAsDone_ChangesOutput() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        event.markAsDone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(\"[E][X] test (at: Aug 24 2020)\", event.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 38
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Todo todo \u003d new Todo(\"test\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testIdentifier_CorrectOutput() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(\"T\", todo.getTaskIdentifier());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testToString_CorrectOutput() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(\"[T][ ] test\", todo.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testMarkAsDone_ChangesOutput() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        todo.markAsDone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(\"[T][X] test\", todo.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 25
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "todo test1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "deadline thisbreaks"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "deadline add tests /by now"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "event commit changes /at later"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "event thisalsobreaks"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "deadline do tasks /by now"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 16
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 1,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 1,
      "-": 36
    }
  }
]
