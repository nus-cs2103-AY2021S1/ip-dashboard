[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "lebencwb": 23
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private Label dialog \u003d new Label();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private ImageView displayPicture \u003d new ImageView();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        db.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 64
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    String getResponse(String input) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Command command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            String output \u003d command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return ui.showErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "lebencwb": 33
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * A class of exceptions customized for the user inputs and file inputs."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /** A DukeException thrown when user input not recognized by the Parser. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final DukeException INVALID_COMMAND_EXCEPTION \u003d new DukeException("
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            \"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /** A DukeException thrown when a search query is empty. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final DukeException INVALID_QUERY_EXCEPTION \u003d new DukeException("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            \"I\u0027m sorry, what was it you wanted me to find?\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * A DukeException thrown when the integer expected after \u0027done\u0027 or \u0027delete\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * is missing, or cannot be parsed due to incorrect formatting in the user input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final DukeException INVALID_TASK_INDEX_EXCEPTION \u003d new DukeException("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            \"Sorry, that is not a valid task.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /** A DukeException thrown when user inputs an empty task. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final DukeException INVALID_TASK_DESCRIPTION_EXCEPTION \u003d new DukeException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            \"Sorry, the description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /** A DukeException thrown when user inputs a deadline with an incorrect format. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final DukeException INVALID_DEADLINE_FORMAT_EXCEPTION \u003d new DukeException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            \"Sorry, the description of a Deadline must be in this format:\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \"\\tdeadline [task name] /by [deadline]\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /** A DukeException thrown when user inputs an event with an incorrect format. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final DukeException INVALID_EVENT_FORMAT_EXCEPTION \u003d new DukeException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            \"Sorry, the description of an Event must be in this format:\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \"\\tevent [task name] /at [time]\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /** A DukeException thrown when a line in the specified file cannot be parsed. */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final DukeException FILE_PARSING_EXCEPTION \u003d new DukeException("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            \"Sorry, an error occurred while trying to parse the file.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * A DukeException thrown when an I/O error occurs while trying to load or create a file at the"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * specified filepath."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final DukeException FILE_LOADING_EXCEPTION \u003d new DukeException("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            \"Sorry, the file does not seem to exist.\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \"Try: CREATE \u003cfilepath\u003e.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final DukeException FILE_NO_ACCESS_EXCEPTION \u003d new DukeException("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            \"Sorry, I cannot seem to access the file\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Sole constructor. Used for creating static instances of DukeException;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Restricted to within the class; non-instantiable otherwise."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @param message A custom message tagging the DukeException, detailing the error."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private DukeException(String message) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 60
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 31
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Remy.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/FredBrooks.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                DialogBox.getDukeDialog(Ui.showWelcomeMessage(), dukeImage));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 53
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.command.QueryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.command.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.command.FileCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * A non-instantiable class with static methods to parse a String into a Command or Task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Sole constructor. (Not instantiable.)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private Parser() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Parses a specified string and converts it into a Command to be executed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @param string the String from the user input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @return the Command parsed from the string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @throws DukeException If the string deviates from any of the acceptable formats"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static Command parse(String string) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Scanner parsingScanner \u003d new Scanner(string);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (parsingScanner.hasNext()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            String commandString \u003d parsingScanner.next();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Command command; // Has to be declared beforehand for correct scope"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            switch (commandString.toLowerCase()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            case \"load\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                command \u003d new FileCommand(CommandType.LOAD, parsingScanner.nextLine());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            case \"create\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                command \u003d new FileCommand(CommandType.CREATE, parsingScanner.nextLine());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                command \u003d new ExitCommand(CommandType.BYE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                command \u003d new QueryCommand(CommandType.LIST);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    String searchQuery \u003d parsingScanner.next();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    command \u003d new QueryCommand(CommandType.FIND, searchQuery);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    throw DukeException.INVALID_QUERY_EXCEPTION;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                if (parsingScanner.hasNext()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        int index \u003d Integer.parseInt(parsingScanner.next());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        command \u003d new EditCommand(CommandType.DONE, index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        throw DukeException.INVALID_TASK_INDEX_EXCEPTION;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    throw DukeException.INVALID_TASK_INDEX_EXCEPTION;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                if (parsingScanner.hasNext()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        int index \u003d Integer.parseInt(parsingScanner.next());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        command \u003d new EditCommand(CommandType.DELETE, index);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        throw DukeException.INVALID_TASK_INDEX_EXCEPTION;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    throw DukeException.INVALID_TASK_INDEX_EXCEPTION;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                if (parsingScanner.hasNext()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    command \u003d new AddCommand(CommandType.TODO, parsingScanner.nextLine().trim());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    throw DukeException.INVALID_TASK_DESCRIPTION_EXCEPTION;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                if (parsingScanner.hasNext()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        String[] details \u003d parsingScanner.nextLine().trim().split(\"( /by )\", 2);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        command \u003d new AddCommand(CommandType.DEADLINE, details[0], details[1]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        throw DukeException.INVALID_DEADLINE_FORMAT_EXCEPTION;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    throw DukeException.INVALID_TASK_DESCRIPTION_EXCEPTION;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                if (parsingScanner.hasNext()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        String[] details \u003d parsingScanner.nextLine().trim().split(\"( /at )\", 2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        command \u003d new AddCommand(CommandType.EVENT, details[0], details[1]);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        throw DukeException.INVALID_EVENT_FORMAT_EXCEPTION;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    throw DukeException.INVALID_TASK_DESCRIPTION_EXCEPTION;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                throw DukeException.INVALID_COMMAND_EXCEPTION;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw DukeException.INVALID_COMMAND_EXCEPTION;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Parses a specified line from a File and converts it into a Task."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Used for the initialization of the TaskList when a new Duke is initialized."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @param line a String read from a File"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @return the Task parsed from the line"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @throws DukeException If the line deviates from any of the acceptable formats"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static Task parseTaskFromFile(String line) throws DukeException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Task task; // Has to be declared beforehand for correct scope"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Scanner parsingScanner \u003d new Scanner(line);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        String type \u003d parsingScanner.next();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            parsingScanner.next();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            int isDoneInteger \u003d parsingScanner.nextInt();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            parsingScanner.next();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            ToDo toDo \u003d new ToDo(parsingScanner.nextLine());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            if (isDoneInteger \u003d\u003d 1) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                toDo.markAsDone();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            task \u003d toDo;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            parsingScanner.next();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            isDoneInteger \u003d parsingScanner.nextInt();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            parsingScanner.next();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            String[] details \u003d parsingScanner.nextLine().split(\"( by )\", 2);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Deadline deadline \u003d new Deadline(details[0], details[1]);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            if (isDoneInteger \u003d\u003d 1) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                deadline.markAsDone();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            task \u003d deadline;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            parsingScanner.next();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            isDoneInteger \u003d parsingScanner.nextInt();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            parsingScanner.next();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            details \u003d parsingScanner.nextLine().split(\"( at )\", 2);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Event event \u003d new Event(details[0], details[1]);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            if (isDoneInteger \u003d\u003d 1) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                event.markAsDone();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            task \u003d event;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw DukeException.FILE_PARSING_EXCEPTION;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 175
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * A file-reader and writer responsible for retrieving a list of tasks from an existing"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * text file in the specified filepath, or otherwise creates that file. It can also edit"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * the text file by adding, deleting or replacing a line."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Absolute or relative filepath of the source of the file to be retrieved or the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * destination of the file to be written."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Storage() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Constructs a new Storage that reads/writes the file in the specified filepath."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @param filepath The source/destination filepath"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public File makeFile(String filepath) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            String parentFilepath \u003d Path.of(filepath).getParent().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            File parentFolder \u003d new File(parentFilepath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            if (!parentFolder.exists()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                parentFolder.mkdir();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            File taskFile \u003d new File(filepath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            if (!taskFile.exists()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                taskFile.createNewFile();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return taskFile;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw DukeException.FILE_LOADING_EXCEPTION;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Loads a list of tasks from the source file, if it exists. Otherwise, creates a file"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * at the filepath and returns an empty list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @return A list of tasks parsed from the source file, if any; otherwise, an empty list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @throws DukeException If an I/O error occurs when trying to create the file and parent"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * folders, if any"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public ArrayList\u003cTask\u003e loadFromFilepath(String filepath) throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            File taskFile \u003d new File(filepath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Scanner scanner \u003d new Scanner(taskFile);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                tasks.add(Parser.parseTaskFromFile(scanner.nextLine()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw DukeException.FILE_LOADING_EXCEPTION;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Appends a line of text to the destination file specified by the filepath."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * If an I/O error occurs, shows an error message."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @param line A line of text to be appended to the destination file"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void addLine(String line) throws DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filepath, true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            fileWriter.write(line + System.lineSeparator());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw DukeException.FILE_LOADING_EXCEPTION;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw DukeException.FILE_NO_ACCESS_EXCEPTION;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Deletes a line of text at the specified index from the destination file specified by"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * the filepath."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * If the index falls outside the range of the number of lines in the file, no lines are"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * deleted, and no error is raised."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * If an I/O error occurs, shows an error message."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @param index The line number to be deleted"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void deleteLine(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            String tempFilepath \u003d Path.of(filepath).getParent().toString() + \"/temp.txt\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Files.copy(Path.of(filepath), Path.of((tempFilepath)));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filepath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            File copy \u003d new File(tempFilepath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Scanner scanner \u003d new Scanner(copy);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            int lineNumber \u003d 1;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                if (lineNumber !\u003d index) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    fileWriter.write(scanner.nextLine() + System.lineSeparator());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    scanner.nextLine();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                lineNumber++;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            scanner.close();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Files.delete(Path.of(tempFilepath));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            System.out.println(\"Encountered an unexpected error with the file :(\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Replaces a line of text at the specified index with a specified line of text in the"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * destination file specified by the filepath."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * If an I/O error occurs, shows an error message."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @param index The line number to be replaced"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @param line The line of text to replace the previous one"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void replaceLine(int index, String line) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            String tempFilepath \u003d Path.of(filepath).getParent().toString() + \"/temp.txt\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Files.copy(Path.of(filepath), Path.of((tempFilepath)));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filepath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            File copy \u003d new File(tempFilepath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Scanner scanner \u003d new Scanner(copy);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            int lineNumber \u003d 1;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                if (lineNumber !\u003d index) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    fileWriter.write(scanner.nextLine() + System.lineSeparator());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    fileWriter.write(line + System.lineSeparator());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    scanner.nextLine();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                lineNumber++;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            scanner.close();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Files.delete(Path.of(tempFilepath));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            System.out.println(\"Encountered an unexpected error with the file :(\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 160
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.lang.StringBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final String MESSAGE_CURRENT_TASKS \u003d \"Now you have %d task(s) in the list.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final String MESSAGE_ADD_TASK \u003d \"Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final String MESSAGE_DONE_TASK \u003d \"Nice! I\u0027ve marked this as done:\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final String MESSAGE_DELETED_TASK \u003d \"Noted. I\u0027ve removed this task:\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final String MESSAGE_WELCOME \u003d \"Hello! I\u0027m Duke, your task-list manager!\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \"Before we get started, let me know if you would like to:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \"\\ti)  LOAD \u003cfilepath\u003e  : fetch a task-list you have made before, or\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \"\\tii) CREATE \u003cfilepath\u003e: create a new task-list from scratch.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final String MESSAGE_GOODBYE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static String showLines(String... lines) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        boolean isFirst \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        for (String s : lines) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            if (!isFirst) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                stringBuilder.append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                isFirst \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            stringBuilder.append(s);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static String showNumbered(boolean hasHeader, boolean hasFooter, String... lines) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        int start \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        int end \u003d lines.length;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        int number \u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (hasHeader) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            assert(lines.length \u003e 0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            stringBuilder.append(lines[0]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            stringBuilder.append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            start++;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (hasFooter) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            end--;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        for (int i \u003d start; i \u003c end; i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            stringBuilder.append(String.format(\"%d. %s\\n\", number++, lines[i]));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (hasFooter) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            stringBuilder.append(lines[lines.length - 1]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static String showWelcomeMessage() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return MESSAGE_WELCOME;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String showGoodbyeMessage() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return MESSAGE_GOODBYE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String showErrorMessage(String errorMessage) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return \"\\u2639 OOPS!!! \" + errorMessage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String showTasks(String... tasks) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        String message \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (tasks.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return showLines(message, \"\\tThere are no tasks in your list.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            String[] lines \u003d new String[tasks.length + 1];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            lines[0] \u003d message;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            System.arraycopy(tasks, 0, lines, 1, tasks.length);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return showNumbered(true, false, lines);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String showFoundTasks(String... finds) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        String message \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (finds.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return showLines(message, \"\\tThere are no matching tasks in your list.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            String[] lines \u003d new String[finds.length + 1];"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            lines[0] \u003d message;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            System.arraycopy(finds, 0, lines, 1, finds.length);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return showNumbered(true, false, lines);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String showNoSuchTasks(String searchQuery) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return \"Hmm...I did not manage to find any tasks containing \" + searchQuery;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String showLoadingSuccess(String filepath) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return showLines(\"Got it. I have successfully loaded your task-list from \" + filepath,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                \"What can I do for you next?\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String showMakeFileSuccess(String filepath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return showLines(\"Congratulations! You now have a new task-list at \" + filepath,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                \"What can I do for you next?\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String showAddedTask(String task, int numTasks) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return showLines(MESSAGE_ADD_TASK, \" \"+ task, String.format(MESSAGE_CURRENT_TASKS, numTasks));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String showDoneTask(String task) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return showLines(MESSAGE_DONE_TASK, \"  \" + task);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String showDeletedTask(String task, int numTasks) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return showLines(MESSAGE_DELETED_TASK, \"  \" + task, String.format(MESSAGE_CURRENT_TASKS, numTasks));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 126
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private CommandType commandType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private String[] details;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public AddCommand(CommandType commandType, String... details) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            ToDo toDo \u003d new ToDo(details[0]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            tasks.addTask(toDo);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            storage.addLine(toDo.toFileString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            output \u003d ui.showAddedTask(toDo.toString(), tasks.getNumTasks());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Deadline deadline \u003d new Deadline(details[0], details[1]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            tasks.addTask(deadline);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            storage.addLine(deadline.toFileString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            output \u003d ui.showAddedTask(deadline.toString(), tasks.getNumTasks());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Event event \u003d new Event(details[0], details[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            tasks.addTask(event);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            storage.addLine(event.toFileString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            output \u003d ui.showAddedTask(event.toString(), tasks.getNumTasks());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw DukeException.INVALID_COMMAND_EXCEPTION;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return commandType.toString() + \" \" + Arrays.toString(details);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 60
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 12
    }
  },
  {
    "path": "src/main/java/duke/command/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    BYE(\"bye\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    LIST(\"list\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    DONE(\"done\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    DELETE(\"delete\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    TODO(\"todo\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    DEADLINE(\"deadline\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    EVENT(\"event\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    FIND(\"find\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    LOAD(\"load\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    CREATE(\"create\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private final String label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    CommandType(String label) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 20
    }
  },
  {
    "path": "src/main/java/duke/command/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private CommandType commandType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public EditCommand(CommandType commandType, int index) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        switch (this.commandType) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Task doneTask \u003d tasks.markTaskAsDone(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            output \u003d ui.showDoneTask(doneTask.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            storage.replaceLine(index, doneTask.toFileString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Task deletedTask \u003d tasks.deleteTask(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            output \u003d ui.showDeletedTask(deletedTask.toString(), tasks.getNumTasks());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            storage.deleteLine(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            output \u003d ui.showErrorMessage(DukeException.INVALID_COMMAND_EXCEPTION.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return commandType.toString() + \" \" + index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 48
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private CommandType commandType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public ExitCommand(CommandType commandType) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return ui.showGoodbyeMessage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return commandType.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 30
    }
  },
  {
    "path": "src/main/java/duke/command/FileCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class FileCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private CommandType commandType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public FileCommand(CommandType commandType, String filepath) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        switch (this.commandType) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        case LOAD:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            ArrayList\u003cTask\u003e fileTasks \u003d storage.loadFromFilepath(filepath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            assert(tasks.getNumTasks() \u003d\u003d 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            tasks.loadTasks(fileTasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            output \u003d ui.showLoadingSuccess(filepath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        case CREATE:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            storage.makeFile(filepath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            output \u003d ui.showMakeFileSuccess(filepath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw DukeException.INVALID_COMMAND_EXCEPTION;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 44
    }
  },
  {
    "path": "src/main/java/duke/command/QueryCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class QueryCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private CommandType commandType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private String searchQuery;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public QueryCommand(CommandType commandType) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public QueryCommand(CommandType commandType, String searchQuery) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.searchQuery \u003d searchQuery;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        String[] lines \u003d tasks.getTasks();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (commandType.equals(CommandType.LIST)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return ui.showTasks(lines);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ArrayList\u003cString\u003e finds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        for (String line : lines) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            if (line.toLowerCase().contains(String.format(\".*%s.*\", searchQuery))) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                finds.add(line);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (finds.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return ui.showNoSuchTasks(searchQuery);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return ui.showFoundTasks(finds.toArray(new String[1]));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return commandType.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 54
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * An extension of the Task class with an additional field specifying the deadline of the task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /** The deadline of the task. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /** The deadline of the task parsed as a LocalDate. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    protected LocalDate deadlineDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Constructs a new Deadline object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @param description {@inheritDoc}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @param by The deadline of the task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            deadlineDate \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            // Do nothing, since there is no deterministic way to convert all possible"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            // strings into a LocalDate object meaningfully without adding more"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            // prohibitions to the user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Prints the deadline in the format \"%B %d %Y\", such as JANUARY 1 2000, if available."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Otherwise, shows an error message."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void printTime() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            System.out.println(deadlineDate.getMonth().toString()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                + \" \" + deadlineDate.getDayOfMonth()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                + \" \" + deadlineDate.getYear());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            System.out.println(\"No valid date available.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        int stat \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            stat \u003d 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return String.format(\"%s | %d | %s by %s\", getType(), stat, description, by);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 65
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * An extension of the Task class with an additional field specifying when the event"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * is to happen."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /** The date/time of the task or event. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /** The date of the task or event parsed as a LocalDate. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    protected LocalDate eventDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Constructs a new Event object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @param description {@inheritDoc}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @param at The date/time of the task or event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            eventDate \u003d LocalDate.parse(at);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            //do nothing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Prints the event date in the format \"%B %d %Y\", such as JANUARY 1 2000, if available."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Otherwise, shows an error message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void printTime() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            System.out.println(eventDate.getMonth().toString()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                + \" \" + eventDate.getDayOfMonth()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                + \" \" + eventDate.getYear());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            System.out.println(\"No valid date available.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        int stat \u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            stat \u003d 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return String.format(\"%s | %d | %s at %s\", getType(), stat, description, at);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 64
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * A generic task that contains a description and can be either done or not done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /** A description of the task. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /** A boolean indicating whether the task is done or not. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Constructs a generic task with a description and defaults to be not done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * (For invocation by subclass constructors.)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @param description The task description"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    protected Task(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /** Marks the task as done. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Gets the icon symbolizing whether the task is done or not done."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @return A symbol as a String"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return \"\\u2713\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return \"\\u2718\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Gets the type of the task represented by a unique identifier."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @return The type of the task as its unique identifier"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public abstract String getType();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), description);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Returns the String representation of the task customized for being written to a file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @return The task as a string formatted for being written to the file"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        int stat \u003d 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            stat \u003d 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return String.format(\"%s | %d | %s\", getType(), stat, description);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 62
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private final ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public int getNumTasks() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String[] getTasks() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        int numTasks \u003d tasks.size();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        String[] taskStrings \u003d new String[numTasks];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        for (int i \u003d 0; i \u003c numTasks; i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            taskStrings[i] \u003d tasks.get(i).toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return taskStrings;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void loadTasks(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            this.tasks.add(t);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Task markTaskAsDone(int index) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Task task \u003d tasks.get(index - 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw DukeException.INVALID_TASK_INDEX_EXCEPTION;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Task deleteTask(int index) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return tasks.remove(index - 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw DukeException.INVALID_TASK_INDEX_EXCEPTION;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 58
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * An extension of the Task class of the type ToDo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Constructs a new ToDo object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @param description {@inheritDoc}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 25
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Enter text here\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"76.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" textAlignment\u003d\"CENTER\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"43.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 19
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void parse_bye_bye() throws Exception {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(\"BYE\", Parser.parse(\"bye\").toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void parse_list_list() throws Exception {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(\"LIST\", Parser.parse(\"list\").toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void parse_done1_done1() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(\"DONE 1\", Parser.parse(\"done 1\").toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void parse_delete2_delete2() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(\"DELETE 2\", Parser.parse(\"delete 2\").toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void parse_todo_todo() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(\"TODO [read book]\", Parser.parse(\"todo read book\").toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void parse_deadline_deadline() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(\"DEADLINE [return book, 6th June 2020]\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                Parser.parse(\"deadline return book /by 6th June 2020\").toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void parse_event_event() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(\"EVENT [meeting, time]\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                Parser.parse(\"event meeting /at time\").toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void parse_caseInsensitive_success() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(\"DEADLINE [case, insensitive]\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                Parser.parse(\"dEaDlInE case /by insensitive\").toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void parse_doneBadInteger_exceptionThrown() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            assertEquals(\"DONE 3\", Parser.parse(\"done three\").toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            assertEquals(\"Sorry, that is not a valid task.\", e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void parse_deleteNoNextScannerToken_exceptionThrown() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            assertEquals(\"DELETE\", Parser.parse(\"delete\").toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            assertEquals(\"Sorry, that is not a valid task.\", e.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void parse_todoNoNextScannerToken_exceptionThrown() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            assertEquals(\"TODO\", Parser.parse(\"todo\").toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            assertEquals(\"Sorry, the description of a task cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void parse_deadlineNoNextScannerToken_exceptionThrown() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            assertEquals(\"DEADLINE\", Parser.parse(\"deadline\").toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            assertEquals(\"Sorry, the description of a task cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void parse_deadlineNoBySubstring_exceptionThrown() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            assertEquals(\"DEADLINE [do this, tonight]\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    Parser.parse(\"deadline do this tonight\").toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            assertEquals(\"Sorry, the description of a Deadline must be in this format:\\n\" +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    \"\\tdeadline [task name] /by [deadline]\", e.getMessage());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void parse_deadlineWrongBySubstring_exceptionThrown() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            assertEquals(\"DEADLINE [do this, tonight]\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    Parser.parse(\"deadline do this by tonight\").toString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            assertEquals(\"Sorry, the description of a Deadline must be in this format:\\n\" +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    \"\\tdeadline [task name] /by [deadline]\", e.getMessage());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void parse_deadlineFakeBySubstring_success() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(\"DEADLINE [swing by Mom\u0027s, tomorrow]\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                Parser.parse(\"deadline swing by Mom\u0027s /by tomorrow\").toString());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void parse_eventNoNextScannerToken_exceptionThrown() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            assertEquals(\"EVENT\", Parser.parse(\"event\").toString());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            assertEquals(\"Sorry, the description of a task cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void parse_eventNoAtSubstring_exceptionThrown() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            assertEquals(\"EVENT [do this, 6pm]\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    Parser.parse(\"event do this 6pm\").toString());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            assertEquals(\"Sorry, the description of an Event must be in this format:\\n\" +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    \"\\tevent [task name] /at [time]\", e.getMessage());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void parse_eventWrongAtSubstring_exceptionThrown() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            assertEquals(\"EVENT [do this, 6pm]\","
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    Parser.parse(\"event do this at 6pm\").toString());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            assertEquals(\"Sorry, the description of an Event must be in this format:\\n\" +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    \"\\tevent [task name] /at [time]\", e.getMessage());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void parse_eventFakeAtSubstring_success() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(\"EVENT [stay at home, all times]\","
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                Parser.parse(\"event stay at home /at all times\").toString());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 161
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "find book"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 12
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "rmdir /s /q data"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\Duke.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "lebencwb": 3
    }
  }
]
