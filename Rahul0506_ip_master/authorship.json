[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 1,
      "-": 25
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 16,
      "-": 45
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 61
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Main class to initialise and run the chatbot."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    static final String DIR_NAME \u003d \"data\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    static final String FILE_NAME \u003d \"duke_data.txt\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Creates a Duke and initializes the individual components."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        storage \u003d new Storage(DIR_NAME, FILE_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        taskList \u003d storage.init(ui);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ui.welcome();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Main running loop"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        boolean keepGoing \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        while (keepGoing) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            input \u003d ui.readInput();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                command \u003d parser.processInput(input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                keepGoing \u003d command.run(taskList, storage, ui);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            } catch (DukeException de) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                ui.writeOutput(de.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            Command command \u003d parser.processInput(input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            assert command !\u003d null : \"Parser returned null\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return command.runNew(taskList, storage, ui);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return ex.getMessage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 60,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Exception class to define Duke-related exceptions and handle them."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Creates an exception with the given message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param message Exception message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return String.format(\"\\u2639 OOPS!!! %s\", super.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 21
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            String home \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            Path path \u003d Paths.get(home, \"src\", \"main\", \"resources\", \"view\", \"MainWindow.fxml\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(path.toUri().toURL());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 37
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/duke.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void setDuke(Duke duke) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assert input !\u003d null : \"Input text from GUI is null\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assert response !\u003d null : \"No response from Duke to GUI\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 50
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.tasks.TaskType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Class to parse user input and process it."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    static final String BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    static final String LIST \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    static final String TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    static final String DDL \u003d \"deadline\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    static final String EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    static final String DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    static final String DONE \u003d \"done\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    static final String FIND \u003d \"find\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Creates a Parser with the given classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Parser() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Parses and processes the input string."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param input String input from the user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @return Command object to execute the respective process"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @throws DukeException Duke-related exception due to erroneous inputs"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Command processInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (input.equals(BYE)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } else if (input.equals(LIST)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            String[] inputSplits \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            String command \u003d inputSplits[0];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                if (inputSplits.length \u003c 2) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    throw new DukeException(\"The description of a todo cannot be empty\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                return new AddCommand(inputSplits[1], TaskType.TODO);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            case DDL:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                if (inputSplits.length \u003c 2) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    throw new DukeException(\"The description of a deadline cannot be empty\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                return new AddCommand(inputSplits[1], TaskType.DEADLINE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                if (inputSplits.length \u003c 2) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    throw new DukeException(\"The description of an event cannot be empty\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                return new AddCommand(inputSplits[1], TaskType.EVENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                if (inputSplits.length \u003c 2) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    throw new DukeException(\"Task number cannot be empty\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    return new DoneCommand(inputSplits[1]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    throw new DukeException(\"Task number must be a valid integer\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                if (inputSplits.length \u003c 2) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    throw new DukeException(\"Task number cannot be empty\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    return new DeleteCommand(inputSplits[1]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    throw new DukeException(\"Task number must be a valid integer\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                if (inputSplits.length \u003c 2) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    throw new DukeException(\"Search key cannot be empty\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                return new FindCommand(inputSplits[1]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :(\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 84
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.nio.file.FileAlreadyExistsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Class to handle storing and reading task data from the disk."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private Path FILE_PATH;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final String dirName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final String fileName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Creates a Storage object to handle a file at the given file path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Storage(String dirName, String fileName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.dirName \u003d dirName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Initialises a TaskList by checking for pre-existing data and loading"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * if present, or creating an empty TaskList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param ui Ui object to handle user interface interactions"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @return initialised TaskList"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public TaskList init(Ui ui) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String home \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        FILE_PATH \u003d java.nio.file.Paths.get(home, dirName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            java.nio.file.Files.createDirectory(FILE_PATH);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } catch (FileAlreadyExistsException ignored) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        FILE_PATH \u003d java.nio.file.Paths.get(home, dirName, fileName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            java.nio.file.Files.createFile(FILE_PATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } catch (FileAlreadyExistsException ignored) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            taskList \u003d new TaskList(loadList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            ui.writeOutput(\"Existing data loaded from file!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Saves the task list to the file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param taskList List of Task objects to write to file"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void storeList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            FileWriter writer \u003d new FileWriter(FILE_PATH.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            for (Task task : taskList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                writer.write(task.fileString() + \"\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Reads task list from the file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @return List of strings representing the tasks"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public List\u003cString\u003e loadList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        List\u003cString\u003e stringList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            BufferedReader reader \u003d java.nio.file.Files.newBufferedReader(FILE_PATH);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                stringList.add(line);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return stringList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 98
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.tasks.TaskType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Class to store and manage Task objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Create an empty TaskList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Creates a TaskList from the given list of representations."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param stringList List of string representations"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public TaskList(List\u003cString\u003e stringList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        stringList.forEach(this::parseLine);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns the list of Tasks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @return List of Tasks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public List\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @return size of list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Creates a Task from the given representation and adds it to the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param line string repesentation of the Task"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private void parseLine(String line) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String[] lineSplit \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        boolean done \u003d lineSplit[2].equals(\"1\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (lineSplit[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            addTask(lineSplit[1], TaskType.TODO, \"\", done);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } else if (lineSplit[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            addTask(lineSplit[1], TaskType.DEADLINE, lineSplit[3], done);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            addTask(lineSplit[1], TaskType.EVENT, lineSplit[3], done);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Adds a Task to the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param task Task name"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param type TaskType of the of Task to add"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param ddl Task deadline"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param done whether task has been marked done"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private void addTask(String task, TaskType type, String ddl, boolean done) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (type \u003d\u003d TaskType.TODO) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            newTask \u003d new Todo(task);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } else if (type \u003d\u003d TaskType.DEADLINE) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            newTask \u003d new Deadline(task, LocalDate.parse(ddl));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            newTask \u003d new Event(task, LocalDate.parse(ddl));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (done) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            newTask.markDone();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        taskList.add(newTask);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Add a Todo with the given name."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param task Todo name"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @return Task object added"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Task addTodo(String task) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return addTask(new Todo(task));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Add a Deadline or Event with given attributes."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param taskAttr Task attributes"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param isEvent whether Task is an Event"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @return Task object added"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @throws DukeException Duke-related exception due to erroneous inputs"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Task addDDLTask(String taskAttr, boolean isEvent) throws DukeException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String[] taskSplit;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (isEvent) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            taskSplit \u003d taskAttr.split(\"/at\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            if (taskSplit.length !\u003d 2) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                throw new DukeException(\"Invalid description for an event. Use /at followed by date\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            LocalDate dateTime \u003d validateDateTime(taskSplit[1].strip());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            newTask \u003d new Event(taskSplit[0].strip(), dateTime);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            taskSplit \u003d taskAttr.split(\"/by\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            if (taskSplit.length !\u003d 2) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                throw new DukeException(\"Invalid description for a deadline. Use /by followed by date\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            LocalDate dateTime \u003d validateDateTime(taskSplit[1].strip());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            newTask \u003d new Deadline(taskSplit[0].strip(), dateTime);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return addTask(newTask);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private Task addTask(Task task) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns array of Task description strings."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @return array of Task description strings"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String[] listTasks() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String[] taskOutputs \u003d new String[taskList.size() + 1];"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        taskOutputs[0] \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            taskOutputs[i + 1] \u003d (i + 1) + \". \" + taskList.get(i).toString();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return taskOutputs;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Marks the given Task as done."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param position position of the Task in the list, as seen by the user."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @return Task marked done"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @throws DukeException Duke-related exception due to erroneous inputs"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Task markDone(int position) throws DukeException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (position \u003c 1 || position \u003e taskList.size()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new DukeException(\"Invalid task number provided\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Task task \u003d taskList.get(position - 1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        task.markDone();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Deletes the given Task."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param position position of the Task in the list, as seen by the user"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @return Task deleted"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @throws DukeException Duke-related exception due to erroneous inputs"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Task deleteTask(int position) throws DukeException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (position \u003c 1 || position \u003e taskList.size()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new DukeException(\"Invalid task number provided\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return taskList.remove(position - 1);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Validates the given string as a date and converts it to a LocalDate."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param time date string"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @return LocalDate for the given date"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @throws DukeException Duke-related exception due to erroneous inputs"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private LocalDate validateDateTime(String time) throws DukeException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (time.equals(\"\")) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new DukeException(\"Task date cannot be empty.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        LocalDate parsed;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            parsed \u003d LocalDate.parse(time);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return parsed;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new DukeException(\"Invalid date entered. Use format YYYY-MM-DD\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Find tasks that contain the given key."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param key key to search for"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @return string representations of Tasks founc"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public List\u003cString\u003e findTasks(String key) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        List\u003cString\u003e found \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        found.add(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            if (task.search(key)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                found.add(task.toString());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return found;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 221
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Class to handle the interface with the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    Scanner scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Creates a UI."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Reads input from the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @return user input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String readInput() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Outputs the welcome message to the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void welcome() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        writeOutput(\"Hello! I\u0027m duke.Duke\", \"What can I do for you?\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Outputs a Task being added, and the size of the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param task Task added"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param size size of the list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String writeAdd(Task task, int size) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return writeOutput(\"Got it. I\u0027ve added this task:\", task.toString(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                String.format(\"Now you have %d tasks in the list.\", size));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Outputs a Task being marked done."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param task Task marked done"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String writeDone(Task task) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return writeOutput(\"Nice! I\u0027ve marked this task as done:\", \"\\t\" + task.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Outputs a Task being deleted, and the size of the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param task Task deleted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param size size of the list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String writeDelete(Task task, int size) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return writeOutput(\"Noted. I\u0027ve removed this task:\", \"\\t\" + task.toString(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                String.format(\"Now you have %d tasks in the list.\", size));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Outputs Tasks found from a search."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param found string representations of Tasks found"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String writeSearch(List\u003cString\u003e found) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return writeOutput(found.toArray(new String[0]));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Formats the messages to be output."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param messages messages to be output"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String writeOutput(String... messages) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        StringBuilder finalOut \u003d new StringBuilder();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        System.out.println(\"\\t-----------------------------------------\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        for (String message : messages) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            System.out.println(\"\\t\" + message);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            finalOut.append(message).append(\"\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        System.out.println(\"\\t-----------------------------------------\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return finalOut.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Closes the interface."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String exit() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return writeOutput(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 101
    }
  },
  {
    "path": "src/main/java/duke/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.tasks.TaskType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Command sub-type to define adding Tasks"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final TaskType taskType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Creates AddCommand object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param attributes input attributes from user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param taskType TaskType of the Task to add"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public AddCommand(String attributes, TaskType taskType) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.attributes \u003d attributes;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean run(TaskList taskList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (taskType \u003d\u003d TaskType.TODO) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            newTask \u003d taskList.addTodo(attributes);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } else if (taskType \u003d\u003d TaskType.DEADLINE) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            newTask \u003d taskList.addDDLTask(attributes, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            newTask \u003d taskList.addDDLTask(attributes, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ui.writeAdd(newTask, taskList.getSize());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        storage.storeList(taskList.getList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String runNew(TaskList taskList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (taskType \u003d\u003d TaskType.TODO) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            newTask \u003d taskList.addTodo(attributes);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } else if (taskType \u003d\u003d TaskType.DEADLINE) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            newTask \u003d taskList.addDDLTask(attributes, false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            newTask \u003d taskList.addDDLTask(attributes, true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        storage.storeList(taskList.getList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return ui.writeAdd(newTask, taskList.getSize());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 56
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Abstract class to define a general command processing class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    protected String attributes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Execute the command\u0027s process"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param taskList TaskList object handling the current list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param storage Storage object to read/write from disk"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param ui Ui object to handle user interface interactions"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @return true if program should continue after process is executed"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @throws DukeException Duke-related exception due to processing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public abstract boolean run(TaskList taskList, Storage storage, Ui ui) throws DukeException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public abstract String runNew(TaskList taskList, Storage storage, Ui ui) throws DukeException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 25
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Command sub-type to define deleting Tasks"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Creates DeleteCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param attributes input attributes from user"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public DeleteCommand(String attributes) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.attributes \u003d attributes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean run(TaskList taskList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Task deletedTask \u003d taskList.deleteTask(Integer.parseInt(attributes));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ui.writeDelete(deletedTask, taskList.getSize());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        storage.storeList(taskList.getList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String runNew(TaskList taskList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Task deletedTask \u003d taskList.deleteTask(Integer.parseInt(attributes));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        storage.storeList(taskList.getList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return ui.writeDelete(deletedTask, taskList.getSize());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 37
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Command sub-type to define marking Tasks as done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Creates DoneCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param attributes input attributes from user"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public DoneCommand(String attributes) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.attributes \u003d attributes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean run(TaskList taskList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Task markedTask \u003d taskList.markDone(Integer.parseInt(attributes));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ui.writeDone(markedTask);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        storage.storeList(taskList.getList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String runNew(TaskList taskList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Task markedTask \u003d taskList.markDone(Integer.parseInt(attributes));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        storage.storeList(taskList.getList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return ui.writeDone(markedTask);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 37
    }
  },
  {
    "path": "src/main/java/duke/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Command sub-type to define exiting the program"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Creates ExitCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public ExitCommand() {}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean run(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ui.exit();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String runNew(TaskList taskList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return ui.exit();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 28
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Command sub-type to define finding Tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Creates FindCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param attributes input attributes from user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public FindCommand(String attributes) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.attributes \u003d attributes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean run(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        List\u003cString\u003e foundTasks \u003d taskList.findTasks(attributes);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ui.writeSearch(foundTasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String runNew(TaskList taskList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        List\u003cString\u003e foundTasks \u003d taskList.findTasks(attributes);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return ui.writeSearch(foundTasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 36
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Command sub-type to define listing current Tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Creates ListCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public ListCommand() {}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean run(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ui.writeOutput(taskList.listTasks());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String runNew(TaskList taskList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return ui.writeOutput(taskList.listTasks());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 28
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Class to define a deadline."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class Deadline extends TaskDDL {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Creates a Deadline with the given task name and deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param task Task name"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param ddl deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Deadline(String task, LocalDate ddl) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        super(task, ddl);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return \"[D]\" + super.toString() + String.format(\" (by: %s)\", getDateTime());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns string representation of the Deadline to store in file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @return string representation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return String.format(\"D|%s|%s\", super.fileString(), ddl.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 34
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Class to define an Event."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class Event extends TaskDDL {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Creates an Event with the given task name and time"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param task Task name"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param ddl event time"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Event(String task, LocalDate ddl) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        super(task, ddl);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return \"[E]\" + super.toString() + String.format(\" (at: %s)\", getDateTime());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns string representation of the Event to store in file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @return string representation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return String.format(\"E|%s|%s\", super.fileString(), ddl.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 34
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Parent class to define a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final String task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Creates a Task with the given task name."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param task Task name"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Task(String task) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String mark \u003d isDone ? \"\\u2713\" : \"\\u2717\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return String.format(\"[%s] %s\", mark, task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns string representation of the Task to store in file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @return string representation"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return String.format(\"%s|%s\", task, isDone ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean search(String key) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return this.task.contains(key);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 46
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskDDL.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Intermediate class to define Tasks with a deadline or timing."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class TaskDDL extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    LocalDate ddl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Creates a TaskDDL with the given task name and deadline/timing."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param task Task name"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param ddl deadline/timing"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public TaskDDL(String task, LocalDate ddl) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.ddl \u003d ddl;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns deadline/timing in string format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @return string format of deadline/timing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    protected String getDateTime() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return ddl.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 32
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Enum class to define the types of Task objects to manage."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    TODO, DEADLINE, EVENT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 8
    }
  },
  {
    "path": "src/main/java/duke/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Class to define a Todo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Creates a Todo with the given task name."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param task Task name"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Todo(String task) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns string representation of the Todo to store in file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @return string representation"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return \"T|\" + super.fileString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 31
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 19
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//public class ParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//    public void processInput_inputBye_parserExits() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "////        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "////        try {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "////            assert !parser.processInput(\"bye\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "////        } catch (Exception ex) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "////            assert false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "////        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 16
    }
  },
  {
    "path": "src/test/java/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//public class TaskListTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//    public TaskList setup() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//        taskList.addTodo(\"Task 1\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//        taskList.addTodo(\"Task 2\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//        taskList.addTodo(\"Task 3\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//        return taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//    public void addTask_addTodo_todoAdded() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//        TaskList taskList \u003d setup();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//        Task added \u003d taskList.addTodo(\"New Todo\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//        assert taskList.getList().contains(added);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//    public void deleteTask_deleteTaskInList_taskDeleted() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//        TaskList taskList \u003d setup(); // 3 Tasks in list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//        Task temp \u003d taskList.addTodo(\"Temp Task\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//        boolean added \u003d taskList.getList().contains(temp);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//            taskList.deleteTask(4);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//        } catch (Exception ex) {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//        assert added \u0026\u0026 !taskList.getList().contains(temp);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 35
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "todo eat"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "deadline finish eating /by noon"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "delete a"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 8
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 2,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke.Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 2,
      "-": 36
    }
  }
]
