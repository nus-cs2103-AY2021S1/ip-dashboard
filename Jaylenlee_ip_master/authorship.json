[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":16,"author":{"gitId":"Jaylenlee"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":18,"author":{"gitId":"Jaylenlee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"Jaylenlee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"Jaylenlee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"Jaylenlee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"Jaylenlee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"Jaylenlee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"Jaylenlee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"Jaylenlee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"Jaylenlee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"Jaylenlee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"Jaylenlee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"Jaylenlee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"Jaylenlee"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"Jaylenlee"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jaylenlee":17,"-":44}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"Jaylenlee"},"content":"DukePenguin is a desktop app for managing tasks with the help of Graphical User Interface (GUI). It has fun and simple UI interaction during execution which makes it more user friendly than other similar GUI apps"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"Jaylenlee"},"content":"# Table of contents"},{"lineNumber":5,"author":{"gitId":"Jaylenlee"},"content":"1. [Quick Start](#QuickStart)"},{"lineNumber":6,"author":{"gitId":"Jaylenlee"},"content":"1. [Features](#Features)"},{"lineNumber":7,"author":{"gitId":"Jaylenlee"},"content":"    1. [Adding Tasks](#Add)"},{"lineNumber":8,"author":{"gitId":"Jaylenlee"},"content":"    1. [Displaying Tasks](#Display)"},{"lineNumber":9,"author":{"gitId":"Jaylenlee"},"content":"    1. [Deleting Tasks](#Delete)"},{"lineNumber":10,"author":{"gitId":"Jaylenlee"},"content":"    1. [Marking Tasks](#Mark)"},{"lineNumber":11,"author":{"gitId":"Jaylenlee"},"content":"    1. [Terminating Program ](#Terminate)"},{"lineNumber":12,"author":{"gitId":"Jaylenlee"},"content":"1. [Usage](#Usage)"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"Jaylenlee"},"content":"## Quick Start \u003ca name\u003d\"QuickStart\"\u003e\u003c/a\u003e"},{"lineNumber":15,"author":{"gitId":"Jaylenlee"},"content":"1. Ensure you have Java Version 11 or above on your computer. Click [here](https://www.oracle.com/java/technologies/javase/jdk11-archive-downloads.html) to download if not."},{"lineNumber":16,"author":{"gitId":"Jaylenlee"},"content":"1. Download [DukePenguin_v0.2](https://github.com/Jaylenlee/ip/releases/tag/v0.2)"},{"lineNumber":17,"author":{"gitId":"Jaylenlee"},"content":"1. Open the DukePenguin_v0.2 to start using :)"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"Jaylenlee"},"content":"Alternatively you can also open it with terminal:"},{"lineNumber":20,"author":{"gitId":"Jaylenlee"},"content":"1. Open up any terminal. For example, search \"Command Prompt\" on Windows search."},{"lineNumber":21,"author":{"gitId":"Jaylenlee"},"content":"1. Change directory to where the DukePenguin_v0.2 Jar file is located. Example: cd Downloads"},{"lineNumber":22,"author":{"gitId":"Jaylenlee"},"content":"1. Type java -jar DukePenguin_v0.2.jar and enter."},{"lineNumber":23,"author":{"gitId":"Jaylenlee"},"content":"1. You can now use DukePenguin."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"Jaylenlee"},"content":"## Features \u003ca name\u003d\"Features\"\u003e\u003c/a\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"Jaylenlee"},"content":"### Adding tasks: \u003ca name\u003d\"Add\"\u003e\u003c/a\u003e"},{"lineNumber":28,"author":{"gitId":"Jaylenlee"},"content":"#### Todo tasks: `todo`"},{"lineNumber":29,"author":{"gitId":"Jaylenlee"},"content":" - Adds a task to be done in the future without any time restriction."},{"lineNumber":30,"author":{"gitId":"Jaylenlee"},"content":" [API](#todo) "},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"Jaylenlee"},"content":"#### Deadline tasks: `deadline`"},{"lineNumber":33,"author":{"gitId":"Jaylenlee"},"content":" - Adds a task to be done in the future before a specific deadline."},{"lineNumber":34,"author":{"gitId":"Jaylenlee"},"content":" [API](#deadline) "},{"lineNumber":35,"author":{"gitId":"Jaylenlee"},"content":" "},{"lineNumber":36,"author":{"gitId":"Jaylenlee"},"content":"#### Event tasks: `event`"},{"lineNumber":37,"author":{"gitId":"Jaylenlee"},"content":" - Adds a task to be done in the future within a specific time range."},{"lineNumber":38,"author":{"gitId":"Jaylenlee"},"content":" [API](#event) "},{"lineNumber":39,"author":{"gitId":"Jaylenlee"},"content":" "},{"lineNumber":40,"author":{"gitId":"Jaylenlee"},"content":"### Displaying tasks: \u003ca name\u003d\"Display\"\u003e\u003c/a\u003e"},{"lineNumber":41,"author":{"gitId":"Jaylenlee"},"content":"#### List tasks: `list`"},{"lineNumber":42,"author":{"gitId":"Jaylenlee"},"content":" - Displays a indexed list of available tasks."},{"lineNumber":43,"author":{"gitId":"Jaylenlee"},"content":" [API](#list) "},{"lineNumber":44,"author":{"gitId":"Jaylenlee"},"content":" "},{"lineNumber":45,"author":{"gitId":"Jaylenlee"},"content":"#### Find tasks: `find`"},{"lineNumber":46,"author":{"gitId":"Jaylenlee"},"content":" - Finds a indexed list of available tasks with the given keyword."},{"lineNumber":47,"author":{"gitId":"Jaylenlee"},"content":" [API](#find) "},{"lineNumber":48,"author":{"gitId":"Jaylenlee"},"content":" "},{"lineNumber":49,"author":{"gitId":"Jaylenlee"},"content":"#### Sort tasks: `sort`"},{"lineNumber":50,"author":{"gitId":"Jaylenlee"},"content":"- Sorts a indexed list of available tasks by their type and then description."},{"lineNumber":51,"author":{"gitId":"Jaylenlee"},"content":" [API](#sort) "},{"lineNumber":52,"author":{"gitId":"Jaylenlee"},"content":" "},{"lineNumber":53,"author":{"gitId":"Jaylenlee"},"content":"### Deleting tasks: \u003ca name\u003d\"Delete\"\u003e\u003c/a\u003e"},{"lineNumber":54,"author":{"gitId":"Jaylenlee"},"content":"#### Delete tasks: `delete`"},{"lineNumber":55,"author":{"gitId":"Jaylenlee"},"content":"- Deletes a task at a particular index of the list."},{"lineNumber":56,"author":{"gitId":"Jaylenlee"},"content":" [API](#delete) "},{"lineNumber":57,"author":{"gitId":"Jaylenlee"},"content":"  "},{"lineNumber":58,"author":{"gitId":"Jaylenlee"},"content":"### Marking tasks: \u003ca name\u003d\"Mark\"\u003e\u003c/a\u003e"},{"lineNumber":59,"author":{"gitId":"Jaylenlee"},"content":"#### Done tasks: `Done`"},{"lineNumber":60,"author":{"gitId":"Jaylenlee"},"content":" - Marks a task at a particular index of the list to be done. "},{"lineNumber":61,"author":{"gitId":"Jaylenlee"},"content":" [API](#done) "},{"lineNumber":62,"author":{"gitId":"Jaylenlee"},"content":"  "},{"lineNumber":63,"author":{"gitId":"Jaylenlee"},"content":"### Terminating program: \u003ca name\u003d\"Terminate\"\u003e\u003c/a\u003e"},{"lineNumber":64,"author":{"gitId":"Jaylenlee"},"content":"#### Exit: `bye`"},{"lineNumber":65,"author":{"gitId":"Jaylenlee"},"content":"- Terminates and exits the program. "},{"lineNumber":66,"author":{"gitId":"Jaylenlee"},"content":"[API](#bye) "},{"lineNumber":67,"author":{"gitId":"-"},"content":"   "},{"lineNumber":68,"author":{"gitId":"Jaylenlee"},"content":"## Usage \u003ca name\u003d\"Usage\"\u003e\u003c/a\u003e"},{"lineNumber":69,"author":{"gitId":"Jaylenlee"},"content":"### `todo` \u003ca name\u003d\"todo\"\u003e\u003c/a\u003e"},{"lineNumber":70,"author":{"gitId":"Jaylenlee"},"content":" - adds a task without time restriction to list "},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"Jaylenlee"},"content":"- Format of command: `todo \u003cdescription\u003e`"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"Jaylenlee"},"content":"- Example of usage: `todo borrow book`"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"Jaylenlee"},"content":"- Expected outcome:"},{"lineNumber":77,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":78,"author":{"gitId":"Jaylenlee"},"content":"![todo](./expectedOutcome/todo.jpg)"},{"lineNumber":79,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":80,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":81,"author":{"gitId":"Jaylenlee"},"content":"### `deadline` \u003ca name\u003d\"deadline\"\u003e\u003c/a\u003e"},{"lineNumber":82,"author":{"gitId":"Jaylenlee"},"content":"- adds a task that needed to be done before a certain deadline"},{"lineNumber":83,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":84,"author":{"gitId":"Jaylenlee"},"content":"- Format of command: `deadline \u003cdescription\u003e /by \u003cYYYY-MM-DD\u003e \u003cHHmm\u003e`"},{"lineNumber":85,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":86,"author":{"gitId":"Jaylenlee"},"content":"- Example of usage: `deadline return book /by 2020-12-31 1200`"},{"lineNumber":87,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":88,"author":{"gitId":"Jaylenlee"},"content":"- Expected outcome:"},{"lineNumber":89,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":90,"author":{"gitId":"Jaylenlee"},"content":"![deadline](./expectedOutcome/deadline.jpg)"},{"lineNumber":91,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":92,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":93,"author":{"gitId":"Jaylenlee"},"content":"### `event` \u003ca name\u003d\"event\"\u003e\u003c/a\u003e"},{"lineNumber":94,"author":{"gitId":"Jaylenlee"},"content":"- adds a task that needed to be done within a certain time period"},{"lineNumber":95,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":96,"author":{"gitId":"Jaylenlee"},"content":"- Format of command: `event \u003cdescription\u003e /at \u003cYYYY-MM-DD\u003e \u003cHHmm\u003e-\u003cHHmm\u003e`"},{"lineNumber":97,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":98,"author":{"gitId":"Jaylenlee"},"content":"- Example of usage: `event read book /at 2020-12-25 1200-1400`"},{"lineNumber":99,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":100,"author":{"gitId":"Jaylenlee"},"content":"- Expected outcome:"},{"lineNumber":101,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":102,"author":{"gitId":"Jaylenlee"},"content":"![event](./expectedOutcome/event.jpg)"},{"lineNumber":103,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":104,"author":{"gitId":"Jaylenlee"},"content":"### `list` \u003ca name\u003d\"list\"\u003e\u003c/a\u003e"},{"lineNumber":105,"author":{"gitId":"Jaylenlee"},"content":"- displays all tasks available"},{"lineNumber":106,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":107,"author":{"gitId":"Jaylenlee"},"content":"- Format of command: `list`"},{"lineNumber":108,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":109,"author":{"gitId":"Jaylenlee"},"content":"- Example of usage: `list`"},{"lineNumber":110,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":111,"author":{"gitId":"Jaylenlee"},"content":"- Expected outcome:"},{"lineNumber":112,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":113,"author":{"gitId":"Jaylenlee"},"content":"![list](./expectedOutcome/list.jpg)"},{"lineNumber":114,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":115,"author":{"gitId":"Jaylenlee"},"content":"### `find`  \u003ca name\u003d\"find\"\u003e\u003c/a\u003e"},{"lineNumber":116,"author":{"gitId":"Jaylenlee"},"content":"- displays all tasks available with the given keyword"},{"lineNumber":117,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":118,"author":{"gitId":"Jaylenlee"},"content":"- Format of command: `find \u003ckeyword\u003e`"},{"lineNumber":119,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":120,"author":{"gitId":"Jaylenlee"},"content":"- Example of usage: `find Dec`"},{"lineNumber":121,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":122,"author":{"gitId":"Jaylenlee"},"content":"- Expected outcome:"},{"lineNumber":123,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":124,"author":{"gitId":"Jaylenlee"},"content":"![find](./expectedOutcome/find.jpg)"},{"lineNumber":125,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":126,"author":{"gitId":"Jaylenlee"},"content":"### `sort` \u003ca name\u003d\"sort\"\u003e\u003c/a\u003e"},{"lineNumber":127,"author":{"gitId":"Jaylenlee"},"content":"- sorts all tasks available by their task\u0027s type and then description alphabetically"},{"lineNumber":128,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":129,"author":{"gitId":"Jaylenlee"},"content":"- Format of command: `sort`"},{"lineNumber":130,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":131,"author":{"gitId":"Jaylenlee"},"content":"- Example of usage: `sort`"},{"lineNumber":132,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":133,"author":{"gitId":"Jaylenlee"},"content":"- Expected outcome:"},{"lineNumber":134,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":135,"author":{"gitId":"Jaylenlee"},"content":"![sort](./expectedOutcome/sort.jpg)"},{"lineNumber":136,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":137,"author":{"gitId":"Jaylenlee"},"content":"### `delete` \u003ca name\u003d\"delete\"\u003e\u003c/a\u003e"},{"lineNumber":138,"author":{"gitId":"Jaylenlee"},"content":"- deletes a task at a particular index"},{"lineNumber":139,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":140,"author":{"gitId":"Jaylenlee"},"content":"- Format of command: `delete \u003cindex\u003e`"},{"lineNumber":141,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":142,"author":{"gitId":"Jaylenlee"},"content":"- Example of usage: `delete 1`"},{"lineNumber":143,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":144,"author":{"gitId":"Jaylenlee"},"content":"- Expected outcome:"},{"lineNumber":145,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":146,"author":{"gitId":"Jaylenlee"},"content":"![delete](./expectedOutcome/delete.jpg)"},{"lineNumber":147,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":148,"author":{"gitId":"Jaylenlee"},"content":"### `done` \u003ca name\u003d\"done\"\u003e\u003c/a\u003e"},{"lineNumber":149,"author":{"gitId":"Jaylenlee"},"content":"- marks a task at a particular index done"},{"lineNumber":150,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":151,"author":{"gitId":"Jaylenlee"},"content":"- Format of command: `done \u003cindex\u003e`"},{"lineNumber":152,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":153,"author":{"gitId":"Jaylenlee"},"content":"- Example of usage: `done 1`"},{"lineNumber":154,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":155,"author":{"gitId":"Jaylenlee"},"content":"- Expected outcome:"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"Jaylenlee"},"content":"![done](./expectedOutcome/done.jpg)"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"Jaylenlee"},"content":"### `bye` \u003ca name\u003d\"bye\"\u003e\u003c/a\u003e"},{"lineNumber":160,"author":{"gitId":"Jaylenlee"},"content":"- terminates DukePenguin"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"Jaylenlee"},"content":"- Format of command: `bye`"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"Jaylenlee"},"content":"- Example of usage: `bye`"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"Jaylenlee"},"content":"- Expected outcome:"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"Jaylenlee"},"content":"![bye](./expectedOutcome/bye.jpg)"}],"authorContributionMap":{"Jaylenlee":151,"-":17}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jaylenlee"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"Jaylenlee"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":4,"author":{"gitId":"Jaylenlee"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"Jaylenlee"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"Jaylenlee"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"Jaylenlee"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"Jaylenlee"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"Jaylenlee"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"Jaylenlee"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"Jaylenlee"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"Jaylenlee"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":13,"author":{"gitId":"Jaylenlee"},"content":"import javafx.scene.paint.ImagePattern;"},{"lineNumber":14,"author":{"gitId":"Jaylenlee"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":15,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"//@@author Jaylenlee-reused--\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"//Solution below adapted from https://se-education.org/guides/tutorials/javaFxPart4.html"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * An example of a custom control using FXML."},{"lineNumber":20,"author":{"gitId":"-"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * containing text from the speaker."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class DialogBox extends HBox {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Label dialog;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Circle displayPicture;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fxmlLoader.load();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            e.printStackTrace();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        dialog.setText(text);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        displayPicture.setFill(new ImagePattern(img));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private void flip() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Collections.reverse(tmp);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new DialogBox(text, img);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        db.flip();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return db;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"},{"lineNumber":63,"author":{"gitId":"-"},"content":"//@@author"}],"authorContributionMap":{"Jaylenlee":15,"-":48}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jaylenlee"},"content":"import processor.UI;"},{"lineNumber":2,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"//@@author Jaylenlee-reused--\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"//Solution below adapted from https://se-education.org/guides/tutorials/javaFxPart4.html"},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"    private boolean isWorking;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private UI ui;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"-"},"content":"     * Constructor for this object"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public Duke() {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        this.isWorking \u003d true;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.ui \u003d new UI();"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Checks if Duke is working."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @return working status of Duke. False if Duke have not terminated, true otherwise."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public boolean isWorking() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return this.isWorking;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the repsonse to a given command."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @param input command entered by user"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @return response processed by UI"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    String getResponse(String input) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String reply \u003d this.ui.interact(input);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        if (ui.getDoneStatus()) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            this.isWorking \u003d false;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assert !reply.equals(\"\"); // reply should not be empty string"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return reply;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}"},{"lineNumber":42,"author":{"gitId":"-"},"content":"//@@author"}],"authorContributionMap":{"Jaylenlee":2,"-":40}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jaylenlee"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"//@@author Jaylenlee-reused--\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"//Solution below adapted from https://se-education.org/guides/tutorials/javaFxPart4.html"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"},{"lineNumber":13,"author":{"gitId":"-"},"content":"//@@author"}],"authorContributionMap":{"Jaylenlee":2,"-":11}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jaylenlee"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":3,"author":{"gitId":"Jaylenlee"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"Jaylenlee"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"Jaylenlee"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"Jaylenlee"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"Jaylenlee"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"//@@author Jaylenlee-reused--\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"//Solution below adapted from https://se-education.org/guides/tutorials/javaFxPart4.html"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * A GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void start(Stage stage) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            stage.setScene(scene);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            stage.setTitle(\"DukePenguin\");"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            stage.show();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            e.printStackTrace();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"},{"lineNumber":33,"author":{"gitId":"-"},"content":"//@@author"}],"authorContributionMap":{"Jaylenlee":8,"-":25}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jaylenlee"},"content":"import javafx.fxml.FXML;"},{"lineNumber":2,"author":{"gitId":"Jaylenlee"},"content":"import javafx.scene.control.Button;"},{"lineNumber":3,"author":{"gitId":"Jaylenlee"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":4,"author":{"gitId":"Jaylenlee"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitId":"Jaylenlee"},"content":"import javafx.scene.image.Image;"},{"lineNumber":6,"author":{"gitId":"Jaylenlee"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"Jaylenlee"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":8,"author":{"gitId":"Jaylenlee"},"content":"import processor.UI;"},{"lineNumber":9,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"//@@author Jaylenlee-reused--\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"//Solution below adapted from https://se-education.org/guides/tutorials/javaFxPart4.html"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private VBox dialogContainer;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private TextField userInput;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private Button sendButton;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Duke duke;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.jpg\"));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.jpg\"));"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Initialises the main window"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void initialize() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String greeting \u003d UI.getGreeting();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":38,"author":{"gitId":"-"},"content":"                DialogBox.getDukeDialog(greeting, dukeImage)"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Sets this object\u0027s duke to the inputted duke"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        duke \u003d d;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Checks if Duke is still working and perform relevant action."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * If Duke is working, creates dialog boxes else do nothing."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Clears the user input after processing."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private void handleUserInput() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (this.duke.isWorking()) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            displayDialog();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        userInput.clear();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * the dialog container."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private void displayDialog() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":71,"author":{"gitId":"-"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}"},{"lineNumber":76,"author":{"gitId":"-"},"content":"//@@author"}],"authorContributionMap":{"Jaylenlee":9,"-":67}},{"path":"src/main/java/exception/DateTimeInvalidFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jaylenlee"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":3,"author":{"gitId":"Jaylenlee"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Jaylenlee"},"content":" * Encapsulates the message of an exception or error related to Duke\u0027s operation."},{"lineNumber":5,"author":{"gitId":"Jaylenlee"},"content":" *  It is to be thrown when extracting date and time from user\u0027s command input of"},{"lineNumber":6,"author":{"gitId":"Jaylenlee"},"content":" *  incorrect format."},{"lineNumber":7,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":8,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003eThe \u0027DateTimeInvalidFormatException\u0027 supports operators, supported include: \u003c/p\u003e"},{"lineNumber":9,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":10,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003e (i) Getters to error message \u003c/p\u003e"},{"lineNumber":11,"author":{"gitId":"Jaylenlee"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Jaylenlee"},"content":"public class DateTimeInvalidFormatException extends InvalidActionException {"},{"lineNumber":13,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":14,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Jaylenlee"},"content":"     * Constructor of this object."},{"lineNumber":16,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Jaylenlee"},"content":"    public DateTimeInvalidFormatException() {"},{"lineNumber":18,"author":{"gitId":"Jaylenlee"},"content":"        super(\"Action invalid. Date and Time Format incorrect.\");"},{"lineNumber":19,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":21,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Jaylenlee"},"content":"     * Constructor of this object."},{"lineNumber":23,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"Jaylenlee"},"content":"     * @param message error message of this exception."},{"lineNumber":25,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Jaylenlee"},"content":"    public DateTimeInvalidFormatException(String message) {"},{"lineNumber":27,"author":{"gitId":"Jaylenlee"},"content":"        super(message);"},{"lineNumber":28,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Jaylenlee"},"content":"}"}],"authorContributionMap":{"Jaylenlee":29}},{"path":"src/main/java/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jaylenlee"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":3,"author":{"gitId":"Jaylenlee"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Jaylenlee"},"content":" * Encapsulates the message of an exception or error related to Duke\u0027s operation."},{"lineNumber":5,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":6,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003eThe \u0027DukeException\u0027 supports operators, supported include: \u003c/p\u003e"},{"lineNumber":7,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":8,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003e (i) Getters to error message \u003c/p\u003e"},{"lineNumber":9,"author":{"gitId":"Jaylenlee"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Jaylenlee"},"content":"public class DukeException extends Exception {"},{"lineNumber":11,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":12,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Jaylenlee"},"content":"     * Constructor of this object."},{"lineNumber":14,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"Jaylenlee"},"content":"     * @param message error message of this exception."},{"lineNumber":16,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Jaylenlee"},"content":"    public DukeException(String message) {"},{"lineNumber":18,"author":{"gitId":"Jaylenlee"},"content":"        super(message);"},{"lineNumber":19,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":21,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Jaylenlee"},"content":"     * String representation of this object."},{"lineNumber":23,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"Jaylenlee"},"content":"     * @return string representation of this object. Contains display frame and error message."},{"lineNumber":25,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Jaylenlee"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"Jaylenlee"},"content":"    public String toString() {"},{"lineNumber":28,"author":{"gitId":"Jaylenlee"},"content":"        String errorMessage \u003d \"     (~.^.~)  OOPS!!! \""},{"lineNumber":29,"author":{"gitId":"Jaylenlee"},"content":"                + getMessage()"},{"lineNumber":30,"author":{"gitId":"Jaylenlee"},"content":"                + \"\\n\";"},{"lineNumber":31,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":32,"author":{"gitId":"Jaylenlee"},"content":"        return errorMessage;"},{"lineNumber":33,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Jaylenlee"},"content":"}"}],"authorContributionMap":{"Jaylenlee":34}},{"path":"src/main/java/exception/EmptyActionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jaylenlee"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":3,"author":{"gitId":"Jaylenlee"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Jaylenlee"},"content":" * Encapsulates the message of an exception or error related to Duke\u0027s operation"},{"lineNumber":5,"author":{"gitId":"Jaylenlee"},"content":" *  on empty command or action."},{"lineNumber":6,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":7,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003eThe \u0027EmptyActionException\u0027 supports operators, supported include: \u003c/p\u003e"},{"lineNumber":8,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":9,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003e (i) Getters to error message \u003c/p\u003e"},{"lineNumber":10,"author":{"gitId":"Jaylenlee"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Jaylenlee"},"content":"public class EmptyActionException extends DukeException {"},{"lineNumber":12,"author":{"gitId":"Jaylenlee"},"content":"    private static final String DESCRIPTION \u003d \"The description of a command cannot be empty.\";"},{"lineNumber":13,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":14,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Jaylenlee"},"content":"     * Constructor of this object."},{"lineNumber":16,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Jaylenlee"},"content":"    public EmptyActionException() {"},{"lineNumber":18,"author":{"gitId":"Jaylenlee"},"content":"        super(DESCRIPTION);"},{"lineNumber":19,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Jaylenlee"},"content":"}"}],"authorContributionMap":{"Jaylenlee":20}},{"path":"src/main/java/exception/FileCorruptedException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jaylenlee"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":3,"author":{"gitId":"Jaylenlee"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Jaylenlee"},"content":" * Encapsulates the message of an exception or error related to Duke\u0027s operation when"},{"lineNumber":5,"author":{"gitId":"Jaylenlee"},"content":" *  loading file from computer."},{"lineNumber":6,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":7,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003eThe \u0027FileCorruptedException\u0027 supports operators, supported include: \u003c/p\u003e"},{"lineNumber":8,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":9,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003e (i) Getters to error message \u003c/p\u003e"},{"lineNumber":10,"author":{"gitId":"Jaylenlee"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Jaylenlee"},"content":"public class FileCorruptedException extends DukeException {"},{"lineNumber":12,"author":{"gitId":"Jaylenlee"},"content":"    private static final String DESCRIPTION \u003d \"File is corrupted. Unable to convert file into list of Tasks.\";"},{"lineNumber":13,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":14,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Jaylenlee"},"content":"     * Constructor of this object."},{"lineNumber":16,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Jaylenlee"},"content":"    public FileCorruptedException() {"},{"lineNumber":18,"author":{"gitId":"Jaylenlee"},"content":"        super(DESCRIPTION);"},{"lineNumber":19,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":21,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Jaylenlee"},"content":"     * Constructor of this object."},{"lineNumber":23,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"Jaylenlee"},"content":"     * @param message error message of this exception."},{"lineNumber":25,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Jaylenlee"},"content":"    public FileCorruptedException(String message) {"},{"lineNumber":27,"author":{"gitId":"Jaylenlee"},"content":"        super(message);"},{"lineNumber":28,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Jaylenlee"},"content":"}"}],"authorContributionMap":{"Jaylenlee":29}},{"path":"src/main/java/exception/InvalidActionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jaylenlee"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":3,"author":{"gitId":"Jaylenlee"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Jaylenlee"},"content":" * Encapsulates the message of an exception or error related to Duke\u0027s invalid"},{"lineNumber":5,"author":{"gitId":"Jaylenlee"},"content":" *  action on command operation."},{"lineNumber":6,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":7,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003eThe \u0027InvalidActionException\u0027 supports operators, supported include: \u003c/p\u003e"},{"lineNumber":8,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":9,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003e (i) Getters to error message \u003c/p\u003e"},{"lineNumber":10,"author":{"gitId":"Jaylenlee"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Jaylenlee"},"content":"public class InvalidActionException extends DukeException {"},{"lineNumber":12,"author":{"gitId":"Jaylenlee"},"content":"    private static final String DESCRIPTION \u003d \"The action is invalid.\";"},{"lineNumber":13,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":14,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Jaylenlee"},"content":"     * Constructor of this object."},{"lineNumber":16,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Jaylenlee"},"content":"    public InvalidActionException() {"},{"lineNumber":18,"author":{"gitId":"Jaylenlee"},"content":"        super(DESCRIPTION);"},{"lineNumber":19,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":21,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Jaylenlee"},"content":"     * Constructor of this object."},{"lineNumber":23,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"Jaylenlee"},"content":"     * @param message error message of this exception."},{"lineNumber":25,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Jaylenlee"},"content":"    public InvalidActionException(String message) {"},{"lineNumber":27,"author":{"gitId":"Jaylenlee"},"content":"        super(message);"},{"lineNumber":28,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Jaylenlee"},"content":"}"}],"authorContributionMap":{"Jaylenlee":29}},{"path":"src/main/java/exception/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jaylenlee"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":3,"author":{"gitId":"Jaylenlee"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Jaylenlee"},"content":" * Encapsulates the message of an exception or error related to Duke\u0027s operation on"},{"lineNumber":5,"author":{"gitId":"Jaylenlee"},"content":" * invalid commands."},{"lineNumber":6,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":7,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003eThe \u0027InvalidCommandException\u0027 supports operators, supported include: \u003c/p\u003e"},{"lineNumber":8,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":9,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003e (i) Getters to error message \u003c/p\u003e"},{"lineNumber":10,"author":{"gitId":"Jaylenlee"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Jaylenlee"},"content":"public class InvalidCommandException extends DukeException {"},{"lineNumber":12,"author":{"gitId":"Jaylenlee"},"content":"    private static final String DESCRIPTION \u003d \"I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":13,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":14,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Jaylenlee"},"content":"     * Constructor of this object."},{"lineNumber":16,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Jaylenlee"},"content":"    public InvalidCommandException() {"},{"lineNumber":18,"author":{"gitId":"Jaylenlee"},"content":"        super(DESCRIPTION);"},{"lineNumber":19,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Jaylenlee"},"content":"}"}],"authorContributionMap":{"Jaylenlee":20}},{"path":"src/main/java/processor/CommandProcessor.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jaylenlee"},"content":"package processor;"},{"lineNumber":2,"author":{"gitId":"Jaylenlee"},"content":"import java.util.ArrayList;"},{"lineNumber":3,"author":{"gitId":"Jaylenlee"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"Jaylenlee"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"Jaylenlee"},"content":"import java.util.function.Function;"},{"lineNumber":6,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":7,"author":{"gitId":"Jaylenlee"},"content":"import exception.DukeException;"},{"lineNumber":8,"author":{"gitId":"Jaylenlee"},"content":"import exception.EmptyActionException;"},{"lineNumber":9,"author":{"gitId":"Jaylenlee"},"content":"import exception.InvalidActionException;"},{"lineNumber":10,"author":{"gitId":"Jaylenlee"},"content":"import exception.InvalidCommandException;"},{"lineNumber":11,"author":{"gitId":"Jaylenlee"},"content":"import task.DeadlineTask;"},{"lineNumber":12,"author":{"gitId":"Jaylenlee"},"content":"import task.EventTask;"},{"lineNumber":13,"author":{"gitId":"Jaylenlee"},"content":"import task.Task;"},{"lineNumber":14,"author":{"gitId":"Jaylenlee"},"content":"import task.TaskComparator;"},{"lineNumber":15,"author":{"gitId":"Jaylenlee"},"content":"import task.TaskList;"},{"lineNumber":16,"author":{"gitId":"Jaylenlee"},"content":"import task.ToDoTask;"},{"lineNumber":17,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":18,"author":{"gitId":"Jaylenlee"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"Jaylenlee"},"content":" * Processes command entered by user."},{"lineNumber":20,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":21,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003eThe \u0027CommandProcessor\u0027 supports operators, supported include: \u003c/p\u003e"},{"lineNumber":22,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":23,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003e (i) processing the String command and run the operation \u003c/p\u003e"},{"lineNumber":24,"author":{"gitId":"Jaylenlee"},"content":" */"},{"lineNumber":25,"author":{"gitId":"Jaylenlee"},"content":"public class CommandProcessor {"},{"lineNumber":26,"author":{"gitId":"Jaylenlee"},"content":"    private TaskList taskList;"},{"lineNumber":27,"author":{"gitId":"Jaylenlee"},"content":"    private final HashMap\u003cString, Function\u003cString, String\u003e\u003e map \u003d setUpCommandMap();"},{"lineNumber":28,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":29,"author":{"gitId":"Jaylenlee"},"content":"    CommandProcessor(TaskList taskList) {"},{"lineNumber":30,"author":{"gitId":"Jaylenlee"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":31,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":33,"author":{"gitId":"Jaylenlee"},"content":"    private HashMap\u003cString, Function\u003cString, String\u003e\u003e setUpCommandMap() {"},{"lineNumber":34,"author":{"gitId":"Jaylenlee"},"content":"        HashMap\u003cString, Function\u003cString, String\u003e\u003e map \u003d new HashMap\u003c\u003e();"},{"lineNumber":35,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":36,"author":{"gitId":"Jaylenlee"},"content":"        map.put(\"list\", (command) -\u003e listCommand());"},{"lineNumber":37,"author":{"gitId":"Jaylenlee"},"content":"        map.put(\"done\", (command) -\u003e doneCommand(command));"},{"lineNumber":38,"author":{"gitId":"Jaylenlee"},"content":"        map.put(\"todo\", (command) -\u003e toDoCommand(command));"},{"lineNumber":39,"author":{"gitId":"Jaylenlee"},"content":"        map.put(\"deadline\", (command) -\u003e deadlineCommand(command));"},{"lineNumber":40,"author":{"gitId":"Jaylenlee"},"content":"        map.put(\"event\", (command) -\u003e eventCommand(command));"},{"lineNumber":41,"author":{"gitId":"Jaylenlee"},"content":"        map.put(\"delete\", (command) -\u003e deleteCommand(command));"},{"lineNumber":42,"author":{"gitId":"Jaylenlee"},"content":"        map.put(\"find\", (command) -\u003e findCommand(command));"},{"lineNumber":43,"author":{"gitId":"Jaylenlee"},"content":"        map.put(\"sort\", (command) -\u003e sortCommand());"},{"lineNumber":44,"author":{"gitId":"Jaylenlee"},"content":"        return map;"},{"lineNumber":45,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":47,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"Jaylenlee"},"content":"     * Run command enter by user."},{"lineNumber":49,"author":{"gitId":"Jaylenlee"},"content":"     * Prints error message if command is invalid."},{"lineNumber":50,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"Jaylenlee"},"content":"     * @param command the command entered by user."},{"lineNumber":52,"author":{"gitId":"Jaylenlee"},"content":"     * @return reply to the command given"},{"lineNumber":53,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"Jaylenlee"},"content":"    public String runCommand(String command) {"},{"lineNumber":55,"author":{"gitId":"Jaylenlee"},"content":"        Function\u003cString, String\u003e action \u003d map.get(command.replaceAll(\" .*\", \"\"));"},{"lineNumber":56,"author":{"gitId":"Jaylenlee"},"content":"        try {"},{"lineNumber":57,"author":{"gitId":"Jaylenlee"},"content":"            if (action \u003d\u003d null) {"},{"lineNumber":58,"author":{"gitId":"Jaylenlee"},"content":"                throw new InvalidCommandException();"},{"lineNumber":59,"author":{"gitId":"Jaylenlee"},"content":"            } else {"},{"lineNumber":60,"author":{"gitId":"Jaylenlee"},"content":"                return action.apply(command);"},{"lineNumber":61,"author":{"gitId":"Jaylenlee"},"content":"            }"},{"lineNumber":62,"author":{"gitId":"Jaylenlee"},"content":"        } catch (DukeException e) {"},{"lineNumber":63,"author":{"gitId":"Jaylenlee"},"content":"            return e.toString();"},{"lineNumber":64,"author":{"gitId":"Jaylenlee"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":67,"author":{"gitId":"Jaylenlee"},"content":"    private String listCommand() {"},{"lineNumber":68,"author":{"gitId":"Jaylenlee"},"content":"        return this.taskList.showList();"},{"lineNumber":69,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":71,"author":{"gitId":"Jaylenlee"},"content":"    private String doneCommand(String command) {"},{"lineNumber":72,"author":{"gitId":"Jaylenlee"},"content":"        try {"},{"lineNumber":73,"author":{"gitId":"Jaylenlee"},"content":"            int length \u003d command.length();"},{"lineNumber":74,"author":{"gitId":"Jaylenlee"},"content":"            if (length \u003c 5) {"},{"lineNumber":75,"author":{"gitId":"Jaylenlee"},"content":"                throw new EmptyActionException(); // only \"done\""},{"lineNumber":76,"author":{"gitId":"Jaylenlee"},"content":"            } else {"},{"lineNumber":77,"author":{"gitId":"Jaylenlee"},"content":"                try {"},{"lineNumber":78,"author":{"gitId":"Jaylenlee"},"content":"                    String num \u003d command.substring(5);"},{"lineNumber":79,"author":{"gitId":"Jaylenlee"},"content":"                    int index \u003d Integer.parseInt(num);"},{"lineNumber":80,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":81,"author":{"gitId":"Jaylenlee"},"content":"                    if (index \u003d\u003d 0 || index \u003e this.taskList.size()) {"},{"lineNumber":82,"author":{"gitId":"Jaylenlee"},"content":"                        throw new InvalidActionException(); // \"done 0\""},{"lineNumber":83,"author":{"gitId":"Jaylenlee"},"content":"                    }"},{"lineNumber":84,"author":{"gitId":"Jaylenlee"},"content":"                    this.taskList.getTask(index - 1).markAsDone();"},{"lineNumber":85,"author":{"gitId":"Jaylenlee"},"content":"                    return \"     Nice! I\u0027ve marked this task as done:\\n\""},{"lineNumber":86,"author":{"gitId":"Jaylenlee"},"content":"                            + \"     \""},{"lineNumber":87,"author":{"gitId":"Jaylenlee"},"content":"                            + this.taskList.getTask(index - 1)"},{"lineNumber":88,"author":{"gitId":"Jaylenlee"},"content":"                            + \"\\n\";"},{"lineNumber":89,"author":{"gitId":"Jaylenlee"},"content":"                } catch (NumberFormatException e) {"},{"lineNumber":90,"author":{"gitId":"Jaylenlee"},"content":"                    throw new InvalidActionException(); // \"done 1A\" etc"},{"lineNumber":91,"author":{"gitId":"Jaylenlee"},"content":"                }"},{"lineNumber":92,"author":{"gitId":"Jaylenlee"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"Jaylenlee"},"content":"        } catch (DukeException e) {"},{"lineNumber":94,"author":{"gitId":"Jaylenlee"},"content":"            return e.toString();"},{"lineNumber":95,"author":{"gitId":"Jaylenlee"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":98,"author":{"gitId":"Jaylenlee"},"content":"    private String toDoCommand(String command) {"},{"lineNumber":99,"author":{"gitId":"Jaylenlee"},"content":"        try {"},{"lineNumber":100,"author":{"gitId":"Jaylenlee"},"content":"            int spaceIndex \u003d command.indexOf(\" \");"},{"lineNumber":101,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":102,"author":{"gitId":"Jaylenlee"},"content":"            if (spaceIndex \u003d\u003d -1) {"},{"lineNumber":103,"author":{"gitId":"Jaylenlee"},"content":"                throw new EmptyActionException(); // \"todo\""},{"lineNumber":104,"author":{"gitId":"Jaylenlee"},"content":"            }"},{"lineNumber":105,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":106,"author":{"gitId":"Jaylenlee"},"content":"            String action \u003d command.substring(spaceIndex + 1);"},{"lineNumber":107,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":108,"author":{"gitId":"Jaylenlee"},"content":"            if (action.toLowerCase().contains(\"/by\") || action.toLowerCase().contains(\"/at\")) {"},{"lineNumber":109,"author":{"gitId":"Jaylenlee"},"content":"                throw new InvalidActionException(); // \"todo borrow book /by Sunday\" etc"},{"lineNumber":110,"author":{"gitId":"Jaylenlee"},"content":"            } else if (action.replaceAll(\" \", \"\").equals(\"\")) {"},{"lineNumber":111,"author":{"gitId":"Jaylenlee"},"content":"                throw new EmptyActionException(); // \"todo     \""},{"lineNumber":112,"author":{"gitId":"Jaylenlee"},"content":"            } else {"},{"lineNumber":113,"author":{"gitId":"Jaylenlee"},"content":"                Task task \u003d new ToDoTask(command.substring(spaceIndex + 1));"},{"lineNumber":114,"author":{"gitId":"Jaylenlee"},"content":"                return this.taskList.addToTaskList(task);"},{"lineNumber":115,"author":{"gitId":"Jaylenlee"},"content":"            }"},{"lineNumber":116,"author":{"gitId":"Jaylenlee"},"content":"        } catch (DukeException e) {"},{"lineNumber":117,"author":{"gitId":"Jaylenlee"},"content":"            return e.toString();"},{"lineNumber":118,"author":{"gitId":"Jaylenlee"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":121,"author":{"gitId":"Jaylenlee"},"content":"    private String deadlineCommand(String command) {"},{"lineNumber":122,"author":{"gitId":"Jaylenlee"},"content":"        try {"},{"lineNumber":123,"author":{"gitId":"Jaylenlee"},"content":"            int spaceIndex \u003d command.indexOf(\" \");"},{"lineNumber":124,"author":{"gitId":"Jaylenlee"},"content":"            int slashIndex \u003d command.indexOf(\"/by\");"},{"lineNumber":125,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":126,"author":{"gitId":"Jaylenlee"},"content":"            if (spaceIndex \u003d\u003d -1) {"},{"lineNumber":127,"author":{"gitId":"Jaylenlee"},"content":"                throw new EmptyActionException(); // \"deadline\""},{"lineNumber":128,"author":{"gitId":"Jaylenlee"},"content":"            } else if (slashIndex \u003d\u003d -1 || spaceIndex + 1 \u003d\u003d slashIndex || slashIndex + 4 \u003e command.length()) {"},{"lineNumber":129,"author":{"gitId":"Jaylenlee"},"content":"                throw new InvalidActionException(); // \"deadline project submission | /by Sunday | return book /by\""},{"lineNumber":130,"author":{"gitId":"Jaylenlee"},"content":"            } else {"},{"lineNumber":131,"author":{"gitId":"Jaylenlee"},"content":"                String description \u003d command.substring(spaceIndex + 1, slashIndex - 1);"},{"lineNumber":132,"author":{"gitId":"Jaylenlee"},"content":"                String time \u003d command.substring(slashIndex + 4);"},{"lineNumber":133,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":134,"author":{"gitId":"Jaylenlee"},"content":"                Task task \u003d new DeadlineTask(description, time);"},{"lineNumber":135,"author":{"gitId":"Jaylenlee"},"content":"                return this.taskList.addToTaskList(task);"},{"lineNumber":136,"author":{"gitId":"Jaylenlee"},"content":"            }"},{"lineNumber":137,"author":{"gitId":"Jaylenlee"},"content":"        } catch (DukeException e) {"},{"lineNumber":138,"author":{"gitId":"Jaylenlee"},"content":"            return e.toString();"},{"lineNumber":139,"author":{"gitId":"Jaylenlee"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":142,"author":{"gitId":"Jaylenlee"},"content":"    private String eventCommand(String command) {"},{"lineNumber":143,"author":{"gitId":"Jaylenlee"},"content":"        try {"},{"lineNumber":144,"author":{"gitId":"Jaylenlee"},"content":"            int spaceIndex \u003d command.indexOf(\" \");"},{"lineNumber":145,"author":{"gitId":"Jaylenlee"},"content":"            int slashIndex \u003d command.indexOf(\"/at\");"},{"lineNumber":146,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":147,"author":{"gitId":"Jaylenlee"},"content":"            if (spaceIndex \u003d\u003d -1) {"},{"lineNumber":148,"author":{"gitId":"Jaylenlee"},"content":"                throw new EmptyActionException(); // \"event\""},{"lineNumber":149,"author":{"gitId":"Jaylenlee"},"content":"            } else if (slashIndex \u003d\u003d -1 || spaceIndex + 1 \u003d\u003d slashIndex || slashIndex + 4 \u003e command.length()) {"},{"lineNumber":150,"author":{"gitId":"Jaylenlee"},"content":"                throw new InvalidActionException(); //\"event project submission\"\"event /at 1-2pm\"\"deadline meeting /at\""},{"lineNumber":151,"author":{"gitId":"Jaylenlee"},"content":"            } else {"},{"lineNumber":152,"author":{"gitId":"Jaylenlee"},"content":"                String description \u003d command.substring(spaceIndex + 1, slashIndex - 1);"},{"lineNumber":153,"author":{"gitId":"Jaylenlee"},"content":"                String time \u003d command.substring(slashIndex + 4);"},{"lineNumber":154,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":155,"author":{"gitId":"Jaylenlee"},"content":"                Task task \u003d new EventTask(description, time);"},{"lineNumber":156,"author":{"gitId":"Jaylenlee"},"content":"                return this.taskList.addToTaskList(task);"},{"lineNumber":157,"author":{"gitId":"Jaylenlee"},"content":"            }"},{"lineNumber":158,"author":{"gitId":"Jaylenlee"},"content":"        } catch (DukeException e) {"},{"lineNumber":159,"author":{"gitId":"Jaylenlee"},"content":"            return e.toString();"},{"lineNumber":160,"author":{"gitId":"Jaylenlee"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":163,"author":{"gitId":"Jaylenlee"},"content":"    private String deleteCommand(String command) {"},{"lineNumber":164,"author":{"gitId":"Jaylenlee"},"content":"        try {"},{"lineNumber":165,"author":{"gitId":"Jaylenlee"},"content":"            int length \u003d command.length();"},{"lineNumber":166,"author":{"gitId":"Jaylenlee"},"content":"            if (length \u003c 7) {"},{"lineNumber":167,"author":{"gitId":"Jaylenlee"},"content":"                throw new EmptyActionException(); // only \"delete\""},{"lineNumber":168,"author":{"gitId":"Jaylenlee"},"content":"            } else {"},{"lineNumber":169,"author":{"gitId":"Jaylenlee"},"content":"                try {"},{"lineNumber":170,"author":{"gitId":"Jaylenlee"},"content":"                    String num \u003d command.substring(7);"},{"lineNumber":171,"author":{"gitId":"Jaylenlee"},"content":"                    int index \u003d Integer.parseInt(num);"},{"lineNumber":172,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":173,"author":{"gitId":"Jaylenlee"},"content":"                    if (index \u003d\u003d 0 || index \u003e this.taskList.size()) {"},{"lineNumber":174,"author":{"gitId":"Jaylenlee"},"content":"                        throw new InvalidActionException(); // \"delete 0\""},{"lineNumber":175,"author":{"gitId":"Jaylenlee"},"content":"                    }"},{"lineNumber":176,"author":{"gitId":"Jaylenlee"},"content":"                    return this.taskList.deleteFromTaskList(index - 1);"},{"lineNumber":177,"author":{"gitId":"Jaylenlee"},"content":"                } catch (NumberFormatException e) {"},{"lineNumber":178,"author":{"gitId":"Jaylenlee"},"content":"                    throw new InvalidActionException(); // \"delete 1A\" etc"},{"lineNumber":179,"author":{"gitId":"Jaylenlee"},"content":"                }"},{"lineNumber":180,"author":{"gitId":"Jaylenlee"},"content":"            }"},{"lineNumber":181,"author":{"gitId":"Jaylenlee"},"content":"        } catch (DukeException e) {"},{"lineNumber":182,"author":{"gitId":"Jaylenlee"},"content":"            return e.toString();"},{"lineNumber":183,"author":{"gitId":"Jaylenlee"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":186,"author":{"gitId":"Jaylenlee"},"content":"    private String findCommand(String command) {"},{"lineNumber":187,"author":{"gitId":"Jaylenlee"},"content":"        try {"},{"lineNumber":188,"author":{"gitId":"Jaylenlee"},"content":"            if (command.length() \u003c 6) { // find"},{"lineNumber":189,"author":{"gitId":"Jaylenlee"},"content":"                throw new EmptyActionException();"},{"lineNumber":190,"author":{"gitId":"Jaylenlee"},"content":"            }"},{"lineNumber":191,"author":{"gitId":"Jaylenlee"},"content":"            String searchWord \u003d command.substring(5);"},{"lineNumber":192,"author":{"gitId":"Jaylenlee"},"content":"            if (searchWord.equals(\" \") || searchWord.equals(\"\")) {"},{"lineNumber":193,"author":{"gitId":"Jaylenlee"},"content":"                throw new EmptyActionException();"},{"lineNumber":194,"author":{"gitId":"Jaylenlee"},"content":"            }"},{"lineNumber":195,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":196,"author":{"gitId":"Jaylenlee"},"content":"            int size \u003d this.taskList.size();"},{"lineNumber":197,"author":{"gitId":"Jaylenlee"},"content":"            List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":198,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":199,"author":{"gitId":"Jaylenlee"},"content":"            for (int i \u003d 0; i \u003c size; i++) {"},{"lineNumber":200,"author":{"gitId":"Jaylenlee"},"content":"                Task task \u003d this.taskList.getTask(i);"},{"lineNumber":201,"author":{"gitId":"Jaylenlee"},"content":"                String taskInfo \u003d task.toString();"},{"lineNumber":202,"author":{"gitId":"Jaylenlee"},"content":"                if (taskInfo.contains(searchWord)) {"},{"lineNumber":203,"author":{"gitId":"Jaylenlee"},"content":"                    list.add(task);"},{"lineNumber":204,"author":{"gitId":"Jaylenlee"},"content":"                }"},{"lineNumber":205,"author":{"gitId":"Jaylenlee"},"content":"            }"},{"lineNumber":206,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":207,"author":{"gitId":"Jaylenlee"},"content":"            TaskList filterList \u003d new TaskList(list);"},{"lineNumber":208,"author":{"gitId":"Jaylenlee"},"content":"            return filterList.showList();"},{"lineNumber":209,"author":{"gitId":"Jaylenlee"},"content":"        } catch (DukeException e) {"},{"lineNumber":210,"author":{"gitId":"Jaylenlee"},"content":"            return e.toString();"},{"lineNumber":211,"author":{"gitId":"Jaylenlee"},"content":"        }"},{"lineNumber":212,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":214,"author":{"gitId":"Jaylenlee"},"content":"    private String sortCommand() {"},{"lineNumber":215,"author":{"gitId":"Jaylenlee"},"content":"        this.taskList.sort(new TaskComparator());"},{"lineNumber":216,"author":{"gitId":"Jaylenlee"},"content":"        return this.taskList.showList();"},{"lineNumber":217,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":218,"author":{"gitId":"Jaylenlee"},"content":"}"}],"authorContributionMap":{"Jaylenlee":218}},{"path":"src/main/java/processor/FileToTaskListConverter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jaylenlee"},"content":"package processor;"},{"lineNumber":2,"author":{"gitId":"Jaylenlee"},"content":"import java.io.File;"},{"lineNumber":3,"author":{"gitId":"Jaylenlee"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"Jaylenlee"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"Jaylenlee"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"Jaylenlee"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"Jaylenlee"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"Jaylenlee"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"Jaylenlee"},"content":"import java.util.regex.PatternSyntaxException;"},{"lineNumber":10,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":11,"author":{"gitId":"Jaylenlee"},"content":"import exception.DukeException;"},{"lineNumber":12,"author":{"gitId":"Jaylenlee"},"content":"import exception.FileCorruptedException;"},{"lineNumber":13,"author":{"gitId":"Jaylenlee"},"content":"import task.DeadlineTask;"},{"lineNumber":14,"author":{"gitId":"Jaylenlee"},"content":"import task.EventTask;"},{"lineNumber":15,"author":{"gitId":"Jaylenlee"},"content":"import task.Task;"},{"lineNumber":16,"author":{"gitId":"Jaylenlee"},"content":"import task.TaskList;"},{"lineNumber":17,"author":{"gitId":"Jaylenlee"},"content":"import task.ToDoTask;"},{"lineNumber":18,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":19,"author":{"gitId":"Jaylenlee"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"Jaylenlee"},"content":" * Converts data from file to TaskList class."},{"lineNumber":21,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":22,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003eThe \u0027FileToTaskListConverter\u0027 supports operators, supported include: \u003c/p\u003e"},{"lineNumber":23,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":24,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003e (i) converting file to TaskList object \u003c/p\u003e"},{"lineNumber":25,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":26,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003e (ii) saving TaskList data into file provided \u003c/p\u003e"},{"lineNumber":27,"author":{"gitId":"Jaylenlee"},"content":" */"},{"lineNumber":28,"author":{"gitId":"Jaylenlee"},"content":"public abstract class FileToTaskListConverter {"},{"lineNumber":29,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":30,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"Jaylenlee"},"content":"     * Converts file to TaskList object."},{"lineNumber":32,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"Jaylenlee"},"content":"     * @param data the file loaded to be converted."},{"lineNumber":34,"author":{"gitId":"Jaylenlee"},"content":"     * @return a TaskList containing all tasks inscribed in file"},{"lineNumber":35,"author":{"gitId":"Jaylenlee"},"content":"     * @throws FileCorruptedException If file is not formatted in the correct order. ie"},{"lineNumber":36,"author":{"gitId":"Jaylenlee"},"content":"     *  not in [type]//[status]//[task description]//[date if applicable]//[time if applicable]"},{"lineNumber":37,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Jaylenlee"},"content":"    public static TaskList convert(File data) throws FileCorruptedException {"},{"lineNumber":39,"author":{"gitId":"Jaylenlee"},"content":"        List\u003cString\u003e dataList \u003d loadStringData(data);"},{"lineNumber":40,"author":{"gitId":"Jaylenlee"},"content":"        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":42,"author":{"gitId":"Jaylenlee"},"content":"        for (int i \u003d 0; i \u003c dataList.size(); i++) {"},{"lineNumber":43,"author":{"gitId":"Jaylenlee"},"content":"            list.add(getTaskFromData(dataList.get(i)));"},{"lineNumber":44,"author":{"gitId":"Jaylenlee"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":46,"author":{"gitId":"Jaylenlee"},"content":"        return new TaskList(list);"},{"lineNumber":47,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":49,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"Jaylenlee"},"content":"     * Saves TaskList to file provided."},{"lineNumber":51,"author":{"gitId":"Jaylenlee"},"content":"     * Data is stored in [type]//[status]//[task description]//[date if applicable]//[time if applicable]"},{"lineNumber":52,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"Jaylenlee"},"content":"     * @param list the TaskList to be saved."},{"lineNumber":54,"author":{"gitId":"Jaylenlee"},"content":"     * @param file the file to be saved in."},{"lineNumber":55,"author":{"gitId":"Jaylenlee"},"content":"     * @return save status of TaskList. True if successful, false otherwise."},{"lineNumber":56,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"Jaylenlee"},"content":"    public static boolean saveToFile(TaskList list, File file) {"},{"lineNumber":58,"author":{"gitId":"Jaylenlee"},"content":"        try {"},{"lineNumber":59,"author":{"gitId":"Jaylenlee"},"content":"            FileWriter fw \u003d new FileWriter(file);"},{"lineNumber":60,"author":{"gitId":"Jaylenlee"},"content":"            StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":61,"author":{"gitId":"Jaylenlee"},"content":"            for (int i \u003d 0; i \u003c list.size(); i++) {"},{"lineNumber":62,"author":{"gitId":"Jaylenlee"},"content":"                Task task \u003d list.getTask(i);"},{"lineNumber":63,"author":{"gitId":"Jaylenlee"},"content":"                sb.append((task.getDetails()));"},{"lineNumber":64,"author":{"gitId":"Jaylenlee"},"content":"                sb.append(\"\\n\");"},{"lineNumber":65,"author":{"gitId":"Jaylenlee"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"Jaylenlee"},"content":"            fw.write(sb.toString());"},{"lineNumber":67,"author":{"gitId":"Jaylenlee"},"content":"            fw.close();"},{"lineNumber":68,"author":{"gitId":"Jaylenlee"},"content":"            return true;"},{"lineNumber":69,"author":{"gitId":"Jaylenlee"},"content":"        } catch (IOException e) {"},{"lineNumber":70,"author":{"gitId":"Jaylenlee"},"content":"            System.out.println(\"Unable to save\");"},{"lineNumber":71,"author":{"gitId":"Jaylenlee"},"content":"            return false;"},{"lineNumber":72,"author":{"gitId":"Jaylenlee"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":75,"author":{"gitId":"Jaylenlee"},"content":"    private static List\u003cString\u003e loadStringData(File data) {"},{"lineNumber":76,"author":{"gitId":"Jaylenlee"},"content":"        try {"},{"lineNumber":77,"author":{"gitId":"Jaylenlee"},"content":"            List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":78,"author":{"gitId":"Jaylenlee"},"content":"            Scanner sc \u003d new Scanner(data);"},{"lineNumber":79,"author":{"gitId":"Jaylenlee"},"content":"            while (sc.hasNext()) {"},{"lineNumber":80,"author":{"gitId":"Jaylenlee"},"content":"                list.add(sc.nextLine());"},{"lineNumber":81,"author":{"gitId":"Jaylenlee"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"Jaylenlee"},"content":"            sc.close();"},{"lineNumber":83,"author":{"gitId":"Jaylenlee"},"content":"            return list;"},{"lineNumber":84,"author":{"gitId":"Jaylenlee"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":85,"author":{"gitId":"Jaylenlee"},"content":"            File directory \u003d data.getParentFile();"},{"lineNumber":86,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":87,"author":{"gitId":"Jaylenlee"},"content":"            try {"},{"lineNumber":88,"author":{"gitId":"Jaylenlee"},"content":"                if (!directory.exists() || !directory.isDirectory()) {"},{"lineNumber":89,"author":{"gitId":"Jaylenlee"},"content":"                    directory.mkdirs();"},{"lineNumber":90,"author":{"gitId":"Jaylenlee"},"content":"                }"},{"lineNumber":91,"author":{"gitId":"Jaylenlee"},"content":"                data.createNewFile();"},{"lineNumber":92,"author":{"gitId":"Jaylenlee"},"content":"            } catch (IOException ioe) {"},{"lineNumber":93,"author":{"gitId":"Jaylenlee"},"content":"                System.out.println(\"Unable to open/create file\");"},{"lineNumber":94,"author":{"gitId":"Jaylenlee"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"Jaylenlee"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":96,"author":{"gitId":"Jaylenlee"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":99,"author":{"gitId":"Jaylenlee"},"content":"    private static Task getTaskFromData(String info) throws FileCorruptedException {"},{"lineNumber":100,"author":{"gitId":"Jaylenlee"},"content":"        try {"},{"lineNumber":101,"author":{"gitId":"Jaylenlee"},"content":"            String[] words \u003d info.split(\"//\");"},{"lineNumber":102,"author":{"gitId":"Jaylenlee"},"content":"            char type \u003d words[0].charAt(0);"},{"lineNumber":103,"author":{"gitId":"Jaylenlee"},"content":"            boolean isDone \u003d words[1].equals(\"O\");"},{"lineNumber":104,"author":{"gitId":"Jaylenlee"},"content":"            String description \u003d words[2];"},{"lineNumber":105,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":106,"author":{"gitId":"Jaylenlee"},"content":"            switch (type) {"},{"lineNumber":107,"author":{"gitId":"Jaylenlee"},"content":"            case \u0027T\u0027:"},{"lineNumber":108,"author":{"gitId":"Jaylenlee"},"content":"                return new ToDoTask(description, isDone);"},{"lineNumber":109,"author":{"gitId":"Jaylenlee"},"content":"            case \u0027D\u0027:"},{"lineNumber":110,"author":{"gitId":"Jaylenlee"},"content":"                return new DeadlineTask(description, words[3] + \" \" + words[4], isDone);"},{"lineNumber":111,"author":{"gitId":"Jaylenlee"},"content":"            case \u0027E\u0027:"},{"lineNumber":112,"author":{"gitId":"Jaylenlee"},"content":"                return new EventTask(description, words[3] + \" \" + words[4], isDone);"},{"lineNumber":113,"author":{"gitId":"Jaylenlee"},"content":"            default:"},{"lineNumber":114,"author":{"gitId":"Jaylenlee"},"content":"                return new Task(\"No Task !!!!\");"},{"lineNumber":115,"author":{"gitId":"Jaylenlee"},"content":"            }"},{"lineNumber":116,"author":{"gitId":"Jaylenlee"},"content":"        } catch (DukeException | IndexOutOfBoundsException | PatternSyntaxException e) {"},{"lineNumber":117,"author":{"gitId":"Jaylenlee"},"content":"            throw new FileCorruptedException();"},{"lineNumber":118,"author":{"gitId":"Jaylenlee"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"Jaylenlee"},"content":"}"}],"authorContributionMap":{"Jaylenlee":120}},{"path":"src/main/java/processor/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jaylenlee"},"content":"package processor;"},{"lineNumber":2,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":3,"author":{"gitId":"Jaylenlee"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"Jaylenlee"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"Jaylenlee"},"content":"import java.nio.file.Paths;"},{"lineNumber":6,"author":{"gitId":"Jaylenlee"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":8,"author":{"gitId":"Jaylenlee"},"content":"import exception.FileCorruptedException;"},{"lineNumber":9,"author":{"gitId":"Jaylenlee"},"content":"import task.TaskList;"},{"lineNumber":10,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":11,"author":{"gitId":"Jaylenlee"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Jaylenlee"},"content":" * Interacts with users command."},{"lineNumber":13,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":14,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003eThe \u0027UI\u0027 supports operators, supported include: \u003c/p\u003e"},{"lineNumber":15,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":16,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003e (i) interacting with user \u003c/p\u003e"},{"lineNumber":17,"author":{"gitId":"Jaylenlee"},"content":" */"},{"lineNumber":18,"author":{"gitId":"Jaylenlee"},"content":"public class UI {"},{"lineNumber":19,"author":{"gitId":"Jaylenlee"},"content":"    private static final String GREETING \u003d \"     Hello! I\u0027m Duke\\n\""},{"lineNumber":20,"author":{"gitId":"Jaylenlee"},"content":"            + \"     What can I do for you?\\n\";"},{"lineNumber":21,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":22,"author":{"gitId":"Jaylenlee"},"content":"    private static final String ENDWORDS \u003d \"     Bye. Hope to see you again soon!\\n\";"},{"lineNumber":23,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":24,"author":{"gitId":"Jaylenlee"},"content":"    private CommandProcessor commandProcessor;"},{"lineNumber":25,"author":{"gitId":"Jaylenlee"},"content":"    private Path filePath;"},{"lineNumber":26,"author":{"gitId":"Jaylenlee"},"content":"    private TaskList taskList;"},{"lineNumber":27,"author":{"gitId":"Jaylenlee"},"content":"    private boolean isDone;"},{"lineNumber":28,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":29,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Jaylenlee"},"content":"     * Constructor for this object."},{"lineNumber":31,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"Jaylenlee"},"content":"     * Loads data file and creates one if it does not exists"},{"lineNumber":33,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"Jaylenlee"},"content":"    public UI() {"},{"lineNumber":35,"author":{"gitId":"Jaylenlee"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":36,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":37,"author":{"gitId":"Jaylenlee"},"content":"        String home \u003d System.getProperty(\"user.home\");"},{"lineNumber":38,"author":{"gitId":"Jaylenlee"},"content":"        this.filePath \u003d Paths.get(home, \"Downloads\", \"CS2103 IP\", \"data\", \"duke.txt\");"},{"lineNumber":39,"author":{"gitId":"Jaylenlee"},"content":"        File file \u003d this.filePath.toFile();"},{"lineNumber":40,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":41,"author":{"gitId":"Jaylenlee"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"Jaylenlee"},"content":"            this.taskList \u003d FileToTaskListConverter.convert(file);"},{"lineNumber":43,"author":{"gitId":"Jaylenlee"},"content":"        } catch (FileCorruptedException fce) {"},{"lineNumber":44,"author":{"gitId":"Jaylenlee"},"content":"            this.taskList \u003d new TaskList();"},{"lineNumber":45,"author":{"gitId":"Jaylenlee"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":47,"author":{"gitId":"Jaylenlee"},"content":"        this.commandProcessor \u003d new CommandProcessor(this.taskList);"},{"lineNumber":48,"author":{"gitId":"Jaylenlee"},"content":"        isDone \u003d false;"},{"lineNumber":49,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":50,"author":{"gitId":"Jaylenlee"},"content":"        sc.close();"},{"lineNumber":51,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":53,"author":{"gitId":"Jaylenlee"},"content":"    public static String getGreeting() {"},{"lineNumber":54,"author":{"gitId":"Jaylenlee"},"content":"        return GREETING;"},{"lineNumber":55,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":57,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"Jaylenlee"},"content":"     * Interacts with user input command."},{"lineNumber":59,"author":{"gitId":"Jaylenlee"},"content":"     * User\u0027s command entered through interface is stored and processed"},{"lineNumber":60,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"Jaylenlee"},"content":"    public String interact(String command) {"},{"lineNumber":62,"author":{"gitId":"Jaylenlee"},"content":"        if (command.equals(\"bye\")) {"},{"lineNumber":63,"author":{"gitId":"Jaylenlee"},"content":"            FileToTaskListConverter.saveToFile(this.taskList, this.filePath.toFile());"},{"lineNumber":64,"author":{"gitId":"Jaylenlee"},"content":"            isDone \u003d true;"},{"lineNumber":65,"author":{"gitId":"Jaylenlee"},"content":"            return UI.ENDWORDS;"},{"lineNumber":66,"author":{"gitId":"Jaylenlee"},"content":"        } else {"},{"lineNumber":67,"author":{"gitId":"Jaylenlee"},"content":"            return this.commandProcessor.runCommand(command);"},{"lineNumber":68,"author":{"gitId":"Jaylenlee"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":71,"author":{"gitId":"Jaylenlee"},"content":"    public boolean getDoneStatus() {"},{"lineNumber":72,"author":{"gitId":"Jaylenlee"},"content":"        return this.isDone;"},{"lineNumber":73,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"Jaylenlee"},"content":"}"}],"authorContributionMap":{"Jaylenlee":74}},{"path":"src/main/java/task/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jaylenlee"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"Jaylenlee"},"content":"import java.time.DateTimeException;"},{"lineNumber":3,"author":{"gitId":"Jaylenlee"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Jaylenlee"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Jaylenlee"},"content":"import java.util.regex.PatternSyntaxException;"},{"lineNumber":6,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":7,"author":{"gitId":"Jaylenlee"},"content":"import exception.DateTimeInvalidFormatException;"},{"lineNumber":8,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":9,"author":{"gitId":"Jaylenlee"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Jaylenlee"},"content":" * Encapsulates the details of a task with a deadline."},{"lineNumber":11,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":12,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003eThe \u0027DeadlineTask\u0027 class extends from Task class and implement TimeRelated interface."},{"lineNumber":13,"author":{"gitId":"Jaylenlee"},"content":" * It supports operators,"},{"lineNumber":14,"author":{"gitId":"Jaylenlee"},"content":" * supported include: \u003c/p\u003e"},{"lineNumber":15,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":16,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003e (i) getters \u003c/p\u003e"},{"lineNumber":17,"author":{"gitId":"Jaylenlee"},"content":" */"},{"lineNumber":18,"author":{"gitId":"Jaylenlee"},"content":"public class DeadlineTask extends Task implements TimeRelated {"},{"lineNumber":19,"author":{"gitId":"Jaylenlee"},"content":"    public static final String TYPE \u003d \"D\";"},{"lineNumber":20,"author":{"gitId":"Jaylenlee"},"content":"    protected static final DateTimeFormatter DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy kk:mm\");"},{"lineNumber":21,"author":{"gitId":"Jaylenlee"},"content":"    protected LocalDateTime dateTime;"},{"lineNumber":22,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":23,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Jaylenlee"},"content":"     * Constructor to create this object."},{"lineNumber":25,"author":{"gitId":"Jaylenlee"},"content":"     * Use dateTimeString inputted to get LocalDateTime object"},{"lineNumber":26,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"Jaylenlee"},"content":"     * @param description the description of the task."},{"lineNumber":28,"author":{"gitId":"Jaylenlee"},"content":"     * @param dateTimeString the end dateTime of the task."},{"lineNumber":29,"author":{"gitId":"Jaylenlee"},"content":"     * @throws DateTimeInvalidFormatException if dateTimeString is not formatted in \"YYYY-MM-DD HHmm\""},{"lineNumber":30,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Jaylenlee"},"content":"    public DeadlineTask(String description, String dateTimeString) throws DateTimeInvalidFormatException {"},{"lineNumber":32,"author":{"gitId":"Jaylenlee"},"content":"        super(description);"},{"lineNumber":33,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":34,"author":{"gitId":"Jaylenlee"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"Jaylenlee"},"content":"            String[] arr \u003d dateTimeString.split(\" \"); // dateTimeString will be in  \"YYYY-MM-DD HHmm\" format"},{"lineNumber":36,"author":{"gitId":"Jaylenlee"},"content":"            int year \u003d Integer.parseInt(arr[0].substring(0, 4));"},{"lineNumber":37,"author":{"gitId":"Jaylenlee"},"content":"            int mth \u003d Integer.parseInt(arr[0].substring(5, 7));"},{"lineNumber":38,"author":{"gitId":"Jaylenlee"},"content":"            int day \u003d Integer.parseInt(arr[0].substring(8));"},{"lineNumber":39,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":40,"author":{"gitId":"Jaylenlee"},"content":"            int hour \u003d Integer.parseInt(arr[1].substring(0, 2));"},{"lineNumber":41,"author":{"gitId":"Jaylenlee"},"content":"            int min \u003d Integer.parseInt(arr[1].substring(2));"},{"lineNumber":42,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":43,"author":{"gitId":"Jaylenlee"},"content":"            LocalDateTime dateTime \u003d LocalDateTime.of(year, mth, day, hour, min);"},{"lineNumber":44,"author":{"gitId":"Jaylenlee"},"content":"            this.dateTime \u003d dateTime;"},{"lineNumber":45,"author":{"gitId":"Jaylenlee"},"content":"        } catch (NumberFormatException nfe) { // Integer cannot parse string"},{"lineNumber":46,"author":{"gitId":"Jaylenlee"},"content":"            throw new DateTimeInvalidFormatException("},{"lineNumber":47,"author":{"gitId":"Jaylenlee"},"content":"                    \"Action invalid. Date and Time Format incorrect.\\n\""},{"lineNumber":48,"author":{"gitId":"Jaylenlee"},"content":"                            + \"     Correct Format: YYYY-MM-DD HHmm\""},{"lineNumber":49,"author":{"gitId":"Jaylenlee"},"content":"            );"},{"lineNumber":50,"author":{"gitId":"Jaylenlee"},"content":"        } catch (IndexOutOfBoundsException ioobe) { // String formatted different from expected"},{"lineNumber":51,"author":{"gitId":"Jaylenlee"},"content":"            throw new DateTimeInvalidFormatException("},{"lineNumber":52,"author":{"gitId":"Jaylenlee"},"content":"                    \"Action invalid. Date and Time Format incorrect.\\n\""},{"lineNumber":53,"author":{"gitId":"Jaylenlee"},"content":"                            + \"     Correct Format: YYYY-MM-DD HHmm\""},{"lineNumber":54,"author":{"gitId":"Jaylenlee"},"content":"            );"},{"lineNumber":55,"author":{"gitId":"Jaylenlee"},"content":"        } catch (PatternSyntaxException pse) { // No space between date and time"},{"lineNumber":56,"author":{"gitId":"Jaylenlee"},"content":"            throw new DateTimeInvalidFormatException("},{"lineNumber":57,"author":{"gitId":"Jaylenlee"},"content":"                    \"Action invalid. Date and Time Format incorrect.\\n\""},{"lineNumber":58,"author":{"gitId":"Jaylenlee"},"content":"                            + \"     Correct Format: YYYY-MM-DD HHmm\""},{"lineNumber":59,"author":{"gitId":"Jaylenlee"},"content":"            );"},{"lineNumber":60,"author":{"gitId":"Jaylenlee"},"content":"        } catch (DateTimeException dte) { // invalid date time eg 9999-13-32 2400"},{"lineNumber":61,"author":{"gitId":"Jaylenlee"},"content":"            throw new DateTimeInvalidFormatException("},{"lineNumber":62,"author":{"gitId":"Jaylenlee"},"content":"                    \"Action invalid. Date and Time value invalid.\\n\""},{"lineNumber":63,"author":{"gitId":"Jaylenlee"},"content":"            );"},{"lineNumber":64,"author":{"gitId":"Jaylenlee"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":67,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"Jaylenlee"},"content":"     * Constructor to create this object."},{"lineNumber":69,"author":{"gitId":"Jaylenlee"},"content":"     * Use dateTimeString inputted to get LocalDateTime object"},{"lineNumber":70,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"Jaylenlee"},"content":"     * @param description the description of the task."},{"lineNumber":72,"author":{"gitId":"Jaylenlee"},"content":"     * @param dateTimeString the end dateTime of the task."},{"lineNumber":73,"author":{"gitId":"Jaylenlee"},"content":"     * @param isDone completion status of this object."},{"lineNumber":74,"author":{"gitId":"Jaylenlee"},"content":"     * @throws DateTimeInvalidFormatException if dateTimeString is not formatted in \"YYYY-MM-DD HHmm\""},{"lineNumber":75,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"Jaylenlee"},"content":"    public DeadlineTask(String description, String dateTimeString, boolean isDone)"},{"lineNumber":77,"author":{"gitId":"Jaylenlee"},"content":"            throws DateTimeInvalidFormatException {"},{"lineNumber":78,"author":{"gitId":"Jaylenlee"},"content":"        super(description, isDone);"},{"lineNumber":79,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":80,"author":{"gitId":"Jaylenlee"},"content":"        try {"},{"lineNumber":81,"author":{"gitId":"Jaylenlee"},"content":"            String[] arr \u003d dateTimeString.split(\" \"); // dateTimeString will be in  \"YYYY-MM-DD HHmm\" format"},{"lineNumber":82,"author":{"gitId":"Jaylenlee"},"content":"            int year \u003d Integer.parseInt(arr[0].substring(0, 4));"},{"lineNumber":83,"author":{"gitId":"Jaylenlee"},"content":"            int mth \u003d Integer.parseInt(arr[0].substring(5, 7));"},{"lineNumber":84,"author":{"gitId":"Jaylenlee"},"content":"            int day \u003d Integer.parseInt(arr[0].substring(8));"},{"lineNumber":85,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":86,"author":{"gitId":"Jaylenlee"},"content":"            int hour \u003d Integer.parseInt(arr[1].substring(0, 2));"},{"lineNumber":87,"author":{"gitId":"Jaylenlee"},"content":"            int min \u003d Integer.parseInt(arr[1].substring(2));"},{"lineNumber":88,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":89,"author":{"gitId":"Jaylenlee"},"content":"            LocalDateTime dateTime \u003d LocalDateTime.of(year, mth, day, hour, min);"},{"lineNumber":90,"author":{"gitId":"Jaylenlee"},"content":"            this.dateTime \u003d dateTime;"},{"lineNumber":91,"author":{"gitId":"Jaylenlee"},"content":"        } catch (NumberFormatException nfe) { // Integer cannot parse string"},{"lineNumber":92,"author":{"gitId":"Jaylenlee"},"content":"            throw new DateTimeInvalidFormatException("},{"lineNumber":93,"author":{"gitId":"Jaylenlee"},"content":"                    \"Action invalid. Date and Time Format incorrect.\\n\""},{"lineNumber":94,"author":{"gitId":"Jaylenlee"},"content":"                            + \"     Correct Format: YYYY-MM-DD HHmm\""},{"lineNumber":95,"author":{"gitId":"Jaylenlee"},"content":"            );"},{"lineNumber":96,"author":{"gitId":"Jaylenlee"},"content":"        } catch (IndexOutOfBoundsException ioobe) { // String formatted different from expected"},{"lineNumber":97,"author":{"gitId":"Jaylenlee"},"content":"            throw new DateTimeInvalidFormatException("},{"lineNumber":98,"author":{"gitId":"Jaylenlee"},"content":"                    \"Action invalid. Date and Time Format incorrect.\\n\""},{"lineNumber":99,"author":{"gitId":"Jaylenlee"},"content":"                            + \"     Correct Format: YYYY-MM-DD HHmm\""},{"lineNumber":100,"author":{"gitId":"Jaylenlee"},"content":"            );"},{"lineNumber":101,"author":{"gitId":"Jaylenlee"},"content":"        } catch (PatternSyntaxException pse) { // No space between date and time"},{"lineNumber":102,"author":{"gitId":"Jaylenlee"},"content":"            throw new DateTimeInvalidFormatException("},{"lineNumber":103,"author":{"gitId":"Jaylenlee"},"content":"                    \"Action invalid. Date and Time Format incorrect.\\n\""},{"lineNumber":104,"author":{"gitId":"Jaylenlee"},"content":"                            + \"     Correct Format: YYYY-MM-DD HHmm\""},{"lineNumber":105,"author":{"gitId":"Jaylenlee"},"content":"            );"},{"lineNumber":106,"author":{"gitId":"Jaylenlee"},"content":"        } catch (DateTimeException dte) { // invalid date time eg 9999-13-32 2400"},{"lineNumber":107,"author":{"gitId":"Jaylenlee"},"content":"            throw new DateTimeInvalidFormatException("},{"lineNumber":108,"author":{"gitId":"Jaylenlee"},"content":"                    \"Action invalid. Date and Time value invalid.\\n\""},{"lineNumber":109,"author":{"gitId":"Jaylenlee"},"content":"            );"},{"lineNumber":110,"author":{"gitId":"Jaylenlee"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":113,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"Jaylenlee"},"content":"     * Gets details of the task in [type]//[status]//[description]//[date]//[time] format"},{"lineNumber":115,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":116,"author":{"gitId":"Jaylenlee"},"content":"     * @return details of the task."},{"lineNumber":117,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"Jaylenlee"},"content":"    @Override"},{"lineNumber":119,"author":{"gitId":"Jaylenlee"},"content":"    public String getDetails() {"},{"lineNumber":120,"author":{"gitId":"Jaylenlee"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":121,"author":{"gitId":"Jaylenlee"},"content":"        sb.append(\"D//\");"},{"lineNumber":122,"author":{"gitId":"Jaylenlee"},"content":"        sb.append(getStatusIcon());"},{"lineNumber":123,"author":{"gitId":"Jaylenlee"},"content":"        sb.append(\"//\");"},{"lineNumber":124,"author":{"gitId":"Jaylenlee"},"content":"        sb.append(getDescription() + \"//\");"},{"lineNumber":125,"author":{"gitId":"Jaylenlee"},"content":"        sb.append(getDateInput() + \"//\");"},{"lineNumber":126,"author":{"gitId":"Jaylenlee"},"content":"        sb.append(getTimeInput());"},{"lineNumber":127,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":128,"author":{"gitId":"Jaylenlee"},"content":"        return sb.toString();"},{"lineNumber":129,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":131,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"Jaylenlee"},"content":"     * Gets the type of Tasks."},{"lineNumber":133,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":134,"author":{"gitId":"Jaylenlee"},"content":"     * @return type of Task."},{"lineNumber":135,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"Jaylenlee"},"content":"    @Override"},{"lineNumber":137,"author":{"gitId":"Jaylenlee"},"content":"    public String getType() {"},{"lineNumber":138,"author":{"gitId":"Jaylenlee"},"content":"        return DeadlineTask.TYPE;"},{"lineNumber":139,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":141,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"Jaylenlee"},"content":"     * Gets the date inputted by user in string."},{"lineNumber":143,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":144,"author":{"gitId":"Jaylenlee"},"content":"     * @return date inputted by user."},{"lineNumber":145,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"Jaylenlee"},"content":"    @Override"},{"lineNumber":147,"author":{"gitId":"Jaylenlee"},"content":"    public String getDateInput() {"},{"lineNumber":148,"author":{"gitId":"Jaylenlee"},"content":"        return this.dateTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":149,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":151,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"Jaylenlee"},"content":"     * Gets the date inputted by user in string."},{"lineNumber":153,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":154,"author":{"gitId":"Jaylenlee"},"content":"     * @return time inputted by user."},{"lineNumber":155,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"Jaylenlee"},"content":"    @Override"},{"lineNumber":157,"author":{"gitId":"Jaylenlee"},"content":"    public String getTimeInput() {"},{"lineNumber":158,"author":{"gitId":"Jaylenlee"},"content":"        return this.dateTime.format(DateTimeFormatter.ofPattern(\"kkmm\"));"},{"lineNumber":159,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":161,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":162,"author":{"gitId":"Jaylenlee"},"content":"     * String representation of this object."},{"lineNumber":163,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":164,"author":{"gitId":"Jaylenlee"},"content":"     * @return string representation of this object ([type][statusIcon] description (by: date time))."},{"lineNumber":165,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":166,"author":{"gitId":"Jaylenlee"},"content":"    @Override"},{"lineNumber":167,"author":{"gitId":"Jaylenlee"},"content":"    public String toString() {"},{"lineNumber":168,"author":{"gitId":"Jaylenlee"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.dateTime.format(DeadlineTask.DATE_TIME_FORMAT) + \")\";"},{"lineNumber":169,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"Jaylenlee"},"content":"}"}],"authorContributionMap":{"Jaylenlee":170}},{"path":"src/main/java/task/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jaylenlee"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"Jaylenlee"},"content":"import java.time.DateTimeException;"},{"lineNumber":3,"author":{"gitId":"Jaylenlee"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Jaylenlee"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"Jaylenlee"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"Jaylenlee"},"content":"import java.util.regex.PatternSyntaxException;"},{"lineNumber":7,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":8,"author":{"gitId":"Jaylenlee"},"content":"import exception.DateTimeInvalidFormatException;"},{"lineNumber":9,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":10,"author":{"gitId":"Jaylenlee"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Jaylenlee"},"content":" * Encapsulates the details of a task with a event time range."},{"lineNumber":12,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":13,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003eThe \u0027EventTask\u0027 class extends from Task class and implement TimeRelated interface."},{"lineNumber":14,"author":{"gitId":"Jaylenlee"},"content":" * It supports operators,supports operators,"},{"lineNumber":15,"author":{"gitId":"Jaylenlee"},"content":" * supported include: \u003c/p\u003e"},{"lineNumber":16,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":17,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003e (i) getters \u003c/p\u003e"},{"lineNumber":18,"author":{"gitId":"Jaylenlee"},"content":" */"},{"lineNumber":19,"author":{"gitId":"Jaylenlee"},"content":"public class EventTask extends Task implements TimeRelated {"},{"lineNumber":20,"author":{"gitId":"Jaylenlee"},"content":"    public static final String TYPE \u003d \"E\";"},{"lineNumber":21,"author":{"gitId":"Jaylenlee"},"content":"    protected static final DateTimeFormatter TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"kk:mm\");"},{"lineNumber":22,"author":{"gitId":"Jaylenlee"},"content":"    protected static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"},{"lineNumber":23,"author":{"gitId":"Jaylenlee"},"content":"    protected LocalDate date;"},{"lineNumber":24,"author":{"gitId":"Jaylenlee"},"content":"    protected LocalTime startTime;"},{"lineNumber":25,"author":{"gitId":"Jaylenlee"},"content":"    protected LocalTime endTime;"},{"lineNumber":26,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":27,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"Jaylenlee"},"content":"     * Constructor to create this object."},{"lineNumber":29,"author":{"gitId":"Jaylenlee"},"content":"     * Use dateTimeString inputted to get LocalTime and LocalTime."},{"lineNumber":30,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"Jaylenlee"},"content":"     * @param description the description of the task."},{"lineNumber":32,"author":{"gitId":"Jaylenlee"},"content":"     * @param dateTimeString the end dateTime of the task."},{"lineNumber":33,"author":{"gitId":"Jaylenlee"},"content":"     * @throws DateTimeInvalidFormatException if dateTimeString is not formatted in \"YYYY-MM-DD HHmm-HHmm\""},{"lineNumber":34,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Jaylenlee"},"content":"    public EventTask(String description, String dateTimeString) throws DateTimeInvalidFormatException {"},{"lineNumber":36,"author":{"gitId":"Jaylenlee"},"content":"        super(description);"},{"lineNumber":37,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":38,"author":{"gitId":"Jaylenlee"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"Jaylenlee"},"content":"            // dateTimeString will be in  \"YYYY-MM-DD kkmm-kkmm\" format"},{"lineNumber":40,"author":{"gitId":"Jaylenlee"},"content":"            String[] arr \u003d dateTimeString.split(\" \");"},{"lineNumber":41,"author":{"gitId":"Jaylenlee"},"content":"            int year \u003d Integer.parseInt(arr[0].substring(0, 4));"},{"lineNumber":42,"author":{"gitId":"Jaylenlee"},"content":"            int mth \u003d Integer.parseInt(arr[0].substring(5, 7));"},{"lineNumber":43,"author":{"gitId":"Jaylenlee"},"content":"            int day \u003d Integer.parseInt(arr[0].substring(8));"},{"lineNumber":44,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":45,"author":{"gitId":"Jaylenlee"},"content":"            int startHour \u003d Integer.parseInt(arr[1].substring(0, 2));"},{"lineNumber":46,"author":{"gitId":"Jaylenlee"},"content":"            int startMin \u003d Integer.parseInt(arr[1].substring(2, 4));"},{"lineNumber":47,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":48,"author":{"gitId":"Jaylenlee"},"content":"            int endHour \u003d Integer.parseInt(arr[1].substring(5, 7));"},{"lineNumber":49,"author":{"gitId":"Jaylenlee"},"content":"            int endMin \u003d Integer.parseInt(arr[1].substring(7));"},{"lineNumber":50,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":51,"author":{"gitId":"Jaylenlee"},"content":"            if (endHour \u003c startHour || (endHour \u003d\u003d startHour \u0026\u0026 endMin \u003c startMin)) {"},{"lineNumber":52,"author":{"gitId":"Jaylenlee"},"content":"                throw new DateTimeInvalidFormatException("},{"lineNumber":53,"author":{"gitId":"Jaylenlee"},"content":"                        \"Action invalid. End Time less than Start Time.\\n\""},{"lineNumber":54,"author":{"gitId":"Jaylenlee"},"content":"                );"},{"lineNumber":55,"author":{"gitId":"Jaylenlee"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":57,"author":{"gitId":"Jaylenlee"},"content":"            LocalDate date \u003d LocalDate.of(year, mth, day);"},{"lineNumber":58,"author":{"gitId":"Jaylenlee"},"content":"            LocalTime startTime \u003d LocalTime.of(startHour, startMin);"},{"lineNumber":59,"author":{"gitId":"Jaylenlee"},"content":"            LocalTime endTime \u003d LocalTime.of(endHour, endMin);"},{"lineNumber":60,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":61,"author":{"gitId":"Jaylenlee"},"content":"            this.date \u003d date;"},{"lineNumber":62,"author":{"gitId":"Jaylenlee"},"content":"            this.startTime \u003d startTime;"},{"lineNumber":63,"author":{"gitId":"Jaylenlee"},"content":"            this.endTime \u003d endTime;"},{"lineNumber":64,"author":{"gitId":"Jaylenlee"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":65,"author":{"gitId":"Jaylenlee"},"content":"            throw new DateTimeInvalidFormatException("},{"lineNumber":66,"author":{"gitId":"Jaylenlee"},"content":"                    \"Action invalid. Date and Time Format incorrect.\\n\""},{"lineNumber":67,"author":{"gitId":"Jaylenlee"},"content":"                            + \"     Correct Format: YYYY-MM-DD HHmm-HHmm\""},{"lineNumber":68,"author":{"gitId":"Jaylenlee"},"content":"            );"},{"lineNumber":69,"author":{"gitId":"Jaylenlee"},"content":"        } catch (IndexOutOfBoundsException ioobe) {"},{"lineNumber":70,"author":{"gitId":"Jaylenlee"},"content":"            throw new DateTimeInvalidFormatException("},{"lineNumber":71,"author":{"gitId":"Jaylenlee"},"content":"                    \"Action invalid. Date and Time Format incorrect.\\n\""},{"lineNumber":72,"author":{"gitId":"Jaylenlee"},"content":"                            + \"     Correct Format: YYYY-MM-DD HHmm-HHmm\""},{"lineNumber":73,"author":{"gitId":"Jaylenlee"},"content":"            );"},{"lineNumber":74,"author":{"gitId":"Jaylenlee"},"content":"        } catch (PatternSyntaxException pse) {"},{"lineNumber":75,"author":{"gitId":"Jaylenlee"},"content":"            throw new DateTimeInvalidFormatException("},{"lineNumber":76,"author":{"gitId":"Jaylenlee"},"content":"                    \"Action invalid. Date and Time Format incorrect.\\n\""},{"lineNumber":77,"author":{"gitId":"Jaylenlee"},"content":"                            + \"     Correct Format: YYYY-MM-DD HHmm-HHmm\""},{"lineNumber":78,"author":{"gitId":"Jaylenlee"},"content":"            );"},{"lineNumber":79,"author":{"gitId":"Jaylenlee"},"content":"        } catch (DateTimeException dte) { // invalid date time eg 9999-13-32 2400"},{"lineNumber":80,"author":{"gitId":"Jaylenlee"},"content":"            throw new DateTimeInvalidFormatException("},{"lineNumber":81,"author":{"gitId":"Jaylenlee"},"content":"                    \"Action invalid. Date and Time value invalid.\\n\""},{"lineNumber":82,"author":{"gitId":"Jaylenlee"},"content":"            );"},{"lineNumber":83,"author":{"gitId":"Jaylenlee"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":86,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"Jaylenlee"},"content":"     * Constructor to create this object."},{"lineNumber":88,"author":{"gitId":"Jaylenlee"},"content":"     * Use dateTimeString inputted to get LocalTime and LocalTime."},{"lineNumber":89,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"Jaylenlee"},"content":"     * @param description the description of the task."},{"lineNumber":91,"author":{"gitId":"Jaylenlee"},"content":"     * @param dateTimeString the end dateTime of the task."},{"lineNumber":92,"author":{"gitId":"Jaylenlee"},"content":"     * @param isDone completion status of this object."},{"lineNumber":93,"author":{"gitId":"Jaylenlee"},"content":"     * @throws DateTimeInvalidFormatException if dateTimeString is not formatted in \"YYYY-MM-DD HHmm-HHmm\""},{"lineNumber":94,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"Jaylenlee"},"content":"    public EventTask(String description, String dateTimeString, boolean isDone)"},{"lineNumber":96,"author":{"gitId":"Jaylenlee"},"content":"            throws DateTimeInvalidFormatException {"},{"lineNumber":97,"author":{"gitId":"Jaylenlee"},"content":"        super(description, isDone);"},{"lineNumber":98,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":99,"author":{"gitId":"Jaylenlee"},"content":"        try {"},{"lineNumber":100,"author":{"gitId":"Jaylenlee"},"content":"            // dateTimeString will be in  \"YYYY-MM-DD HHmm-HHmm\" format"},{"lineNumber":101,"author":{"gitId":"Jaylenlee"},"content":"            String[] arr \u003d dateTimeString.split(\" \");"},{"lineNumber":102,"author":{"gitId":"Jaylenlee"},"content":"            int year \u003d Integer.parseInt(arr[0].substring(0, 4));"},{"lineNumber":103,"author":{"gitId":"Jaylenlee"},"content":"            int mth \u003d Integer.parseInt(arr[0].substring(5, 7));"},{"lineNumber":104,"author":{"gitId":"Jaylenlee"},"content":"            int day \u003d Integer.parseInt(arr[0].substring(8));"},{"lineNumber":105,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":106,"author":{"gitId":"Jaylenlee"},"content":"            int startHour \u003d Integer.parseInt(arr[1].substring(0, 2));"},{"lineNumber":107,"author":{"gitId":"Jaylenlee"},"content":"            int startMin \u003d Integer.parseInt(arr[1].substring(2, 4));"},{"lineNumber":108,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":109,"author":{"gitId":"Jaylenlee"},"content":"            int endHour \u003d Integer.parseInt(arr[1].substring(5, 7));"},{"lineNumber":110,"author":{"gitId":"Jaylenlee"},"content":"            int endMin \u003d Integer.parseInt(arr[1].substring(7));"},{"lineNumber":111,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":112,"author":{"gitId":"Jaylenlee"},"content":"            if (endHour \u003c startHour || (endHour \u003d\u003d startHour \u0026\u0026 endMin \u003c startMin)) {"},{"lineNumber":113,"author":{"gitId":"Jaylenlee"},"content":"                throw new DateTimeInvalidFormatException("},{"lineNumber":114,"author":{"gitId":"Jaylenlee"},"content":"                        \"Action invalid. End Time less than Start Time.\\n\""},{"lineNumber":115,"author":{"gitId":"Jaylenlee"},"content":"                );"},{"lineNumber":116,"author":{"gitId":"Jaylenlee"},"content":"            }"},{"lineNumber":117,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":118,"author":{"gitId":"Jaylenlee"},"content":"            LocalDate date \u003d LocalDate.of(year, mth, day);"},{"lineNumber":119,"author":{"gitId":"Jaylenlee"},"content":"            LocalTime startTime \u003d LocalTime.of(startHour, startMin);"},{"lineNumber":120,"author":{"gitId":"Jaylenlee"},"content":"            LocalTime endTime \u003d LocalTime.of(endHour, endMin);"},{"lineNumber":121,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":122,"author":{"gitId":"Jaylenlee"},"content":"            this.date \u003d date;"},{"lineNumber":123,"author":{"gitId":"Jaylenlee"},"content":"            this.startTime \u003d startTime;"},{"lineNumber":124,"author":{"gitId":"Jaylenlee"},"content":"            this.endTime \u003d endTime;"},{"lineNumber":125,"author":{"gitId":"Jaylenlee"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":126,"author":{"gitId":"Jaylenlee"},"content":"            throw new DateTimeInvalidFormatException("},{"lineNumber":127,"author":{"gitId":"Jaylenlee"},"content":"                    \"Action invalid. Date and Time Format incorrect.\\n\""},{"lineNumber":128,"author":{"gitId":"Jaylenlee"},"content":"                            + \"     Correct Format: YYYY-MM-DD HHmm-HHmm\""},{"lineNumber":129,"author":{"gitId":"Jaylenlee"},"content":"            );"},{"lineNumber":130,"author":{"gitId":"Jaylenlee"},"content":"        } catch (IndexOutOfBoundsException ioobe) {"},{"lineNumber":131,"author":{"gitId":"Jaylenlee"},"content":"            throw new DateTimeInvalidFormatException("},{"lineNumber":132,"author":{"gitId":"Jaylenlee"},"content":"                    \"Action invalid. Date and Time Format incorrect.\\n\""},{"lineNumber":133,"author":{"gitId":"Jaylenlee"},"content":"                            + \"     Correct Format: YYYY-MM-DD HHmm-HHmm\""},{"lineNumber":134,"author":{"gitId":"Jaylenlee"},"content":"            );"},{"lineNumber":135,"author":{"gitId":"Jaylenlee"},"content":"        } catch (PatternSyntaxException pse) {"},{"lineNumber":136,"author":{"gitId":"Jaylenlee"},"content":"            throw new DateTimeInvalidFormatException("},{"lineNumber":137,"author":{"gitId":"Jaylenlee"},"content":"                    \"Action invalid. Date and Time Format incorrect.\\n\""},{"lineNumber":138,"author":{"gitId":"Jaylenlee"},"content":"                            + \"     Correct Format: YYYY-MM-DD HHmm-HHmm\""},{"lineNumber":139,"author":{"gitId":"Jaylenlee"},"content":"            );"},{"lineNumber":140,"author":{"gitId":"Jaylenlee"},"content":"        } catch (DateTimeException dte) { // invalid date time eg 9999-13-32 2400"},{"lineNumber":141,"author":{"gitId":"Jaylenlee"},"content":"            throw new DateTimeInvalidFormatException("},{"lineNumber":142,"author":{"gitId":"Jaylenlee"},"content":"                    \"Action invalid. Date and Time value invalid.\\n\""},{"lineNumber":143,"author":{"gitId":"Jaylenlee"},"content":"            );"},{"lineNumber":144,"author":{"gitId":"Jaylenlee"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":147,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":148,"author":{"gitId":"Jaylenlee"},"content":"     * Gets details of the task in [type]//[status]//[description]//[date]//[time] format"},{"lineNumber":149,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":150,"author":{"gitId":"Jaylenlee"},"content":"     * @return details of the task."},{"lineNumber":151,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"Jaylenlee"},"content":"    @Override"},{"lineNumber":153,"author":{"gitId":"Jaylenlee"},"content":"    public String getDetails() {"},{"lineNumber":154,"author":{"gitId":"Jaylenlee"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":155,"author":{"gitId":"Jaylenlee"},"content":"        sb.append(\"E//\");"},{"lineNumber":156,"author":{"gitId":"Jaylenlee"},"content":"        sb.append(getStatusIcon());"},{"lineNumber":157,"author":{"gitId":"Jaylenlee"},"content":"        sb.append(\"//\");"},{"lineNumber":158,"author":{"gitId":"Jaylenlee"},"content":"        sb.append(getDescription() + \"//\");"},{"lineNumber":159,"author":{"gitId":"Jaylenlee"},"content":"        sb.append(getDateInput() + \"//\");"},{"lineNumber":160,"author":{"gitId":"Jaylenlee"},"content":"        sb.append(getTimeInput());"},{"lineNumber":161,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":162,"author":{"gitId":"Jaylenlee"},"content":"        return sb.toString();"},{"lineNumber":163,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":165,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":166,"author":{"gitId":"Jaylenlee"},"content":"     * Gets the type of Tasks."},{"lineNumber":167,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":168,"author":{"gitId":"Jaylenlee"},"content":"     * @return type of Task."},{"lineNumber":169,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":170,"author":{"gitId":"Jaylenlee"},"content":"    @Override"},{"lineNumber":171,"author":{"gitId":"Jaylenlee"},"content":"    public String getType() {"},{"lineNumber":172,"author":{"gitId":"Jaylenlee"},"content":"        return EventTask.TYPE;"},{"lineNumber":173,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":175,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":176,"author":{"gitId":"Jaylenlee"},"content":"     * Gets the date inputted by user in string."},{"lineNumber":177,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":178,"author":{"gitId":"Jaylenlee"},"content":"     * @return date inputted by user."},{"lineNumber":179,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":180,"author":{"gitId":"Jaylenlee"},"content":"    @Override"},{"lineNumber":181,"author":{"gitId":"Jaylenlee"},"content":"    public String getDateInput() {"},{"lineNumber":182,"author":{"gitId":"Jaylenlee"},"content":"        return this.date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":183,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":185,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":186,"author":{"gitId":"Jaylenlee"},"content":"     * Gets the date inputted by user in string."},{"lineNumber":187,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":188,"author":{"gitId":"Jaylenlee"},"content":"     * @return time inputted by user."},{"lineNumber":189,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":190,"author":{"gitId":"Jaylenlee"},"content":"    @Override"},{"lineNumber":191,"author":{"gitId":"Jaylenlee"},"content":"    public String getTimeInput() {"},{"lineNumber":192,"author":{"gitId":"Jaylenlee"},"content":"        return this.startTime.format(DateTimeFormatter.ofPattern(\"kkmm\"))"},{"lineNumber":193,"author":{"gitId":"Jaylenlee"},"content":"                + \"-\""},{"lineNumber":194,"author":{"gitId":"Jaylenlee"},"content":"                + this.endTime.format(DateTimeFormatter.ofPattern(\"kkmm\"));"},{"lineNumber":195,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":197,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":198,"author":{"gitId":"Jaylenlee"},"content":"     * String representation of this object."},{"lineNumber":199,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":200,"author":{"gitId":"Jaylenlee"},"content":"     * @return string representation of this object ([type][statusIcon] description (by: date time-time))."},{"lineNumber":201,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":202,"author":{"gitId":"Jaylenlee"},"content":"    @Override"},{"lineNumber":203,"author":{"gitId":"Jaylenlee"},"content":"    public String toString() {"},{"lineNumber":204,"author":{"gitId":"Jaylenlee"},"content":"        return \"[E]\" + super.toString() + \" (at: \""},{"lineNumber":205,"author":{"gitId":"Jaylenlee"},"content":"                + this.date.format(EventTask.DATE_FORMAT) + \" \""},{"lineNumber":206,"author":{"gitId":"Jaylenlee"},"content":"                + this.startTime.format(EventTask.TIME_FORMAT) + \"-\""},{"lineNumber":207,"author":{"gitId":"Jaylenlee"},"content":"                + this.endTime.format(EventTask.TIME_FORMAT) + \")\";"},{"lineNumber":208,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":209,"author":{"gitId":"Jaylenlee"},"content":"}"}],"authorContributionMap":{"Jaylenlee":209}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jaylenlee"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":3,"author":{"gitId":"Jaylenlee"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Jaylenlee"},"content":" * Encapsulates the details of a task."},{"lineNumber":5,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":6,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003eThe \u0027Task\u0027 supports operators, supported include: \u003c/p\u003e"},{"lineNumber":7,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":8,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003e (i) Getters to details \u003c/p\u003e"},{"lineNumber":9,"author":{"gitId":"Jaylenlee"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Jaylenlee"},"content":"public class Task {"},{"lineNumber":11,"author":{"gitId":"Jaylenlee"},"content":"    public static final String TYPE \u003d \"T\";"},{"lineNumber":12,"author":{"gitId":"Jaylenlee"},"content":"    protected String description;"},{"lineNumber":13,"author":{"gitId":"Jaylenlee"},"content":"    protected boolean isDone;"},{"lineNumber":14,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":15,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Jaylenlee"},"content":"     * Constructor to create Task."},{"lineNumber":17,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"Jaylenlee"},"content":"     * @param description the description of the task."},{"lineNumber":19,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Jaylenlee"},"content":"    public Task(String description) {"},{"lineNumber":21,"author":{"gitId":"Jaylenlee"},"content":"        this.description \u003d description;"},{"lineNumber":22,"author":{"gitId":"Jaylenlee"},"content":"        this.isDone \u003d false;"},{"lineNumber":23,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":25,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Jaylenlee"},"content":"     * Constructor to create Task."},{"lineNumber":27,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"Jaylenlee"},"content":"     * @param description the description of the task."},{"lineNumber":29,"author":{"gitId":"Jaylenlee"},"content":"     * @param isDone the completion status of the task."},{"lineNumber":30,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Jaylenlee"},"content":"    public Task(String description, boolean isDone) {"},{"lineNumber":32,"author":{"gitId":"Jaylenlee"},"content":"        this.description \u003d description;"},{"lineNumber":33,"author":{"gitId":"Jaylenlee"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":34,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":36,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Jaylenlee"},"content":"     * Gets statusIcon of this object."},{"lineNumber":38,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"Jaylenlee"},"content":"     * @return statusIcon of this object."},{"lineNumber":40,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Jaylenlee"},"content":"    public String getStatusIcon() {"},{"lineNumber":42,"author":{"gitId":"Jaylenlee"},"content":"        return (isDone ? \"O\" : \"X\");"},{"lineNumber":43,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":45,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"Jaylenlee"},"content":"     * Marks this object as completed."},{"lineNumber":47,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"Jaylenlee"},"content":"    public void markAsDone() {"},{"lineNumber":49,"author":{"gitId":"Jaylenlee"},"content":"        this.isDone \u003d true;"},{"lineNumber":50,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":52,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"Jaylenlee"},"content":"     * Check if this object is done."},{"lineNumber":54,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"Jaylenlee"},"content":"     * @return status of this object, true if completed, false otherwise."},{"lineNumber":56,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"Jaylenlee"},"content":"    public boolean isDone() {"},{"lineNumber":58,"author":{"gitId":"Jaylenlee"},"content":"        return this.isDone;"},{"lineNumber":59,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":61,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"Jaylenlee"},"content":"     * Gets description of this object."},{"lineNumber":63,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"Jaylenlee"},"content":"     * @return description of this object."},{"lineNumber":65,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"Jaylenlee"},"content":"    public String getDescription() {"},{"lineNumber":67,"author":{"gitId":"Jaylenlee"},"content":"        return this.description;"},{"lineNumber":68,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":70,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"Jaylenlee"},"content":"     * Gets details of the task in [type]//[status]//[description] format"},{"lineNumber":72,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"Jaylenlee"},"content":"     * @return details of the task."},{"lineNumber":74,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"Jaylenlee"},"content":"    public String getDetails() {"},{"lineNumber":76,"author":{"gitId":"Jaylenlee"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":77,"author":{"gitId":"Jaylenlee"},"content":"        sb.append(\"T//\");"},{"lineNumber":78,"author":{"gitId":"Jaylenlee"},"content":"        sb.append(getStatusIcon());"},{"lineNumber":79,"author":{"gitId":"Jaylenlee"},"content":"        sb.append(\"//\");"},{"lineNumber":80,"author":{"gitId":"Jaylenlee"},"content":"        sb.append(getDescription() + \"//\");"},{"lineNumber":81,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":82,"author":{"gitId":"Jaylenlee"},"content":"        return sb.toString();"},{"lineNumber":83,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":85,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"Jaylenlee"},"content":"     * Gets the type of Tasks."},{"lineNumber":87,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"Jaylenlee"},"content":"     * @return type of Task."},{"lineNumber":89,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"Jaylenlee"},"content":"    public String getType() {"},{"lineNumber":91,"author":{"gitId":"Jaylenlee"},"content":"        return Task.TYPE;"},{"lineNumber":92,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":94,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"Jaylenlee"},"content":"     * String representation of this object."},{"lineNumber":96,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"Jaylenlee"},"content":"     * @return string representation of this object ([statusIcon] description)."},{"lineNumber":98,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"Jaylenlee"},"content":"    @Override"},{"lineNumber":100,"author":{"gitId":"Jaylenlee"},"content":"    public String toString() {"},{"lineNumber":101,"author":{"gitId":"Jaylenlee"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"},{"lineNumber":102,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"Jaylenlee"},"content":"}"}],"authorContributionMap":{"Jaylenlee":103}},{"path":"src/main/java/task/TaskComparator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jaylenlee"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":3,"author":{"gitId":"Jaylenlee"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":5,"author":{"gitId":"Jaylenlee"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Jaylenlee"},"content":" * Comparator used to compare tasks."},{"lineNumber":7,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":8,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003eThe \u0027TaskComparator\u0027 supports operators, supported include: \u003c/p\u003e"},{"lineNumber":9,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":10,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003e (i) comparing 2 tasks by their type followed by alphabetical order of description \u003c/p\u003e"},{"lineNumber":11,"author":{"gitId":"Jaylenlee"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Jaylenlee"},"content":"public class TaskComparator implements Comparator\u003cTask\u003e {"},{"lineNumber":13,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":14,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Jaylenlee"},"content":"     * Compares two Tasks."},{"lineNumber":16,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"Jaylenlee"},"content":"     * @param a the Task to be compared."},{"lineNumber":18,"author":{"gitId":"Jaylenlee"},"content":"     * @param b the Task to be compared to."},{"lineNumber":19,"author":{"gitId":"Jaylenlee"},"content":"     * @return comparison result. Returns negative integer, zer0, positive integer"},{"lineNumber":20,"author":{"gitId":"Jaylenlee"},"content":"     * if (a \u003c b), (a \u003d\u003d b), (a \u003e b) respectively."},{"lineNumber":21,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Jaylenlee"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"Jaylenlee"},"content":"    public int compare(Task a, Task b) {"},{"lineNumber":24,"author":{"gitId":"Jaylenlee"},"content":"        char typeA \u003d a.getType().charAt(0);"},{"lineNumber":25,"author":{"gitId":"Jaylenlee"},"content":"        char typeB \u003d b.getType().charAt(0);"},{"lineNumber":26,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":27,"author":{"gitId":"Jaylenlee"},"content":"        if (typeA \u003d\u003d typeB) {"},{"lineNumber":28,"author":{"gitId":"Jaylenlee"},"content":"            String descriptionA \u003d a.getDescription();"},{"lineNumber":29,"author":{"gitId":"Jaylenlee"},"content":"            String descriptionB \u003d b.getDescription();"},{"lineNumber":30,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":31,"author":{"gitId":"Jaylenlee"},"content":"            int sizeA \u003d descriptionA.length();"},{"lineNumber":32,"author":{"gitId":"Jaylenlee"},"content":"            int sizeB \u003d descriptionB.length();"},{"lineNumber":33,"author":{"gitId":"Jaylenlee"},"content":"            int lowestIndex \u003d Math.min(sizeA, sizeB);"},{"lineNumber":34,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":35,"author":{"gitId":"Jaylenlee"},"content":"            for (int i \u003d 0; i \u003c lowestIndex; i++) {"},{"lineNumber":36,"author":{"gitId":"Jaylenlee"},"content":"                if (descriptionA.charAt(i) !\u003d descriptionB.charAt(i)) {"},{"lineNumber":37,"author":{"gitId":"Jaylenlee"},"content":"                    return descriptionA.charAt(i) - descriptionB.charAt(i);"},{"lineNumber":38,"author":{"gitId":"Jaylenlee"},"content":"                }"},{"lineNumber":39,"author":{"gitId":"Jaylenlee"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":41,"author":{"gitId":"Jaylenlee"},"content":"            return sizeA - sizeB;"},{"lineNumber":42,"author":{"gitId":"Jaylenlee"},"content":"        } else {"},{"lineNumber":43,"author":{"gitId":"Jaylenlee"},"content":"            return typeA - typeB;"},{"lineNumber":44,"author":{"gitId":"Jaylenlee"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Jaylenlee"},"content":"}"}],"authorContributionMap":{"Jaylenlee":46}},{"path":"src/main/java/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jaylenlee"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":3,"author":{"gitId":"Jaylenlee"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Jaylenlee"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"Jaylenlee"},"content":"import java.util.Comparator;"},{"lineNumber":6,"author":{"gitId":"Jaylenlee"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":8,"author":{"gitId":"Jaylenlee"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Jaylenlee"},"content":" * Encapsulates a list of tasks."},{"lineNumber":10,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":11,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003eThe \u0027TaskList\u0027 supports operators, supported include: \u003c/p\u003e"},{"lineNumber":12,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":13,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003e (i) Adding to list \u003c/p\u003e"},{"lineNumber":14,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":15,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003e (ii) Deleting from list \u003c/p\u003e"},{"lineNumber":16,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":17,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003e (iii) Getting task from list \u003c/p\u003e"},{"lineNumber":18,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":19,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003e (iv) Displaying full content of list \u003c/p\u003e"},{"lineNumber":20,"author":{"gitId":"Jaylenlee"},"content":" */"},{"lineNumber":21,"author":{"gitId":"Jaylenlee"},"content":"public class TaskList {"},{"lineNumber":22,"author":{"gitId":"Jaylenlee"},"content":"    private final List\u003ctask.Task\u003e taskList;"},{"lineNumber":23,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":24,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Jaylenlee"},"content":"     * Constructor to create this object."},{"lineNumber":26,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Jaylenlee"},"content":"    public TaskList() {"},{"lineNumber":28,"author":{"gitId":"Jaylenlee"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":29,"author":{"gitId":"Jaylenlee"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":30,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":32,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Jaylenlee"},"content":"     * Constructor to create this object."},{"lineNumber":34,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"Jaylenlee"},"content":"     * @param list the list of tasks to be encapsulated."},{"lineNumber":36,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Jaylenlee"},"content":"    public TaskList(List\u003cTask\u003e list) {"},{"lineNumber":38,"author":{"gitId":"Jaylenlee"},"content":"        this.taskList \u003d list;"},{"lineNumber":39,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":41,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"Jaylenlee"},"content":"     * Add a task to the list."},{"lineNumber":43,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"Jaylenlee"},"content":"     * @param task the task to be added."},{"lineNumber":45,"author":{"gitId":"Jaylenlee"},"content":"     * @return string containing information on addition and list size."},{"lineNumber":46,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Jaylenlee"},"content":"    public String addToTaskList(Task task) {"},{"lineNumber":48,"author":{"gitId":"Jaylenlee"},"content":"        this.taskList.add(task);"},{"lineNumber":49,"author":{"gitId":"Jaylenlee"},"content":"        return \"     Got it. I\u0027ve added this task:\\n\""},{"lineNumber":50,"author":{"gitId":"Jaylenlee"},"content":"                + \"     \""},{"lineNumber":51,"author":{"gitId":"Jaylenlee"},"content":"                + task"},{"lineNumber":52,"author":{"gitId":"Jaylenlee"},"content":"                + \"\\n\""},{"lineNumber":53,"author":{"gitId":"Jaylenlee"},"content":"                + \"     Now you have \""},{"lineNumber":54,"author":{"gitId":"Jaylenlee"},"content":"                + size()"},{"lineNumber":55,"author":{"gitId":"Jaylenlee"},"content":"                + \" task(s) in the list.\\n\";"},{"lineNumber":56,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":58,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"Jaylenlee"},"content":"     * Delete a task from the list."},{"lineNumber":60,"author":{"gitId":"Jaylenlee"},"content":"     * IndexOutOfBoundsException will still be thrown if index exceeds size or is negative."},{"lineNumber":61,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"Jaylenlee"},"content":"     * @param index the index of task to be delete."},{"lineNumber":63,"author":{"gitId":"Jaylenlee"},"content":"     * @return string containing information on deletion and list size."},{"lineNumber":64,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"Jaylenlee"},"content":"    public String deleteFromTaskList(int index) {"},{"lineNumber":66,"author":{"gitId":"Jaylenlee"},"content":"        assert index \u003e\u003d 0 \u0026\u0026 index \u003c size();"},{"lineNumber":67,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":68,"author":{"gitId":"Jaylenlee"},"content":"        Task task \u003d getTask(index);"},{"lineNumber":69,"author":{"gitId":"Jaylenlee"},"content":"        this.taskList.remove(index);"},{"lineNumber":70,"author":{"gitId":"Jaylenlee"},"content":"        return \"     Noted. I\u0027ve removed this task:\\n\""},{"lineNumber":71,"author":{"gitId":"Jaylenlee"},"content":"                + \"     \""},{"lineNumber":72,"author":{"gitId":"Jaylenlee"},"content":"                + task"},{"lineNumber":73,"author":{"gitId":"Jaylenlee"},"content":"                + \"\\n\""},{"lineNumber":74,"author":{"gitId":"Jaylenlee"},"content":"                + \"     Now you have \""},{"lineNumber":75,"author":{"gitId":"Jaylenlee"},"content":"                + size()"},{"lineNumber":76,"author":{"gitId":"Jaylenlee"},"content":"                + \" task(s) in the list.\\n\";"},{"lineNumber":77,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":79,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"Jaylenlee"},"content":"     * Gets a task from the list."},{"lineNumber":81,"author":{"gitId":"Jaylenlee"},"content":"     * IndexOutOfBoundsException will still be thrown if index exceeds size or is negative."},{"lineNumber":82,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"Jaylenlee"},"content":"     * @param index the index of task to be receive."},{"lineNumber":84,"author":{"gitId":"Jaylenlee"},"content":"     * @return Task at this particular index"},{"lineNumber":85,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"Jaylenlee"},"content":"    public Task getTask(int index) {"},{"lineNumber":87,"author":{"gitId":"Jaylenlee"},"content":"        assert index \u003e\u003d 0 \u0026\u0026 index \u003c\u003d size();"},{"lineNumber":88,"author":{"gitId":"Jaylenlee"},"content":"        return this.taskList.get(index);"},{"lineNumber":89,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":91,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"Jaylenlee"},"content":"     * Gets the size of the list."},{"lineNumber":93,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":94,"author":{"gitId":"Jaylenlee"},"content":"     * @return size of list."},{"lineNumber":95,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"Jaylenlee"},"content":"    public int size() {"},{"lineNumber":97,"author":{"gitId":"Jaylenlee"},"content":"        int size \u003d this.taskList.size();"},{"lineNumber":98,"author":{"gitId":"Jaylenlee"},"content":"        return size;"},{"lineNumber":99,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":101,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"Jaylenlee"},"content":"     * Displays the full content of this object."},{"lineNumber":103,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"Jaylenlee"},"content":"     * @return string representing the display of TaskList contents"},{"lineNumber":105,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"Jaylenlee"},"content":"    public String showList() {"},{"lineNumber":107,"author":{"gitId":"Jaylenlee"},"content":"        StringBuilder listDisplay \u003d new StringBuilder();"},{"lineNumber":108,"author":{"gitId":"Jaylenlee"},"content":"        listDisplay.append(\"     Here are the tasks in your list:\\n\");"},{"lineNumber":109,"author":{"gitId":"Jaylenlee"},"content":"        for (int i \u003d 1; i \u003c\u003d this.taskList.size(); i++) {"},{"lineNumber":110,"author":{"gitId":"Jaylenlee"},"content":"            listDisplay.append(\"     \");"},{"lineNumber":111,"author":{"gitId":"Jaylenlee"},"content":"            listDisplay.append(i);"},{"lineNumber":112,"author":{"gitId":"Jaylenlee"},"content":"            listDisplay.append(\".\");"},{"lineNumber":113,"author":{"gitId":"Jaylenlee"},"content":"            listDisplay.append(this.taskList.get(i - 1));"},{"lineNumber":114,"author":{"gitId":"Jaylenlee"},"content":"            listDisplay.append(\"\\n\");"},{"lineNumber":115,"author":{"gitId":"Jaylenlee"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":117,"author":{"gitId":"Jaylenlee"},"content":"        return listDisplay.toString();"},{"lineNumber":118,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":120,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"Jaylenlee"},"content":"     * Sorts the TaskList by given comparator."},{"lineNumber":122,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":123,"author":{"gitId":"Jaylenlee"},"content":"     * @param comparator the comparator used for comparing different task"},{"lineNumber":124,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"Jaylenlee"},"content":"    public void sort(Comparator\u003cTask\u003e comparator) {"},{"lineNumber":126,"author":{"gitId":"Jaylenlee"},"content":"        Collections.sort(this.taskList, comparator);"},{"lineNumber":127,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"Jaylenlee"},"content":"}"}],"authorContributionMap":{"Jaylenlee":128}},{"path":"src/main/java/task/TimeRelated.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jaylenlee"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":3,"author":{"gitId":"Jaylenlee"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Jaylenlee"},"content":" * Contracts date and time getters."},{"lineNumber":5,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":6,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003eThe \u0027TimeRelated\u0027 supports operators, supported include: \u003c/p\u003e"},{"lineNumber":7,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":8,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003e (i) Getters to date and time input as String \u003c/p\u003e"},{"lineNumber":9,"author":{"gitId":"Jaylenlee"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Jaylenlee"},"content":"public interface TimeRelated {"},{"lineNumber":11,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":12,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Jaylenlee"},"content":"     * Gets the date inputted by user in string."},{"lineNumber":14,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"Jaylenlee"},"content":"     * @return date inputted by user."},{"lineNumber":16,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Jaylenlee"},"content":"    public String getDateInput();"},{"lineNumber":18,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":19,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Jaylenlee"},"content":"     * Gets the date inputted by user in string."},{"lineNumber":21,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"Jaylenlee"},"content":"     * @return time inputted by user."},{"lineNumber":23,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Jaylenlee"},"content":"    public String getTimeInput();"},{"lineNumber":25,"author":{"gitId":"Jaylenlee"},"content":"}"}],"authorContributionMap":{"Jaylenlee":25}},{"path":"src/main/java/task/ToDoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jaylenlee"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":3,"author":{"gitId":"Jaylenlee"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Jaylenlee"},"content":" * Encapsulates the details of a task to be done without time restriction."},{"lineNumber":5,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":6,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003eThe \u0027Task\u0027 supports operators, supported include: \u003c/p\u003e"},{"lineNumber":7,"author":{"gitId":"Jaylenlee"},"content":" *"},{"lineNumber":8,"author":{"gitId":"Jaylenlee"},"content":" * \u003cp\u003e (i) Getters to details \u003c/p\u003e"},{"lineNumber":9,"author":{"gitId":"Jaylenlee"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Jaylenlee"},"content":"public class ToDoTask extends Task {"},{"lineNumber":11,"author":{"gitId":"Jaylenlee"},"content":"    public static final String TYPE \u003d \"T\";"},{"lineNumber":12,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":13,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Jaylenlee"},"content":"     * Constructor to create this object."},{"lineNumber":15,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"Jaylenlee"},"content":"     * @param description the description of the task."},{"lineNumber":17,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Jaylenlee"},"content":"    public ToDoTask(String description) {"},{"lineNumber":19,"author":{"gitId":"Jaylenlee"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":22,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Jaylenlee"},"content":"     * Constructor to create this object."},{"lineNumber":24,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"Jaylenlee"},"content":"     * @param description the description of the task."},{"lineNumber":26,"author":{"gitId":"Jaylenlee"},"content":"     * @param isDone the completion status of the task."},{"lineNumber":27,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Jaylenlee"},"content":"    public ToDoTask(String description, boolean isDone) {"},{"lineNumber":29,"author":{"gitId":"Jaylenlee"},"content":"        super(description, isDone);"},{"lineNumber":30,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":32,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Jaylenlee"},"content":"     * Gets the type of Tasks."},{"lineNumber":34,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"Jaylenlee"},"content":"     * @return type of Task."},{"lineNumber":36,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Jaylenlee"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"Jaylenlee"},"content":"    public String getType() {"},{"lineNumber":39,"author":{"gitId":"Jaylenlee"},"content":"        return ToDoTask.TYPE;"},{"lineNumber":40,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":42,"author":{"gitId":"Jaylenlee"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Jaylenlee"},"content":"     * String representation of this object."},{"lineNumber":44,"author":{"gitId":"Jaylenlee"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"Jaylenlee"},"content":"     * @return string representation of this object ([statusIcon] description)."},{"lineNumber":46,"author":{"gitId":"Jaylenlee"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Jaylenlee"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"Jaylenlee"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitId":"Jaylenlee"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":50,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Jaylenlee"},"content":"}"}],"authorContributionMap":{"Jaylenlee":51}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Jaylenlee"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":3,"author":{"gitId":"Jaylenlee"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Jaylenlee"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"Jaylenlee"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":6,"author":{"gitId":"Jaylenlee"},"content":"\u003c?import javafx.scene.shape.Circle?\u003e"},{"lineNumber":7,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c!--@@author Jaylenlee-reused--\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c!--Solution below adapted from https://se-education.org/guides/tutorials/javaFxPart4.html--\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c!--@@author--\u003e"},{"lineNumber":11,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":12,"author":{"gitId":"Jaylenlee"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"130.0\" prefWidth\u003d\"428.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"Jaylenlee"},"content":"    \u003cchildren\u003e"},{"lineNumber":14,"author":{"gitId":"Jaylenlee"},"content":"        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"},{"lineNumber":15,"author":{"gitId":"Jaylenlee"},"content":"            \u003cpadding\u003e"},{"lineNumber":16,"author":{"gitId":"Jaylenlee"},"content":"                \u003cInsets bottom\u003d\"4.0\" left\u003d\"4.0\" right\u003d\"4.0\" top\u003d\"4.0\" /\u003e"},{"lineNumber":17,"author":{"gitId":"Jaylenlee"},"content":"            \u003c/padding\u003e\u003c/Label\u003e"},{"lineNumber":18,"author":{"gitId":"Jaylenlee"},"content":"        \u003cCircle fx:id\u003d\"displayPicture\" pickOnBounds\u003d\"true\" radius\u003d\"50.0\" /\u003e"},{"lineNumber":19,"author":{"gitId":"Jaylenlee"},"content":"    \u003c/children\u003e"},{"lineNumber":20,"author":{"gitId":"Jaylenlee"},"content":"    \u003cpadding\u003e"},{"lineNumber":21,"author":{"gitId":"Jaylenlee"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":22,"author":{"gitId":"Jaylenlee"},"content":"    \u003c/padding\u003e"},{"lineNumber":23,"author":{"gitId":"Jaylenlee"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Jaylenlee":20,"-":3}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Jaylenlee"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003c!--@@author Jaylenlee-reused--\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c!--Solution below adapted from https://se-education.org/guides/tutorials/javaFxPart4.html--\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" /\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            \u003ccontent\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            \u003c/content\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \u003c/children\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003c/AnchorPane\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        \u003c!--@@author--\u003e"}],"authorContributionMap":{"Jaylenlee":1,"-":20}},{"path":"src/test/java/task/DeadlineTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jaylenlee"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":3,"author":{"gitId":"Jaylenlee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":5,"author":{"gitId":"Jaylenlee"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":7,"author":{"gitId":"Jaylenlee"},"content":"import exception.DateTimeInvalidFormatException;"},{"lineNumber":8,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":9,"author":{"gitId":"Jaylenlee"},"content":"public class DeadlineTaskTest {"},{"lineNumber":10,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":11,"author":{"gitId":"Jaylenlee"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"Jaylenlee"},"content":"    public void testToString() {"},{"lineNumber":13,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":14,"author":{"gitId":"Jaylenlee"},"content":"        try {"},{"lineNumber":15,"author":{"gitId":"Jaylenlee"},"content":"            DeadlineTask task \u003d new DeadlineTask(\"Hello\", \"2020-08-25 2359\");"},{"lineNumber":16,"author":{"gitId":"Jaylenlee"},"content":"            DeadlineTask task2 \u003d new DeadlineTask(\"Jello\", \"2020-12-25 1359\");"},{"lineNumber":17,"author":{"gitId":"Jaylenlee"},"content":"            DeadlineTask task3 \u003d new DeadlineTask(\"Pello\", \"2020-09-25 2059\");"},{"lineNumber":18,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":19,"author":{"gitId":"Jaylenlee"},"content":"            assertEquals(\"[D][✘] Hello (by: 25 Aug 2020 23:59)\", task.toString());"},{"lineNumber":20,"author":{"gitId":"Jaylenlee"},"content":"            assertEquals(\"[D][✘] Jello (by: 25 Dec 2020 13:59)\", task2.toString());"},{"lineNumber":21,"author":{"gitId":"Jaylenlee"},"content":"            assertEquals(\"[D][✘] Pello (by: 25 Sep 2020 20:59)\", task3.toString());"},{"lineNumber":22,"author":{"gitId":"Jaylenlee"},"content":"        } catch (DateTimeInvalidFormatException e) {"},{"lineNumber":23,"author":{"gitId":"Jaylenlee"},"content":"            String temp \u003d \"    ____________________________________________________________\\n\""},{"lineNumber":24,"author":{"gitId":"Jaylenlee"},"content":"                    + \"     ☹ OOPS!!! \""},{"lineNumber":25,"author":{"gitId":"Jaylenlee"},"content":"                    + \"Action invalid. Date and Time Format incorrect.\""},{"lineNumber":26,"author":{"gitId":"Jaylenlee"},"content":"                    + \"\\n\""},{"lineNumber":27,"author":{"gitId":"Jaylenlee"},"content":"                    + \"    ____________________________________________________________\\n\";"},{"lineNumber":28,"author":{"gitId":"Jaylenlee"},"content":"            assertEquals(temp, e.getMessage());"},{"lineNumber":29,"author":{"gitId":"Jaylenlee"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":32,"author":{"gitId":"Jaylenlee"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"Jaylenlee"},"content":"    public void testGetDateInput() {"},{"lineNumber":34,"author":{"gitId":"Jaylenlee"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"Jaylenlee"},"content":"            DeadlineTask task \u003d new DeadlineTask(\"Hello\", \"2020-08-25 2359\");"},{"lineNumber":36,"author":{"gitId":"Jaylenlee"},"content":"            DeadlineTask task2 \u003d new DeadlineTask(\"Jello\", \"2020-12-25 1359\");"},{"lineNumber":37,"author":{"gitId":"Jaylenlee"},"content":"            DeadlineTask task3 \u003d new DeadlineTask(\"Pello\", \"2020-09-25 2059\");"},{"lineNumber":38,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":39,"author":{"gitId":"Jaylenlee"},"content":"            assertEquals(\"2020-08-25\", task.getDateInput());"},{"lineNumber":40,"author":{"gitId":"Jaylenlee"},"content":"            assertEquals(\"2020-12-25\", task2.getDateInput());"},{"lineNumber":41,"author":{"gitId":"Jaylenlee"},"content":"            assertEquals(\"2020-09-25\", task3.getDateInput());"},{"lineNumber":42,"author":{"gitId":"Jaylenlee"},"content":"        } catch (DateTimeInvalidFormatException e) {"},{"lineNumber":43,"author":{"gitId":"Jaylenlee"},"content":"            String temp \u003d \"    ____________________________________________________________\\n\""},{"lineNumber":44,"author":{"gitId":"Jaylenlee"},"content":"                    + \"     ☹ OOPS!!! \""},{"lineNumber":45,"author":{"gitId":"Jaylenlee"},"content":"                    + \"Action invalid. Date and Time Format incorrect.\""},{"lineNumber":46,"author":{"gitId":"Jaylenlee"},"content":"                    + \"\\n\""},{"lineNumber":47,"author":{"gitId":"Jaylenlee"},"content":"                    + \"    ____________________________________________________________\\n\";"},{"lineNumber":48,"author":{"gitId":"Jaylenlee"},"content":"            assertEquals(temp, e.getMessage());"},{"lineNumber":49,"author":{"gitId":"Jaylenlee"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":52,"author":{"gitId":"Jaylenlee"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"Jaylenlee"},"content":"    public void testGetTimeInput() {"},{"lineNumber":54,"author":{"gitId":"Jaylenlee"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"Jaylenlee"},"content":"            DeadlineTask task \u003d new DeadlineTask(\"Hello\", \"2020-08-25 2359\");"},{"lineNumber":56,"author":{"gitId":"Jaylenlee"},"content":"            DeadlineTask task2 \u003d new DeadlineTask(\"Jello\", \"2020-12-25 1359\");"},{"lineNumber":57,"author":{"gitId":"Jaylenlee"},"content":"            DeadlineTask task3 \u003d new DeadlineTask(\"Pello\", \"2020-09-25 2059\");"},{"lineNumber":58,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":59,"author":{"gitId":"Jaylenlee"},"content":"            assertEquals(\"2359\", task.getTimeInput());"},{"lineNumber":60,"author":{"gitId":"Jaylenlee"},"content":"            assertEquals(\"1359\", task2.getTimeInput());"},{"lineNumber":61,"author":{"gitId":"Jaylenlee"},"content":"            assertEquals(\"2059\", task3.getTimeInput());"},{"lineNumber":62,"author":{"gitId":"Jaylenlee"},"content":"        } catch (DateTimeInvalidFormatException e) {"},{"lineNumber":63,"author":{"gitId":"Jaylenlee"},"content":"            String temp \u003d \"    ____________________________________________________________\\n\""},{"lineNumber":64,"author":{"gitId":"Jaylenlee"},"content":"                    + \"     ☹ OOPS!!! \""},{"lineNumber":65,"author":{"gitId":"Jaylenlee"},"content":"                    + \"Action invalid. Date and Time Format incorrect.\""},{"lineNumber":66,"author":{"gitId":"Jaylenlee"},"content":"                    + \"\\n\""},{"lineNumber":67,"author":{"gitId":"Jaylenlee"},"content":"                    + \"    ____________________________________________________________\\n\";"},{"lineNumber":68,"author":{"gitId":"Jaylenlee"},"content":"            assertEquals(temp, e.getMessage());"},{"lineNumber":69,"author":{"gitId":"Jaylenlee"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"Jaylenlee"},"content":"}"}],"authorContributionMap":{"Jaylenlee":71}},{"path":"src/test/java/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jaylenlee"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":3,"author":{"gitId":"Jaylenlee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":5,"author":{"gitId":"Jaylenlee"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"Jaylenlee"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":8,"author":{"gitId":"Jaylenlee"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":10,"author":{"gitId":"Jaylenlee"},"content":"public class TaskListTest {"},{"lineNumber":11,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":12,"author":{"gitId":"Jaylenlee"},"content":"    public static final Task TASK \u003d new Task(\"Test\");"},{"lineNumber":13,"author":{"gitId":"Jaylenlee"},"content":"    public static final Task TASK2 \u003d new Task(\"Meh2\");"},{"lineNumber":14,"author":{"gitId":"Jaylenlee"},"content":"    public static final Task TASK3 \u003d new Task(\"GG3\");"},{"lineNumber":15,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":16,"author":{"gitId":"Jaylenlee"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"Jaylenlee"},"content":"    public void testToString() {"},{"lineNumber":18,"author":{"gitId":"Jaylenlee"},"content":"        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":19,"author":{"gitId":"Jaylenlee"},"content":"        list.add(TASK);"},{"lineNumber":20,"author":{"gitId":"Jaylenlee"},"content":"        list.add(TASK2);"},{"lineNumber":21,"author":{"gitId":"Jaylenlee"},"content":"        list.add(TASK3);"},{"lineNumber":22,"author":{"gitId":"Jaylenlee"},"content":"        TaskList tl \u003d new TaskList(list);"},{"lineNumber":23,"author":{"gitId":"Jaylenlee"},"content":"        assertEquals(\"[✘] Test\", tl.getTask(0).toString());"},{"lineNumber":24,"author":{"gitId":"Jaylenlee"},"content":"        assertEquals(\"[✘] Meh2\", tl.getTask(1).toString());"},{"lineNumber":25,"author":{"gitId":"Jaylenlee"},"content":"        assertEquals(\"[✘] GG3\", tl.getTask(2).toString());"},{"lineNumber":26,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":28,"author":{"gitId":"Jaylenlee"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"Jaylenlee"},"content":"    public void testSize() {"},{"lineNumber":30,"author":{"gitId":"Jaylenlee"},"content":"        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":31,"author":{"gitId":"Jaylenlee"},"content":"        list.add(TASK);"},{"lineNumber":32,"author":{"gitId":"Jaylenlee"},"content":"        TaskList tl \u003d new TaskList(list);"},{"lineNumber":33,"author":{"gitId":"Jaylenlee"},"content":"        assertEquals(1, tl.size());"},{"lineNumber":34,"author":{"gitId":"Jaylenlee"},"content":"        list.add(TASK2);"},{"lineNumber":35,"author":{"gitId":"Jaylenlee"},"content":"        assertEquals(2, tl.size());"},{"lineNumber":36,"author":{"gitId":"Jaylenlee"},"content":"        list.add(TASK3);"},{"lineNumber":37,"author":{"gitId":"Jaylenlee"},"content":"        assertEquals(3, tl.size());"},{"lineNumber":38,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":40,"author":{"gitId":"Jaylenlee"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"Jaylenlee"},"content":"    public void testGetTask() {"},{"lineNumber":42,"author":{"gitId":"Jaylenlee"},"content":"        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":43,"author":{"gitId":"Jaylenlee"},"content":"        list.add(TASK);"},{"lineNumber":44,"author":{"gitId":"Jaylenlee"},"content":"        list.add(TASK2);"},{"lineNumber":45,"author":{"gitId":"Jaylenlee"},"content":"        list.add(TASK3);"},{"lineNumber":46,"author":{"gitId":"Jaylenlee"},"content":"        TaskList tl \u003d new TaskList(list);"},{"lineNumber":47,"author":{"gitId":"Jaylenlee"},"content":"        assertEquals(TASK, tl.getTask(0));"},{"lineNumber":48,"author":{"gitId":"Jaylenlee"},"content":"        assertEquals(TASK2, tl.getTask(1));"},{"lineNumber":49,"author":{"gitId":"Jaylenlee"},"content":"        assertEquals(TASK3, tl.getTask(2));"},{"lineNumber":50,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":52,"author":{"gitId":"Jaylenlee"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"Jaylenlee"},"content":"    public void testAdding() {"},{"lineNumber":54,"author":{"gitId":"Jaylenlee"},"content":"        TaskList tl \u003d new TaskList();"},{"lineNumber":55,"author":{"gitId":"Jaylenlee"},"content":"        tl.addToTaskList(TaskListTest.TASK);"},{"lineNumber":56,"author":{"gitId":"Jaylenlee"},"content":"        tl.addToTaskList(TaskListTest.TASK2);"},{"lineNumber":57,"author":{"gitId":"Jaylenlee"},"content":"        tl.addToTaskList(TaskListTest.TASK3);"},{"lineNumber":58,"author":{"gitId":"Jaylenlee"},"content":"        assertEquals(TASK, tl.getTask(0));"},{"lineNumber":59,"author":{"gitId":"Jaylenlee"},"content":"        assertEquals(TASK2, tl.getTask(1));"},{"lineNumber":60,"author":{"gitId":"Jaylenlee"},"content":"        assertEquals(TASK3, tl.getTask(2));"},{"lineNumber":61,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":63,"author":{"gitId":"Jaylenlee"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"Jaylenlee"},"content":"    public void testDeleting() {"},{"lineNumber":65,"author":{"gitId":"Jaylenlee"},"content":"        TaskList tl \u003d new TaskList();"},{"lineNumber":66,"author":{"gitId":"Jaylenlee"},"content":"        tl.addToTaskList(TaskListTest.TASK);"},{"lineNumber":67,"author":{"gitId":"Jaylenlee"},"content":"        tl.addToTaskList(TaskListTest.TASK2);"},{"lineNumber":68,"author":{"gitId":"Jaylenlee"},"content":"        tl.addToTaskList(TaskListTest.TASK3);"},{"lineNumber":69,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":70,"author":{"gitId":"Jaylenlee"},"content":"        assertEquals(TASK, tl.getTask(0));"},{"lineNumber":71,"author":{"gitId":"Jaylenlee"},"content":"        assertEquals(TASK2, tl.getTask(1));"},{"lineNumber":72,"author":{"gitId":"Jaylenlee"},"content":"        assertEquals(TASK3, tl.getTask(2));"},{"lineNumber":73,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":74,"author":{"gitId":"Jaylenlee"},"content":"        tl.deleteFromTaskList(2);"},{"lineNumber":75,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":76,"author":{"gitId":"Jaylenlee"},"content":"        try {"},{"lineNumber":77,"author":{"gitId":"Jaylenlee"},"content":"            assertEquals(TASK3, tl.getTask(2));"},{"lineNumber":78,"author":{"gitId":"Jaylenlee"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":79,"author":{"gitId":"Jaylenlee"},"content":"            assertEquals(\"Index 2 out of bounds for length 2\", e.getMessage());"},{"lineNumber":80,"author":{"gitId":"Jaylenlee"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"Jaylenlee"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"Jaylenlee"},"content":"}"}],"authorContributionMap":{"Jaylenlee":82}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Jaylenlee"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"Jaylenlee"},"content":"deadline return book /by 2020-08-24 1800"},{"lineNumber":3,"author":{"gitId":"Jaylenlee"},"content":"event project meeting /at 2020-08-24 1900-2359"},{"lineNumber":4,"author":{"gitId":"Jaylenlee"},"content":"list"},{"lineNumber":5,"author":{"gitId":"Jaylenlee"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"Jaylenlee"},"content":"list"},{"lineNumber":7,"author":{"gitId":"Jaylenlee"},"content":"done 2"},{"lineNumber":8,"author":{"gitId":"Jaylenlee"},"content":"list"},{"lineNumber":9,"author":{"gitId":"Jaylenlee"},"content":"done 3"},{"lineNumber":10,"author":{"gitId":"Jaylenlee"},"content":"list"},{"lineNumber":11,"author":{"gitId":"Jaylenlee"},"content":"blah"},{"lineNumber":12,"author":{"gitId":"Jaylenlee"},"content":"done"},{"lineNumber":13,"author":{"gitId":"Jaylenlee"},"content":"done1"},{"lineNumber":14,"author":{"gitId":"Jaylenlee"},"content":"doneA"},{"lineNumber":15,"author":{"gitId":"Jaylenlee"},"content":"done 1A"},{"lineNumber":16,"author":{"gitId":"Jaylenlee"},"content":"todo"},{"lineNumber":17,"author":{"gitId":"Jaylenlee"},"content":"todoborrowagain"},{"lineNumber":18,"author":{"gitId":"Jaylenlee"},"content":"todo study /by Monday"},{"lineNumber":19,"author":{"gitId":"Jaylenlee"},"content":"todo study /at 12am-1am"},{"lineNumber":20,"author":{"gitId":"Jaylenlee"},"content":"todo"},{"lineNumber":21,"author":{"gitId":"Jaylenlee"},"content":"deadline"},{"lineNumber":22,"author":{"gitId":"Jaylenlee"},"content":"deadline project submission"},{"lineNumber":23,"author":{"gitId":"Jaylenlee"},"content":"deadline /by Sunday"},{"lineNumber":24,"author":{"gitId":"Jaylenlee"},"content":"deadline project submission /by"},{"lineNumber":25,"author":{"gitId":"Jaylenlee"},"content":"event"},{"lineNumber":26,"author":{"gitId":"Jaylenlee"},"content":"event project submission"},{"lineNumber":27,"author":{"gitId":"Jaylenlee"},"content":"event /at 1-2pm"},{"lineNumber":28,"author":{"gitId":"Jaylenlee"},"content":"event meeting /at"},{"lineNumber":29,"author":{"gitId":"Jaylenlee"},"content":"list"},{"lineNumber":30,"author":{"gitId":"Jaylenlee"},"content":"delete 1"},{"lineNumber":31,"author":{"gitId":"Jaylenlee"},"content":"list"},{"lineNumber":32,"author":{"gitId":"Jaylenlee"},"content":"delete"},{"lineNumber":33,"author":{"gitId":"Jaylenlee"},"content":"delete1"},{"lineNumber":34,"author":{"gitId":"Jaylenlee"},"content":"delete 0"},{"lineNumber":35,"author":{"gitId":"Jaylenlee"},"content":"delete 1A"},{"lineNumber":36,"author":{"gitId":"Jaylenlee"},"content":"deadline iP /by 25-08-2020 2359"},{"lineNumber":37,"author":{"gitId":"Jaylenlee"},"content":"deadline iP /by 08-25-20 2359"},{"lineNumber":38,"author":{"gitId":"Jaylenlee"},"content":"deadline iP /by 08-AUG-2020 1259pm"},{"lineNumber":39,"author":{"gitId":"Jaylenlee"},"content":"deadline iP /by 2020-08-252359"},{"lineNumber":40,"author":{"gitId":"Jaylenlee"},"content":"deadline iP /by 9999-99-99 2400"},{"lineNumber":41,"author":{"gitId":"Jaylenlee"},"content":"deadline iP /by 2020/08/25 2359"},{"lineNumber":42,"author":{"gitId":"Jaylenlee"},"content":"list"},{"lineNumber":43,"author":{"gitId":"Jaylenlee"},"content":"event tP /at 25-08-2020 2359"},{"lineNumber":44,"author":{"gitId":"Jaylenlee"},"content":"event tP /at 08-25-20 2200-2359"},{"lineNumber":45,"author":{"gitId":"Jaylenlee"},"content":"event tP /at 08-AUG-2020 1259-3pm"},{"lineNumber":46,"author":{"gitId":"Jaylenlee"},"content":"event tP /at 2020-08-252350 2359111"},{"lineNumber":47,"author":{"gitId":"Jaylenlee"},"content":"event tP /at 9999-99-99 2200-2000"},{"lineNumber":48,"author":{"gitId":"Jaylenlee"},"content":"event tP /at 9999-99-99 2400-2500"},{"lineNumber":49,"author":{"gitId":"Jaylenlee"},"content":"event tP /at 2020/08/25 2200-2359"},{"lineNumber":50,"author":{"gitId":"Jaylenlee"},"content":"list"},{"lineNumber":51,"author":{"gitId":"Jaylenlee"},"content":"find book"},{"lineNumber":52,"author":{"gitId":"Jaylenlee"},"content":"find 25 Aug"},{"lineNumber":53,"author":{"gitId":"Jaylenlee"},"content":"find"},{"lineNumber":54,"author":{"gitId":"Jaylenlee"},"content":"find //"},{"lineNumber":55,"author":{"gitId":"Jaylenlee"},"content":"find 2020-08-25"},{"lineNumber":56,"author":{"gitId":"Jaylenlee"},"content":"bye"}],"authorContributionMap":{"Jaylenlee":56}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"Jaylenlee"},"content":"::set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":5,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":8,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":11,"author":{"gitId":"Jaylenlee"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java ..\\src\\main\\java\\task\\*.java ..\\src\\main\\java\\exception\\*.java ..\\src\\main\\java\\processor\\*.java"},{"lineNumber":12,"author":{"gitId":"Jaylenlee"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":14,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":16,"author":{"gitId":"-"},"content":")"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":20,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":23,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"Jaylenlee":3,"-":20}}]
