[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "compileJava.options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 10,
      "-": 44
    }
  },
  {
    "path": "config/travis/check-eof-newline.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "# Checks that all text files end with a newline."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "ret\u003d0"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "# Preserve filename with spaces by only splitting on newlines."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "IFS\u003d\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        echo \"ERROR:$filename:$line: no newline at EOF.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 18
    }
  },
  {
    "path": "config/travis/check-line-endings.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "# Checks for prohibited line endings."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "# Prohibited line endings: \\r\\n"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        ret \u003d 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 19
    }
  },
  {
    "path": "config/travis/check-trailing-whitespace.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "# Checks for trailing whitespace"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        # Only warn for markdown files (*.md) to accomodate text editors"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        # which do not properly handle trailing whitespace."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        # (e.g. GitHub web editor)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        if ($1 ~ /\\.md$/) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            severity \u003d \"WARN\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            severity \u003d \"ERROR\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            ret \u003d 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        print severity, $1, $2, \" trailing whitespace.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 26
    }
  },
  {
    "path": "config/travis/run-checks.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "ret\u003d0 \u0026\u0026"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "for checkscript in \"$dir\"/check-*; do"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    if ! \"$checkscript\"; then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 11
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "duke.task.Todo,false,drink water"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "duke.task.Event,true,meeting,2020-08-27T02:22,2020-08-27T18:00"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "duke.task.Todo,true,2103T work"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "duke.task.Deadline,false,return book,2020-08-29T16:00"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "duke.task.Deadline,false,CS2013T iP,2020-09-02T02:00"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 5
    }
  },
  {
    "path": "dataTest/dukeFind.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "duke.task.Event,true,meeting,2020-08-27T02:22,2020-08-27T18:00"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "duke.task.Todo,false,CS2103T homework"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "duke.task.Deadline,false,return book,2020-08-29T16:00"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "duke.task.Todo,false,CS2101 borrow book"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 4
    }
  },
  {
    "path": "dataTest/dukeLoad.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "duke.task.Event,true,meeting,2020-08-27T02:22,2020-08-27T18:00"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "duke.task.Todo,false,CS2103T homework"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "duke.task.Deadline,false,return book,2020-08-29T16:00"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 3
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.io.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.io.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * This is the start of the Duke application. There 3 main task that the application can record,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * ToDo, Event and Deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author Galvin Leow Wen Yuan"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author A0200204J"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    private static final String CURRENT_DIRECTORY \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Class constructor that initialised the application."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Ui, Storage and TaskList are initialised in this constructor."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param filePath path of duke.txt, duke.txt acts as a simple database."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            this.taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            this.ui.showLoadingError();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Main logic of application execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Use Duke class initialised class for application."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                c.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Main class. Entry point for Duke application."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param args stores hava command line arguments."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        final String dataDir \u003d CURRENT_DIRECTORY + File.separator + \"data\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        final String dataFile \u003d \"duke.txt\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        new Duke(dataDir + File.separator + dataFile).run();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 74
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * Exception class for duke application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author Galvin Leow Wen Yuan"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author A0200204J"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Exception for duke application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param message String details of the error."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 19
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * Class create to print items."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author Galvin Leow Wen Yuan"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author A0200204J"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Print out welcome message with the menu."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                logo \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                \" ____        _        \\n\" + \"|  _ \\\\ _   _| | _____ \\n\" + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                        + \"| |_| | |_| |   \u003c  __/\\n\" + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        System.out.println(logo + \"\\nHello ! I\u0027m Duke.\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        System.out.println(menu());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Return String that provide user with functionalities of the application."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return String menu"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    private String menu() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return \"1. list\\n\" + \"2. done {item number}\\n\" + \"3. todo {description}\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                + \"4. deadline {description} /by {dd/mm/yyyy} {hhmm}\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                + \"\\t e.g. deadline return book /by 1/12/2020 1800\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                + \"5. event {description} /at {dd/mm/yyyy} {hhmm}-{hhmm}\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                + \"\\t e.g. event meeting /at 1/12/2020 1800-1900\\n\" + \"7. delete {item number}\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                + \"8. find {item to find}\\n\" + \"9. bye\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Print loading error that will use when file fail to load."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        System.err.println(\"Error: Fail to load file!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Print prompt to user from command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Get command from user after prompt."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return command that user input."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        System.out.println(\"Please enter your command(not the number but the full command):\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Use to divide the application to be more user friendly."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        System.out.println(\"_____________________________________________________________________________\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Print out an error message"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param error error that occur."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void showError(String error) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        System.err.println(\"Error: \" + error);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Print out any string."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param statement any string input"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void printString(String statement) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        System.out.println(statement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 83
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.io.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.io.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * Bye command type."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * Give indication to end the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author Galvin Leow Wen Yuan"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author A0200204J"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Execute bye command logic."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Print end message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param task    not used in this command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param ui      ui class for print."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param storage storage for read, write to file. Not used in this command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void execute(TaskList task, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Change isExit to true to indicate application to end."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return true."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 41
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.io.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.io.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * Abstract command class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * Define method command class should have."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author Galvin Leow Wen Yuan"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author A0200204J"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Execute the logic define by the individual command type."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param taskList arraylist of task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param ui       ui class for print."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param storage  storage for read, write to file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @throws DukeException exception that will occur running command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Indication to exit and end the application."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return boolean true if application to end."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 34
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.io.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.io.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * Deadline command type."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * Create deadline task and add into task arraylist."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author Galvin Leow Wen Yuan"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author A0200204J"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    private final String fullCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Extract task details from full command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param fullCommand full command input by user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public DeadlineCommand(String fullCommand) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Create deadline task and add to task arraylist."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Convert details like data time to dateTime format."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Write to file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param taskList arraylist of task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param ui       ui class for print."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param storage  storage for read, write to file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @throws DukeException Exception for wrong date or time format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        if (!fullCommand.contains(\" \")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String details \u003d fullCommand.substring(fullCommand.indexOf(\" \")).trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        if (!fullCommand.contains(\"/by\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The date \u0026 time of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String description \u003d details.substring(0, details.indexOf(\"/by\")).trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String by \u003d details.substring(details.indexOf(\"/by\") + 3).trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String[] inputDateTime \u003d by.split(\" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String[] date \u003d inputDateTime[0].split(\"[/\\\\\\\\]|-\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalDate localDate \u003d dateToLocalDate(date);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalTime localTime \u003d LocalTime.of(0, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        if (inputDateTime.length \u003e 1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            int timeLength \u003d inputDateTime[1].length();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            if (timeLength \u003d\u003d 4) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                int hour \u003d Integer.parseInt(inputDateTime[1].substring(0, 2));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                int minute \u003d Integer.parseInt(inputDateTime[1].substring(2, 4));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                localTime \u003d LocalTime.of(hour, minute);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            } else if (timeLength \u003d\u003d 3) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                int hour \u003d Integer.parseInt(String.valueOf(inputDateTime[1].charAt(0)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                int minute \u003d Integer.parseInt(inputDateTime[1].substring(1, 3));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                localTime \u003d LocalTime.of(hour, minute);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                throw new DukeException(\"Error with input time\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalDateTime localDateTime \u003d LocalDateTime.of(localDate, localTime);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        taskList.addTask(new Deadline(description, localDateTime));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        System.out.println(\"\\t\" + taskList.retrieveTask(taskList.sizeOfList() - 1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        System.out.printf(\"Now you have %o tasks in list.\\n\", taskList.sizeOfList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        storage.write(taskList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    private static LocalDate dateToLocalDate(String[] date) throws DukeException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalDate localDate;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        if (date.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            int day \u003d Integer.parseInt(date[0]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            int month \u003d Integer.parseInt(date[1]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            int year \u003d Integer.parseInt(date[2]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            localDate \u003d LocalDate.of(year, month, day);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            throw new DukeException(\"Error with input date!\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return localDate;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Indicator for application to end."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 112
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.io.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.io.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * Delete command type."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * Remove task from task arraylist."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author Galvin Leow Wen Yuan"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author A0200204J"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    private final String fullCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Extract task index details from full command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param fullCommand full command input by user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public DeleteCommand(String fullCommand) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Remove task with index from task arraylist."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Write to file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param taskList arraylist of task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param ui       ui class for print."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param storage  storage for read, write to file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @throws DukeException unable to delete item."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String[] input \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        if (input.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            int index \u003d Integer.parseInt(input[1]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            System.out.printf(\"\\t%s\\n\", taskList.retrieveTask(index - 1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            taskList.deleteTask(Integer.parseInt(input[1]) - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            throw new DukeException(\"Cannot delete item!\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        System.out.printf(\"Now you have %o tasks in the list\\n\", taskList.sizeOfList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        storage.write(taskList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Indicator for application to end."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 66
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.io.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.io.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * Done command type. Mark task to done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author Galvin Leow Wen Yuan"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author A0200204J"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    private final String fullCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Extract task index details from full command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param fullCommand full command input by user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public DoneCommand(String fullCommand) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Retrieve task to be mark done and change isDone to true."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Write to file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param taskList arraylist of task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param ui       ui class for print."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param storage  storage for read, write to file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @throws DukeException unable to find task item."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String[] input \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        if (input.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            task \u003d taskList.retrieveTask(Integer.parseInt(input[1]) - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            throw new DukeException(\"Cannot mark item done!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        System.out.printf(\"%s\\n\", task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        storage.write(taskList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Indicator for application to end."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 66
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.io.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.io.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * Event command type."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * Create event task and add into task arraylist."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author Galvin Leow Wen Yuan"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author A0200204J"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    private final String fullCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Extract task details from full command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param fullCommand full command input by user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public EventCommand(String fullCommand) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Create event task and add to task arraylist."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Convert details like data time to dateTime format."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Write to file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param taskList arraylist of task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param ui       ui class for print."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param storage  storage for read, write to file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @throws DukeException Exception for wrong date or time format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        if (!fullCommand.contains(\" \")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String details \u003d fullCommand.substring(fullCommand.indexOf(\" \")).trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        if (!fullCommand.contains(\"/at\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The date \u0026 time of a event cannot be empty.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String description \u003d details.substring(0, details.indexOf(\"/at\")).trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String at \u003d details.substring(details.indexOf(\"/at\") + 3).trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String[] inputDateTime \u003d at.split(\" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String[] date \u003d inputDateTime[0].split(\"[/\\\\\\\\]|-\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalDate localDate \u003d dateToLocalDate(date);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalTime startLocalTime \u003d LocalTime.of(0, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalTime endLocalTime \u003d LocalTime.of(23, 59);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        if (inputDateTime.length \u003e 1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            String[] timeArr \u003d inputDateTime[1].split(\"-\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            if (timeArr.length \u003e 1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                endLocalTime \u003d timeToLocalTime(timeArr[1]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            startLocalTime \u003d timeToLocalTime(timeArr[0]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalDateTime startLocalDateTime \u003d LocalDateTime.of(localDate, startLocalTime);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalDateTime endLocalDateTime \u003d LocalDateTime.of(localDate, endLocalTime);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        taskList.addTask(new Event(description, startLocalDateTime, endLocalDateTime));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        System.out.println(\"\\t\" + taskList.retrieveTask(taskList.sizeOfList() - 1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        System.out.printf(\"Now you have %o tasks in list.\\n\", taskList.sizeOfList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        storage.write(taskList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    private static LocalDate dateToLocalDate(String[] date) throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalDate localDate;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        if (date.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            int day \u003d Integer.parseInt(date[0]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            int month \u003d Integer.parseInt(date[1]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            int year \u003d Integer.parseInt(date[2]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            localDate \u003d LocalDate.of(year, month, day);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            throw new DukeException(\"Error with input date!\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return localDate;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    private static LocalTime timeToLocalTime(String time) throws DukeException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        int timeLength \u003d time.length();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalTime localTime;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        if (timeLength \u003d\u003d 4) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            int hour \u003d Integer.parseInt(time.substring(0, 2));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            int minute \u003d Integer.parseInt(time.substring(2, 4));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            localTime \u003d LocalTime.of(hour, minute);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        } else if (timeLength \u003d\u003d 3) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            int hour \u003d Integer.parseInt(String.valueOf(time.charAt(0)));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            int minute \u003d Integer.parseInt(time.substring(1, 3));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            localTime \u003d LocalTime.of(hour, minute);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            throw new DukeException(\"Error with input time\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return localTime;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Indicator for application to end."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 123
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.io.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.io.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * Find command type."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * Take a string and find is there are task description that contains the string."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author Galvin Leow Wen Yuan"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author A0200204J"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    private final String fullCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Extract search value from full command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param fullCommand full command input by user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public FindCommand(String fullCommand) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Extract out search value."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Search from the task arraylist."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Print out search result."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param taskList arraylist of task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param ui       ui class for print."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param storage  storage for read, write to file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @throws DukeException Exception for wrong date or time format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String[] input \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String toFind;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        if (input.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            toFind \u003d fullCommand.substring(fullCommand.indexOf(\" \")).trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            ArrayList\u003cTask\u003e results \u003d taskList.find(toFind);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            for (int i \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                 i \u003c results.size();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                 i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                System.out.printf(\"%d. %s%n\", i + 1, results.get(i));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            throw new DukeException(\"No input search item!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Indicator for application to end."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 71
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.io.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.io.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * List command type."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * Print all the list in the task arraylist."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author Galvin Leow Wen Yuan"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author A0200204J"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Print all the task in the arraylist."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param taskList arraylist of task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param ui       ui class for print."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param storage  storage for read, write to file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        System.out.println(\"Here are the tasks in your list: \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.sizeOfList(); i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            ui.printString(String.format(\"%d.%s\", i + 1, taskList.retrieveTask(i)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Indicator for application to end."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 43
    }
  },
  {
    "path": "src/main/java/duke/command/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.io.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.io.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * ToDo command type."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * Create todo task and add into task arraylist."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author Galvin Leow Wen Yuan"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author A0200204J"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    private final String fullCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Extract task details from full command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param fullCommand full command input by user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public ToDoCommand(String fullCommand) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Create todo task and add to task arraylist. Write to file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param taskList arraylist of task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param ui       ui class for print."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param storage  storage for read, write to file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String description \u003d fullCommand.substring(fullCommand.indexOf(\" \")).trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        taskList.addTask(new Todo(description));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        System.out.println(\"\\t\" + taskList.retrieveTask(taskList.sizeOfList() - 1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        System.out.printf(\"Now you have %o tasks in list.\\n\", taskList.sizeOfList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        storage.write(taskList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Indicator for application to end."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 59
    }
  },
  {
    "path": "src/main/java/duke/io/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * Storage class define rules for create, read and write to file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author Galvin Leow Wen Yuan"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author A0200204J"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    protected String filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Initialise Storage class with filepath."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param filePath use to create, read and write a file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Read file and convert it into Arraylist\u003c{Task}\u003e."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return Arraylist with tasks contains all the task from the file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @throws DukeException exception for file cannot be found."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            String fileLine;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            while ((fileLine \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                String[] tempArr \u003d fileLine.split(\",\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                String command \u003d tempArr[0];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                switch (command) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                case \"duke.task.Todo\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    taskArrayList.add(new Todo(tempArr[2]));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                case \"duke.task.Deadline\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    Task tempDeadline \u003d new Deadline(tempArr[2], LocalDateTime.parse(tempArr[3]));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    if (tempArr[1].equals(\"true\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                        tempDeadline.markAsDone();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    taskArrayList.add(tempDeadline);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                case \"duke.task.Event\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    Task"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                            tempEvent \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                            new Event(tempArr[2], LocalDateTime.parse(tempArr[3]), LocalDateTime.parse(tempArr[4]));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    if (tempArr[1].equals(\"true\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                        tempEvent.markAsDone();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    taskArrayList.add(tempEvent);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    System.err.println(\"No event of this type\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        } catch (IOException fileNotFoundException) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            throw new DukeException(\"Failed to find file: \" + fileNotFoundException.getMessage());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return taskArrayList;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Convert from Tasklist Arraylist\u003c{Task}\u003e and write into file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param taskList data to be written to file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void write(TaskList taskList) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        createFile();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            FileWriter writer \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            for (Task task : taskList.getTaskArrayList()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                String taskType \u003d task.getClass().getTypeName();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                if (taskType.equals(\"duke.task.Todo\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    writer.append(String.format(\"%s,%s,%s\", taskType, task.isDone(), task.getDescription()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                } else if (taskType.equals(\"duke.task.Deadline\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    writer.append(String.format(\"%s,%s,%s,%s\", taskType, task.isDone(), task.getDescription(), ("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                            (Deadline) task).getBy()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    writer.append("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                            String.format(\"%s,%s,%s,%s,%s\", taskType, task.isDone(), task.getDescription(), ("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                                    (Event) task).getAt(), ((Event) task).getEnd()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                writer.write(\"\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        } catch (IOException ioException) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            ioException.printStackTrace();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Check path exist."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * If exist do nothing, else create."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    private void createFile() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Path path \u003d Paths.get(filePath).getParent();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        if (Files.exists(path)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                if (file.createNewFile()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    System.out.println(\"File created at: \" + file);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    System.out.println(\"File already exist at: \" + file);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                System.err.println(\"Failed to create file: \" + e.getMessage());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                Files.createDirectories(path);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                System.out.println(\"Directory created: \" + path);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                System.err.println(\"Failed to create directory: \" + e.getMessage());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            createFile();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 141
    }
  },
  {
    "path": "src/main/java/duke/io/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * Tasklist class define rules the list of tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author Galvin Leow Wen Yuan"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author A0200204J"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Initialise taskArraylist will be empty."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        this.taskArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Overloaded method."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Initialise taskArrayList with data from filepath."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param taskArrayList task array list from file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskArrayList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        this.taskArrayList \u003d taskArrayList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Arraylist that stores all the task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return arraylist of tasks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskArrayList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return taskArrayList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Add task into the taskArrayList."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param task task to be added."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        this.taskArrayList.add(task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Return number of task in list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return size of arraylist."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public int sizeOfList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return this.taskArrayList.size();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Get task by index."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param index int number to retrieve task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return task based on the index."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public Task retrieveTask(int index) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return this.taskArrayList.get(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Delete task by index."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param index task index that is to be deleted."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        this.taskArrayList.remove(index);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Search is input string is in task description."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param toFind search value."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return arraylist of search result."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public ArrayList\u003cTask\u003e find(String toFind) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        ArrayList\u003cTask\u003e searchResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        for (Task task : taskArrayList) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            if (task.getDescription().contains(toFind)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                searchResults.add(task);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return searchResults;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 97
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.command.ToDoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * Parser class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * Define rule to determine which command is use."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author Galvin Leow Wen Yuan"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author A0200204J"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * return command type that will be used."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param fullCommand full command that the user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return command type."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @throws DukeException input command does not fit any of the application functionalities."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String command \u003d fullCommand.split(\" \")[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            return new DoneCommand(fullCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            return new ToDoCommand(fullCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            return new DeadlineCommand(fullCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            return new EventCommand(fullCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            return new DeleteCommand(fullCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            return new FindCommand(fullCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 53
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * Deadline class define rules for Deadline object. Deadline is a subclass of Task class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author Galvin Leow Wen Yuan"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author A0200204J"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    private LocalDateTime by;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Initialise event class with description, isDone and time."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param description description of the deadline task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param by          date and time of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * The date and time of the deadline object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return LocalDateTime of the deadline object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public LocalDateTime getBy() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Check if two object are equal."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * If equal true, else false."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param o object to be compare."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return true is same, false if different"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        if (!super.equals(o)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Deadline deadline \u003d (Deadline) o;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return Objects.equals(by, deadline.by);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Summary to the deadline object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return string to the deadline object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"E, dd/MMM/yyyy HHmm\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return String.format(\"[D]%s (by: %s)\", super.toString(), by.format(dtf));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 71
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * Event class define rules for Event object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * Event is a subclass of Task class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author Galvin Leow Wen Yuan"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author A0200204J"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    private LocalDateTime at;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    private LocalDateTime end;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Initialise event class with description, isDone and time."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param description description of the event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param at          date and start of the event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param end         data and time end of the event."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public Event(String description, LocalDateTime at, LocalDateTime end) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * The start date and time of the event object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return localDateTime of start event."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public LocalDateTime getAt() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * TThe end date and time of the event object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return localDateTime of start event."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public LocalDateTime getEnd() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Check if two object are equal."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * If equal true, else false."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param o object to be compare."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return true is same, false if different"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        if (!super.equals(o)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Event event \u003d (Event) o;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return Objects.equals(at, event.at) \u0026\u0026 Objects.equals(end, event.end);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Summary to the event object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return string to the event object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"E, dd/MMM/yyyy HHmm\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                \"[E]%s (at: %s till %s)\", super.toString(), at.format(dtf), end.format(dtf));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 85
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * Task class define rules for task object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author Galvin Leow Wen Yuan"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author A0200204J"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Initialise task class with description and isDone."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param description description of task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Return a tick or cross."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * If isDone is false return cross else tick."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return isDone status in a form of UTF-8 tick or cross."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); // return tick of X symbols"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Change task object isDone to true to indicate task done."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * The description for task object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return string description of task object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * The status of task object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return true/false status of task object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Check if two object are equal."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * If equal true, else false."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param o object to be compare."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return true is same, false if different"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Task task \u003d (Task) o;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return isDone \u003d\u003d task.isDone \u0026\u0026 description.equals(task.description);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Summary to the task object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return string to the task object."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 87
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * Todo class define rules for todo object. Todo is a subclass of Task class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author Galvin Leow Wen Yuan"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @author A0200204J"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Initialise todo class with description and isDone."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param description description of task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Check if two object are equal."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * If equal true, else false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @param o object to be compare."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return true is same, false if different"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return super.equals(o);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * Summary to the todo object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     * @return string to the todo object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        return String.format(\"[T]%s\", super.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 43
    }
  },
  {
    "path": "src/test/java/duke/command/DukeCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.io.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.io.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "public class DukeCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    final String dataDir \u003d System.getProperty(\"user.dir\") + File.separator + \"dataTest\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    final String dataFile \u003d \"duke.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void testListCommand_testIsExit() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String fullCommand \u003d \"list\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Storage storage \u003d new Storage(dataDir + File.separator + dataFile);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        taskList.addTask(new Todo(\"return book\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        command.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 29
    }
  },
  {
    "path": "src/test/java/duke/io/DukeIOTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "public class DukeIoTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    final String dataDir \u003d System.getProperty(\"user.dir\") + File.separator + \"dataTest\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void loadTest() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String dataFileWrite \u003d \"dukeLoad.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String filePath \u003d dataDir + File.separator + dataFileWrite;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Storage storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        TaskList taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        // Create Test Result to compare"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Todo todoResult \u003d new Todo(\"CS2103T homework\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalDateTime testStartTime \u003d LocalDateTime.of(2020, 8, 27, 2, 22);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalDateTime testEndTime \u003d LocalDateTime.of(2020, 8, 27, 18, 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Event eventResult \u003d new Event(\"meeting\", testStartTime, testEndTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        eventResult.markAsDone();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalDateTime testTime \u003d LocalDateTime.of(2020, 8, 29, 16, 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"return book\", testTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        assert taskList.retrieveTask(0).equals(eventResult);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        assert taskList.retrieveTask(1).equals(todoResult);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        assert taskList.retrieveTask(2).equals(deadline);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void writeTest() throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String dataFileWrite \u003d \"dukeWrite.txt\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String filePath \u003d dataDir + File.separator + dataFileWrite;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Storage storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        TaskList taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        // Create test result to compare"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Todo todoResult \u003d new Todo(\"CS2103T homework\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalDateTime testStartTime \u003d LocalDateTime.of(2020, 8, 27, 2, 22);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalDateTime testEndTime \u003d LocalDateTime.of(2020, 8, 27, 18, 0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Event eventResult \u003d new Event(\"meeting\", testStartTime, testEndTime);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        eventResult.markAsDone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalDateTime testTime \u003d LocalDateTime.of(2020, 8, 29, 16, 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"return book\", testTime);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Parser.parse(\"event meeting /at 27-8-2020 222-1800\").execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Parser.parse(\"done 1\").execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Parser.parse(\"todo CS2103T homework\").execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Parser.parse(\"deadline return book /by 29-8-2020 1600\").execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        storage.write(taskList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        TaskList outcomes \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        assert outcomes.retrieveTask(0).equals(eventResult);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        assert outcomes.retrieveTask(1).equals(todoResult);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        assert outcomes.retrieveTask(2).equals(deadline);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        // Reset the file"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        TaskList reset \u003d new TaskList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        storage.write(reset);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void findTest() throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String dataFileWrite \u003d \"dukeFind.txt\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String filePath \u003d dataDir + File.separator + dataFileWrite;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Storage storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        TaskList taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        // Create test result to compare"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalDateTime testTime \u003d LocalDateTime.of(2020, 8, 29, 16, 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"return book\", testTime);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Todo todoResult \u003d new Todo(\"CS2101 borrow book\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        ArrayList\u003cTask\u003e outcomes \u003d taskList.find(\"book\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        for (Task outcome : outcomes) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            assert outcome.equals(deadline) || outcome.equals(todoResult);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 88
    }
  },
  {
    "path": "src/test/java/duke/parser/DukeParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "public class DukeParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void parseTest_testList() throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String fullCommand \u003d \"list\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        assert command.getClass().getTypeName().equals(\"duke.command.ListCommand\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void parseTest_testDone() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String fullCommand \u003d \"done 1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        assert command.getClass().getTypeName().equals(\"duke.command.DoneCommand\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void parseTest_testTodo() throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String fullCommand \u003d \"todo Test ToDo: parse\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        assert command.getClass().getTypeName().equals(\"duke.command.ToDoCommand\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void parseTest_testDeadline() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String fullCommand \u003d \"deadline Test deadline: parse /by 2-2-2020 1800\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        assert command.getClass().getTypeName().equals(\"duke.command.DeadlineCommand\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void parseTest_testEvent() throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String fullCommand \u003d \"event Test Event: parse /at 2-2-2020 1800-1900\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        assert command.getClass().getTypeName().equals(\"duke.command.EventCommand\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void parseTest_testFind() throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String fullCommand \u003d \"find book\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        assert command.getClass().getTypeName().equals(\"duke.command.FindCommand\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void parseTest_testDelete() throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String fullCommand \u003d \"delete 1\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        assert command.getClass().getTypeName().equals(\"duke.command.DeleteCommand\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void parseTest_testBye() throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String fullCommand \u003d \"bye\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        assert command.getClass().getTypeName().equals(\"duke.command.ByeCommand\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void parseTest_testNoSuchCommand() throws DukeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String fullCommand \u003d \"Test No Such Command: parse\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            assert e.getMessage().equals(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 74
    }
  },
  {
    "path": "src/test/java/duke/task/DukeTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "public class DukeTaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void createToDoTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Todo todo \u003d new Todo(\"Conduct ToDo Test: Creation\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        assert todo.toString().equals(\"[T][\\u2718] Conduct ToDo Test: Creation\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void createDeadlineTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalDateTime testTime \u003d LocalDateTime.of(2020, 8, 26, 12, 50);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Conduct Deadline Test: Creation\", testTime);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        assert deadline.toString().equals(\"[D][\\u2718] Conduct Deadline Test: Creation (by: Wed, 26/Aug/2020 1250)\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void createEventTest() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalDateTime testStartTime \u003d LocalDateTime.of(2020, 8, 26, 12, 50);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalDateTime testEndTime \u003d LocalDateTime.of(2020, 8, 26, 19, 50);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Event event \u003d new Event(\"Conduct Event Test: Creation\", testStartTime, testEndTime);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        System.out.println(event);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        assert event.toString().equals(\"[E][\\u2718] Conduct Event Test: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                + \"Creation (at: Wed, 26/Aug/2020 1250 till Wed, 26/Aug/2020 1950)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void markTaskDoneTest_testToDo() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Todo todo \u003d new Todo(\"Conduct ToDo Test: Mark Task Done\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        todo.markAsDone();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        assert todo.toString().equals(\"[T][\\u2713] Conduct ToDo Test: Mark Task Done\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void markTaskDoneTest_testDeadline() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalDateTime testTime \u003d LocalDateTime.of(2020, 8, 26, 12, 50);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Conduct Deadline Test: Mark Task Done\", testTime);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        deadline.markAsDone();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        assert deadline.toString()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                .equals(\"[D][\\u2713] Conduct Deadline Test: Mark Task Done (by: Wed, 26/Aug/2020 1250)\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void markTaskDoneTest_testEvent() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalDateTime testStartTime \u003d LocalDateTime.of(2020, 8, 26, 12, 50);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalDateTime testEndTime \u003d LocalDateTime.of(2020, 8, 26, 19, 50);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Event event \u003d new Event(\"Conduct Event Test: Mark Task Done\", testStartTime, testEndTime);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        event.markAsDone();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        assert event.toString()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                .equals(\"[E][\\u2713] Conduct Event Test: Mark Task Done (at: Wed, 26/Aug/2020 1250 till Wed, \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                        + \"26/Aug/2020 1950)\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void equalsTest_testToDo() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Todo todo \u003d new Todo(\"Conduct ToDo Test: equals\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Todo todoTest \u003d new Todo(\"Conduct ToDo Test: equals\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        assert todo.equals(todoTest);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void equalsTest_testDeadline() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalDateTime testTime \u003d LocalDateTime.of(2020, 8, 26, 12, 50);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Conduct Deadline Test: equals\", testTime);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalDateTime testTime2 \u003d LocalDateTime.of(2020, 8, 26, 12, 50);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Deadline deadlineTest \u003d new Deadline(\"Conduct Deadline Test: equals\", testTime2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        assert deadline.equals(deadlineTest);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    public void equalsTest_testEvent() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalDateTime testStartTime \u003d LocalDateTime.of(2020, 8, 26, 12, 50);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalDateTime testEndTime \u003d LocalDateTime.of(2020, 8, 26, 19, 50);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Event event \u003d new Event(\"Conduct Event Test: Mark Task Done\", testStartTime, testEndTime);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalDateTime testStartTime2 \u003d LocalDateTime.of(2020, 8, 26, 12, 50);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        LocalDateTime testEndTime2 \u003d LocalDateTime.of(2020, 8, 26, 19, 50);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Event eventTest \u003d new Event(\"Conduct Event Test: Mark Task Done\", testStartTime2, testEndTime2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        assert event.equals(eventTest);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 84
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 12
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF8"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 2,
      "-": 20
    }
  }
]
