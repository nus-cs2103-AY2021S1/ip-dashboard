[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "   "
      }
    ],
    "authorContributionMap": {
      "li-s": 1,
      "-": 26
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 16,
      "-": 45
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "### Add tasks "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "Add tasks such as todo task, task with a deadline, an event, or a task with a fixed duration."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "### List all task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "List all task with its status"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "### Find tasks with keywords"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "### Delete specified task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "### Mark specified task as done"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "### `clear` - Clears screen"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "`clear`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "`Previous commands and outputs are cleared`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "### `todo` - Creates a todo task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "`todo take out the trash`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "`Task of type todo created with description: take out the trash`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": "### `event` - Creates an event task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "`event take out the trash /at 12`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": "`Task of type event created with description: take out the trash at 12 o\u0027clock`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "li-s"
        },
        "content": "### `deadline` - Creates a todo task"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "li-s"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "li-s"
        },
        "content": "`deadline take out the trash /by 12`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "li-s"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "li-s"
        },
        "content": "`Task of type deadline created with description: take out the trash by 12 o\u0027clock`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "li-s"
        },
        "content": "### `fixedtask` - Creates a fixed duration task"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "li-s"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "li-s"
        },
        "content": "`fixedtask take out the trash /for 2`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "li-s"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "li-s"
        },
        "content": "`Task of type fixed duration created with description: take out the trash for 2 hours`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "li-s"
        },
        "content": "### `list` - List all tasks"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "li-s"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "li-s"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "li-s"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "li-s"
        },
        "content": "`List all previously created tasks`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "li-s"
        },
        "content": "### `done` - Marks task as done"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "li-s"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "li-s"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "li-s"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "li-s"
        },
        "content": "`The first task in the list is marked as done`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "li-s"
        },
        "content": "### `delete` - Delete task"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "li-s"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "li-s"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "li-s"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "li-s"
        },
        "content": "`Deletes the first task`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "li-s"
        },
        "content": "### `find` - Delete task"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "li-s"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "li-s"
        },
        "content": "`find trash`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "li-s"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "li-s"
        },
        "content": "`List all task with keyword: trash in the description`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "li-s"
        },
        "content": "### `hello` - Display hello message"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "li-s"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "li-s"
        },
        "content": "`hello`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "li-s"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "li-s"
        },
        "content": "`Welcome the user`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "li-s"
        },
        "content": "### `bye` - End the program"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "li-s"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "li-s"
        },
        "content": "`The program ends`"
      }
    ],
    "authorContributionMap": {
      "li-s": 113,
      "-": 14
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "/** Deadline form of Task */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private LocalDate by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "    Deadline(String description, LocalDate by) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this(description, false, by);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "    Deadline(String description, boolean isDone, LocalDate by) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Returns updated task of subtype: Deadline"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param isDone New status for the task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @return new Deadline with updated status"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public Task updateStatus(boolean isDone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return new Deadline(super.description, isDone, by);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \")\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 34
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "li-s"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "li-s"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "li-s"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 61
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "/** Duke class to encapsulate the behaviour of a task manager */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "@SuppressWarnings(\"checkstyle:Regexp\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private static Scanner scan \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private static final String SAVE_PATH \u003d \"./SaveData.txt\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private static enum AcceptedCommands {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TODO,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "        EVENT,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "        DEADLINE,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "        LIST,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "        DONE,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "        BYE,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "        DELETE,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "        CLEAR,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "        HELLO,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "        FIND,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "        FIXEDTASK,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "    Duke(String filepath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "        storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "        tasks \u003d storage.loadTask();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /** Driver method for Duke */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private String run(String userInput) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "        while (!userInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "            String command;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "            String details;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": "                command \u003d Parser.getCommand(userInput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": "                details \u003d Parser.getDetails(userInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "                // Catch illegal commands"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": "                checkIllegalCommand(command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": "                // Catch missing content"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": "                checkMissingArgument(command, details);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": "                // Check indexing out of bounds"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": "                checkExistingTask(command, details, tasks.length());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "li-s"
        },
        "content": "                // Check illegal argument"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "li-s"
        },
        "content": "                checkIllegalArgument(command, details);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "li-s"
        },
        "content": "            } catch (DukeIllegalCommandException | DukeMissingArgumentException | DukeTaskOutOfBoundsException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": "                return (e.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "li-s"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "li-s"
        },
        "content": "                return (\"date time wrong\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "li-s"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "li-s"
        },
        "content": "                return (\"Write a number pls\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "li-s"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "li-s"
        },
        "content": "            String a \u003d actionPicker(userInput);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "li-s"
        },
        "content": "            if (!a.equals(\"\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "li-s"
        },
        "content": "                return a;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "li-s"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "li-s"
        },
        "content": "            // Gets the new input"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "li-s"
        },
        "content": "            userInput \u003d scan.nextLine();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return Ui.prettyPrint(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Decide what action to perform"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param userInput The line of user input"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @return The output string to be displayed"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private String actionPicker(String userInput) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "li-s"
        },
        "content": "        String command \u003d Parser.getCommand(userInput);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "li-s"
        },
        "content": "        String details \u003d Parser.getDetails(userInput);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // Decide the actions"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "li-s"
        },
        "content": "        String[] description;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Task taskToUpdate;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "li-s"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "li-s"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "li-s"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "li-s"
        },
        "content": "                return Ui.prettyPrint(tasks);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "li-s"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "li-s"
        },
        "content": "                taskToUpdate \u003d tasks.updateTaskStatus(Parser.getIndex(userInput), true);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "li-s"
        },
        "content": "                storage.saveTask(tasks);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "li-s"
        },
        "content": "                return Ui.prettyPrint(\"Nice! I\u0027ve marked this task as done: \\n\" + \"\\t\" + taskToUpdate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "li-s"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "li-s"
        },
        "content": "                taskToUpdate \u003d tasks.addTask(new ToDo(Parser.getDetails(userInput)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "li-s"
        },
        "content": "                storage.saveTask(tasks);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "li-s"
        },
        "content": "                return Ui.updateTaskText(\"added\", taskToUpdate, tasks.length());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "li-s"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "li-s"
        },
        "content": "                description \u003d Parser.stringSplit(details, \" /at \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "li-s"
        },
        "content": "                taskToUpdate \u003d tasks.addTask(new Event(description[0], LocalDate.parse(description[1])));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "li-s"
        },
        "content": "                storage.saveTask(tasks);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "li-s"
        },
        "content": "                return Ui.updateTaskText(\"added\", taskToUpdate, tasks.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "li-s"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "li-s"
        },
        "content": "                description \u003d Parser.stringSplit(details, \" /by \");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "li-s"
        },
        "content": "                taskToUpdate \u003d tasks.addTask(new Deadline(description[0], LocalDate.parse(description[1])));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "li-s"
        },
        "content": "                storage.saveTask(tasks);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "li-s"
        },
        "content": "                return Ui.updateTaskText(\"added\", taskToUpdate, tasks.length());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "li-s"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "li-s"
        },
        "content": "                taskToUpdate \u003d tasks.removeTask(Parser.getIndex(userInput));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "li-s"
        },
        "content": "                storage.saveTask(tasks);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "li-s"
        },
        "content": "                return Ui.updateTaskText(\"removed\", taskToUpdate, tasks.length());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "li-s"
        },
        "content": "            case \"fixedtask\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "li-s"
        },
        "content": "                description \u003d Parser.stringSplit(details, \" /for \");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "li-s"
        },
        "content": "                taskToUpdate \u003d tasks.addTask(new FixedDurationTask(description[0], description[1]));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "li-s"
        },
        "content": "                storage.saveTask(tasks);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "li-s"
        },
        "content": "                return Ui.updateTaskText(\"added\", taskToUpdate, tasks.length());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "li-s"
        },
        "content": "            case \"clear\":"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "li-s"
        },
        "content": "                return (\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "li-s"
        },
        "content": "            case \"hello\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "li-s"
        },
        "content": "                return Ui.greet();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "li-s"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "li-s"
        },
        "content": "                return Ui.prettyPrint(tasks.contains(details));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "li-s"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "li-s"
        },
        "content": "                return \"\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "li-s"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "li-s"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "li-s"
        },
        "content": "            return \"file not found\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Checks if command user input is valid"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param command Command to check against valid commands"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @throws DukeIllegalCommandException"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private static void checkIllegalCommand(String command) throws DukeIllegalCommandException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "li-s"
        },
        "content": "        for (AcceptedCommands i : AcceptedCommands.values()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "li-s"
        },
        "content": "            if (command.equalsIgnoreCase(i.name())) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "li-s"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "li-s"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "li-s"
        },
        "content": "        throw new DukeIllegalCommandException();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Checks if command of user is missing arguments"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param command Command to check"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param details Checks if argument is missing in details"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @throws DukeMissingArgumentException"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private static void checkMissingArgument(String command, String details) throws DukeMissingArgumentException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "li-s"
        },
        "content": "        if (!(command.equalsIgnoreCase(AcceptedCommands.LIST.name())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "li-s"
        },
        "content": "                || command.equalsIgnoreCase(AcceptedCommands.BYE.name())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "li-s"
        },
        "content": "                || command.equalsIgnoreCase(AcceptedCommands.CLEAR.name())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "li-s"
        },
        "content": "                || command.equalsIgnoreCase(AcceptedCommands.HELLO.name()))"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "li-s"
        },
        "content": "                \u0026\u0026 (details.isEmpty())) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "li-s"
        },
        "content": "            throw new DukeMissingArgumentException(command);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Checks for index out of bounds error"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param command Command to check"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param details Details of command"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param max Maximum length of TaskList"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @throws DukeTaskOutOfBoundsException"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private static void checkExistingTask(String command, String details, int max) throws DukeTaskOutOfBoundsException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "li-s"
        },
        "content": "        if ((command.equalsIgnoreCase(AcceptedCommands.DONE.name()))"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "li-s"
        },
        "content": "                || command.equalsIgnoreCase(AcceptedCommands.DELETE.name())) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "li-s"
        },
        "content": "            if ((Integer.parseInt(details) \u003c 1) || (Integer.parseInt(details) \u003e\u003d (max + 1))) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "li-s"
        },
        "content": "                throw new DukeTaskOutOfBoundsException(command);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "li-s"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Checks for illegal arguments"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param command Command to check"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param details Check if arument is valid"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private static void checkIllegalArgument(String command, String details) throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "li-s"
        },
        "content": "        if (command.equalsIgnoreCase(AcceptedCommands.DONE.name())"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "li-s"
        },
        "content": "                || command.equalsIgnoreCase(AcceptedCommands.DELETE.name())) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "li-s"
        },
        "content": "            Integer.parseInt(details);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "li-s"
        },
        "content": "        new Duke(SAVE_PATH).run(\"hello\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return run(input);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 198,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/DukeIllegalCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "/** Exception for unrecognised commands */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class DukeIllegalCommandException extends IllegalArgumentException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return \"\\t________________________________________________________\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "                + \"\\tOOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "                + \"\\t________________________________________________________\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 11
    }
  },
  {
    "path": "src/main/java/duke/DukeMissingArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "/** Exception for missing arguments */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class DukeMissingArgumentException extends ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "    DukeMissingArgumentException(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return \"\\t____________________________________________________\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "                + \"\\tOOPS!!! The description of \" + description + \" cannot be empty.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "                + \"\\t________________________________________________________\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 17
    }
  },
  {
    "path": "src/main/java/duke/DukeTaskOutOfBoundsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "/** Exception for accessing uninitialised Tasks */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class DukeTaskOutOfBoundsException extends IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "    DukeTaskOutOfBoundsException(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return \"\\t________________________________________________________\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "                + \"\\tOOPS!!! The task to mark as \" + description + \" does not exist.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "                + \"\\t________________________________________________________\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 17
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "/** Event form of Task */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private LocalDate at;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "    Event(String description, LocalDate at) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this(description, false, at);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "    Event(String description, boolean isDone, LocalDate at) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Returns updated task of subtype: Event"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param isDone New status for the task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @return new Event with updated status"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public Task updateStatus(boolean isDone) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return new Event(super.description, isDone, at);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at:\" + at + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 33
    }
  },
  {
    "path": "src/main/java/duke/FixedDurationTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class FixedDurationTask extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private final String duration;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "    FixedDurationTask(String description, boolean isDone, String duration) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "    FixedDurationTask(String description, String duration) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this(description, false, duration);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Returns updated task of subtype: FixedDurationTask"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param isDone New status for the task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @return new FixedDurationTask with updated status"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public Task updateStatus(boolean isDone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return updateStatus(isDone, this.duration);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Returns updated task of subtype: FixedDurationTask"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param isDone New status for the task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @return new FixedDurationTask with updated status"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public Task updateStatus(boolean isDone, String duration) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return new FixedDurationTask(super.description, isDone, duration);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return \"[F]\" + super.toString() + \" for \" + duration + \" duration.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 38
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private static final String SAVE_PATH \u003d \"./SaveData.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private Duke duke \u003d new Duke(SAVE_PATH);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 31
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": "        );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "li-s"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 51
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "/** Utility class to parse strings */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Returns split string"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param toSplit String to split"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param split token to split string"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @return String array of split string"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static String[] stringSplit(String toSplit, String split) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assert toSplit.length() \u003e 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return toSplit.split(split);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Returns split string to predetermined limit"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param toSplit string to split"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param split token to split string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param limit limit the number of split strings"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @return String array of split string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static String[] stringSplitLimit(String toSplit, String split, int limit) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assert limit \u003e 0 : \"Spliting string using negative slices\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assert limit \u003c toSplit.length() : \"Splitting string into more slices than length of string\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return toSplit.split(split, limit);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Returns command of the string for Duke"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param line line of user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @return first word of string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static String getCommand(String line) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assert line.length() \u003e 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return stringSplitLimit(line, \" \", 2)[0];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Returns argument to pass to command in duke"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param line line of user input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @return sentence after the first word"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static String getDetails(String line) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assert line.length() \u003e 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "li-s"
        },
        "content": "        String[] splitString \u003d stringSplitLimit(line, \" \", 2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return splitString.length \u003c 2 ? \"\" : splitString[1];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Returns the argument as an integer"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param line line of user input"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @return integer form of argument"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static int getIndex(String line) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assert line.length() \u003e 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return Integer.parseInt(getDetails(line)) - 1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 64
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "/** IO for save files */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private final String savePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "    Storage(String savePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.savePath \u003d savePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Saves TaskList to file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param data TaskList to save"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void saveTask(TaskList data) throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // If no save file, create one"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "        if (!Files.exists(Paths.get(savePath))) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "            Files.createFile(Paths.get(savePath));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // Write to save file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "        FileWriter fs \u003d new FileWriter(savePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "        for (int i \u003d 0; i \u003c data.length(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "            fs.write(data.getTask(i).toString() + System.lineSeparator());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "        fs.close();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Returns TaskList loaded from file"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @return TaskList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public TaskList loadTask() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TaskList tasks \u003d TaskList.createTaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": "        File f \u003d new File(savePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // Loads the input from the file, if no file, return empty arraylist"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "li-s"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "li-s"
        },
        "content": "            Scanner input \u003d new Scanner(f);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "li-s"
        },
        "content": "            while (input.hasNext()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "li-s"
        },
        "content": "                String newTask \u003d input.nextLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "li-s"
        },
        "content": "                // Get type of task"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "li-s"
        },
        "content": "                char taskType \u003d newTask.charAt(1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "li-s"
        },
        "content": "                // Check if the task is done"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "li-s"
        },
        "content": "                boolean isDone \u003d newTask.contains(\"✓\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "li-s"
        },
        "content": "                // Format the string"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "li-s"
        },
        "content": "                newTask \u003d newTask.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "li-s"
        },
        "content": "                newTask \u003d newTask.replace(\"(\", \"/\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "li-s"
        },
        "content": "                newTask \u003d newTask.replaceAll(\"[:)]\", \"\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "li-s"
        },
        "content": "                // Add the tasks"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "li-s"
        },
        "content": "                String[] description;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "li-s"
        },
        "content": "                switch (taskType) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "li-s"
        },
        "content": "                case \u0027T\u0027:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "li-s"
        },
        "content": "                    tasks.addTask(new ToDo(newTask, isDone));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "li-s"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "li-s"
        },
        "content": "                case \u0027D\u0027:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "li-s"
        },
        "content": "                    description \u003d Parser.stringSplit(newTask, \"/by\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "li-s"
        },
        "content": "                    tasks.addTask(new Deadline(description[0], isDone, LocalDate.parse(description[1])));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "li-s"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "li-s"
        },
        "content": "                case \u0027E\u0027:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "li-s"
        },
        "content": "                    description \u003d Parser.stringSplit(newTask, \"/at\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "li-s"
        },
        "content": "                    tasks.addTask(new Event(description[0], isDone, LocalDate.parse(description[1])));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "li-s"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "li-s"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "li-s"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "li-s"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "li-s"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "li-s"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 90
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "/** Groups each action the user input as a Task, with the description and status */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "    Task(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this(description, false);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "    protected Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "    // Get status icon for the current task, tick \u003d done, cross \u003d no done"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Return updated task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param isDone New status for the task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @return new task with updated status"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public Task updateStatus(boolean isDone) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return new Task(description, isDone);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "    // Print the status of the task before the task description"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 37
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "/** Data structure for Tasks book keeping */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static TaskList createTaskList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Returns updated Task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Updates Task in TaskList and returns it"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param index index of Task to update"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param status status to update Task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @return updated Task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public Task updateTaskStatus(int index, boolean status) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assert index \u003e 0 : \"Accessing tasklist with negative index\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assert index \u003c tasks.size() : \"Accessing tasklist out of bounds\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Task taskToUpdate \u003d tasks.get(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Task updatedTask \u003d taskToUpdate.updateStatus(true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "        tasks.set(index, updatedTask);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return updatedTask;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Returns added Task to TaskList"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param task Task to add to TaskList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @return Task added to TaskList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public Task addTask(Task task) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Returns removed Task from TaskList"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param task index of Task to remove"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @return Task removed from TaskList"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public Task removeTask(int task) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return tasks.remove(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Returns Task"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param i index of Task to retrieve"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @return Task"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public Task getTask(int i) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assert i \u003e 0 : \"Accessing tasklist with negative index\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assert i \u003c tasks.size() : \"Accessing tasklist out of bounds\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return tasks.get(i);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Returns length of TaskList"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @return length of TaskList"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public int length() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Returns TaskList containing Tasks that contains the given string"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param string string to check if Tasks contain it"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @return TaskList with Task containing the string"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public TaskList contains(String string) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TaskList foundTasks \u003d TaskList.createTaskList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "li-s"
        },
        "content": "        for (Task i : tasks) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "li-s"
        },
        "content": "            if (i.description.contains(string)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "li-s"
        },
        "content": "                foundTasks.addTask(i);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "li-s"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return foundTasks;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 92
    }
  },
  {
    "path": "src/main/java/duke/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "/** ToDo form of Task */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "    ToDo(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this(description, false);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "    ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Returns updated task of subtype: ToDo"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param isDone New status for the task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @return new ToDo with updated status"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public Task updateStatus(boolean isDone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return new ToDo(super.description, isDone);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 28
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "/** Utility methods for generating stylised CLI outputs */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private static final String LINE_DIVIDER \u003d \"\\n\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private static final String LOGO \u003d \" ____\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /** Prints out the greeting */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static String greet() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "        StringBuilder s \u003d new StringBuilder(\"Hello from\\n\" + LOGO);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "        s.append(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return s.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /** Prints out message to indicate Task is updated */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static String updateTaskText(String update, Task taskToUpdate, int size) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return Ui.prettyPrint(\"Got it. I\u0027ve \" + update + \" this task: \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "                + \"\\t\" + taskToUpdate + \"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "                + \"\\tNow you have \" + size + \" tasks in the list.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Prints the given string with additional wrappings"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param string String to print"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static String prettyPrint(String string) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return (LINE_DIVIDER + \"\\t\" + string + \"\\n\" + LINE_DIVIDER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Prints the given array list with additional effects"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param tasks Tasks to print"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static String prettyPrint(TaskList tasks) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": "        StringBuilder s \u003d new StringBuilder(LINE_DIVIDER + \"\\tHere are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.length(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "            s.append(\"\\t\" + (i + 1) + \".\" + tasks.getTask(i));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": "            s.append(\"\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": "        s.append(LINE_DIVIDER);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return s.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 49
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "li-s": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "li-s": 19
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void stringSplit_getWords_success() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertEquals(\"Hello\", Parser.stringSplit(\"Hello world\", \" \")[0]);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertEquals(\"world\", Parser.stringSplit(\"Hello world\", \" \")[1]);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void stringSplitLimit_splitTwoString_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertEquals(\"world how are you\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "                Parser.stringSplitLimit(\"Hello world how are you\", \" \", 2)[1]);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void getIndex_parseStringToInt_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertEquals(0, Parser.getIndex(\"done 1\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 24
    }
  },
  {
    "path": "src/test/java/duke/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private static final String SAVEPATH \u003d \"./src/data/SaveData.txt\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void saveTask_noExistingFile_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "            new Storage(SAVEPATH).saveTask(TaskList.createTaskList());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void loadTask_noExistingSave_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertEquals(0, new Storage(SAVEPATH).loadTask().length());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 26
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "Walk the dog"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": "todo running"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "event swimming /at sunday"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "deadline do tests /by wednesday"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "li-s": 9
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "SET JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "javac -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "li-s": 3,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "li-s": 1,
      "-": 37
    }
  }
]
