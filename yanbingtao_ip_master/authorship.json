[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "compileJava.options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 24,
      "-": 44
    }
  },
  {
    "path": "data/listOfTasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "T | 0 | 123123"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "T | 1 | asdfa"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "E | 0 | asdfasdf  |  24"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "T | 0 | onemoretime"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 4
    }
  },
  {
    "path": "data/taskList.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "D | 0 | assd | 2020-08-22T19:00"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 1
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "E | 0 | asd | 2020-08-22T18:00"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "E | 0 | asd | 2020-10-22T19:00"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "T | 1 | asd "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "T | 1 | call me tmr"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 4
    }
  },
  {
    "path": "src/main/java/duke/Deadlines.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Handles deadline tasks"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class Deadlines extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private LocalDateTime deadlineTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Deadlines class constructor"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param taskTitle A string of deadline task name"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param deadlineTime A string of deadline time"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param isDone Status of the deadline task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public Deadlines(String taskTitle, String deadlineTime, Boolean isDone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        super(taskTitle, isDone, TaskTypes.TASK_TYPE_DEADLINE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.deadlineTime \u003d LocalDateTime.parse(deadlineTime, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Loads deadline tasks from the file at beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param taskTitle A string of deadline task name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param deadlineTime A string of deadline time"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param isDone Status of the deadline task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param tasks The overall user\u0027s task list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static void loadDeadlineTask(String taskTitle, String deadlineTime, Boolean isDone, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        deadlineTime \u003d deadlineTime.replace(\u0027T\u0027, \u0027 \u0027);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Deadlines deadline \u003d new Deadlines(taskTitle, deadlineTime, isDone);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        tasks.add(deadline);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Prints the deadline task time in the format of \"d MMM yyyy hh:mm am/pm\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @return A string of the deadline task time in the format of \"d MMM yyyy hh:mm am/pm\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public String printTime() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return deadlineTime.format(DateTimeFormatter.ofPattern(\"d MMM yyyy hh:mm a\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Returns a string of deadline task"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @return A string of deadline task"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return super.toString() + \" (by: \" + printTime() + \")\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Returns a string follows the format of the file"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @return A string follows the format of the file"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public String writeToFile() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return super.writeToFile() + \" | \" + deadlineTime;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 67
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 56
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Main class for duke to run."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    protected static TaskList tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Initialises Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param filePath A string of file path to store the task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * asd"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String filePath \u003d \"data/tasks.txt\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Runs Duke."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ui.logoMsg();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ui.greetingMsg();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String inputMsg \u003d sc.nextLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        while (!inputMsg.equals(\"bye\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            Parser.parseUserInput(inputMsg);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            // waiting for user to key in the next request"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            inputMsg \u003d sc.nextLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        storage.writeTasks(tasks);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        // say bye to the user"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Ui.byeMsg();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Starts the program."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param args Args."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return Parser.parseUserInput(input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public void save() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        storage.writeTasks(tasks);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 66,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/Events.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Handles Event tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class Events extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    protected LocalDateTime eventTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Events class constructor."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param taskTitle A string of Event task name."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param eventTime A string of Event time."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param isDone Status of the Event task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public Events(String taskTitle, String eventTime, Boolean isDone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        super(taskTitle, isDone, TaskTypes.TASK_TYPE_EVENT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.eventTime \u003d LocalDateTime.parse(eventTime, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Loads Event tasks from the file at beginning."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param taskTitle A string of Event task name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param eventTime A string of Event time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param isDone Status of the Event task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param tasks The overall user\u0027s task list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static void loadEventTask(String taskTitle, String eventTime, Boolean isDone, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        eventTime \u003d eventTime.replace(\u0027T\u0027, \u0027 \u0027);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Events event \u003d new Events(taskTitle, eventTime, isDone);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        tasks.add(event);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Prints the Event task time in the format of \"d MMM yyyy hh:mm am/pm\"."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @return A string of the Event task time in the format of \"d MMM yyyy hh:mm am/pm\"."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public String printTime() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return eventTime.format(DateTimeFormatter.ofPattern(\"d MMM yyyy hh:mm a\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Returns a string of Event task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @return A string of Event task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return super.toString() + \" (at: \" + printTime() + \")\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Returns a string follows the format of the file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @return A string follows the format of the file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public String writeToFile() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return super.writeToFile() + \" | \" + eventTime;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 67
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 9
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 31
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private ImageView imageView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private Image logoImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/logo.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        imageView.setImage(logoImage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        DialogBox logo \u003d DialogBox.getDukeDialog(Ui.logoMsg(), dukeImage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        DialogBox greeting \u003d DialogBox.getDukeDialog(Ui.greetingMsg(), dukeImage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        dialogContainer.getChildren().addAll(logo, greeting);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    exitPlatform();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                            DialogBox.getUserDialog(e.getMessage(), dukeImage)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private void exitPlatform() throws InterruptedException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Thread.sleep(2000);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        duke.save();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 78
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Takes in user inputs and make sense of them."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Parses the inputs and calls the corresponding execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param inputMsg"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static String parseUserInput(String inputMsg) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        TaskList tasks \u003d Duke.tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (inputMsg.equals(\"list\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return Ui.getAllTasksMsg(tasks.getTaskList());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        } else if (inputMsg.equals(\"help\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return Ui.helpMsg();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        } else if (inputMsg.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                int index \u003d Integer.parseInt(inputMsg.split(\"done \")[1]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                TaskList.doneTask(index, tasks.getTaskList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                return Ui.doneTaskMsg(index, tasks.getTaskList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                // if the user doesn\u0027t type the index after the keyword \"done\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                return Warnings.invalidDoneTaskIndex(tasks.getTaskListSize());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                // if the user doesn\u0027t key in a valid index after keyword \"done\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                return Warnings.invalidDoneTaskIndex(tasks.getTaskListSize());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        } else if (inputMsg.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            String taskTitle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                taskTitle \u003d inputMsg.split(\"todo \")[1];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                TaskList.addNewTodoTask(taskTitle, tasks.getTaskList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                return Ui.addTodoTaskMsg(tasks.getTaskList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                // if the user doesn\u0027t type the the task description after the keyword \"to-do\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                return Warnings.invalidToDo();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        } else if (inputMsg.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            String taskTitle;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            String deadlineTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                taskTitle \u003d inputMsg.split(\"deadline \")[1].split(\" /by \")[0];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                deadlineTime \u003d inputMsg.split(\"deadline \")[1].split(\" /by \")[1];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                TaskList.addNewDeadlineTask(taskTitle, deadlineTime, tasks.getTaskList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                return Ui.addDeadlineTaskMsg(tasks.getTaskList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                // if the user doesn\u0027t follow the correct format after the keyword \"deadline\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                return Warnings.invalidDeadline();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        } else if (inputMsg.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                String taskTitle \u003d inputMsg.split(\"event \")[1].split(\" /at \")[0];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                String eventTime \u003d inputMsg.split(\"event \")[1].split(\" /at \")[1];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                TaskList.addNewEventTask(taskTitle, eventTime, tasks.getTaskList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                return Ui.addEventTaskMsg(tasks.getTaskList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                // if the user doesn\u0027t follow the correct format after the keyword \"event\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                return Warnings.invalidEvent();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        } else if (inputMsg.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                int index \u003d Integer.parseInt(inputMsg.split(\"delete \")[1]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                Task taskDeleted \u003d TaskList.deleteTask(index, tasks.getTaskList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                return Ui.deleteTaskMsg(index, taskDeleted, tasks);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                // if the user doesn\u0027t type the index after the keyword \"delete\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                return Warnings.invalidDelete(tasks.getTaskListSize());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                // if the user doesn\u0027t key in a valid index after keyword \"delete\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                return Warnings.invalidDelete(tasks.getTaskListSize());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        } else if (inputMsg.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            String keyword \u003d inputMsg.split(\"find \")[1];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            ArrayList\u003cTask\u003e matchedTasks \u003d TaskList.findTask(keyword, tasks.getTaskList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return Ui.findMatchingTasks(keyword, matchedTasks);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        } else if (inputMsg.equals(\"bye\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return Ui.byeMsg();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            // if the user randomly enter any other commands which are not inside the command list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return Warnings.invalidInput();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 88
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Deals with reading and saving user\u0027s task list from/into the file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Storage class construction."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param filePath A string of file path to store the task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Loads the user\u0027s task list from the file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @return An ArrayList of the task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public ArrayList\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            if (file.exists()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                FileReader fileReader \u003d new FileReader(file);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                String lineData \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                while (lineData !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    String[] lineSegment \u003d lineData.split(\" \\\\| \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    boolean isDone \u003d lineSegment[1].equals(\"1\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                            ? true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                            : false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    switch (lineSegment[0]) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    case \"T\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                        ToDos.loadTodoTask(lineSegment[2], isDone, tasks);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    case \"D\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                        Deadlines.loadDeadlineTask(lineSegment[2], lineSegment[3], isDone, tasks);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    case \"E\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                        Events.loadEventTask(lineSegment[2], lineSegment[3], isDone, tasks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    lineData \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                bufferedReader.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                fileReader.close();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            Warnings.invalidFileInput(e);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Saves the user\u0027s task list into the file."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param taskList The overall user\u0027s task list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public void writeTasks(TaskList taskList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            ArrayList\u003cTask\u003e tasks \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            FileWriter fileWriter;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            fileWriter \u003d new FileWriter(file, false);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                fileWriter.write(task.writeToFile() + \"\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            Warnings.invalidFileOutput(e);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 90
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Handles all kinds of tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    protected String taskTitle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    protected TaskTypes taskType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Constructor of Task class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param taskTitle A string of task name."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param isDone Status of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param taskType Type of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public Task(String taskTitle, Boolean isDone, TaskTypes taskType) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.taskTitle \u003d taskTitle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Get the status of the task (\"✓\" or \"✗\")."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @return The icon representing the status of the task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return (isDone"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                ? \"✓\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                : \"✗\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Get the status of the task (\"1\" means done / \"0\" means not done)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @return The int representing the status of the task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public String getStatusNum() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return (isDone"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                ? \"1\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                : \"0\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Returns a string of the task title."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @return A string of the task title."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public String getTaskTitle() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return this.taskTitle;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Returns a string of the task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @return A string of the task."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return \"[\" + this.taskType + \"]\" + \"[\" + getStatus() + \"] \" + taskTitle;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Returns a string follows the format of the file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @return A string follows the format of the file."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public String writeToFile() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return this.taskType + \" | \" + getStatusNum() + \" | \" + taskTitle;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 76
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Contains the overall user\u0027s task list, and it provide operations to modify task in the task list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * TaskList Constructor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param tasks The overall user\u0027s task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Returns the ArrayList contains all user\u0027s tasks in the task list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @return The ArrayList contains all user\u0027s tasks in the task list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public int getTaskListSize() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Adds new to-do type task to the task list and calls the Ui class to display a message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param taskTitle A string of Event task name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param tasks The overall user\u0027s task list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static void addNewTodoTask(String taskTitle, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ToDos newTodoTask \u003d new ToDos(taskTitle, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        tasks.add(newTodoTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Adds new deadline type task to the task list and calls the Ui class to display a message."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param taskTitle A string of Event task name."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param deadlineTime A string of deadline time"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param tasks The overall user\u0027s task list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static void addNewDeadlineTask(String taskTitle, String deadlineTime, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Deadlines newDeadline \u003d new Deadlines(taskTitle, deadlineTime, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        tasks.add(newDeadline);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Adds new event type task to the task list and calls the Ui class to display a message."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param taskTitle A string of Event task name."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param eventTime A string of Event time."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param tasks The overall user\u0027s task list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static void addNewEventTask(String taskTitle, String eventTime, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Events newEvent \u003d new Events(taskTitle, eventTime, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        tasks.add(newEvent);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Deletes a task from the task list and calls the Ui class to display a message."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param index The int of the task series number in the task list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param tasks The overall user\u0027s task list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static Task deleteTask(int index, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Task taskToDelete \u003d tasks.get(index - 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        tasks.remove(index - 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return taskToDelete;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Marks a task as done in the task list and calls the Ui class to display a message."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param index The int of the task series number in the task list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param tasks The overall user\u0027s task list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static void doneTask(int index, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        tasks.get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Finds all tasks that match with the keyword in the task list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param keyword A string of keyword to find the matching tasks."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param tasks An ArrayList of all the tasks that match with the keyword."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static ArrayList\u003cTask\u003e findTask(String keyword, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ArrayList\u003cTask\u003e matchedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            if (task.getTaskTitle().contains(keyword)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                matchedTasks.add(task);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return matchedTasks;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 105
    }
  },
  {
    "path": "src/main/java/duke/TaskTypes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Enum of all types of tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public enum TaskTypes {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    TASK_TYPE_TODO {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return \"T\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    },"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    TASK_TYPE_DEADLINE {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return \"D\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    },"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    TASK_TYPE_EVENT {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return \"E\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 28
    }
  },
  {
    "path": "src/main/java/duke/ToDos.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Handles To-Do tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class ToDos extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * ToDos class constructor."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param taskTitle A string of To-Do task name."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param isDone Status of the To-Do task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public ToDos(String taskTitle, Boolean isDone) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        super(taskTitle, isDone, TaskTypes.TASK_TYPE_TODO);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Loads To-Do tasks from the file at beginning."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param taskTitle A string of To-Do task name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param isDone Status of the To-Do task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param tasks The overall user\u0027s task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static void loadTodoTask(String taskTitle, Boolean isDone, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ToDos todoTask \u003d new ToDos(taskTitle, isDone);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        tasks.add(todoTask);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Returns a string follows the format of the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @return A string follows the format of the file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public String writeToFile() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return super.writeToFile();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 39
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Prints the relevant messages."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private static final String DIVIDER \u003d \"--------------------------------------------------------\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private static final String DIVIDER_HELP \u003d \"********************************************\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Prints logo \"Welcome\" greeting."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static String logoMsg() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String logo \u003d \"\\n\\n\\n|^_^|┛\\nWELCOME to DukeBT!\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return logo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Prints greeting."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static String greetingMsg() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String greetingMsg \u003d DIVIDER"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n Hello! I\u0027m DukeBT.\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n What can I do for you?\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n\\n **Type \u0027help\u0027 to see what I can do. |^_^|\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n\" + DIVIDER + \"\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        System.out.println(greetingMsg);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return greetingMsg;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Prints help message to show all possible commands available."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static String helpMsg() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String commandList \u003d DIVIDER_HELP"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \" ┗( ⊙.⊙ )┛ \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n These are all the commands you may use:\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n     1.list -- show all tasks\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n     2.todo \u003ctask name\u003e -- add a task\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n     3.deadline \u003ctask name\u003e /by \u003ctask deadline\u003e -- add a task with its deadline\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n     4.event \u003cevent name\u003e /at \u003cevent timing\u003e -- add an event with its timing\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n     5.done \u003ctask index\u003e -- mark this task as done\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n     6.delete \u003ctask index\u003e -- mark this task from task list\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n     7.find \u003ckeyword\u003e -- find all tasks in the task list which contains the keyword\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n     8.help -- show all commands\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n     9.bye -- exit the chatbot\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n\" + DIVIDER_HELP + \"\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        System.out.println(commandList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return commandList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Prints bye message to see goodbye to the user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static String byeMsg() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String byeMsg \u003d DIVIDER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n |^_^|┛\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n Bye. Hope to see you again soon!\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n Your task list has been saved.\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n It will be automatically reloaded when you come back!\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n\" + DIVIDER + \"\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        System.out.println(byeMsg);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return byeMsg;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Prints confirmation message to show user the deadline task has been added into the task list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param tasks The overall user\u0027s task list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static String addDeadlineTaskMsg(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String outputMsg \u003d DIVIDER"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n (^.^)\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n Got it. I\u0027ve added this Deadline task:\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n     \" + tasks.size() + \".\" + tasks.get(tasks.size() - 1)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n Now you have \" + tasks.size() + \" tasks in the list.\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n\" + DIVIDER + \"\\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        System.out.println(outputMsg);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return outputMsg;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Prints confirmation message to show user the event task has been added into the task list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param tasks The overall user\u0027s task list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static String addEventTaskMsg(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String outputMsg \u003d DIVIDER"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n (^.^)\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n Got it. I\u0027ve added this Event task:\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n     \" + tasks.size() + \".\" + tasks.get(tasks.size() - 1)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n Now you have \" + tasks.size() + \" tasks in the list.\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n\" + DIVIDER + \"\\n\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        System.out.println(outputMsg);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return outputMsg;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Prints confirmation message to show user the to-do task has been added into the task list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param tasks The overall user\u0027s task list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static String addTodoTaskMsg(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String outputMsg \u003d DIVIDER"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n (^.^)\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n Got it. I\u0027ve added this ToDo task:\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n     \" + tasks.size() + \".\" + tasks.get(tasks.size() - 1)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n Now you have \" + tasks.size() + \" tasks in the list.\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n\" + DIVIDER + \"\\n\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        System.out.println(outputMsg);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return outputMsg;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Prints confirmation message to show user the task task has been marked as done."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param index A series number of the task in the task list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param tasks The overall user\u0027s task list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static String doneTaskMsg(int index, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String outputMsg \u003d DIVIDER"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n (ﾉﾟ0ﾟ)ﾉ~\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n Congratulations from DukeBT! You have done 1 task!\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n The task below has been marked as done:\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n      Task #\" + index + \". \" + tasks.get(index - 1)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n\" + DIVIDER + \"\\n\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        System.out.println(outputMsg);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return outputMsg;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Prints confirmation message to show user the corresponding task has been deleted from the task list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param index A series number of the task in the task list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param taskToDelete Task to be deleted."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static String deleteTaskMsg(int index, Task taskToDelete, TaskList tasks) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String outputMsg \u003d DIVIDER"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n (ಠ‿↼)\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n Noted. This task has been removed from your task list:\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n      Task #\" + index + \". \" + taskToDelete"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n Now you have \" + tasks.getTaskListSize() + \" tasks in the list.\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n\" + DIVIDER + \"\\n\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        System.out.println(outputMsg);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return outputMsg;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Prints out all tasks stored in the task list."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param tasks The overall user\u0027s task list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static String getAllTasksMsg(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String outputMsg \u003d \"\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            outputMsg \u003d DIVIDER"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    + \"\\n (⊙ ‿ ⊙)\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    + \"\\n Task list is empty, please try to add some tasks first.\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    + \"\\n\" + DIVIDER + \"\\n\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            outputMsg \u003d DIVIDER"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    + \"\\n (⊙ ‿ ⊙)\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    + \"\\n You have \" + tasks.size() + \" tasks in total.\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    + \"\\n Here they are:\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                outputMsg +\u003d \"\\n      \" + (i + 1) + \". \" + tasks.get(i);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            outputMsg +\u003d \"\\n\" + DIVIDER + \"\\n\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        System.out.println(outputMsg);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return outputMsg;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Prints out all tasks that match the keyword stored in the task list."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param keyword A string of keyword to find the matching tasks."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param matchedTasks An ArrayList of all the tasks that match with the keyword."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static String findMatchingTasks(String keyword, ArrayList\u003cTask\u003e matchedTasks) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String outputMsg \u003d \"\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (matchedTasks.isEmpty()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            outputMsg \u003d DIVIDER"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    + \"\\n (⊙ ‿ ⊙)\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    + \"\\n There is no matching task with the keyword - \u0027\" + keyword + \"\u0027.\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    + \"\\n\" + DIVIDER + \"\\n\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            outputMsg \u003d DIVIDER"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    + \"\\n (⊙ ‿ ⊙)\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    + \"\\n You have \" + matchedTasks.size() + \" tasks matched with keyword - \u0027\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    + keyword + \"\u0027.\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    + \"\\n Here they are:\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            for (int i \u003d 0; i \u003c matchedTasks.size(); i++) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                outputMsg +\u003d \"\\n      \" + (i + 1) + \". \" + matchedTasks.get(i);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            outputMsg +\u003d \"\\n\" + DIVIDER + \"\\n\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        System.out.println(outputMsg);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return outputMsg;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 207
    }
  },
  {
    "path": "src/main/java/duke/Warnings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Displays different kinds of warning messages when error occurs."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class Warnings extends Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private static final String DIVIDER_WARNING \u003d \"###########################\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Display warning message when invalid done task index is given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param tasksSize Size of the user\u0027s task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static String invalidDoneTaskIndex(int tasksSize) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String warningMsg \u003d DIVIDER_WARNING"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n [• ▂ •]What? \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n I couldn\u0027t find this task, please re-enter a valid task index!\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n And make sure you follow this format - \u0027done \u003cTask_Index\u003e\u0027.\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n You have \" + tasksSize + \" tasks in total.\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n **Type \u0027help\u0027 to see what I can do. |^_^|\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n\" + DIVIDER_WARNING + \"\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        System.out.println(warningMsg);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return warningMsg;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Display warning message when invalid ToDoTask input entered."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static String invalidToDo() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String warningMsg \u003d DIVIDER_WARNING"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n [• ▂ •]What? \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n OOPS!!! The description of a todo cannot be empty.\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n And make sure you follow this format - \u0027todo \u003ctask name\u003e\u0027.\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n **Type \u0027help\u0027 to see what I can do. |^_^|\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n\" + DIVIDER_WARNING + \"\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        System.out.println(warningMsg);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return warningMsg;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Display warning message when invalid DeadlineTask input entered."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static String invalidDeadline() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String warningMsg \u003d DIVIDER_WARNING"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n [• ▂ •]What? \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n OOPS!!! The description or/and deadline of a deadline task cannot be empty.\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n And make sure you follow this format - \u0027deadline \u003ctask name\u003e /by \u003ctask deadline\u003e\u0027.\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n **Type \u0027help\u0027 to see what I can do. |^_^|\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n\" + DIVIDER_WARNING + \"\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        System.out.println(warningMsg);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return warningMsg;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Display warning message when invalid EventTask input entered."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static String invalidEvent() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String warningMsg \u003d DIVIDER_WARNING"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n [• ▂ •]What? \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n OOPS!!! The description or/and event timing of a event task cannot be empty.\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n And make sure you follow this format - \u0027event \u003cevent name\u003e /at \u003cevent timing\u003e\u0027.\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n **Type \u0027help\u0027 to see what I can do. |^_^|\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n\" + DIVIDER_WARNING + \"\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        System.out.println(warningMsg);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return warningMsg;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Display warning message when Parser cannot recognize the input."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static String invalidInput() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String warningMsg \u003d DIVIDER_WARNING"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n [• ▂ •]What? \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n OOPS!!! I\u0027m sorry, but I don\u0027t know what that means.\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n **Type \u0027help\u0027 to see what I can do. |^_^|\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n\" + DIVIDER_WARNING + \"\\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        System.out.println(warningMsg);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return warningMsg;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Display warning message when invalid delete input entered."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param tasksSize Size of the user\u0027s task list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static String invalidDelete(int tasksSize) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String warningMsg \u003d DIVIDER_WARNING"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n [• ▂ •]What? \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n I couldn\u0027t find this task, please re-enter a valid task index!\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n And make sure you follow this format - \u0027delete \u003cTask_Index\u003e\u0027.\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n You have \" + tasksSize + \" tasks in total.\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n **Type \u0027help\u0027 to see what I can do. |^_^|\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n\" + DIVIDER_WARNING + \"\\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        System.out.println(warningMsg);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return warningMsg;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Display warning message when error occurs while loading data file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param e Exception message."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static String invalidFileInput(IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String warningMsg1 \u003d DIVIDER_WARNING"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n [• ▂ •]What? \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n Invalid data inside data/taskList.txt file...\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n Details:\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        System.out.println(warningMsg1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        System.err.println(e);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String warningMsg2 \u003d \"\\n\" + DIVIDER_WARNING + \"\\n\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        System.out.println(warningMsg2);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String warningMsg \u003d warningMsg1 + \"\\n\" + e + warningMsg2;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return warningMsg;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Display warning message when error occurs while saving into data file."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param e Exception message."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static String invalidFileOutput(IOException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String warningMsg1 \u003d DIVIDER_WARNING"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n [• ▂ •]What? \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n Errors occurred when try to write data into data/taskList.txt file...\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                + \"\\n Details:\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        System.out.println(warningMsg1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        System.err.println(e);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String warningMsg2 \u003d \"\\n\" + DIVIDER_WARNING + \"\\n\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        System.out.println(warningMsg2);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String warningMsg \u003d warningMsg1 + \"\\n\" + e + warningMsg2;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return warningMsg;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 136
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" textFill\u003d\"#00fff2\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "               HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 22
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c?import javafx.scene.effect.Glow?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Please entry commands here\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"555.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: #283565;\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "               \u003ceffect\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                  \u003cGlow level\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "               \u003c/effect\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    \u003cImageView fx:id\u003d\"imageView\" fitHeight\u003d\"89.0\" fitWidth\u003d\"400.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                               preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 29
    }
  },
  {
    "path": "src/test/duke/DeadlinesTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "class DeadlinesTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    void DeadlinePrintTimeTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Deadlines deadline \u003d new Deadlines(\"deadline1\", \"2020-08-22 17:00\", false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assertEquals(\"22 Aug 2020 05:00 PM\", deadline.printTime());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    void DeadlineWriteToFileTest() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Deadlines deadline \u003d new Deadlines(\"deadline2\", \"2020-08-22 17:00\", false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assertEquals(\"D | 0 | deadline2 | 2020-08-22T17:00\", deadline.writeToFile());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 21
    }
  },
  {
    "path": "src/test/duke/EventsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "class EventsTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    void EventsPrintTimeTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Events event \u003d new Events(\"event1\", \"2020-08-22 17:00\", false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assertEquals(\"22 Aug 2020 05:00 PM\", event.printTime());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    void EventToStringTest() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Events event \u003d new Events(\"event2\", \"2020-08-22 17:00\", false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assertEquals(\"[E][✗] event2 (at: 22 Aug 2020 05:00 PM)\", event.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 21
    }
  },
  {
    "path": "src/test/duke/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    void TaskGetStatusNumTest_notDone() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Task task \u003d new Task(\"test1\", false, TaskTypes.TASK_TYPE_TODO);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assertEquals(\"0\", task.getStatusNum());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    void TaskGetStatusNumTest_done() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Task task \u003d new Task(\"test2\", true, TaskTypes.TASK_TYPE_TODO);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assertEquals(\"1\", task.getStatusNum());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    void TaskWriteToFileTest() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Task task \u003d new Task(\"test3\", true, TaskTypes.TASK_TYPE_DEADLINE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assertEquals(\"D | 1 | test3\", task.writeToFile());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 26
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "todo task1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "deadline task2 /by 22Aug2020"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "event task3 /at Fri 1~6pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "hahaha"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "done 45"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "delete 45"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 12
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    PAUSE"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "PAUSE"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 4,
      "-": 20
    }
  }
]
