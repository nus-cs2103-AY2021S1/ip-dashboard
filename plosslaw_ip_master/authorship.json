[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"plosslaw"},"content":"//    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"plosslaw"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":14,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":17,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":18,"author":{"gitId":"plosslaw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"plosslaw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"plosslaw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"plosslaw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"plosslaw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"plosslaw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"plosslaw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"plosslaw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"plosslaw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"plosslaw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"plosslaw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"plosslaw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"plosslaw"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"plosslaw"},"content":"//checkstyle {"},{"lineNumber":56,"author":{"gitId":"plosslaw"},"content":"//    toolVersion \u003d \u00278.23\u0027"},{"lineNumber":57,"author":{"gitId":"plosslaw"},"content":"//}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"plosslaw"},"content":"    enableAssertions \u003d true"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"plosslaw":21,"-":41}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"plosslaw"},"content":"0 T fjsadfkl"},{"lineNumber":2,"author":{"gitId":"plosslaw"},"content":"0 T fdsafa"}],"authorContributionMap":{"plosslaw":2}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"plosslaw"},"content":"# User Guide for Deuk Task Tracker v1.2.1"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"plosslaw"},"content":"### Feature 1: Add tasks to tasklist"},{"lineNumber":6,"author":{"gitId":"plosslaw"},"content":"Add new tasks to the tasklist."},{"lineNumber":7,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":8,"author":{"gitId":"plosslaw"},"content":"### Feature 2: View tasks in tasklist"},{"lineNumber":9,"author":{"gitId":"plosslaw"},"content":"View the list of all tasks with name, completion status and date (if applicable)."},{"lineNumber":10,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":11,"author":{"gitId":"plosslaw"},"content":"### Feature 3: Delete tasks from tasklist"},{"lineNumber":12,"author":{"gitId":"plosslaw"},"content":"Delete old tasks from the tasklist."},{"lineNumber":13,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":14,"author":{"gitId":"plosslaw"},"content":"### Feature 4: Mark tasks as done"},{"lineNumber":15,"author":{"gitId":"plosslaw"},"content":"Mark tasks as done after completing them."},{"lineNumber":16,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":17,"author":{"gitId":"plosslaw"},"content":"### Feature 5: Duplicate tasks detection"},{"lineNumber":18,"author":{"gitId":"plosslaw"},"content":"If the task being added has the same name and date (if applicable) as another task in"},{"lineNumber":19,"author":{"gitId":"plosslaw"},"content":"the tasklist, the new task will not be added to the tasklist."},{"lineNumber":20,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":21,"author":{"gitId":"plosslaw"},"content":"### Feature 6: Help command"},{"lineNumber":22,"author":{"gitId":"plosslaw"},"content":"A list of available commands will be shown to the user when the user inputs `help`."},{"lineNumber":23,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":24,"author":{"gitId":"plosslaw"},"content":"### Feature 7: Case insensitive commands"},{"lineNumber":25,"author":{"gitId":"plosslaw"},"content":"The commands entered do not have to be case sensitive. `HELP`, `Help` and `help` are equivalent."},{"lineNumber":26,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":27,"author":{"gitId":"plosslaw"},"content":"### Feature 8: Search for tasks in the tasklist"},{"lineNumber":28,"author":{"gitId":"plosslaw"},"content":"Search the tasklist for tasks that match the search term."},{"lineNumber":29,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":30,"author":{"gitId":"plosslaw"},"content":"### Feature 9: Exit command"},{"lineNumber":31,"author":{"gitId":"plosslaw"},"content":"The program will terminate when the user enters `bye` and the user does not have to "},{"lineNumber":32,"author":{"gitId":"plosslaw"},"content":"click on the close button of the GUI window."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"plosslaw"},"content":"### `todo` - Adds a todo task to the tasklist"},{"lineNumber":37,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":38,"author":{"gitId":"plosslaw"},"content":"Format: `todo NAME`"},{"lineNumber":39,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":40,"author":{"gitId":"plosslaw"},"content":"Example of usage: "},{"lineNumber":41,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":42,"author":{"gitId":"plosslaw"},"content":"`todo Visit Brandon\u0027s house`"},{"lineNumber":43,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":44,"author":{"gitId":"plosslaw"},"content":"Expected outcome:"},{"lineNumber":45,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":46,"author":{"gitId":"plosslaw"},"content":"    ____________________________________________________________"},{"lineNumber":47,"author":{"gitId":"plosslaw"},"content":"      Got it. I\u0027ve added the following task: "},{"lineNumber":48,"author":{"gitId":"plosslaw"},"content":"        [T][N] Visit Brandon\u0027s house"},{"lineNumber":49,"author":{"gitId":"plosslaw"},"content":"      Now you have 2 tasks in total."},{"lineNumber":50,"author":{"gitId":"plosslaw"},"content":"    ____________________________________________________________"},{"lineNumber":51,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":52,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":53,"author":{"gitId":"plosslaw"},"content":"### `event` - Adds an Event task to the tasklist"},{"lineNumber":54,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":55,"author":{"gitId":"plosslaw"},"content":"Format: `event NAME /at YYYY-MM-DD`"},{"lineNumber":56,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":57,"author":{"gitId":"plosslaw"},"content":"**`/at` is case sensitive**"},{"lineNumber":58,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":59,"author":{"gitId":"plosslaw"},"content":"Example of usage: "},{"lineNumber":60,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":61,"author":{"gitId":"plosslaw"},"content":"`event birthday party /at 2020-03-04`"},{"lineNumber":62,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":63,"author":{"gitId":"plosslaw"},"content":"Expected outcome:"},{"lineNumber":64,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":65,"author":{"gitId":"plosslaw"},"content":"    ____________________________________________________________"},{"lineNumber":66,"author":{"gitId":"plosslaw"},"content":"      Got it. I\u0027ve added the following task: "},{"lineNumber":67,"author":{"gitId":"plosslaw"},"content":"        [E][N] birthday party (at: Mar 4 2020)"},{"lineNumber":68,"author":{"gitId":"plosslaw"},"content":"      Now you have 3 tasks in total."},{"lineNumber":69,"author":{"gitId":"plosslaw"},"content":"    ____________________________________________________________"},{"lineNumber":70,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":71,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":72,"author":{"gitId":"plosslaw"},"content":"### `deadline` - Adds a deadline task to the tasklist"},{"lineNumber":73,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":74,"author":{"gitId":"plosslaw"},"content":"Format: `deadline NAME /by YYYY-MM-DD`"},{"lineNumber":75,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":76,"author":{"gitId":"plosslaw"},"content":"**`/by` is case sensitive**"},{"lineNumber":77,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":78,"author":{"gitId":"plosslaw"},"content":"Example of usage: "},{"lineNumber":79,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":80,"author":{"gitId":"plosslaw"},"content":"`deadline homework /by 2020-10-04`"},{"lineNumber":81,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":82,"author":{"gitId":"plosslaw"},"content":"Expected outcome:"},{"lineNumber":83,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":84,"author":{"gitId":"plosslaw"},"content":"    ____________________________________________________________"},{"lineNumber":85,"author":{"gitId":"plosslaw"},"content":"      Got it. I\u0027ve added the following task: "},{"lineNumber":86,"author":{"gitId":"plosslaw"},"content":"        [D][N] homework (by: Oct 4 2020)"},{"lineNumber":87,"author":{"gitId":"plosslaw"},"content":"      Now you have 4 tasks in total."},{"lineNumber":88,"author":{"gitId":"plosslaw"},"content":"    ____________________________________________________________"},{"lineNumber":89,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":90,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":91,"author":{"gitId":"plosslaw"},"content":"### `find` - Search tasklist for tasks that match the search term"},{"lineNumber":92,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":93,"author":{"gitId":"plosslaw"},"content":"Format: `find SEARCH_TERM`"},{"lineNumber":94,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":95,"author":{"gitId":"plosslaw"},"content":"Example of usage: "},{"lineNumber":96,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":97,"author":{"gitId":"plosslaw"},"content":"`find birthday`"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"plosslaw"},"content":"Expected outcome:"},{"lineNumber":100,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":101,"author":{"gitId":"plosslaw"},"content":"    ____________________________________________________________"},{"lineNumber":102,"author":{"gitId":"plosslaw"},"content":"      Here are the matching tasks in your list:"},{"lineNumber":103,"author":{"gitId":"plosslaw"},"content":"      1. [E][N] birthday (at: Jan 16 2021)"},{"lineNumber":104,"author":{"gitId":"plosslaw"},"content":"      2. [E][N] birthday party (at: Mar 4 2020)"},{"lineNumber":105,"author":{"gitId":"plosslaw"},"content":"    ____________________________________________________________"},{"lineNumber":106,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":107,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":108,"author":{"gitId":"plosslaw"},"content":"### `done` - Mark task at specified index in tasklist as done"},{"lineNumber":109,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":110,"author":{"gitId":"plosslaw"},"content":"Format: `done INDEX`"},{"lineNumber":111,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":112,"author":{"gitId":"plosslaw"},"content":"Example of usage: "},{"lineNumber":113,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":114,"author":{"gitId":"plosslaw"},"content":"`done 2`"},{"lineNumber":115,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":116,"author":{"gitId":"plosslaw"},"content":"Expected outcome:"},{"lineNumber":117,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":118,"author":{"gitId":"plosslaw"},"content":"    ____________________________________________________________"},{"lineNumber":119,"author":{"gitId":"plosslaw"},"content":"      Nice job! I\u0027ll mark that as done:"},{"lineNumber":120,"author":{"gitId":"plosslaw"},"content":"        [T][Y] Visit Brandon\u0027s house"},{"lineNumber":121,"author":{"gitId":"plosslaw"},"content":"    ____________________________________________________________"},{"lineNumber":122,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":123,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":124,"author":{"gitId":"plosslaw"},"content":"### `list` - View list of all tasks in tasklist"},{"lineNumber":125,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":126,"author":{"gitId":"plosslaw"},"content":"Example of usage: "},{"lineNumber":127,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":128,"author":{"gitId":"plosslaw"},"content":"`list`"},{"lineNumber":129,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":130,"author":{"gitId":"plosslaw"},"content":"Expected outcome:"},{"lineNumber":131,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":132,"author":{"gitId":"plosslaw"},"content":"    ____________________________________________________________"},{"lineNumber":133,"author":{"gitId":"plosslaw"},"content":"      You have the following tasks in your list:"},{"lineNumber":134,"author":{"gitId":"plosslaw"},"content":"      1. [E][N] birthday (at: Jan 16 2021)"},{"lineNumber":135,"author":{"gitId":"plosslaw"},"content":"      2. [T][Y] Visit Brandon\u0027s house"},{"lineNumber":136,"author":{"gitId":"plosslaw"},"content":"      3. [E][N] birthday party (at: Mar 4 2020)"},{"lineNumber":137,"author":{"gitId":"plosslaw"},"content":"      4. [D][N] homework (by: Oct 4 2020)"},{"lineNumber":138,"author":{"gitId":"plosslaw"},"content":"    ____________________________________________________________"},{"lineNumber":139,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":140,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":141,"author":{"gitId":"plosslaw"},"content":"### `delete` - Delete task at specified index in tasklist"},{"lineNumber":142,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":143,"author":{"gitId":"plosslaw"},"content":"Format: `delete INDEX`"},{"lineNumber":144,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":145,"author":{"gitId":"plosslaw"},"content":"Example of usage: "},{"lineNumber":146,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":147,"author":{"gitId":"plosslaw"},"content":"`delete 2`"},{"lineNumber":148,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":149,"author":{"gitId":"plosslaw"},"content":"Expected outcome:"},{"lineNumber":150,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":151,"author":{"gitId":"plosslaw"},"content":"    ____________________________________________________________"},{"lineNumber":152,"author":{"gitId":"plosslaw"},"content":"      Noted. The following task has been removed:"},{"lineNumber":153,"author":{"gitId":"plosslaw"},"content":"        [T][Y] Visit Brandon\u0027s house"},{"lineNumber":154,"author":{"gitId":"plosslaw"},"content":"      Now you have 3 tasks left."},{"lineNumber":155,"author":{"gitId":"plosslaw"},"content":"    ____________________________________________________________"},{"lineNumber":156,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":157,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":158,"author":{"gitId":"plosslaw"},"content":"### `delete all` - Delete all tasks in the tasklist"},{"lineNumber":159,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":160,"author":{"gitId":"plosslaw"},"content":"Example of usage: "},{"lineNumber":161,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":162,"author":{"gitId":"plosslaw"},"content":"`delete all`"},{"lineNumber":163,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":164,"author":{"gitId":"plosslaw"},"content":"Expected outcome:"},{"lineNumber":165,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":166,"author":{"gitId":"plosslaw"},"content":"    ____________________________________________________________"},{"lineNumber":167,"author":{"gitId":"plosslaw"},"content":"      Noted. All tasks have been removed."},{"lineNumber":168,"author":{"gitId":"plosslaw"},"content":"    ____________________________________________________________"},{"lineNumber":169,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":170,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":171,"author":{"gitId":"plosslaw"},"content":"### `help` - Show the list of available commands"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"plosslaw"},"content":"`help`"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":178,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":179,"author":{"gitId":"plosslaw"},"content":"    ____________________________________________________________"},{"lineNumber":180,"author":{"gitId":"plosslaw"},"content":"      Here is the list of available commands:"},{"lineNumber":181,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":182,"author":{"gitId":"plosslaw"},"content":"      todo \u003cname\u003e: Add todo task"},{"lineNumber":183,"author":{"gitId":"plosslaw"},"content":"      event \u003cname\u003e /at \u003cdate\u003e: Add event task. Date format: YYYY-MM-DD"},{"lineNumber":184,"author":{"gitId":"plosslaw"},"content":"      deadline \u003cname\u003e /by \u003cdate\u003e: Add deadline task. Date format: YYYY-MM-DD"},{"lineNumber":185,"author":{"gitId":"plosslaw"},"content":"      find \u003csearch term\u003e: Search the task list for matching tasks"},{"lineNumber":186,"author":{"gitId":"plosslaw"},"content":"      done \u003cindex\u003e: Mark task at specified index as done"},{"lineNumber":187,"author":{"gitId":"plosslaw"},"content":"      list: View list of all tasks added"},{"lineNumber":188,"author":{"gitId":"plosslaw"},"content":"      delete \u003cindex\u003e: Delete the task at specified index"},{"lineNumber":189,"author":{"gitId":"plosslaw"},"content":"      delete all: Delete all tasks from task list"},{"lineNumber":190,"author":{"gitId":"plosslaw"},"content":"      bye: Exit programme"},{"lineNumber":191,"author":{"gitId":"plosslaw"},"content":"      help: You do realise you\u0027re already on the help page, right?"},{"lineNumber":192,"author":{"gitId":"plosslaw"},"content":"    ____________________________________________________________"},{"lineNumber":193,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"plosslaw"},"content":"### `bye` - Exits the Deuk program"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"plosslaw"},"content":"`bye`"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":202,"author":{"gitId":"plosslaw"},"content":"Window closes after a second after printing the farewell message:"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"plosslaw"},"content":"    ____________________________________________________________"},{"lineNumber":205,"author":{"gitId":"plosslaw"},"content":"      Deuk: Goodbye, hope to see you again!"},{"lineNumber":206,"author":{"gitId":"plosslaw"},"content":"    ____________________________________________________________"}],"authorContributionMap":{"plosslaw":187,"-":19}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"plosslaw"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"plosslaw"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"plosslaw"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"plosslaw"},"content":"import java.time.temporal.ChronoUnit;"},{"lineNumber":5,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":6,"author":{"gitId":"plosslaw"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"plosslaw"},"content":"    private String dueDate;"},{"lineNumber":8,"author":{"gitId":"plosslaw"},"content":"    private String dueDateInSaveFormat;"},{"lineNumber":9,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":10,"author":{"gitId":"plosslaw"},"content":"    private Deadline(String name, String dueDate, String dueDateInSaveFormat) {"},{"lineNumber":11,"author":{"gitId":"plosslaw"},"content":"        super(name);"},{"lineNumber":12,"author":{"gitId":"plosslaw"},"content":"        this.dueDate \u003d dueDate;"},{"lineNumber":13,"author":{"gitId":"plosslaw"},"content":"        this.dueDateInSaveFormat \u003d dueDateInSaveFormat;"},{"lineNumber":14,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":16,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"plosslaw"},"content":"     * Creates a Deadline instance."},{"lineNumber":18,"author":{"gitId":"plosslaw"},"content":"     * @param name Name of the Deadline task."},{"lineNumber":19,"author":{"gitId":"plosslaw"},"content":"     * @param dueDate Due date of the Deadline task."},{"lineNumber":20,"author":{"gitId":"plosslaw"},"content":"     * @return A new Deadline instance."},{"lineNumber":21,"author":{"gitId":"plosslaw"},"content":"     * @throws DukeException If dueDate is in the wrong format (correct format: YYYY-MM-DD)."},{"lineNumber":22,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"plosslaw"},"content":"    public static Deadline createDeadline(String name, String dueDate) throws DukeException{"},{"lineNumber":24,"author":{"gitId":"plosslaw"},"content":"        LocalDate localDate;"},{"lineNumber":25,"author":{"gitId":"plosslaw"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"plosslaw"},"content":"            localDate \u003d LocalDate.parse(dueDate);"},{"lineNumber":27,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"plosslaw"},"content":"        catch (DateTimeParseException ex) {"},{"lineNumber":29,"author":{"gitId":"plosslaw"},"content":"            throw new DukeException(\"Please specify the due date as follows: yyyy-mm-dd\");"},{"lineNumber":30,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"plosslaw"},"content":"        return new Deadline(name, localDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")), dueDate);"},{"lineNumber":32,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":34,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"plosslaw"},"content":"     * Returns the error message for the case where the name of the"},{"lineNumber":36,"author":{"gitId":"plosslaw"},"content":"     * Deadline task is empty."},{"lineNumber":37,"author":{"gitId":"plosslaw"},"content":"     * @return Error message for missing name."},{"lineNumber":38,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"plosslaw"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"plosslaw"},"content":"    public String returnMissingNameError() {"},{"lineNumber":41,"author":{"gitId":"plosslaw"},"content":"        return \"The name of a deadline task cannot be empty.\";"},{"lineNumber":42,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":44,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"plosslaw"},"content":"     * Returns the Deadline instance\u0027s Save Data String used by the Storage class when writing to"},{"lineNumber":46,"author":{"gitId":"plosslaw"},"content":"     * duke data text file on disk."},{"lineNumber":47,"author":{"gitId":"plosslaw"},"content":"     * @see Storage#saveTasksToDisk(TaskList)"},{"lineNumber":48,"author":{"gitId":"plosslaw"},"content":"     * @return The Save Data String of the Deadline instance."},{"lineNumber":49,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"plosslaw"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"plosslaw"},"content":"    public String getSaveDataString() {"},{"lineNumber":52,"author":{"gitId":"plosslaw"},"content":"        String saveData \u003d \"\";"},{"lineNumber":53,"author":{"gitId":"plosslaw"},"content":"        saveData +\u003d this.isDone ? 1 : 0;"},{"lineNumber":54,"author":{"gitId":"plosslaw"},"content":"        saveData +\u003d \" D \" + this.name + \"\\n\" + this.dueDateInSaveFormat;"},{"lineNumber":55,"author":{"gitId":"plosslaw"},"content":"        return saveData;"},{"lineNumber":56,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":58,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"plosslaw"},"content":"     * Returns String representation of the Deadline instance."},{"lineNumber":60,"author":{"gitId":"plosslaw"},"content":"     * @return String representation of the Deadline instance."},{"lineNumber":61,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"plosslaw"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"plosslaw"},"content":"    public String toString() {"},{"lineNumber":64,"author":{"gitId":"plosslaw"},"content":"        String marked \u003d this.isDone ? \"[Y] \" : \"[N] \";"},{"lineNumber":65,"author":{"gitId":"plosslaw"},"content":"//        String marked \u003d this.isDone ? \"[✓] \" : \"[✗] \";"},{"lineNumber":66,"author":{"gitId":"plosslaw"},"content":"        String eventTime \u003d this.dueDate.length() \u003e 0 ? \" (by: \" + this.dueDate + \")\" : \"\";"},{"lineNumber":67,"author":{"gitId":"plosslaw"},"content":"        return \"[D]\" + marked + this.name + eventTime;"},{"lineNumber":68,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"plosslaw"},"content":"}"}],"authorContributionMap":{"plosslaw":69}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"plosslaw"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"plosslaw"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":4,"author":{"gitId":"plosslaw"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"plosslaw"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"plosslaw"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"plosslaw"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"plosslaw"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"plosslaw"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"plosslaw"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"plosslaw"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"plosslaw"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"plosslaw"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":15,"author":{"gitId":"plosslaw"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"plosslaw"},"content":" * An example of a custom control using FXML."},{"lineNumber":17,"author":{"gitId":"plosslaw"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":18,"author":{"gitId":"plosslaw"},"content":" * containing text from the speaker."},{"lineNumber":19,"author":{"gitId":"plosslaw"},"content":" */"},{"lineNumber":20,"author":{"gitId":"plosslaw"},"content":"public class DialogBox extends HBox {"},{"lineNumber":21,"author":{"gitId":"plosslaw"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"plosslaw"},"content":"    private Label dialog;"},{"lineNumber":23,"author":{"gitId":"plosslaw"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"plosslaw"},"content":"    private ImageView displayPicture;"},{"lineNumber":25,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":26,"author":{"gitId":"plosslaw"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":27,"author":{"gitId":"plosslaw"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"plosslaw"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":29,"author":{"gitId":"plosslaw"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":30,"author":{"gitId":"plosslaw"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":31,"author":{"gitId":"plosslaw"},"content":"            fxmlLoader.load();"},{"lineNumber":32,"author":{"gitId":"plosslaw"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"plosslaw"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":36,"author":{"gitId":"plosslaw"},"content":"        dialog.setText(text);"},{"lineNumber":37,"author":{"gitId":"plosslaw"},"content":"        displayPicture.setImage(img);"},{"lineNumber":38,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":40,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"plosslaw"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":42,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"plosslaw"},"content":"    private void flip() {"},{"lineNumber":44,"author":{"gitId":"plosslaw"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":45,"author":{"gitId":"plosslaw"},"content":"        Collections.reverse(tmp);"},{"lineNumber":46,"author":{"gitId":"plosslaw"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":47,"author":{"gitId":"plosslaw"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":48,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":50,"author":{"gitId":"plosslaw"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":51,"author":{"gitId":"plosslaw"},"content":"        return new DialogBox(text, img);"},{"lineNumber":52,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":54,"author":{"gitId":"plosslaw"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":55,"author":{"gitId":"plosslaw"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":56,"author":{"gitId":"plosslaw"},"content":"        db.flip();"},{"lineNumber":57,"author":{"gitId":"plosslaw"},"content":"        return db;"},{"lineNumber":58,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"plosslaw"},"content":"}"}],"authorContributionMap":{"plosslaw":59}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"plosslaw"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":2,"author":{"gitId":"plosslaw"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":3,"author":{"gitId":"plosslaw"},"content":"import java.io.PrintStream;"},{"lineNumber":4,"author":{"gitId":"plosslaw"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"plosslaw"},"content":"import java.nio.file.Paths;"},{"lineNumber":6,"author":{"gitId":"plosslaw"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":9,"author":{"gitId":"plosslaw"},"content":"    private final Scanner SC \u003d new Scanner(System.in);"},{"lineNumber":10,"author":{"gitId":"plosslaw"},"content":"    private final static Path DUKE_DATA_FILE_PATH \u003d Paths.get(\"data\", \"duke.txt\");"},{"lineNumber":11,"author":{"gitId":"plosslaw"},"content":"    private final static Path DUKE_DATA_DIR_PATH \u003d Paths.get(\"data\");"},{"lineNumber":12,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":13,"author":{"gitId":"plosslaw"},"content":"    enum Commands {"},{"lineNumber":14,"author":{"gitId":"plosslaw"},"content":"        EXIT(\"BYE\"), DELETE(\"DELETE \"), LIST(\"LIST\"),"},{"lineNumber":15,"author":{"gitId":"plosslaw"},"content":"        DONE(\"DONE \"), TODO(\"TODO \"), EVENT(\"EVENT \"),"},{"lineNumber":16,"author":{"gitId":"plosslaw"},"content":"        DEADLINE(\"DEADLINE \"), DELETEALL(\"DELETE ALL\"), HELP(\"HELP\"),"},{"lineNumber":17,"author":{"gitId":"plosslaw"},"content":"        FIND(\"FIND \");"},{"lineNumber":18,"author":{"gitId":"plosslaw"},"content":"        private final String str;"},{"lineNumber":19,"author":{"gitId":"plosslaw"},"content":"        Commands(String str){"},{"lineNumber":20,"author":{"gitId":"plosslaw"},"content":"            this.str \u003d str;"},{"lineNumber":21,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"plosslaw"},"content":"        public String getString() {"},{"lineNumber":23,"author":{"gitId":"plosslaw"},"content":"            return this.str;"},{"lineNumber":24,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":27,"author":{"gitId":"plosslaw"},"content":"    private final String VERSION_NUMBER \u003d \"1.2.1\";"},{"lineNumber":28,"author":{"gitId":"plosslaw"},"content":"    private String logo;"},{"lineNumber":29,"author":{"gitId":"plosslaw"},"content":"    private String introMessage;"},{"lineNumber":30,"author":{"gitId":"plosslaw"},"content":"    private Storage storage;"},{"lineNumber":31,"author":{"gitId":"plosslaw"},"content":"    private TaskList tasks;"},{"lineNumber":32,"author":{"gitId":"plosslaw"},"content":"    private Parser parser;"},{"lineNumber":33,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":34,"author":{"gitId":"plosslaw"},"content":"    public Duke() {"},{"lineNumber":35,"author":{"gitId":"plosslaw"},"content":"        parser \u003d new Parser(SC);"},{"lineNumber":36,"author":{"gitId":"plosslaw"},"content":"        introMessage \u003d \"I\u0027m Deuk, nice to meet you\" + Ui.NEW_LINE + Ui.PADDING +"},{"lineNumber":37,"author":{"gitId":"plosslaw"},"content":"                \"How can I be of service today?\" + Ui.NEW_LINE + Ui.PADDING +"},{"lineNumber":38,"author":{"gitId":"plosslaw"},"content":"                \"Enter \\\"help\\\" to see the list of available commands\";"},{"lineNumber":39,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":40,"author":{"gitId":"plosslaw"},"content":"        logo \u003d \"     _____             _    \\n\""},{"lineNumber":41,"author":{"gitId":"plosslaw"},"content":"                        + \"    |  __ \\\\           | |   \\n\""},{"lineNumber":42,"author":{"gitId":"plosslaw"},"content":"                        + \"    | |  | | ___ _   _| | __\\n\""},{"lineNumber":43,"author":{"gitId":"plosslaw"},"content":"                        + \"    | |  | |/ _ \\\\ | | | |/ /\\n\""},{"lineNumber":44,"author":{"gitId":"plosslaw"},"content":"                        + \"    | |__| |  __/ |_| |   \u003c \\n\""},{"lineNumber":45,"author":{"gitId":"plosslaw"},"content":"                        + \"    |_____/ \\\\___|\\\\__,_|_|\\\\_\\\\  v\" + VERSION_NUMBER;"},{"lineNumber":46,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":47,"author":{"gitId":"plosslaw"},"content":"        this.storage \u003d new Storage(DUKE_DATA_FILE_PATH, DUKE_DATA_DIR_PATH);"},{"lineNumber":48,"author":{"gitId":"plosslaw"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"plosslaw"},"content":"            this.tasks \u003d new TaskList(storage.loadTasksFromDisk());"},{"lineNumber":50,"author":{"gitId":"plosslaw"},"content":"        } catch (DukeDataFolderException ex) {"},{"lineNumber":51,"author":{"gitId":"plosslaw"},"content":"            Ui.printError(ex.getMessage());"},{"lineNumber":52,"author":{"gitId":"plosslaw"},"content":"            this.storage.createDukeDataFolder();"},{"lineNumber":53,"author":{"gitId":"plosslaw"},"content":"            this.tasks \u003d new TaskList();"},{"lineNumber":54,"author":{"gitId":"plosslaw"},"content":"        } catch (DukeException ex) {"},{"lineNumber":55,"author":{"gitId":"plosslaw"},"content":"            Ui.printError(ex.getMessage());"},{"lineNumber":56,"author":{"gitId":"plosslaw"},"content":"            this.tasks \u003d new TaskList();"},{"lineNumber":57,"author":{"gitId":"plosslaw"},"content":"        } catch (FileNotFoundException ex) {"},{"lineNumber":58,"author":{"gitId":"plosslaw"},"content":"            Ui.printError(\"Missing Deuk Data File!\" + Ui.NEW_LINE + Ui.PADDING +"},{"lineNumber":59,"author":{"gitId":"plosslaw"},"content":"                    \"Creating new Deuk Data File...\");"},{"lineNumber":60,"author":{"gitId":"plosslaw"},"content":"            this.storage.createDukeDataFile();"},{"lineNumber":61,"author":{"gitId":"plosslaw"},"content":"            this.tasks \u003d new TaskList();"},{"lineNumber":62,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":65,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":66,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"plosslaw"},"content":"     * Starts the Deuk programme and takes in commands through standard input."},{"lineNumber":68,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"plosslaw"},"content":"    public void init() {"},{"lineNumber":70,"author":{"gitId":"plosslaw"},"content":"        Ui.sayHello(this.logo, this.introMessage);"},{"lineNumber":71,"author":{"gitId":"plosslaw"},"content":"        while (this.parser.hasNext()) {"},{"lineNumber":72,"author":{"gitId":"plosslaw"},"content":"            this.parser.parseLine();"},{"lineNumber":73,"author":{"gitId":"plosslaw"},"content":"            boolean isByeCommandInvoked \u003d this.parser.executeCommand(this.storage, this.tasks);"},{"lineNumber":74,"author":{"gitId":"plosslaw"},"content":"            if (isByeCommandInvoked) {"},{"lineNumber":75,"author":{"gitId":"plosslaw"},"content":"                break;"},{"lineNumber":76,"author":{"gitId":"plosslaw"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":80,"author":{"gitId":"plosslaw"},"content":"    public String getResponse(String input) {"},{"lineNumber":81,"author":{"gitId":"plosslaw"},"content":"        // Redirect System.out to another PrintStream"},{"lineNumber":82,"author":{"gitId":"plosslaw"},"content":"        ByteArrayOutputStream byteArrayOutputStream \u003d new ByteArrayOutputStream();"},{"lineNumber":83,"author":{"gitId":"plosslaw"},"content":"        PrintStream printStream \u003d new PrintStream(byteArrayOutputStream);"},{"lineNumber":84,"author":{"gitId":"plosslaw"},"content":"        PrintStream oldPrintStream \u003d System.out;"},{"lineNumber":85,"author":{"gitId":"plosslaw"},"content":"        System.setOut(printStream);"},{"lineNumber":86,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":87,"author":{"gitId":"plosslaw"},"content":"        this.parser.parseInput(input);"},{"lineNumber":88,"author":{"gitId":"plosslaw"},"content":"        this.parser.executeCommand(this.storage, this.tasks);"},{"lineNumber":89,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":90,"author":{"gitId":"plosslaw"},"content":"        System.out.flush();"},{"lineNumber":91,"author":{"gitId":"plosslaw"},"content":"        System.setOut(oldPrintStream);"},{"lineNumber":92,"author":{"gitId":"plosslaw"},"content":"        return byteArrayOutputStream.toString();"},{"lineNumber":93,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":95,"author":{"gitId":"plosslaw"},"content":"    private void echoBack(String message) {"},{"lineNumber":96,"author":{"gitId":"plosslaw"},"content":"        Ui.printVerbal(message);"},{"lineNumber":97,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":100,"author":{"gitId":"plosslaw"},"content":"        new Duke().init();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"plosslaw":98,"-":4}},{"path":"src/main/java/DukeDataFolderException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"plosslaw"},"content":"public class DukeDataFolderException extends DukeException {"},{"lineNumber":2,"author":{"gitId":"plosslaw"},"content":"    DukeDataFolderException(String errorMessage) {"},{"lineNumber":3,"author":{"gitId":"plosslaw"},"content":"        super(errorMessage);"},{"lineNumber":4,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"plosslaw"},"content":"}"}],"authorContributionMap":{"plosslaw":5}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"plosslaw"},"content":"public class DukeException extends Exception {"},{"lineNumber":2,"author":{"gitId":"plosslaw"},"content":"    DukeException(String errorMessage) {"},{"lineNumber":3,"author":{"gitId":"plosslaw"},"content":"        super(errorMessage);"},{"lineNumber":4,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"plosslaw"},"content":"}"}],"authorContributionMap":{"plosslaw":5}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"plosslaw"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"plosslaw"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"plosslaw"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"plosslaw"},"content":"import java.time.temporal.ChronoUnit;"},{"lineNumber":5,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":6,"author":{"gitId":"plosslaw"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"plosslaw"},"content":"    private String timing;"},{"lineNumber":8,"author":{"gitId":"plosslaw"},"content":"    private String timingInSaveFormat;"},{"lineNumber":9,"author":{"gitId":"plosslaw"},"content":"    private Event(String name, String timing, String timingInSaveFormat) {"},{"lineNumber":10,"author":{"gitId":"plosslaw"},"content":"        super(name);"},{"lineNumber":11,"author":{"gitId":"plosslaw"},"content":"        this.timing \u003d timing;"},{"lineNumber":12,"author":{"gitId":"plosslaw"},"content":"        this.timingInSaveFormat \u003d timingInSaveFormat;"},{"lineNumber":13,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":15,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"plosslaw"},"content":"     * Creates an Event instance."},{"lineNumber":17,"author":{"gitId":"plosslaw"},"content":"     * @param name Name of Event task."},{"lineNumber":18,"author":{"gitId":"plosslaw"},"content":"     * @param timing Date of the Event task."},{"lineNumber":19,"author":{"gitId":"plosslaw"},"content":"     * @return A new Event instance."},{"lineNumber":20,"author":{"gitId":"plosslaw"},"content":"     * @throws DukeException If timing is in the wrong format (correct format: YYYY-MM-DD)."},{"lineNumber":21,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"plosslaw"},"content":"    public static Event createEvent(String name, String timing) throws DukeException {"},{"lineNumber":23,"author":{"gitId":"plosslaw"},"content":"        LocalDate localDate;"},{"lineNumber":24,"author":{"gitId":"plosslaw"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"plosslaw"},"content":"            localDate \u003d LocalDate.parse(timing);"},{"lineNumber":26,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"plosslaw"},"content":"        catch (DateTimeParseException ex) {"},{"lineNumber":28,"author":{"gitId":"plosslaw"},"content":"            throw new DukeException(\"Please specify the date as follows: yyyy-mm-dd\");"},{"lineNumber":29,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"plosslaw"},"content":"        return new Event(name,"},{"lineNumber":31,"author":{"gitId":"plosslaw"},"content":"                localDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")), timing);"},{"lineNumber":32,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":34,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"plosslaw"},"content":"     * Returns the error message for the case where the name of the"},{"lineNumber":36,"author":{"gitId":"plosslaw"},"content":"     * Event task is empty."},{"lineNumber":37,"author":{"gitId":"plosslaw"},"content":"     * @return Error message for missing name."},{"lineNumber":38,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"plosslaw"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"plosslaw"},"content":"    public String returnMissingNameError() {"},{"lineNumber":41,"author":{"gitId":"plosslaw"},"content":"        return \"The name of an event task cannot be empty.\";"},{"lineNumber":42,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":44,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"plosslaw"},"content":"     * Returns the Event instance\u0027s Save Data String used by the Storage class when writing to"},{"lineNumber":46,"author":{"gitId":"plosslaw"},"content":"     * duke data text file on disk."},{"lineNumber":47,"author":{"gitId":"plosslaw"},"content":"     * @see Storage#saveTasksToDisk(TaskList)"},{"lineNumber":48,"author":{"gitId":"plosslaw"},"content":"     * @return The Save Data String of the Event instance."},{"lineNumber":49,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"plosslaw"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"plosslaw"},"content":"    public String getSaveDataString() {"},{"lineNumber":52,"author":{"gitId":"plosslaw"},"content":"        String saveData \u003d \"\";"},{"lineNumber":53,"author":{"gitId":"plosslaw"},"content":"        saveData +\u003d this.isDone ? 1 : 0;"},{"lineNumber":54,"author":{"gitId":"plosslaw"},"content":"        saveData +\u003d \" E \" + this.name + \"\\n\" + this.timingInSaveFormat;"},{"lineNumber":55,"author":{"gitId":"plosslaw"},"content":"        return saveData;"},{"lineNumber":56,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":58,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"plosslaw"},"content":"     * Returns String representation of the Event instance."},{"lineNumber":60,"author":{"gitId":"plosslaw"},"content":"     * @return String representation of the Event instance."},{"lineNumber":61,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"plosslaw"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"plosslaw"},"content":"    public String toString() {"},{"lineNumber":64,"author":{"gitId":"plosslaw"},"content":"        String marked \u003d this.isDone ? \"[Y] \" : \"[N] \";"},{"lineNumber":65,"author":{"gitId":"plosslaw"},"content":"//        String marked \u003d this.isDone ? \"[✓] \" : \"[✗] \";"},{"lineNumber":66,"author":{"gitId":"plosslaw"},"content":"        String eventTime \u003d this.timing.length() \u003e 0 ? \" (at: \" + this.timing + \")\" : \"\";"},{"lineNumber":67,"author":{"gitId":"plosslaw"},"content":"        return \"[E]\" + marked + this.name + eventTime;"},{"lineNumber":68,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"plosslaw"},"content":"}"}],"authorContributionMap":{"plosslaw":69}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"plosslaw"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":3,"author":{"gitId":"plosslaw"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"plosslaw"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":5,"author":{"gitId":"plosslaw"},"content":" */"},{"lineNumber":6,"author":{"gitId":"plosslaw"},"content":"public class Launcher {"},{"lineNumber":7,"author":{"gitId":"plosslaw"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"plosslaw"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":9,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"plosslaw"},"content":"}"}],"authorContributionMap":{"plosslaw":10}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"plosslaw"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":3,"author":{"gitId":"plosslaw"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"plosslaw"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"plosslaw"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"plosslaw"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"plosslaw"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":9,"author":{"gitId":"plosslaw"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"plosslaw"},"content":" * A GUI for Duke using FXML."},{"lineNumber":11,"author":{"gitId":"plosslaw"},"content":" */"},{"lineNumber":12,"author":{"gitId":"plosslaw"},"content":"public class Main extends Application {"},{"lineNumber":13,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":14,"author":{"gitId":"plosslaw"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":15,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":16,"author":{"gitId":"plosslaw"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"plosslaw"},"content":"    public void start(Stage stage) {"},{"lineNumber":18,"author":{"gitId":"plosslaw"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"plosslaw"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":20,"author":{"gitId":"plosslaw"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":21,"author":{"gitId":"plosslaw"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":22,"author":{"gitId":"plosslaw"},"content":"            stage.setScene(scene);"},{"lineNumber":23,"author":{"gitId":"plosslaw"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":24,"author":{"gitId":"plosslaw"},"content":"            stage.show();"},{"lineNumber":25,"author":{"gitId":"plosslaw"},"content":"//            stage.close();"},{"lineNumber":26,"author":{"gitId":"plosslaw"},"content":"        } catch (IOException e) {"},{"lineNumber":27,"author":{"gitId":"plosslaw"},"content":"            e.printStackTrace();"},{"lineNumber":28,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"plosslaw"},"content":"}"}],"authorContributionMap":{"plosslaw":30}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"plosslaw"},"content":"import javafx.application.Platform;"},{"lineNumber":2,"author":{"gitId":"plosslaw"},"content":"import javafx.fxml.FXML;"},{"lineNumber":3,"author":{"gitId":"plosslaw"},"content":"import javafx.scene.control.Button;"},{"lineNumber":4,"author":{"gitId":"plosslaw"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":5,"author":{"gitId":"plosslaw"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":6,"author":{"gitId":"plosslaw"},"content":"import javafx.scene.image.Image;"},{"lineNumber":7,"author":{"gitId":"plosslaw"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":8,"author":{"gitId":"plosslaw"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitId":"plosslaw"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"plosslaw"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"plosslaw"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":12,"author":{"gitId":"plosslaw"},"content":" */"},{"lineNumber":13,"author":{"gitId":"plosslaw"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":14,"author":{"gitId":"plosslaw"},"content":"    @FXML"},{"lineNumber":15,"author":{"gitId":"plosslaw"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":16,"author":{"gitId":"plosslaw"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"plosslaw"},"content":"    private VBox dialogContainer;"},{"lineNumber":18,"author":{"gitId":"plosslaw"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"plosslaw"},"content":"    private TextField userInput;"},{"lineNumber":20,"author":{"gitId":"plosslaw"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"plosslaw"},"content":"    private Button sendButton;"},{"lineNumber":22,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":23,"author":{"gitId":"plosslaw"},"content":"    private Duke duke;"},{"lineNumber":24,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":25,"author":{"gitId":"plosslaw"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":26,"author":{"gitId":"plosslaw"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDeuk.png\"));"},{"lineNumber":27,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":28,"author":{"gitId":"plosslaw"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"plosslaw"},"content":"    public void initialize() {"},{"lineNumber":30,"author":{"gitId":"plosslaw"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":31,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":33,"author":{"gitId":"plosslaw"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":34,"author":{"gitId":"plosslaw"},"content":"        duke \u003d d;"},{"lineNumber":35,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":37,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"plosslaw"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":39,"author":{"gitId":"plosslaw"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":40,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"plosslaw"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"plosslaw"},"content":"    private void handleUserInput() {"},{"lineNumber":43,"author":{"gitId":"plosslaw"},"content":"        String input \u003d userInput.getText() + \"  \";"},{"lineNumber":44,"author":{"gitId":"plosslaw"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":45,"author":{"gitId":"plosslaw"},"content":"        DialogBox userDialogBox \u003d DialogBox.getUserDialog(input, userImage);"},{"lineNumber":46,"author":{"gitId":"plosslaw"},"content":"        DialogBox dukeDialogBox \u003d DialogBox.getDukeDialog(response, dukeImage);"},{"lineNumber":47,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":48,"author":{"gitId":"plosslaw"},"content":"        //This makes it such that the size of the dialog box is always able to hold all of the text"},{"lineNumber":49,"author":{"gitId":"plosslaw"},"content":"        dukeDialogBox.setMinHeight(Region.USE_PREF_SIZE);"},{"lineNumber":50,"author":{"gitId":"plosslaw"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":51,"author":{"gitId":"plosslaw"},"content":"                userDialogBox,"},{"lineNumber":52,"author":{"gitId":"plosslaw"},"content":"                dukeDialogBox"},{"lineNumber":53,"author":{"gitId":"plosslaw"},"content":"        );"},{"lineNumber":54,"author":{"gitId":"plosslaw"},"content":"        String goodByeString \u003d String.format(Ui.MESSAGE_TEMPLATE_VERBAL, \"Goodbye, hope to see you again!\");"},{"lineNumber":55,"author":{"gitId":"plosslaw"},"content":"        if (response.equals(goodByeString)) {"},{"lineNumber":56,"author":{"gitId":"plosslaw"},"content":"            new java.util.Timer().schedule("},{"lineNumber":57,"author":{"gitId":"plosslaw"},"content":"                    new java.util.TimerTask() {"},{"lineNumber":58,"author":{"gitId":"plosslaw"},"content":"                        @Override"},{"lineNumber":59,"author":{"gitId":"plosslaw"},"content":"                        public void run() {"},{"lineNumber":60,"author":{"gitId":"plosslaw"},"content":"                            Platform.exit();"},{"lineNumber":61,"author":{"gitId":"plosslaw"},"content":"                            System.exit(0);"},{"lineNumber":62,"author":{"gitId":"plosslaw"},"content":"                        }"},{"lineNumber":63,"author":{"gitId":"plosslaw"},"content":"                    },"},{"lineNumber":64,"author":{"gitId":"plosslaw"},"content":"                    700"},{"lineNumber":65,"author":{"gitId":"plosslaw"},"content":"            );"},{"lineNumber":66,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"plosslaw"},"content":"        userInput.clear();"},{"lineNumber":68,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"plosslaw"},"content":"}"}],"authorContributionMap":{"plosslaw":69}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"plosslaw"},"content":"import java.util.Scanner;"},{"lineNumber":2,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":3,"author":{"gitId":"plosslaw"},"content":"public class Parser {"},{"lineNumber":4,"author":{"gitId":"plosslaw"},"content":"    private final String HELP_MSG \u003d \"Here is the list of available commands:\" + Ui.NEW_LINE + Ui.NEW_LINE"},{"lineNumber":5,"author":{"gitId":"plosslaw"},"content":"                + Ui.PADDING + \"todo \u003cname\u003e: Add todo task\" + Ui.NEW_LINE"},{"lineNumber":6,"author":{"gitId":"plosslaw"},"content":"                + Ui.PADDING + \"event \u003cname\u003e /at \u003cdate\u003e: Add event task. Date format: YYYY-MM-DD\" + Ui.NEW_LINE"},{"lineNumber":7,"author":{"gitId":"plosslaw"},"content":"                + Ui.PADDING + \"deadline \u003cname\u003e /by \u003cdate\u003e: Add deadline task. Date format: YYYY-MM-DD\" + Ui.NEW_LINE"},{"lineNumber":8,"author":{"gitId":"plosslaw"},"content":"                + Ui.PADDING + \"find \u003csearch term\u003e: Search the task list for matching tasks\" + Ui.NEW_LINE"},{"lineNumber":9,"author":{"gitId":"plosslaw"},"content":"                + Ui.PADDING + \"done \u003cindex\u003e: Mark task at specified index as done\" + Ui.NEW_LINE"},{"lineNumber":10,"author":{"gitId":"plosslaw"},"content":"                + Ui.PADDING + \"list: View list of all tasks added\" + Ui.NEW_LINE"},{"lineNumber":11,"author":{"gitId":"plosslaw"},"content":"                + Ui.PADDING + \"delete \u003cindex\u003e: Delete the task at specified index\" + Ui.NEW_LINE"},{"lineNumber":12,"author":{"gitId":"plosslaw"},"content":"                + Ui.PADDING + \"delete all: Delete all tasks from task list\" + Ui.NEW_LINE"},{"lineNumber":13,"author":{"gitId":"plosslaw"},"content":"                + Ui.PADDING + \"bye: Exit programme\" + Ui.NEW_LINE"},{"lineNumber":14,"author":{"gitId":"plosslaw"},"content":"                + Ui.PADDING + \"help: You do realise you\u0027re already on the help page, right?\";"},{"lineNumber":15,"author":{"gitId":"plosslaw"},"content":"    Scanner sc;"},{"lineNumber":16,"author":{"gitId":"plosslaw"},"content":"    String parsedLine;"},{"lineNumber":17,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":18,"author":{"gitId":"plosslaw"},"content":"    Parser(Scanner sc){"},{"lineNumber":19,"author":{"gitId":"plosslaw"},"content":"        this.sc \u003d sc;"},{"lineNumber":20,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":22,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"plosslaw"},"content":"     * Returns a boolean describing if there are any more inputs by the user."},{"lineNumber":24,"author":{"gitId":"plosslaw"},"content":"     * @return Boolean value describing if there are any more user inputs."},{"lineNumber":25,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"plosslaw"},"content":"    Boolean hasNext() {"},{"lineNumber":27,"author":{"gitId":"plosslaw"},"content":"        return sc.hasNext();"},{"lineNumber":28,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":30,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"plosslaw"},"content":"     * Parses the user input by one line."},{"lineNumber":32,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"plosslaw"},"content":"    void parseLine() {"},{"lineNumber":34,"author":{"gitId":"plosslaw"},"content":"        this.parsedLine \u003d this.sc.nextLine().trim();"},{"lineNumber":35,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":37,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"plosslaw"},"content":"     * Parses a user input string."},{"lineNumber":39,"author":{"gitId":"plosslaw"},"content":"     * @param input User input string."},{"lineNumber":40,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"plosslaw"},"content":"    void parseInput(String input) {"},{"lineNumber":42,"author":{"gitId":"plosslaw"},"content":"        this.parsedLine \u003d input;"},{"lineNumber":43,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":45,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"plosslaw"},"content":"     * Execute the command as per the user input and returns a boolean value"},{"lineNumber":47,"author":{"gitId":"plosslaw"},"content":"     * describing if the exit command (bye) has been invoked by the user."},{"lineNumber":48,"author":{"gitId":"plosslaw"},"content":"     * If the exit command is invoked, the sayGoodbye() method from the Ui class is called."},{"lineNumber":49,"author":{"gitId":"plosslaw"},"content":"     * @param storage Storage instance used by the Duke instance."},{"lineNumber":50,"author":{"gitId":"plosslaw"},"content":"     * @param tasks TaskList instance used by the Duke instance."},{"lineNumber":51,"author":{"gitId":"plosslaw"},"content":"     * @see Ui#sayGoodbye(Storage, TaskList)"},{"lineNumber":52,"author":{"gitId":"plosslaw"},"content":"     * @return Boolean value describing if the exit command has been called by the user."},{"lineNumber":53,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"plosslaw"},"content":"    boolean executeCommand(Storage storage, TaskList tasks) {"},{"lineNumber":55,"author":{"gitId":"plosslaw"},"content":"        String input \u003d this.parsedLine.trim();"},{"lineNumber":56,"author":{"gitId":"plosslaw"},"content":"        if (input.toUpperCase().equals(Duke.Commands.EXIT.getString())) {"},{"lineNumber":57,"author":{"gitId":"plosslaw"},"content":"            Ui.sayGoodbye(storage, tasks);"},{"lineNumber":58,"author":{"gitId":"plosslaw"},"content":"            return true;"},{"lineNumber":59,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"plosslaw"},"content":"        if (parseShortCommands(input, tasks)) {"},{"lineNumber":61,"author":{"gitId":"plosslaw"},"content":"            return false;"},{"lineNumber":62,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":64,"author":{"gitId":"plosslaw"},"content":"        if (parseLongCommands(input, tasks)) {"},{"lineNumber":65,"author":{"gitId":"plosslaw"},"content":"            return false;"},{"lineNumber":66,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"plosslaw"},"content":"        Ui.printError(\"Sorry I don\u0027t know what that means :(\");"},{"lineNumber":68,"author":{"gitId":"plosslaw"},"content":"        return false;"},{"lineNumber":69,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":71,"author":{"gitId":"plosslaw"},"content":"    private boolean parseShortCommands(String input, TaskList tasks) {"},{"lineNumber":72,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":73,"author":{"gitId":"plosslaw"},"content":"        // we convert input to uppercase before checking to make commands case-insensitive"},{"lineNumber":74,"author":{"gitId":"plosslaw"},"content":"        if (input.toUpperCase().equals(Duke.Commands.LIST.getString())) {"},{"lineNumber":75,"author":{"gitId":"plosslaw"},"content":"            tasks.displayTasks();"},{"lineNumber":76,"author":{"gitId":"plosslaw"},"content":"            return true;"},{"lineNumber":77,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"plosslaw"},"content":"        if (input.toUpperCase().equals(Duke.Commands.HELP.getString())) {"},{"lineNumber":79,"author":{"gitId":"plosslaw"},"content":"            Ui.print(HELP_MSG);"},{"lineNumber":80,"author":{"gitId":"plosslaw"},"content":"            return true;"},{"lineNumber":81,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"plosslaw"},"content":"        if (input.toUpperCase().equals(Duke.Commands.DELETEALL.getString())) {"},{"lineNumber":83,"author":{"gitId":"plosslaw"},"content":"            try {"},{"lineNumber":84,"author":{"gitId":"plosslaw"},"content":"                tasks.deleteAllTasks();"},{"lineNumber":85,"author":{"gitId":"plosslaw"},"content":"            } catch (DukeException ex) {"},{"lineNumber":86,"author":{"gitId":"plosslaw"},"content":"                Ui.printError(ex.getMessage());"},{"lineNumber":87,"author":{"gitId":"plosslaw"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"plosslaw"},"content":"            return true;"},{"lineNumber":89,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"plosslaw"},"content":"        return false;"},{"lineNumber":91,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":93,"author":{"gitId":"plosslaw"},"content":"    private boolean parseLongCommands(String input, TaskList tasks) {"},{"lineNumber":94,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":95,"author":{"gitId":"plosslaw"},"content":"        // we convert input to uppercase before checking to make commands case-insensitive"},{"lineNumber":96,"author":{"gitId":"plosslaw"},"content":"        if (input.length() \u003e\u003d 5 \u0026\u0026 input.substring(0,5).toUpperCase().equals(Duke.Commands.DONE.getString())) {"},{"lineNumber":97,"author":{"gitId":"plosslaw"},"content":"            try {"},{"lineNumber":98,"author":{"gitId":"plosslaw"},"content":"                int index \u003d Integer.parseInt(input.substring(5).trim());"},{"lineNumber":99,"author":{"gitId":"plosslaw"},"content":"                tasks.setTaskDone(index);"},{"lineNumber":100,"author":{"gitId":"plosslaw"},"content":"            } catch (NumberFormatException ex) {"},{"lineNumber":101,"author":{"gitId":"plosslaw"},"content":"                Ui.printError(\"Please input an Integer for the \\\"Done\\\" command.\");"},{"lineNumber":102,"author":{"gitId":"plosslaw"},"content":"            } catch (DukeException ex) {"},{"lineNumber":103,"author":{"gitId":"plosslaw"},"content":"                Ui.printError(ex.getMessage());"},{"lineNumber":104,"author":{"gitId":"plosslaw"},"content":"            }"},{"lineNumber":105,"author":{"gitId":"plosslaw"},"content":"            return true;"},{"lineNumber":106,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":108,"author":{"gitId":"plosslaw"},"content":"        if (input.length() \u003e\u003d 5 \u0026\u0026 input.substring(0,5).toUpperCase().equals(Duke.Commands.FIND.getString())) {"},{"lineNumber":109,"author":{"gitId":"plosslaw"},"content":"            String searchTerm \u003d input.substring(5).trim();"},{"lineNumber":110,"author":{"gitId":"plosslaw"},"content":"            if (searchTerm.length() \u003d\u003d 0) {"},{"lineNumber":111,"author":{"gitId":"plosslaw"},"content":"                Ui.printError(\"The search term entered is empty.\");"},{"lineNumber":112,"author":{"gitId":"plosslaw"},"content":"                return true;"},{"lineNumber":113,"author":{"gitId":"plosslaw"},"content":"            }"},{"lineNumber":114,"author":{"gitId":"plosslaw"},"content":"            tasks.displayTasksFound(searchTerm);"},{"lineNumber":115,"author":{"gitId":"plosslaw"},"content":"            return true;"},{"lineNumber":116,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"plosslaw"},"content":"        if (input.length() \u003e\u003d 7 \u0026\u0026 input.substring(0,7).toUpperCase().equals(Duke.Commands.DELETE.getString())) {"},{"lineNumber":118,"author":{"gitId":"plosslaw"},"content":"            try {"},{"lineNumber":119,"author":{"gitId":"plosslaw"},"content":"                int index \u003d Integer.parseInt(input.substring(7).trim());"},{"lineNumber":120,"author":{"gitId":"plosslaw"},"content":"                tasks.deleteTask(index);"},{"lineNumber":121,"author":{"gitId":"plosslaw"},"content":"            } catch (NumberFormatException ex) {"},{"lineNumber":122,"author":{"gitId":"plosslaw"},"content":"                Ui.printError(\"Please input an Integer for the \\\"Delete\\\" command.\");"},{"lineNumber":123,"author":{"gitId":"plosslaw"},"content":"            } catch (DukeException ex) {"},{"lineNumber":124,"author":{"gitId":"plosslaw"},"content":"                Ui.printError(ex.getMessage());"},{"lineNumber":125,"author":{"gitId":"plosslaw"},"content":"            }"},{"lineNumber":126,"author":{"gitId":"plosslaw"},"content":"            return true;"},{"lineNumber":127,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"plosslaw"},"content":"        if (input.length() \u003e\u003d 5 \u0026\u0026 input.substring(0,5).toUpperCase().equals(Duke.Commands.TODO.getString())) {"},{"lineNumber":129,"author":{"gitId":"plosslaw"},"content":"            try {"},{"lineNumber":130,"author":{"gitId":"plosslaw"},"content":"                String name \u003d input.substring(5).trim();"},{"lineNumber":131,"author":{"gitId":"plosslaw"},"content":"                tasks.addTask(Todo.createTodo(name));"},{"lineNumber":132,"author":{"gitId":"plosslaw"},"content":"            } catch (DukeException ex) {"},{"lineNumber":133,"author":{"gitId":"plosslaw"},"content":"                Ui.printError(ex.getMessage());"},{"lineNumber":134,"author":{"gitId":"plosslaw"},"content":"            }"},{"lineNumber":135,"author":{"gitId":"plosslaw"},"content":"            return true;"},{"lineNumber":136,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"plosslaw"},"content":"        if (input.length() \u003e\u003d 6 \u0026\u0026 input.substring(0,6).toUpperCase().equals(Duke.Commands.EVENT.getString())) {"},{"lineNumber":138,"author":{"gitId":"plosslaw"},"content":"            try {"},{"lineNumber":139,"author":{"gitId":"plosslaw"},"content":"                int limiterPosition \u003d input.indexOf(\" /at \");"},{"lineNumber":140,"author":{"gitId":"plosslaw"},"content":"                String name;"},{"lineNumber":141,"author":{"gitId":"plosslaw"},"content":"                String timing;"},{"lineNumber":142,"author":{"gitId":"plosslaw"},"content":"                if (limiterPosition !\u003d -1) {"},{"lineNumber":143,"author":{"gitId":"plosslaw"},"content":"                    name \u003d input.substring(6, limiterPosition).trim();"},{"lineNumber":144,"author":{"gitId":"plosslaw"},"content":"                    timing \u003d input.substring(limiterPosition + 5).trim();"},{"lineNumber":145,"author":{"gitId":"plosslaw"},"content":"                } else {"},{"lineNumber":146,"author":{"gitId":"plosslaw"},"content":"                    throw new DukeException(\"Missing date for Event task\");"},{"lineNumber":147,"author":{"gitId":"plosslaw"},"content":"                }"},{"lineNumber":148,"author":{"gitId":"plosslaw"},"content":"                tasks.addTask(Event.createEvent(name, timing));"},{"lineNumber":149,"author":{"gitId":"plosslaw"},"content":"            } catch (DukeException ex) {"},{"lineNumber":150,"author":{"gitId":"plosslaw"},"content":"                Ui.printError(ex.getMessage());"},{"lineNumber":151,"author":{"gitId":"plosslaw"},"content":"            }"},{"lineNumber":152,"author":{"gitId":"plosslaw"},"content":"            return true;"},{"lineNumber":153,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"plosslaw"},"content":"        if (input.length() \u003e\u003d 9 \u0026\u0026 input.substring(0,9).toUpperCase().equals(Duke.Commands.DEADLINE.getString())) {"},{"lineNumber":155,"author":{"gitId":"plosslaw"},"content":"            try {"},{"lineNumber":156,"author":{"gitId":"plosslaw"},"content":"                int limiterPosition \u003d input.indexOf(\" /by \");"},{"lineNumber":157,"author":{"gitId":"plosslaw"},"content":"                String name;"},{"lineNumber":158,"author":{"gitId":"plosslaw"},"content":"                String dueDate;"},{"lineNumber":159,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":160,"author":{"gitId":"plosslaw"},"content":"                if (limiterPosition !\u003d -1) {"},{"lineNumber":161,"author":{"gitId":"plosslaw"},"content":"                    name \u003d input.substring(9, limiterPosition).trim();"},{"lineNumber":162,"author":{"gitId":"plosslaw"},"content":"                    dueDate \u003d input.substring(limiterPosition + 5).trim();"},{"lineNumber":163,"author":{"gitId":"plosslaw"},"content":"                } else {"},{"lineNumber":164,"author":{"gitId":"plosslaw"},"content":"                    throw new DukeException(\"Missing deadline for Deadline task\");"},{"lineNumber":165,"author":{"gitId":"plosslaw"},"content":"                }"},{"lineNumber":166,"author":{"gitId":"plosslaw"},"content":"                tasks.addTask(Deadline.createDeadline(name, dueDate));"},{"lineNumber":167,"author":{"gitId":"plosslaw"},"content":"            } catch (DukeException ex) {"},{"lineNumber":168,"author":{"gitId":"plosslaw"},"content":"                Ui.printError(ex.getMessage());"},{"lineNumber":169,"author":{"gitId":"plosslaw"},"content":"            }"},{"lineNumber":170,"author":{"gitId":"plosslaw"},"content":"            return true;"},{"lineNumber":171,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"plosslaw"},"content":"        return false;"},{"lineNumber":173,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":175,"author":{"gitId":"plosslaw"},"content":"}"}],"authorContributionMap":{"plosslaw":175}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"plosslaw"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"plosslaw"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":3,"author":{"gitId":"plosslaw"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"plosslaw"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"plosslaw"},"content":"import java.nio.file.Files;"},{"lineNumber":6,"author":{"gitId":"plosslaw"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"plosslaw"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"plosslaw"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"plosslaw"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":11,"author":{"gitId":"plosslaw"},"content":"public class Storage {"},{"lineNumber":12,"author":{"gitId":"plosslaw"},"content":"    private Path filePath;"},{"lineNumber":13,"author":{"gitId":"plosslaw"},"content":"    private Path dirPath;"},{"lineNumber":14,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":15,"author":{"gitId":"plosslaw"},"content":"    public Storage(Path filePath, Path dirPath) {"},{"lineNumber":16,"author":{"gitId":"plosslaw"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":17,"author":{"gitId":"plosslaw"},"content":"        this.dirPath \u003d dirPath;"},{"lineNumber":18,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":19,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":21,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"plosslaw"},"content":"     * Returns a list of tasks after loading them  from the duke data text file."},{"lineNumber":23,"author":{"gitId":"plosslaw"},"content":"     * @return A list of tasks loaded from the duke data text file."},{"lineNumber":24,"author":{"gitId":"plosslaw"},"content":"     * @throws FileNotFoundException If the duke data text file is missing."},{"lineNumber":25,"author":{"gitId":"plosslaw"},"content":"     * @throws DukeDataFolderException If the duke data folder is missing."},{"lineNumber":26,"author":{"gitId":"plosslaw"},"content":"     * @throws DukeException If the duke data text file does not follow the save format possibly due to"},{"lineNumber":27,"author":{"gitId":"plosslaw"},"content":"     * file corruption."},{"lineNumber":28,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"plosslaw"},"content":"    List\u003cTask\u003e loadTasksFromDisk() throws FileNotFoundException, DukeException, DukeDataFolderException {"},{"lineNumber":30,"author":{"gitId":"plosslaw"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":31,"author":{"gitId":"plosslaw"},"content":"        File dukeDataFile \u003d new File(this.filePath.toUri());"},{"lineNumber":32,"author":{"gitId":"plosslaw"},"content":"        if (Files.notExists(this.dirPath)) {"},{"lineNumber":33,"author":{"gitId":"plosslaw"},"content":"            throw new DukeDataFolderException(\"Missing Deuk Data Folder!\" + Ui.NEW_LINE"},{"lineNumber":34,"author":{"gitId":"plosslaw"},"content":"                    + Ui.PADDING + \"Creating new Deuk Data Folder...\");"},{"lineNumber":35,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"plosslaw"},"content":"        Scanner fs \u003d new Scanner(dukeDataFile);"},{"lineNumber":37,"author":{"gitId":"plosslaw"},"content":"        while (fs.hasNext()) {"},{"lineNumber":38,"author":{"gitId":"plosslaw"},"content":"            String taskString \u003d fs.nextLine();"},{"lineNumber":39,"author":{"gitId":"plosslaw"},"content":"            Scanner sc \u003d new Scanner(taskString);"},{"lineNumber":40,"author":{"gitId":"plosslaw"},"content":"            Boolean isDone \u003d sc.nextInt() \u003d\u003d 1;"},{"lineNumber":41,"author":{"gitId":"plosslaw"},"content":"            String taskType \u003d sc.next();"},{"lineNumber":42,"author":{"gitId":"plosslaw"},"content":"            String taskName \u003d sc.next();"},{"lineNumber":43,"author":{"gitId":"plosslaw"},"content":"            Task task;"},{"lineNumber":44,"author":{"gitId":"plosslaw"},"content":"            switch (taskType) {"},{"lineNumber":45,"author":{"gitId":"plosslaw"},"content":"                case \"T\":"},{"lineNumber":46,"author":{"gitId":"plosslaw"},"content":"                    task \u003d Todo.createTodo(taskName);"},{"lineNumber":47,"author":{"gitId":"plosslaw"},"content":"                    break;"},{"lineNumber":48,"author":{"gitId":"plosslaw"},"content":"                case \"D\":"},{"lineNumber":49,"author":{"gitId":"plosslaw"},"content":"                    String dueDate \u003d fs.nextLine();"},{"lineNumber":50,"author":{"gitId":"plosslaw"},"content":"                    task \u003d Deadline.createDeadline(taskName, dueDate);"},{"lineNumber":51,"author":{"gitId":"plosslaw"},"content":"                    break;"},{"lineNumber":52,"author":{"gitId":"plosslaw"},"content":"                case \"E\":"},{"lineNumber":53,"author":{"gitId":"plosslaw"},"content":"                    String timing \u003d fs.nextLine();"},{"lineNumber":54,"author":{"gitId":"plosslaw"},"content":"                    task \u003d Event.createEvent(taskName, timing);"},{"lineNumber":55,"author":{"gitId":"plosslaw"},"content":"                    break;"},{"lineNumber":56,"author":{"gitId":"plosslaw"},"content":"                default:"},{"lineNumber":57,"author":{"gitId":"plosslaw"},"content":"                    throw new DukeException(\"Save file corrupted!\");"},{"lineNumber":58,"author":{"gitId":"plosslaw"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"plosslaw"},"content":"            task.setDoneness(isDone);"},{"lineNumber":60,"author":{"gitId":"plosslaw"},"content":"            taskList.add(task);"},{"lineNumber":61,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"plosslaw"},"content":"        return taskList;"},{"lineNumber":63,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":65,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"plosslaw"},"content":"     * Save the tasks in the TaskList instance to the duke data text file on disk."},{"lineNumber":67,"author":{"gitId":"plosslaw"},"content":"     * @param tasks TaskList instance used by the Duke instance."},{"lineNumber":68,"author":{"gitId":"plosslaw"},"content":"     * @throws IOException  If the duke data text file exists but is a directory rather than a regular file,"},{"lineNumber":69,"author":{"gitId":"plosslaw"},"content":"     * does not exist but cannot be created, or cannot be opened for any other reason"},{"lineNumber":70,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"plosslaw"},"content":"    void saveTasksToDisk(TaskList tasks) throws IOException {"},{"lineNumber":72,"author":{"gitId":"plosslaw"},"content":"        // TODO: check dirty flag before saving to disk"},{"lineNumber":73,"author":{"gitId":"plosslaw"},"content":"        FileWriter fw \u003d new FileWriter(this.filePath.toString());"},{"lineNumber":74,"author":{"gitId":"plosslaw"},"content":"        String tasksString \u003d \"\";"},{"lineNumber":75,"author":{"gitId":"plosslaw"},"content":"        for (int i \u003d 0; i \u003c tasks.countTotalTasks(); i++) {"},{"lineNumber":76,"author":{"gitId":"plosslaw"},"content":"            try {"},{"lineNumber":77,"author":{"gitId":"plosslaw"},"content":"                assert i \u003c tasks.countTotalTasks() : \"Index of task is outside the range of task list\";"},{"lineNumber":78,"author":{"gitId":"plosslaw"},"content":"                Task task \u003d tasks.getTask(i);"},{"lineNumber":79,"author":{"gitId":"plosslaw"},"content":"                tasksString +\u003d task.getSaveDataString() + Ui.NEW_LINE;"},{"lineNumber":80,"author":{"gitId":"plosslaw"},"content":"            } catch (IndexOutOfBoundsException ex) {"},{"lineNumber":81,"author":{"gitId":"plosslaw"},"content":"                Ui.printError(\"Saving tasks to disk encountered IndexOutOfBoundsException\");"},{"lineNumber":82,"author":{"gitId":"plosslaw"},"content":"                break;"},{"lineNumber":83,"author":{"gitId":"plosslaw"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"plosslaw"},"content":"        fw.write(tasksString);"},{"lineNumber":86,"author":{"gitId":"plosslaw"},"content":"        fw.close();"},{"lineNumber":87,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":89,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":90,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"plosslaw"},"content":"     * Creates duke data folder for storing the duke data text file and the duke data"},{"lineNumber":92,"author":{"gitId":"plosslaw"},"content":"     * text file in the created folder."},{"lineNumber":93,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"plosslaw"},"content":"    void createDukeDataFolder() {"},{"lineNumber":95,"author":{"gitId":"plosslaw"},"content":"        File dir \u003d new File(this.dirPath.toUri());"},{"lineNumber":96,"author":{"gitId":"plosslaw"},"content":"        boolean isCreated \u003d dir.mkdir();"},{"lineNumber":97,"author":{"gitId":"plosslaw"},"content":"        if (isCreated) {"},{"lineNumber":98,"author":{"gitId":"plosslaw"},"content":"            Ui.print(\"Successfully created Deuk Data Folder\");"},{"lineNumber":99,"author":{"gitId":"plosslaw"},"content":"            try {"},{"lineNumber":100,"author":{"gitId":"plosslaw"},"content":"                FileWriter fw \u003d new FileWriter(this.filePath.toString());"},{"lineNumber":101,"author":{"gitId":"plosslaw"},"content":"                fw.close();"},{"lineNumber":102,"author":{"gitId":"plosslaw"},"content":"            } catch (IOException err) {"},{"lineNumber":103,"author":{"gitId":"plosslaw"},"content":"                Ui.printError(err.getMessage());"},{"lineNumber":104,"author":{"gitId":"plosslaw"},"content":"            }"},{"lineNumber":105,"author":{"gitId":"plosslaw"},"content":"        } else {"},{"lineNumber":106,"author":{"gitId":"plosslaw"},"content":"            Ui.printError(\"Failed to create Deuk Data Folder\");"},{"lineNumber":107,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":110,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"plosslaw"},"content":"     * Creates the duke data text file in the duke data folder."},{"lineNumber":112,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"plosslaw"},"content":"    void createDukeDataFile() {"},{"lineNumber":114,"author":{"gitId":"plosslaw"},"content":"        try {"},{"lineNumber":115,"author":{"gitId":"plosslaw"},"content":"            FileWriter fw \u003d new FileWriter(this.filePath.toString());"},{"lineNumber":116,"author":{"gitId":"plosslaw"},"content":"            fw.close();"},{"lineNumber":117,"author":{"gitId":"plosslaw"},"content":"        } catch (IOException err) {"},{"lineNumber":118,"author":{"gitId":"plosslaw"},"content":"            Ui.printError(err.getMessage());"},{"lineNumber":119,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"plosslaw"},"content":"}"}],"authorContributionMap":{"plosslaw":121}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"plosslaw"},"content":"public class Task {"},{"lineNumber":2,"author":{"gitId":"plosslaw"},"content":"    protected final String name;"},{"lineNumber":3,"author":{"gitId":"plosslaw"},"content":"    protected Boolean isDone;"},{"lineNumber":4,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":5,"author":{"gitId":"plosslaw"},"content":"    protected Task(String name) {"},{"lineNumber":6,"author":{"gitId":"plosslaw"},"content":"        this.name \u003d name;"},{"lineNumber":7,"author":{"gitId":"plosslaw"},"content":"        this.isDone \u003d false;"},{"lineNumber":8,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":10,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"plosslaw"},"content":"     * Sets whether the task is done or undone."},{"lineNumber":12,"author":{"gitId":"plosslaw"},"content":"     * @param isDone Boolean value describing whether the task is done or undone."},{"lineNumber":13,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"plosslaw"},"content":"    public void setDoneness(Boolean isDone) {"},{"lineNumber":15,"author":{"gitId":"plosslaw"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":16,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":18,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"plosslaw"},"content":"     * Returns a boolean value describing if the task is done."},{"lineNumber":20,"author":{"gitId":"plosslaw"},"content":"     * @return A boolean value describing if the task is done."},{"lineNumber":21,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"plosslaw"},"content":"    public boolean getDoneness() {"},{"lineNumber":23,"author":{"gitId":"plosslaw"},"content":"        return this.isDone.booleanValue();"},{"lineNumber":24,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":26,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"plosslaw"},"content":"     * Returns the name of the task."},{"lineNumber":28,"author":{"gitId":"plosslaw"},"content":"     * @return Name of the task."},{"lineNumber":29,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"plosslaw"},"content":"    public String getName() {"},{"lineNumber":31,"author":{"gitId":"plosslaw"},"content":"        return String.valueOf(this.name);"},{"lineNumber":32,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":34,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"plosslaw"},"content":"     * Returns the error message for the case where the name of the task is empty."},{"lineNumber":36,"author":{"gitId":"plosslaw"},"content":"     * @return Error message for missing name."},{"lineNumber":37,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"plosslaw"},"content":"    public String returnMissingNameError() {"},{"lineNumber":39,"author":{"gitId":"plosslaw"},"content":"        return \"The name of a task cannot be empty.\";"},{"lineNumber":40,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":42,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"plosslaw"},"content":"     * Returns the Task instance\u0027s Save Data String used by the Storage class when writing to"},{"lineNumber":44,"author":{"gitId":"plosslaw"},"content":"     * duke data text file on disk."},{"lineNumber":45,"author":{"gitId":"plosslaw"},"content":"     * @see Storage#saveTasksToDisk(TaskList)"},{"lineNumber":46,"author":{"gitId":"plosslaw"},"content":"     * @return The Save Data String of the Task instance."},{"lineNumber":47,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"plosslaw"},"content":"    public String getSaveDataString() {"},{"lineNumber":49,"author":{"gitId":"plosslaw"},"content":"        String saveData \u003d \"\";"},{"lineNumber":50,"author":{"gitId":"plosslaw"},"content":"        saveData +\u003d this.isDone ? 1 : 0;"},{"lineNumber":51,"author":{"gitId":"plosslaw"},"content":"        saveData +\u003d \" A \" + this.name;"},{"lineNumber":52,"author":{"gitId":"plosslaw"},"content":"        return saveData;"},{"lineNumber":53,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":55,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"plosslaw"},"content":"     * Returns String representation of the Task instance."},{"lineNumber":57,"author":{"gitId":"plosslaw"},"content":"     * @return String representation of the Task instance."},{"lineNumber":58,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"plosslaw"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"plosslaw"},"content":"    public String toString() {"},{"lineNumber":61,"author":{"gitId":"plosslaw"},"content":"        String marked \u003d this.isDone ? \"[Y] \" : \"[N] \";"},{"lineNumber":62,"author":{"gitId":"plosslaw"},"content":"//        String marked \u003d this.isDone ? \"[✓] \" : \"[✗] \";"},{"lineNumber":63,"author":{"gitId":"plosslaw"},"content":"        return marked + this.name;"},{"lineNumber":64,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"plosslaw"},"content":"}"}],"authorContributionMap":{"plosslaw":65}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"plosslaw"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"plosslaw"},"content":"import java.util.HashMap;"},{"lineNumber":3,"author":{"gitId":"plosslaw"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"plosslaw"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":6,"author":{"gitId":"plosslaw"},"content":"public class TaskList {"},{"lineNumber":7,"author":{"gitId":"plosslaw"},"content":"    private final List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":8,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":9,"author":{"gitId":"plosslaw"},"content":"    public TaskList(List\u003cTask\u003e inputTasks) {"},{"lineNumber":10,"author":{"gitId":"plosslaw"},"content":"        for (Task task : inputTasks) {"},{"lineNumber":11,"author":{"gitId":"plosslaw"},"content":"            this.taskList.add(task);"},{"lineNumber":12,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":13,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":15,"author":{"gitId":"plosslaw"},"content":"    public TaskList() {"},{"lineNumber":16,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":17,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":19,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"plosslaw"},"content":"     * Returns the number of tasks in the task list."},{"lineNumber":21,"author":{"gitId":"plosslaw"},"content":"     * @return Number of tasks in the task list."},{"lineNumber":22,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"plosslaw"},"content":"    Integer countTotalTasks() {"},{"lineNumber":24,"author":{"gitId":"plosslaw"},"content":"        return this.taskList.size();"},{"lineNumber":25,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":27,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"plosslaw"},"content":"     * Returns the task at the specified index in the task list."},{"lineNumber":29,"author":{"gitId":"plosslaw"},"content":"     * @param index The index of the task of interest in the task list."},{"lineNumber":30,"author":{"gitId":"plosslaw"},"content":"     * @return The Task instance found at the specified index in the task list."},{"lineNumber":31,"author":{"gitId":"plosslaw"},"content":"     * @throws IndexOutOfBoundsException If the index specified is outside the range of the task list."},{"lineNumber":32,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"plosslaw"},"content":"    Task getTask(int index) throws IndexOutOfBoundsException{"},{"lineNumber":34,"author":{"gitId":"plosslaw"},"content":"        assert index \u003c this.taskList.size() : \"Out of bound index in TaskList#getTask(int index)\";"},{"lineNumber":35,"author":{"gitId":"plosslaw"},"content":"        return this.taskList.get(index);"},{"lineNumber":36,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":38,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"plosslaw"},"content":"     * Adds a Task instance to the task list."},{"lineNumber":40,"author":{"gitId":"plosslaw"},"content":"     * @param task Task instance to be added to the task list."},{"lineNumber":41,"author":{"gitId":"plosslaw"},"content":"     * @throws DukeException If the Task instance does not have a name."},{"lineNumber":42,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"plosslaw"},"content":"    void addTask(Task task) throws DukeException {"},{"lineNumber":44,"author":{"gitId":"plosslaw"},"content":"        if (task.getName().length() \u003d\u003d 0) {"},{"lineNumber":45,"author":{"gitId":"plosslaw"},"content":"            throw new DukeException(task.returnMissingNameError());"},{"lineNumber":46,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"plosslaw"},"content":"        if (checkTaskAlreadyExists(task)) {"},{"lineNumber":48,"author":{"gitId":"plosslaw"},"content":"            throw new DukeException(\"That task already exists in the task list\");"},{"lineNumber":49,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"plosslaw"},"content":"        this.taskList.add(task);"},{"lineNumber":51,"author":{"gitId":"plosslaw"},"content":"        String numOfTasks \u003d this.taskList.size() \u003d\u003d 1 ? \"1 task\" : this.taskList.size() + \" tasks\";"},{"lineNumber":52,"author":{"gitId":"plosslaw"},"content":"        String message \u003d \"Got it. I\u0027ve added the following task: \" + Ui.NEW_LINE"},{"lineNumber":53,"author":{"gitId":"plosslaw"},"content":"                + Ui.PADDING + \"  \" + task.toString() + Ui.NEW_LINE"},{"lineNumber":54,"author":{"gitId":"plosslaw"},"content":"                + Ui.PADDING + \"Now you have \"  + numOfTasks + \" in total.\";"},{"lineNumber":55,"author":{"gitId":"plosslaw"},"content":"        Ui.print(message);"},{"lineNumber":56,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":58,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"plosslaw"},"content":"     * Display the list of tasks in the task list."},{"lineNumber":60,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"plosslaw"},"content":"    void displayTasks() {"},{"lineNumber":62,"author":{"gitId":"plosslaw"},"content":"        if (this.taskList.size() \u003d\u003d 0) {"},{"lineNumber":63,"author":{"gitId":"plosslaw"},"content":"            Ui.print(\"Your list is empty, try adding some tasks to it\");"},{"lineNumber":64,"author":{"gitId":"plosslaw"},"content":"            return;"},{"lineNumber":65,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"plosslaw"},"content":"        StringBuilder output \u003d new StringBuilder(\"You have the following tasks in your list:\" + Ui.NEW_LINE);"},{"lineNumber":67,"author":{"gitId":"plosslaw"},"content":"        int counter \u003d 1;"},{"lineNumber":68,"author":{"gitId":"plosslaw"},"content":"        for (Task task: this.taskList) {"},{"lineNumber":69,"author":{"gitId":"plosslaw"},"content":"            output.append(Ui.PADDING).append(counter).append(\". \").append(task.toString()).append(Ui.NEW_LINE);"},{"lineNumber":70,"author":{"gitId":"plosslaw"},"content":"            counter++;"},{"lineNumber":71,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"plosslaw"},"content":"        output \u003d new StringBuilder(output.substring(0, output.length() - 1));"},{"lineNumber":73,"author":{"gitId":"plosslaw"},"content":"        Ui.print(output.toString());"},{"lineNumber":74,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":76,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"plosslaw"},"content":"     * Display the list of tasks matching the search term specified by the user."},{"lineNumber":78,"author":{"gitId":"plosslaw"},"content":"     * @param searchTerm The search term used to find tasks in the task list."},{"lineNumber":79,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"plosslaw"},"content":"    void displayTasksFound(String searchTerm) {"},{"lineNumber":81,"author":{"gitId":"plosslaw"},"content":"        int counter \u003d 0;"},{"lineNumber":82,"author":{"gitId":"plosslaw"},"content":"        StringBuilder output \u003d new StringBuilder(\"Here are the matching tasks in your list:\" + Ui.NEW_LINE);"},{"lineNumber":83,"author":{"gitId":"plosslaw"},"content":"        for (Task task: this.taskList) {"},{"lineNumber":84,"author":{"gitId":"plosslaw"},"content":"            if (task.getName().contains(searchTerm)) {"},{"lineNumber":85,"author":{"gitId":"plosslaw"},"content":"                counter++;"},{"lineNumber":86,"author":{"gitId":"plosslaw"},"content":"                output.append(Ui.PADDING).append(counter).append(\". \").append(task.toString()).append(Ui.NEW_LINE);"},{"lineNumber":87,"author":{"gitId":"plosslaw"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"plosslaw"},"content":"        if (counter \u003d\u003d 0) {"},{"lineNumber":90,"author":{"gitId":"plosslaw"},"content":"            Ui.print(\"No matching tasks found. Try another search term\");"},{"lineNumber":91,"author":{"gitId":"plosslaw"},"content":"            return;"},{"lineNumber":92,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"plosslaw"},"content":"        output \u003d new StringBuilder(output.substring(0, output.length() - 1));"},{"lineNumber":94,"author":{"gitId":"plosslaw"},"content":"        Ui.print(output.toString());"},{"lineNumber":95,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":97,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"plosslaw"},"content":"     * Sets the task at the specified index in the task list to done."},{"lineNumber":99,"author":{"gitId":"plosslaw"},"content":"     * @param index The index of the task in the task list."},{"lineNumber":100,"author":{"gitId":"plosslaw"},"content":"     * @throws DukeException If the index specified is outside the range of the task list."},{"lineNumber":101,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"plosslaw"},"content":"    void setTaskDone(int index) throws DukeException {"},{"lineNumber":103,"author":{"gitId":"plosslaw"},"content":"        if (index \u003c\u003d 0 || index \u003e this.taskList.size()) {"},{"lineNumber":104,"author":{"gitId":"plosslaw"},"content":"            throw new DukeException(\"Invalid index, cannot find task.\");"},{"lineNumber":105,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"plosslaw"},"content":"        assert index \u003c this.taskList.size() : \"Out of bound index in TaskList#setTaskDone(int index)\";"},{"lineNumber":107,"author":{"gitId":"plosslaw"},"content":"        this.taskList.get(index-1).setDoneness(true);"},{"lineNumber":108,"author":{"gitId":"plosslaw"},"content":"        String message \u003d \"Nice job! I\u0027ll mark that as done:\" + Ui.NEW_LINE + Ui.PADDING"},{"lineNumber":109,"author":{"gitId":"plosslaw"},"content":"                + \"  \" + this.taskList.get(index-1).toString();"},{"lineNumber":110,"author":{"gitId":"plosslaw"},"content":"        Ui.print(message);"},{"lineNumber":111,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":113,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"plosslaw"},"content":"     * Deletes the task at the specified index in the task list."},{"lineNumber":115,"author":{"gitId":"plosslaw"},"content":"     * @param index The index of the task in the task list."},{"lineNumber":116,"author":{"gitId":"plosslaw"},"content":"     * @throws DukeException If the index specified is outside the range of the task list."},{"lineNumber":117,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"plosslaw"},"content":"    void deleteTask(int index) throws DukeException {"},{"lineNumber":119,"author":{"gitId":"plosslaw"},"content":"        if (index \u003c\u003d 0 || index \u003e this.taskList.size()) {"},{"lineNumber":120,"author":{"gitId":"plosslaw"},"content":"            throw new DukeException(\"Invalid index, cannot find task.\");"},{"lineNumber":121,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"plosslaw"},"content":"        assert index \u003c this.taskList.size() : \"Out of bound index in TaskList#deleteTask(int index)\";"},{"lineNumber":123,"author":{"gitId":"plosslaw"},"content":"        Task task \u003d this.taskList.get(index-1);"},{"lineNumber":124,"author":{"gitId":"plosslaw"},"content":"        this.taskList.remove(index-1);"},{"lineNumber":125,"author":{"gitId":"plosslaw"},"content":"        String numOfTasks \u003d this.taskList.size() \u003d\u003d 1 ? \"1 task\" : this.taskList.size() + \" tasks\";"},{"lineNumber":126,"author":{"gitId":"plosslaw"},"content":"        String message \u003d \"Noted. The following task has been removed:\""},{"lineNumber":127,"author":{"gitId":"plosslaw"},"content":"                + Ui.NEW_LINE + Ui.PADDING + \"  \" + task.toString() + Ui.NEW_LINE"},{"lineNumber":128,"author":{"gitId":"plosslaw"},"content":"                + Ui.PADDING + \"Now you have \"  + numOfTasks + \" left.\";"},{"lineNumber":129,"author":{"gitId":"plosslaw"},"content":"        Ui.print(message);"},{"lineNumber":130,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":132,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"plosslaw"},"content":"     * Deletes all tasks in the task list."},{"lineNumber":134,"author":{"gitId":"plosslaw"},"content":"     * @throws DukeException If the task list is already empty."},{"lineNumber":135,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"plosslaw"},"content":"    void deleteAllTasks() throws DukeException {"},{"lineNumber":137,"author":{"gitId":"plosslaw"},"content":"        if (this.taskList.size() \u003d\u003d 0) {"},{"lineNumber":138,"author":{"gitId":"plosslaw"},"content":"            throw new DukeException(\"Your list is already empty.\");"},{"lineNumber":139,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"plosslaw"},"content":"        this.taskList.clear();"},{"lineNumber":141,"author":{"gitId":"plosslaw"},"content":"        String message \u003d \"Noted. All tasks have been removed.\";"},{"lineNumber":142,"author":{"gitId":"plosslaw"},"content":"        Ui.print(message);"},{"lineNumber":143,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":145,"author":{"gitId":"plosslaw"},"content":"    // Two tasks are equivalent only if they have the same name and timing (if applicable)"},{"lineNumber":146,"author":{"gitId":"plosslaw"},"content":"    private boolean checkTaskAlreadyExists(Task newTask) {"},{"lineNumber":147,"author":{"gitId":"plosslaw"},"content":"        boolean doesExist \u003d false;"},{"lineNumber":148,"author":{"gitId":"plosslaw"},"content":"        for (Task task: this.taskList) {"},{"lineNumber":149,"author":{"gitId":"plosslaw"},"content":"            boolean didDonenessChange \u003d false;"},{"lineNumber":150,"author":{"gitId":"plosslaw"},"content":"            if (task.getDoneness()) {"},{"lineNumber":151,"author":{"gitId":"plosslaw"},"content":"                task.setDoneness(false);"},{"lineNumber":152,"author":{"gitId":"plosslaw"},"content":"                didDonenessChange \u003d true;"},{"lineNumber":153,"author":{"gitId":"plosslaw"},"content":"            }"},{"lineNumber":154,"author":{"gitId":"plosslaw"},"content":"            if (task.getSaveDataString().equals(newTask.getSaveDataString())) {"},{"lineNumber":155,"author":{"gitId":"plosslaw"},"content":"                doesExist \u003d true;"},{"lineNumber":156,"author":{"gitId":"plosslaw"},"content":"                if (didDonenessChange) {"},{"lineNumber":157,"author":{"gitId":"plosslaw"},"content":"                    task.setDoneness(true);"},{"lineNumber":158,"author":{"gitId":"plosslaw"},"content":"                }"},{"lineNumber":159,"author":{"gitId":"plosslaw"},"content":"                break;"},{"lineNumber":160,"author":{"gitId":"plosslaw"},"content":"            }"},{"lineNumber":161,"author":{"gitId":"plosslaw"},"content":"            if (didDonenessChange) {"},{"lineNumber":162,"author":{"gitId":"plosslaw"},"content":"                task.setDoneness(true);"},{"lineNumber":163,"author":{"gitId":"plosslaw"},"content":"            }"},{"lineNumber":164,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"plosslaw"},"content":"        return doesExist;"},{"lineNumber":166,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"plosslaw"},"content":"}"}],"authorContributionMap":{"plosslaw":167}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"plosslaw"},"content":"public class Todo extends Task{"},{"lineNumber":2,"author":{"gitId":"plosslaw"},"content":"    private Todo(String name) {"},{"lineNumber":3,"author":{"gitId":"plosslaw"},"content":"        super(name);"},{"lineNumber":4,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":6,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"plosslaw"},"content":"     * Creates a Todo instance."},{"lineNumber":8,"author":{"gitId":"plosslaw"},"content":"     * @param name Name of the Todo task."},{"lineNumber":9,"author":{"gitId":"plosslaw"},"content":"     * @return A new Todo instance."},{"lineNumber":10,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"plosslaw"},"content":"    public static Todo createTodo(String name) {"},{"lineNumber":12,"author":{"gitId":"plosslaw"},"content":"        return new Todo(name);"},{"lineNumber":13,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":15,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"plosslaw"},"content":"     * Returns the error message for the case where the name of the"},{"lineNumber":17,"author":{"gitId":"plosslaw"},"content":"     * Todo task is empty."},{"lineNumber":18,"author":{"gitId":"plosslaw"},"content":"     * @return Error message for missing name."},{"lineNumber":19,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"plosslaw"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"plosslaw"},"content":"    public String returnMissingNameError() {"},{"lineNumber":22,"author":{"gitId":"plosslaw"},"content":"        return \"The name of a todo task cannot be empty.\";"},{"lineNumber":23,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":25,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"plosslaw"},"content":"     * Returns the Todo instance\u0027s Save Data String used by the Storage class when writing to"},{"lineNumber":27,"author":{"gitId":"plosslaw"},"content":"     * duke data text file on disk."},{"lineNumber":28,"author":{"gitId":"plosslaw"},"content":"     * @see Storage#saveTasksToDisk(TaskList)"},{"lineNumber":29,"author":{"gitId":"plosslaw"},"content":"     * @return The Save Data String of the Todo instance."},{"lineNumber":30,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"plosslaw"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"plosslaw"},"content":"    public String getSaveDataString() {"},{"lineNumber":33,"author":{"gitId":"plosslaw"},"content":"        String saveData \u003d \"\";"},{"lineNumber":34,"author":{"gitId":"plosslaw"},"content":"        saveData +\u003d this.isDone ? 1 : 0;"},{"lineNumber":35,"author":{"gitId":"plosslaw"},"content":"        saveData +\u003d \" T \" + this.name;"},{"lineNumber":36,"author":{"gitId":"plosslaw"},"content":"        return saveData;"},{"lineNumber":37,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":39,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"plosslaw"},"content":"     * Returns String representation of the Todo instance."},{"lineNumber":41,"author":{"gitId":"plosslaw"},"content":"     * @return String representation of the Todo instance."},{"lineNumber":42,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"plosslaw"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"plosslaw"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitId":"plosslaw"},"content":"        String marked \u003d this.isDone ? \"[Y] \" : \"[N] \";"},{"lineNumber":46,"author":{"gitId":"plosslaw"},"content":"//        String marked \u003d this.isDone ? \"[✓] \" : \"[✗] \";"},{"lineNumber":47,"author":{"gitId":"plosslaw"},"content":"        return \"[T]\" + marked + this.name;"},{"lineNumber":48,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"plosslaw"},"content":"}"}],"authorContributionMap":{"plosslaw":49}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"plosslaw"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":3,"author":{"gitId":"plosslaw"},"content":"public class Ui {"},{"lineNumber":4,"author":{"gitId":"plosslaw"},"content":"    public static final String NEW_LINE \u003d \"\\n\";"},{"lineNumber":5,"author":{"gitId":"plosslaw"},"content":"    public static final String HORIZONTAL_LINE \u003d"},{"lineNumber":6,"author":{"gitId":"plosslaw"},"content":"            \"    ____________________________________________________________\";"},{"lineNumber":7,"author":{"gitId":"plosslaw"},"content":"    public static final String PADDING \u003d \"      \";"},{"lineNumber":8,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":9,"author":{"gitId":"plosslaw"},"content":"    private static final String MESSAGE_TEMPLATE \u003d HORIZONTAL_LINE + NEW_LINE + PADDING + \"%s\""},{"lineNumber":10,"author":{"gitId":"plosslaw"},"content":"            + NEW_LINE + HORIZONTAL_LINE + NEW_LINE + NEW_LINE;"},{"lineNumber":11,"author":{"gitId":"plosslaw"},"content":"    public static final String MESSAGE_TEMPLATE_VERBAL \u003d HORIZONTAL_LINE + NEW_LINE + PADDING + \"Deuk: %s\""},{"lineNumber":12,"author":{"gitId":"plosslaw"},"content":"            + NEW_LINE + HORIZONTAL_LINE + NEW_LINE + NEW_LINE;"},{"lineNumber":13,"author":{"gitId":"plosslaw"},"content":"    private static final String MESSAGE_TEMPLATE_ERROR \u003d HORIZONTAL_LINE + NEW_LINE + PADDING"},{"lineNumber":14,"author":{"gitId":"plosslaw"},"content":"            + \"OOPS!!! %s\""},{"lineNumber":15,"author":{"gitId":"plosslaw"},"content":"//            + \"☹ OOPS!!! %s\""},{"lineNumber":16,"author":{"gitId":"plosslaw"},"content":"            + NEW_LINE + HORIZONTAL_LINE + NEW_LINE + NEW_LINE;"},{"lineNumber":17,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":18,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"plosslaw"},"content":"     * Prints the given message to the user."},{"lineNumber":20,"author":{"gitId":"plosslaw"},"content":"     * @param msg Message to be printed to the user."},{"lineNumber":21,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"plosslaw"},"content":"    public static void print(String msg) {"},{"lineNumber":23,"author":{"gitId":"plosslaw"},"content":"        System.out.printf(MESSAGE_TEMPLATE, msg);"},{"lineNumber":24,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":26,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"plosslaw"},"content":"     * Prints the error message to the user."},{"lineNumber":28,"author":{"gitId":"plosslaw"},"content":"     * @param errMsg Error message to be printed to the user."},{"lineNumber":29,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"plosslaw"},"content":"    public static void printError(String errMsg) {"},{"lineNumber":31,"author":{"gitId":"plosslaw"},"content":"        System.out.printf(MESSAGE_TEMPLATE_ERROR, errMsg);"},{"lineNumber":32,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":34,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"plosslaw"},"content":"     * Prints the given message in the following format \"Deuk: [Message]\" to the user."},{"lineNumber":36,"author":{"gitId":"plosslaw"},"content":"     * @param msg Message to be printed to the user."},{"lineNumber":37,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"plosslaw"},"content":"    public static void printVerbal(String msg) {"},{"lineNumber":39,"author":{"gitId":"plosslaw"},"content":"        System.out.printf(MESSAGE_TEMPLATE_VERBAL, msg);"},{"lineNumber":40,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":42,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"plosslaw"},"content":"     * Prints the hello message to the user."},{"lineNumber":44,"author":{"gitId":"plosslaw"},"content":"     * @param logo Logo of the Deuk Programme."},{"lineNumber":45,"author":{"gitId":"plosslaw"},"content":"     * @param introMessage Welcome message to the user."},{"lineNumber":46,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"plosslaw"},"content":"    public static void sayHello(String logo, String introMessage) {"},{"lineNumber":48,"author":{"gitId":"plosslaw"},"content":"        System.out.printf(logo + NEW_LINE + MESSAGE_TEMPLATE_VERBAL, introMessage);"},{"lineNumber":49,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":51,"author":{"gitId":"plosslaw"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"plosslaw"},"content":"     * Prints the farewell message and saves tasks in task list to disk."},{"lineNumber":53,"author":{"gitId":"plosslaw"},"content":"     * @param storage Storage instance used by the Duke instance."},{"lineNumber":54,"author":{"gitId":"plosslaw"},"content":"     * @param tasks TaskList instance used by the Duke instance."},{"lineNumber":55,"author":{"gitId":"plosslaw"},"content":"     * @see Storage#saveTasksToDisk(TaskList)"},{"lineNumber":56,"author":{"gitId":"plosslaw"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"plosslaw"},"content":"    public static void sayGoodbye(Storage storage, TaskList tasks) {"},{"lineNumber":58,"author":{"gitId":"plosslaw"},"content":"        try {"},{"lineNumber":59,"author":{"gitId":"plosslaw"},"content":"            storage.saveTasksToDisk(tasks);"},{"lineNumber":60,"author":{"gitId":"plosslaw"},"content":"        } catch (IOException ex) {"},{"lineNumber":61,"author":{"gitId":"plosslaw"},"content":"            Ui.printError(ex.getMessage());"},{"lineNumber":62,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"plosslaw"},"content":"        Ui.printVerbal(\"Goodbye, hope to see you again!\");"},{"lineNumber":64,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"plosslaw"},"content":"}"}],"authorContributionMap":{"plosslaw":65}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"plosslaw"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":3,"author":{"gitId":"plosslaw"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"plosslaw"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"plosslaw"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"plosslaw"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":8,"author":{"gitId":"plosslaw"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\""},{"lineNumber":9,"author":{"gitId":"plosslaw"},"content":"         maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\""},{"lineNumber":10,"author":{"gitId":"plosslaw"},"content":"         xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":11,"author":{"gitId":"plosslaw"},"content":"    \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"plosslaw"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"/\u003e"},{"lineNumber":13,"author":{"gitId":"plosslaw"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":14,"author":{"gitId":"plosslaw"},"content":"    \u003c/children\u003e"},{"lineNumber":15,"author":{"gitId":"plosslaw"},"content":"    \u003cpadding\u003e"},{"lineNumber":16,"author":{"gitId":"plosslaw"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":17,"author":{"gitId":"plosslaw"},"content":"    \u003c/padding\u003e"},{"lineNumber":18,"author":{"gitId":"plosslaw"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"plosslaw":18}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"plosslaw"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":3,"author":{"gitId":"plosslaw"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"plosslaw"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"plosslaw"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"plosslaw"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"plosslaw"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":9,"author":{"gitId":"plosslaw"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\""},{"lineNumber":10,"author":{"gitId":"plosslaw"},"content":"            minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""},{"lineNumber":11,"author":{"gitId":"plosslaw"},"content":"            xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":12,"author":{"gitId":"plosslaw"},"content":"    \u003cchildren\u003e"},{"lineNumber":13,"author":{"gitId":"plosslaw"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\""},{"lineNumber":14,"author":{"gitId":"plosslaw"},"content":"                   prefWidth\u003d\"524.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"plosslaw"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"524.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\""},{"lineNumber":16,"author":{"gitId":"plosslaw"},"content":"                onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":17,"author":{"gitId":"plosslaw"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\""},{"lineNumber":18,"author":{"gitId":"plosslaw"},"content":"                    prefWidth\u003d\"600.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":19,"author":{"gitId":"plosslaw"},"content":"            \u003ccontent\u003e"},{"lineNumber":20,"author":{"gitId":"plosslaw"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"588.0\" /\u003e"},{"lineNumber":21,"author":{"gitId":"plosslaw"},"content":"            \u003c/content\u003e"},{"lineNumber":22,"author":{"gitId":"plosslaw"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":23,"author":{"gitId":"plosslaw"},"content":"    \u003c/children\u003e"},{"lineNumber":24,"author":{"gitId":"plosslaw"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"plosslaw":24}},{"path":"src/test/java/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"plosslaw"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":3,"author":{"gitId":"plosslaw"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"plosslaw"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":6,"author":{"gitId":"plosslaw"},"content":"public class EventTest {"},{"lineNumber":7,"author":{"gitId":"plosslaw"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"plosslaw"},"content":"    public void testSaveDataStringConversion() {"},{"lineNumber":9,"author":{"gitId":"plosslaw"},"content":"        try {"},{"lineNumber":10,"author":{"gitId":"plosslaw"},"content":"            Deadline deadline \u003d Deadline.createDeadline(\"Deadline 1\", \"2020-08-01\");"},{"lineNumber":11,"author":{"gitId":"plosslaw"},"content":"            assertEquals(\"0 D Deadline 1\\n2020-08-01\", deadline.getSaveDataString());"},{"lineNumber":12,"author":{"gitId":"plosslaw"},"content":"        } catch (DukeException ex) {"},{"lineNumber":13,"author":{"gitId":"plosslaw"},"content":"            fail();"},{"lineNumber":14,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":15,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"plosslaw"},"content":"}"}],"authorContributionMap":{"plosslaw":16}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"plosslaw"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":3,"author":{"gitId":"plosslaw"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"plosslaw"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":6,"author":{"gitId":"plosslaw"},"content":"public class TaskListTest {"},{"lineNumber":7,"author":{"gitId":"plosslaw"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"plosslaw"},"content":"    public void addTodo_emptyName_exceptionThrown(){"},{"lineNumber":9,"author":{"gitId":"plosslaw"},"content":"        TaskList task \u003d new TaskList();"},{"lineNumber":10,"author":{"gitId":"plosslaw"},"content":"        try {"},{"lineNumber":11,"author":{"gitId":"plosslaw"},"content":"            task.addTask(Todo.createTodo(\"\"));"},{"lineNumber":12,"author":{"gitId":"plosslaw"},"content":"            fail();"},{"lineNumber":13,"author":{"gitId":"plosslaw"},"content":"        } catch (DukeException ex) {"},{"lineNumber":14,"author":{"gitId":"plosslaw"},"content":"            assertEquals(\"The name of a todo task cannot be empty.\", ex.getMessage());"},{"lineNumber":15,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":16,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":18,"author":{"gitId":"plosslaw"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"plosslaw"},"content":"    public void addEvent_emptyName_exceptionThrown(){"},{"lineNumber":20,"author":{"gitId":"plosslaw"},"content":"        TaskList task \u003d new TaskList();"},{"lineNumber":21,"author":{"gitId":"plosslaw"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"plosslaw"},"content":"            task.addTask(Event.createEvent(\"\", \"2020-06-04\"));"},{"lineNumber":23,"author":{"gitId":"plosslaw"},"content":"            fail();"},{"lineNumber":24,"author":{"gitId":"plosslaw"},"content":"        } catch (DukeException ex) {"},{"lineNumber":25,"author":{"gitId":"plosslaw"},"content":"            assertEquals(\"The name of an event task cannot be empty.\", ex.getMessage());"},{"lineNumber":26,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":29,"author":{"gitId":"plosslaw"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"plosslaw"},"content":"    public void addDeadline_invalidDateFormat_exceptionThrown(){"},{"lineNumber":31,"author":{"gitId":"plosslaw"},"content":"        TaskList task \u003d new TaskList();"},{"lineNumber":32,"author":{"gitId":"plosslaw"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"plosslaw"},"content":"            task.addTask(Deadline.createDeadline(\"Deadline 1\", \"05 May 2020\"));"},{"lineNumber":34,"author":{"gitId":"plosslaw"},"content":"            fail();"},{"lineNumber":35,"author":{"gitId":"plosslaw"},"content":"        } catch (DukeException ex) {"},{"lineNumber":36,"author":{"gitId":"plosslaw"},"content":"            assertEquals(\"Please specify the due date as follows: yyyy-mm-dd\", ex.getMessage());"},{"lineNumber":37,"author":{"gitId":"plosslaw"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"plosslaw"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"plosslaw"},"content":"}"}],"authorContributionMap":{"plosslaw":39}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"plosslaw"},"content":"blah"},{"lineNumber":2,"author":{"gitId":"plosslaw"},"content":"todoffjslfsdj"},{"lineNumber":3,"author":{"gitId":"plosslaw"},"content":"todo make tea"},{"lineNumber":4,"author":{"gitId":"plosslaw"},"content":"event party"},{"lineNumber":5,"author":{"gitId":"plosslaw"},"content":"deadline homework"},{"lineNumber":6,"author":{"gitId":"plosslaw"},"content":"event birthday party /at 9 April 2020"},{"lineNumber":7,"author":{"gitId":"plosslaw"},"content":"event birthday party /at 2020-04-09"},{"lineNumber":8,"author":{"gitId":"plosslaw"},"content":"deadline homework /by 2020-08-13"},{"lineNumber":9,"author":{"gitId":"plosslaw"},"content":"list"},{"lineNumber":10,"author":{"gitId":"plosslaw"},"content":"done 1"},{"lineNumber":11,"author":{"gitId":"plosslaw"},"content":"delete 1"},{"lineNumber":12,"author":{"gitId":"plosslaw"},"content":"list"},{"lineNumber":13,"author":{"gitId":"plosslaw"},"content":"done 5"},{"lineNumber":14,"author":{"gitId":"plosslaw"},"content":"done fdjsfklsd"},{"lineNumber":15,"author":{"gitId":"plosslaw"},"content":"delete 9"},{"lineNumber":16,"author":{"gitId":"plosslaw"},"content":"delete fdjsfds"},{"lineNumber":17,"author":{"gitId":"plosslaw"},"content":"delete all"},{"lineNumber":18,"author":{"gitId":"plosslaw"},"content":"list"},{"lineNumber":19,"author":{"gitId":"plosslaw"},"content":"bye"}],"authorContributionMap":{"plosslaw":19}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"plosslaw"},"content":"set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"},{"lineNumber":4,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":6,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":9,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":12,"author":{"gitId":"plosslaw"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":13,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":14,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":16,"author":{"gitId":"-"},"content":")"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"plosslaw"},"content":"REM delete duke.txt from previous run"},{"lineNumber":20,"author":{"gitId":"plosslaw"},"content":"if not exist .\\data mkdir .\\data"},{"lineNumber":21,"author":{"gitId":"plosslaw"},"content":"del .\\data\\duke.txt"},{"lineNumber":22,"author":{"gitId":"plosslaw"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":27,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"plosslaw":7,"-":20}}]
