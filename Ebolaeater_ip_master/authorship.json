[
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " * Initializes the chatbot and starts up the UI to take in user input"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * ui refers to the User Interface object which will be used to accept user input"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Uses the filepath to intiialize the storage and hence, the UI object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public Duke(String filePath){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        Storage storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        this.ui \u003d new UI(storage);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Looks for user input using the UI object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void run(){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        ui.welcome();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        ui.run();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        ui.escape();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        new Duke(\"Data/duke.txt\").run();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 27,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import exceptions.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import tasks.ToDos;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " * class consisting of static methods which are used to make sense of the user commands"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Removes the user requested task from the tasklist"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * @param request A string containing the integer value of the index."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * @param list The tasklist object containing all the stored tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static void delete(String request, TaskList list){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            int index \u003d Integer.parseInt(request);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            isNumeric(index, list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            System.out.println(\"The event has been removed as per your request: \\n \" +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                    list.get(index));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            list.delete(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            System.out.println(\"Now you have \" + list.getSize() + \" tasks in the list+ \\n\" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                    \"_____________________________\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            System.out.println(\"You have not provided a valid number\\n\" +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                    \"_____________________________\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        } catch (InvalidNumberException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            System.out.println(\"The number provided was greater or lesser than the number of items in the list\\n\" +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                    \"_____________________________\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Marks the task at the user requested index as done"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * @param request A String containing the integer value of the index"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * @param list The tasklist object containing all the stored tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static void update(String request, TaskList list){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            int index \u003d Integer.parseInt(request);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            isNumeric(index, list);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            list.updateStatus(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            System.out.println(\"Nice! I\u0027ve marked this task as done: \\n \" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                    list.get(index));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            System.out.println(\"Now you have \" + list.getSize() + \" tasks in the list \\n_____________________________\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            System.out.println(\"You have not provided a valid number\\n\" +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                    \"_____________________________\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        } catch (InvalidNumberException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            System.out.println(\"The number provided was greater or lesser than the number of items in the list\\n_____________________________\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Adds a toDo object containing the description provided to the list of tasks"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * @param request A String containing the description of the todo object that needs to be added"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * @param list The tasklist object containing all the stored tasks."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static void addTodo(String request, TaskList list){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            ToDos todo \u003d getTodo(request);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            System.out.println(\"Got it. I\u0027ve added this task:\" + todo);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            list.update(todo);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            System.out.println(\"Now you have \" + list.getSize() + \" tasks in the list.\\n_____________________________\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        } catch (EmptyTodoException ex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            System.out.println(\"Oops!!! I\u0027m sorry, but the description of a todo cannot be empty\\n_____________________________\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Checking if the index provided by the user is of the right size"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * @param n The index provided by the user"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * @param list The tasklist object containing all the stored tasks."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * @throws InvalidNumberException"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static void isNumeric(int n, TaskList list) throws InvalidNumberException{"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        if (list.getSize() \u003c n || n \u003c\u003d 0){"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            throw new InvalidNumberException(\"The number provided is bigger tha the list size\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Adds a deadline object with description and datetime into the tasklist provided"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * @param word The input provided by the user with the description of the deadline as well as the date and time"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * @param list The tasklist object containing all the stored tasks."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * @throws InvalidDeadlineException"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static void getDeadline(String word, TaskList list) throws InvalidDeadlineException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        if (word.contains(\"/by\") \u0026\u0026 !word.substring(word.indexOf(\"/by\") + 3).equals(\"\")){"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            word \u003d word.substring(8);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            int index \u003d word.indexOf(\"/by\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            String str \u003d word.substring(index + 3).trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            String datestr \u003d str.replaceAll(\"-\", \"/\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            String[] datearr \u003d datestr.split(\"/\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            if (datearr.length \u003c 2){"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                throw new InvalidDeadlineException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            if (datearr[0].length() \u003c 2){"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                datestr \u003d \"0\" + datestr;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                datearr[0] \u003d \"0\" + datearr[0];"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            if (datearr[1].length() \u003c 2){"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                datestr \u003d datearr[0] + \"/0\" + datearr[1] + \"/\" + datearr[2];"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            if (!datestr.contains(\":\")){"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                String[] arr \u003d datestr.split(\" \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                if (arr.length \u003e 2){"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                    throw new InvalidDeadlineException();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                arr[1] \u003d arr[1].substring(0, 2) + \":\" + arr[1].substring(2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                datestr \u003d arr[0] + \" \" + arr[1];"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                LocalDateTime date \u003d LocalDateTime.parse(datestr, formatter);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                Deadline deadline \u003d new Deadline(word.substring(0, index), date);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                list.update(deadline);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                System.out.println(\"Got it. I\u0027ve added this task: \" + deadline);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                System.out.println(\"Now you have \" + list.getSize() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            } catch (DateTimeParseException e){"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                System.out.println(\"Invalid date provided\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            System.out.println(\"_____________________________\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            throw new InvalidDeadlineException();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static String getEventTest(String word) throws InvalidEventException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        if (word.contains(\"/at\") \u0026\u0026 !word.substring(word.indexOf(\"/at\") + 3).equals(\"\")){"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            word \u003d word.substring(5);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            int index \u003d word.indexOf(\"/at\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            String str \u003d word.substring(index + 3).trim();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            String datestr \u003d str.replaceAll(\"-\", \"/\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            String[] datearr \u003d datestr.split(\"/\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            if (datearr.length \u003c 2){"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                throw new InvalidEventException();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            if (datearr[0].length() \u003c 2){"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                datestr \u003d \"0\" + datestr;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                datearr[0] \u003d \"0\" + datearr[0];"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            if (datearr[1].length() \u003c 2){"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                datestr \u003d datearr[0] + \"/0\" + datearr[1] + \"/\" + datearr[2];"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            if (!datestr.contains(\":\")){"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                String[] arr \u003d datestr.split(\" \");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                if (arr.length \u003e 2){"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                    throw new InvalidEventException();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                arr[1] \u003d arr[1].substring(0, 2) + \":\" + arr[1].substring(2);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                datestr \u003d arr[0] + \" \" + arr[1];"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                LocalDateTime date \u003d LocalDateTime.parse(datestr, formatter);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                Event event \u003d  new Event(word.substring(0, index), date);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                return event.toString();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            } catch (DateTimeParseException e){"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                System.out.println(\"Incorrect Date format used\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            throw new InvalidEventException();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Adds an event object with description and datetime into the tasklist provided"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * @param word The input provided by the user with the description of the event as well as the date and time"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * @param list The tasklist object containing all the stored tasks."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * @throws InvalidEventException"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static void getEvent(String word, TaskList list) throws InvalidEventException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        if (word.contains(\"/at\") \u0026\u0026 !word.substring(word.indexOf(\"/at\") + 3).equals(\"\")){"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            word \u003d word.substring(5);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            int index \u003d word.indexOf(\"/at\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            String str \u003d word.substring(index + 3).trim();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            String datestr \u003d str.replaceAll(\"-\", \"/\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            String[] datearr \u003d datestr.split(\"/\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            if (datearr.length \u003c 2){"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                throw new InvalidEventException();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            if (datearr[0].length() \u003c 2){"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                datestr \u003d \"0\" + datestr;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                datearr[0] \u003d \"0\" + datearr[0];"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            if (datearr[1].length() \u003c 2){"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                datestr \u003d datearr[0] + \"/0\" + datearr[1] + \"/\" + datearr[2];"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            if (!datestr.contains(\":\")){"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                String[] arr \u003d datestr.split(\" \");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                if (arr.length \u003e 2){"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                    throw new InvalidEventException();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                arr[1] \u003d arr[1].substring(0, 2) + \":\" + arr[1].substring(2);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                datestr \u003d arr[0] + \" \" + arr[1];"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                LocalDateTime date \u003d LocalDateTime.parse(datestr, formatter);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                Event event \u003d  new Event(word.substring(0, index), date);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                System.out.println(\"Got it. I\u0027ve added this task:\\n\" + event);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                list.update(event);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                System.out.println(\"Now you have \" + list.getSize() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            } catch (DateTimeParseException e){"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                System.out.println(\"Incorrect Date format used\");;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            System.out.println(\"_____________________________\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            throw new InvalidEventException();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Checks if a command provided by the user is valid"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * @param line The String input from the user"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * @throws UnknownCommandException"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static void validity(String line) throws UnknownCommandException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e(Arrays.asList(\"delete\", \"done\", \"todo\", \"event\", \"deadline\", \"find\"));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        String[] words \u003d line.split(\" \");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        if (list.contains(words[0]) \u0026\u0026 words.length \u003e 1){"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            throw new UnknownCommandException();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static void find(String input, TaskList tasks) throws InvalidNumberException{"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        String[] requests \u003d input.split(\" \");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        if (requests.length !\u003d 2){"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            throw new InvalidNumberException(\"More than one keyword was provided\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d tasks.getSize(); i++){"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            if (tasks.get(i).getWork().contains(requests[1])){"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                System.out.println(tasks.get(i));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        System.out.println(\"_____________________________\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public static ToDos getTodo(String work) throws EmptyTodoException{"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        if (work.length() \u003e 4){"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            return new ToDos(work.substring(4));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            throw new EmptyTodoException();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 257
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import tasks.ToDos;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " * Made to store and retrieve the data in duke.txt"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " * A storage object will have a particular filepath"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " * from which it will read and write the tasklist to"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Filepath refers to the path of the file which we will interact with"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * The tasklist which will contain the data from the file and which will"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * be updated based on user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private TaskList list;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Gets the filepath and uses this filepath to find the file which"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * initialize the tasklist."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * @param filepath A string to enable us to access the file to get the tasklist"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public Storage (String filepath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        this.filePath \u003d filepath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            FileReader file \u003d new FileReader(filepath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(file);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            while ((line \u003d reader.readLine()) !\u003d null){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                tasks.add(getTask(line));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            file.close();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        } catch (IOException e){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Reads the file at the given path and parses the Strings inside into task objects"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * which can be added to the tasklist"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * @param line"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * @return A Task object which could be a todo, deadline or event"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private Task getTask(String line){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        if (line.charAt(1) \u003d\u003d \u0027T\u0027){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            task \u003d new ToDos(line.substring(6));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        } else if (line.charAt(1) \u003d\u003d \u0027D\u0027){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            int index \u003d line.indexOf(\"|\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            LocalDateTime date \u003d LocalDateTime.parse(line.substring(index + 1).trim(), formatter);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            task \u003d new Deadline(line.substring(6, index), date);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            int index \u003d line.indexOf(\"|\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            LocalDateTime date \u003d LocalDateTime.parse(line.substring(index + 1).trim(), formatter);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            task \u003d new Event(line.substring(6, index), date);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        if (line.charAt(4) \u003d\u003d \u0027✓\u0027){"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            task.updateStatus();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public TaskList load(){"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        this.list \u003d new TaskList(this.tasks) ;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return this.list;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Writes the tasklist into the file at the filepath of this storage object in a format which"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * can be easily parsed when the chatbot is rerun. If the file or folder doesn\u0027t exist then,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * a new file will be made"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void save(){"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            String folderPath \u003d \"Data\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            File directory \u003d new File(folderPath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            if (!directory.isDirectory()){"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                File folder \u003d new File(folderPath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                if (!folder.mkdir()){"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                    System.out.println(\"cannot make a folder\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            File file \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            FileWriter writer \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            writer.write(list.save());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            System.out.println(\"No File found\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 104
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " * An object which contains the list of tasks a user needs to do"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Initialized the arraylist with a list of tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * @param tasks The list of tasks provided"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void update(Task task){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public Task get(int i){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return tasks.get(i - 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void delete(int i){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        tasks.remove(i - 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void updateStatus(int i){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        tasks.get(i - 1).updateStatus();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public int getSize(){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * The tasklist has to be converted into a String format that is easily parsable when the file is reopened"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * @return String in a format that easily parsable upon reopening the file"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public String save(){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        StringBuilder line \u003d new StringBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        for (Task task : tasks){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            if (!task.istodo()){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                String append \u003d task.description() + task.getWork() + \"|\" + task.getDate() + \"\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                line.append(append);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            String append \u003d task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            line.append(append);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return line.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        StringBuilder line \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            line.append(task.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            line.append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return line.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 69
    }
  },
  {
    "path": "src/main/java/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import exceptions.InvalidDeadlineException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import exceptions.InvalidEventException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import exceptions.InvalidNumberException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import exceptions.UnknownCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " * The User Interface Object with a scanner and storage object that takes in and stores user input"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    Scanner sc;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Initializes a UI object with the ability to scan for user input and store it"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * @param store"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public UI(Storage store) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        this.storage \u003d store;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Prints a welcome message for the users"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void welcome() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        System.out.println(\"_____________________________\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\\n\" +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                \"What can I do for you?\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        System.out.println(\"_____________________________\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Takes in user input and uses regex to analyze it and then chooses a parser method to make sense of it"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        TaskList list \u003d storage.load();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        while (!input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            input \u003d input.trim().replaceAll(\"\\\\s{2,}\", \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            System.out.println(\"_____________________________\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                System.out.println(list);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                System.out.println(\"_____________________________\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            String[] request \u003d input.split(\" \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                Parser.validity(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                if (request[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                    Parser.update(request[1], list);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                } else if (request[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                    Parser.addTodo(input, list);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                } else if (request[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                        Parser.getDeadline(input, list);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                    } catch (InvalidDeadlineException ex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                        System.out.println(\"Oops, somewhere your deadline was wrong. \" +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                                \"Please check whether you used a /by tag\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                        System.out.println(\"_____________________________\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                } else if (request[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                        Parser.getEvent(input, list);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                    } catch (InvalidEventException ex) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                        System.out.println(\"Oops seems like your event is invalid. \" +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                                \"Please check your /at tag\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                        System.out.println(\"_____________________________\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                } else if (request[0].equals(\"find\")){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                        Parser.find(input, list);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                    } catch (InvalidNumberException ex){"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                        System.out.println(\"More than one keyword was entered\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                    Parser.delete(request[1], list);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            } catch (UnknownCommandException ex) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                System.out.println(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\" +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                        \"_____________________________\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Stores the resultant tasklist in a file and prints a simple goodbye message for the user"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void escape(){"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        storage.save();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        System.out.println(\"_____________________________\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\\n\" +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                \"_____________________________\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 98
    }
  },
  {
    "path": "src/main/java/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public DukeException(String message){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 7
    }
  },
  {
    "path": "src/main/java/exceptions/EmptyTodoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class EmptyTodoException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public EmptyTodoException(){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        super(\"A todo cannot be empty\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 7
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class InvalidDateException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public InvalidDateException(){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        super(\"Wrong date Provided\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 7
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class InvalidDeadlineException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public InvalidDeadlineException(){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        super(\"OOPS, this deadline activity is invalid\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 7
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class InvalidEventException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public InvalidEventException(){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        super(\"Oops you have not entered a valid event, maybe check you /at tag again\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 7
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidNumberException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class InvalidNumberException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public InvalidNumberException(String msg){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 7
    }
  },
  {
    "path": "src/main/java/exceptions/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public UnknownCommandException(){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        super(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 7
    }
  },
  {
    "path": "src/main/java/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    LocalDateTime deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy hhmm\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public Deadline(String work, LocalDateTime date){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        super(work, date);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        this.deadline \u003d date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public String description(){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return super.isDone()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                ? \"[D][✓]\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                : \"[D][✗]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return \"[D]\" + super.toString() + \"(by: \" + deadline.format(format) + \")\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 24
    }
  },
  {
    "path": "src/main/java/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    LocalDateTime date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy hhmm\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public Event(String work, LocalDateTime date){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        super(work, date);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return \"[E]\" + super.toString() + \"(at: \" + date.format(format) + \")\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public String description(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return super.isDone()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                ? \"[E][✓]\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                : \"[E][✗]\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 24
    }
  },
  {
    "path": "src/main/java/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " * Creates a task with a datetime and description"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private boolean done;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private String work;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Initializes a task with the user given description"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * @param work A String with the user description"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public Task(String work){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        this.work \u003d work;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * Initializes a task with user given description and datetime"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * @param work A String containing the user given description"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     * @param date A LocalDateTime object containing the timing of the deadline/task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public Task(String work, LocalDateTime date){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        this.work \u003d work;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public String getDate(){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public String description(){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return done"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                ? \"[T][✓]\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                : \"[T][✗]\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void updateStatus(){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        done \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public boolean isDone(){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return done;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public String getWork(){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return work;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public boolean istodo(){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        if (!this.done){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            return \"[✗]\" + this.work;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "            return \"[✓]\" + this.work;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 66
    }
  },
  {
    "path": "src/main/java/tasks/ToDos.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class ToDos extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public ToDos(String work) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        super(work);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public boolean istodo(){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 16
    }
  },
  {
    "path": "src/test/data/doke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "[T][✗]help me out"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "[D][✗]I need your help|23/02/2020 12:00"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "[E][✗]We need to talk about the tests|23/02/2020 12:00"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 3
    }
  },
  {
    "path": "src/test/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "[D][✗] help me | 02/02/2020 09:23"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "[E][✓] help | 02/03/2020 11:45"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "[E][✗] do | 01/01/1111 11:33"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 3
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import exceptions.EmptyTodoException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import exceptions.InvalidEventException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void parseDateTest() throws InvalidEventException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertEquals(Parser.getEventTest(\"event do /at 11/11/2020 23:59\").toString(), \"[E][✗] do (at: Nov 11 2020 1159)\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void parseTodoTest() throws EmptyTodoException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertEquals(Parser.getTodo(\"todo help me out sir\").toString(), \"[T][✗] help me out sir\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void parseDoneTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        Storage store \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        TaskList list \u003d store.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        list.updateStatus(1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        String check \u003d \"[D][✓] help me (by: Feb 02 2020 0923)\\n\" +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                \"[E][✓] help (at: Mar 02 2020 1145)\\n\" +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                \"[E][✗] do (at: Jan 01 1111 1133)\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertEquals(check, list.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 28
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import tasks.ToDos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void emptyFile(){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        //Simulating an empty or non existent file"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        Storage store \u003d new Storage(\"data/dike.txt\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        TaskList list \u003d store.load();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d list.getTasks();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertEquals(new ArrayList\u003c\u003e(), tasks);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void storedTestLoad(){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        //Simulating if there is a file and it is opened"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        Storage store \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        TaskList list \u003d store.load();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        String test \u003d \"[D][✗] help me (by: Feb 02 2020 0923)\\n\" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                \"[E][✓] help (at: Mar 02 2020 1145)\\n\" +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "                \"[E][✗] do (at: Jan 01 1111 1133)\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertEquals(test, list.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    public void saveReopenTest(){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        // simulating what would happen if you load up a file and then write to it and close it again        File f \u003d new File(\"data/doke.txt\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        File f \u003d new File(\"data/doke.txt\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        f.delete();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        Storage store \u003d new Storage(\"data/doke.txt\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        TaskList list \u003d store.load();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        list.update(new ToDos(\"help me out\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        list.update(new Deadline(\"I need your help\", LocalDateTime.parse(\"23/02/2020 12:00\", formatter)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        list.update(new Event(\"We need to talk about the tests\", LocalDateTime.parse(\"23/02/2020 12:00\", formatter)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        store.save();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        TaskList newList \u003d store.load();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "        assertEquals(list.toString(), newList.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 49
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "deadline do homework /by no idea :-p"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 6
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "SET MY_PATH\u003dC:\\Users\\banik\\OneDrive\\Desktop\\NUS Y2S1\\CS2103\\Duke ChatBot"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "if not exist \"%MY_PATH%\\bin\" mkdir \"%MY_PATH%\\bin\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "javac  -cp \"%MY_PATH%\\src\\main\\java\" -Xlint:none -d \"%MY_PATH%\\bin\" \"%MY_PATH%\\src\\main\\java\\Duke.java\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ebolaeater"
        },
        "content": "java -classpath \"%MY_PATH%\\bin\" Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "Ebolaeater": 5,
      "-": 18
    }
  }
]
