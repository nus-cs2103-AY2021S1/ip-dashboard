[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00276.0.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    archiveBaseName \u003d \"doraemon_taskList\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 19,
      "-": 42
    }
  },
  {
    "path": "config/travis/check-eof-newline.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "# Checks that all text files end with a newline."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "ret\u003d0"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "# Preserve filename with spaces by only splitting on newlines."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "IFS\u003d\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        echo \"ERROR:$filename:$line: no newline at EOF.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 18
    }
  },
  {
    "path": "config/travis/check-line-endings.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "# Checks for prohibited line endings."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "# Prohibited line endings: \\r\\n"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ret \u003d 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 19
    }
  },
  {
    "path": "config/travis/check-trailing-whitespace.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "# Checks for trailing whitespace"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        # Only warn for markdown files (*.md) to accomodate text editors"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        # which do not properly handle trailing whitespace."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        # (e.g. GitHub web editor)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if ($1 ~ /\\.md$/) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            severity \u003d \"WARN\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            severity \u003d \"ERROR\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            ret \u003d 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        print severity, $1, $2, \" trailing whitespace.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 26
    }
  },
  {
    "path": "config/travis/run-checks.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "ret\u003d0 \u0026\u0026"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "for checkscript in \"$dir\"/check-*; do"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    if ! \"$checkscript\"; then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 11
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "# **Doraemon TaskList - User Guide**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "## **Introduction**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "This is a greenfield project created for CS2103T - Software Engineering."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Doraemon is a blue cat with no ears. Doraemon has all the tools you need to solve any problems!"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "We all tend to be forgetful sometimes and if you do not keep track of our tasks properly, you may miss out some activities or deadlines."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Don\u0027t worry, Doraemon TaskList is here to help! Doraemon TaskList is a simple application that help you to keep track of your tasks in a list that is stored in your PC."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "## Types of Tasks"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "1. Todos: Tasks without specified date/time."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "2. Deadlines: Tasks that are to be done by a certain date and/or time."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "3. Events: Tasks that are happening on a certain date and/or time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "1. **Adding Tasks**: adds a task into the task list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "   + [**`todo`**](#todo): adds a *todo* task to the list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "   + [**`deadline`**](#deadline): adds a *deadline* task to the list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "   + [**`event`**](#event): adds an *event* task to the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "2. **Listing Tasks**: shows a list of task(s) from the task list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "   + [**`list`**](#list): shows all the task(s) in the task list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "   + [**`list \u003cdate\u003e`**](#listdate): shows the list of deadline(s)/event(s) on that date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "3. [**`done`**](#done): marks the task at a specified index as *done*."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "4. [**`delete`**](#delete): removes a task from the list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "5. [**`find`**](#find): search for task(s) that contains the specified keyword(s)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "6. [**`help`**](#help): shows the list of available commands and their instructions."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "7. [**`bye`**](#bye): exits the application."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "## Feature Details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "### 1. Adding Tasks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "#### \u003ca name\u003d\"todo\"\u003e\u003c/a\u003e1a. **`todo`** - Adds a *todo* task to the task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Example of Usage:** `todo task1` "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Adds a *todo* task with description task1 to the list. "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "This task contains the description with no specified date/time."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Expected outcome:**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "![todo](./screenshot/todo.png)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "#### \u003ca name\u003d\"deadline\"\u003e\u003c/a\u003e1b. **`deadline`** - Adds a *deadline* task to the task list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Example of Usage:** `deadline task2 /by 14/9/2020 1200`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Adds a *deadline* task with description task2 and date 14/9/2020, time 1200."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "They are specified in the format `dd/MM/yyyy HHmm`, one space after "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "task description. Note that date is necessary while time is optional."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "eg. `deadline task2 /by 14/9/2020`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Expected outcome:**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "![deadline](./screenshot/deadline.png)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "#### \u003ca name\u003d\"event\"\u003e\u003c/a\u003e1c. **`event`** - Adds a *event* task to the task list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Example of Usage:** `event task3 /at 14/9/2020 1200`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Adds a *event* task with description task3 and date 14/9/2020, time 1200."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "They are specified in the format `dd/MM/yyyy HHmm`, one space after "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "task description. Note that date is necessary while time is optional."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "eg. `event task3 /by 14/9/2020`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Expected outcome:**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "![event](./screenshot/event.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "### 2. List"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "#### \u003ca name\u003d\"list\"\u003e\u003c/a\u003e2a. **`list`** - List all task(s) in the task list. "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Example of Usage:** `list`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Expected outcome:**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "![list](./screenshot/list.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "#### \u003ca name\u003d\"listdate\"\u003e\u003c/a\u003e2b. **`list \u003cdate\u003e`** - List all task(s) falling on that date."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Example of Usage:** `list 14/9/2020`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Expected outcome:**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "![list_date](./screenshot/listdate.png)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "### \u003ca name\u003d\"done\"\u003e\u003c/a\u003e3. **`done`** - Mark a task as completed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Example of Usage:** `done 1`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Marks the task of *index 1* from the task list as completed. The list shows a tick instead of cross."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Expected outcome:**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "![done](./screenshot/done.png)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "### \u003ca name\u003d\"delete\"\u003e\u003c/a\u003e4. **`delete`** - Removes a task from the task list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Example of Usage:** `delete 1`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Removes the task of *index 1* from the task list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Expected outcome:**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "![delete](./screenshot/delete.png)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "### \u003ca name\u003d\"find\"\u003e\u003c/a\u003e5. **`find`** - Searches for all the task(s) that contains the keyword(s)."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Example of Usage:** `find task`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "Finds all the task that contains the word *task* from the task list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Expected outcome:**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "![find](./screenshot/find.png)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "### \u003ca name\u003d\"help\"\u003e\u003c/a\u003e6. **`help`** - Shows the list of available commands and their instructions."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Example of Usage:** `help`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Expected outcome:**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "![help](./screenshot/help.png)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "### \u003ca name\u003d\"bye\"\u003e\u003c/a\u003e7. **`bye`** - Use when you want to exit the application."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Example of Usage:** `bye`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "**Expected outcome:** A bye message appears and application closes after 1.5 seconds."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "![bye](./screenshot/bye.png)"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 120,
      "-": 12
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.backend.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.backend.exception.DukeInvalidDataException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.Response;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.exception.DukeEmptyAtException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.exception.DukeEmptyByException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.exception.DukeEmptyDescriptionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.exception.DukeEmptyIndexException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.exception.DukeEmptyKeywordException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.exception.DukeInvalidDateTimeInputException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents the chat bot."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * It is the Main class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private TaskList list;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final Response ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ui \u003d new Response();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String filePath \u003d System.getProperty(\"user.home\") + \"/data\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        checkAndMakeDir(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        filePath +\u003d \"/duke.txt\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            list \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DukeInvalidDataException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            list \u003d new TaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DukeInvalidDateTimeInputException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            list \u003d new TaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Checks to see if directory is found."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Creates the directory if directory is not found."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param filePath The file path of the directory."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static void checkAndMakeDir(String filePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        f.mkdir();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the response message to be shown on UI."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return Response message."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return c.execute(list, ui, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DukeEmptyIndexException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DukeEmptyDescriptionException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DukeEmptyAtException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DukeEmptyByException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DukeInvalidDateTimeInputException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DukeEmptyKeywordException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 83
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Starts the fxml."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param stage The stage of application."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            stage.setTitle(\"Doraemon TaskList\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 37
    }
  },
  {
    "path": "src/main/java/duke/backend/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.backend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.backend.exception.DukeInvalidDataException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.command.exception.DukeInvalidIndexException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.exception.DukeInvalidDateTimeInputException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Deals with reading and writing of Task List in the text form."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param filePath The filePath of the storage text file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assert(filePath !\u003d null \u0026\u0026 !filePath.equals(\"\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Reads the text file and returns the list of tasks in the text."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return The list of tasks in storage text file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeInvalidDataException If the Storage text file is corrupted."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeInvalidDateTimeInputException If the Date Time in storage file is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeInvalidDataException, DukeInvalidDateTimeInputException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                String[] tokens \u003d sc.nextLine().split(\" \\\\| \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                if (tokens.length \u003c 3) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    throw new DukeInvalidDataException(\"Oops data is invalid\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                String taskType \u003d tokens[0];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                String isDone \u003d tokens[1];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                String description \u003d tokens[2];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                Task task;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                if (taskType.equals(\"T\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    task \u003d new Todo(description);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                } else if (tokens.length !\u003d 4) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    throw new DukeInvalidDataException(\"Oops data is invalid\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                } else if (taskType.equals(\"D\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    List\u003cLocalDateTime\u003e ldtList \u003d Parser.getCustomDateTimeList(tokens[3]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    task \u003d loadDeadline(description, ldtList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                } else if (taskType.equals(\"E\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    List\u003cLocalDateTime\u003e ldtList \u003d Parser.getCustomDateTimeList(tokens[3]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    task \u003d loadEvent(description, ldtList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    throw new DukeInvalidDataException(\"Oops data is invalid\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                if (isDone.equals(\"1\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    task.markAsDone();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                } else if (!isDone.equals(\"0\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    throw new DukeInvalidDataException(\"Oops data is invalid\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                list.add(task);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                new FileWriter(filePath).write(\"\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            } catch (IOException ioException) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                System.out.println(ioException.getMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private static Deadline loadDeadline(String description,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            List\u003cLocalDateTime\u003e localDateTimeList) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        LocalDate date \u003d localDateTimeList.get(0).toLocalDate();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        LocalTime time \u003d localDateTimeList.size() \u003d\u003d 2"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            ? localDateTimeList.get(1).toLocalTime()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return new Deadline(description, date, time);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private static Event loadEvent(String description,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            List\u003cLocalDateTime\u003e localDateTimeList) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        LocalDate date \u003d localDateTimeList.get(0).toLocalDate();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        LocalTime time \u003d localDateTimeList.size() \u003d\u003d 2"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            ? localDateTimeList.get(1).toLocalTime()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return new Event(description, date, time);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Writes and save the Storage text file with the list of tasks."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param taskList The TaskList with list of tasks."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws IOException If the filePath is invalid."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeInvalidIndexException If the index exceeds list size."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void save(TaskList taskList) throws IOException, DukeInvalidIndexException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        FileWriter writer \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            Task task \u003d taskList.get(i);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            TaskType type \u003d task.getTaskType();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            String s \u003d \"\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                s \u003d String.format(\"T | %d | %s\", task.getIsDone() ? 1 : 0, task.getDescription());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                s \u003d String.format(\"D | %d | %s | %s\", deadline.getIsDone() ? 1 : 0,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    deadline.getDescription(), deadline.getBy());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                s \u003d String.format(\"E | %d | %s | %s\", event.getIsDone() ? 1 : 0,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    event.getDescription(), event.getAt());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            if (i !\u003d taskList.getSize() - 1) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                s +\u003d \"\\n\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            writer.write(s);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 150
    }
  },
  {
    "path": "src/main/java/duke/backend/exception/DukeInvalidDataException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.backend.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an exception thrown because of invalid Stage file data."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeInvalidDataException extends DukeStorageException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param message The error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DukeInvalidDataException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 15
    }
  },
  {
    "path": "src/main/java/duke/backend/exception/DukeStorageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.backend.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.common.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an exception thrown when dealing with Storage."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeStorageException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param message The error message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    DukeStorageException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 17
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.backend.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.command.exception.DukeInvalidIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.Response;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an add task action."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class AddCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor with specified Task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param task The Task to be added."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Performs the corresponding action of the command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param tasks The TaskList to add the task to."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param ui The Ui to show responses or error messages."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param storage The Storage to save the TaskList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return True because Duke should continue running."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String execute(TaskList tasks, Response ui, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            tasks.addTask(this.task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return ui.showAdded(this.task, tasks.getSize());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (IOException | DukeInvalidIndexException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return ui.showError(e);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 44
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.backend.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.Response;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents a Bye message action."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ByeCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Performs the printing of bye message on Ui."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param tasks The TaskList for Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param ui The Ui to show responses or error messages."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param storage The Storage to save the TaskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return False because Duke should stop running."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String execute(TaskList tasks, Response ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return ui.printBye();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 23
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.backend.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.Response;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an action corresponding to a user input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Performs the action to be taken."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param tasks   The TaskList to add the task to."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param ui      The Ui to show responses or error messages."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param storage The Storage to save the TaskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return True if Duke should continue running."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    String execute(TaskList tasks, Response ui, Storage storage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 20
    }
  },
  {
    "path": "src/main/java/duke/command/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents the different types of commands available for users."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    ADD_DEADLINE {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         * Returns the command instruction."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         * @return String of command instruction."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return \"deadline: adds a task with deadline.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    + \"    eg. deadline \u003cdescription\u003e /by \u003cdd/MM/yyyy\u003e \u003cHHmm\u003e\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    ADD_EVENT {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         * Returns the command instruction."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         * @return String of command instruction."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return \"event: adds a task with a scheduled time. \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    + \"    eg. event \u003cdescription\u003e /at \u003cdd/MM/yyyy\u003e \u003cHHmm\u003e\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    },"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    ADD_TODO {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         * Returns the command instruction."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         * @return String of command instruction."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return \"todo: adds a todo task to the list.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    + \"    eg. todo \u003cdescription\u003e\u0027\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    },"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    BYE {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         * Returns the command instruction."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         * @return String of command instruction."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return \"bye: exits the application.\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    },"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    DELETE {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         * Returns the command instruction."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         * @return String of command instruction."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return \"delete: removes a task from your list.\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    + \"    eg. delete \u003cindex\u003e\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    },"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    DONE {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         * Returns the command instruction."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         * @return String of command instruction."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return \"done: marks a task as done.\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    + \"    eg. done \u003cindex\u003e\\n\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    },"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    FIND {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         * Returns the command instruction."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         * @return String of command instruction."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return \"find: finds tasks with the keyword.\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    + \"    eg. find \u003ckeyword\u003e\\n\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    },"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    LIST {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         * Returns the command instruction."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         * @return String of command instruction."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return \"list: lists out all the tasks you have.\\n\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    },"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    LIST_DATE {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         * Returns the command instruction."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         * @return String of command instruction."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return \"list date: lists out all the tasks you have on that date.\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    + \"    eg. list \u003cdd/MM/yyyy\u003e\\n\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 121
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.backend.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.command.exception.DukeInvalidIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.Response;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents a delete task action."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor with specified index."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param index The index of the Task to be deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assert(index \u003e\u003d 0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Performs the deleting of task from task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param tasks The TaskList to delete the task from."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param ui The Ui to show responses or error messages."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param storage The Storage to save the TaskList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return True because Duke should continue running."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String execute(TaskList tasks, Response ui, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            Task task \u003d tasks.deleteTask(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return ui.showDeleted(task, tasks.getSize());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DukeInvalidIndexException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return ui.showError(e);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return ui.showError(e);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 47
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.backend.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.command.exception.DukeInvalidIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.Response;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents a marking a task as done action."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor with specified index."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param index The index of the Task to be marked as done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assert(index \u003e\u003d 0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param tasks The TaskList for Duke."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param ui The Ui to show responses or error messages."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param storage The Storage to save the TaskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return True because Duke should continue running."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String execute(TaskList tasks, Response ui, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            tasks.markDone(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return ui.showMarkDone(tasks.get(index));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DukeInvalidIndexException | IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return ui.showError(e);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 43
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.backend.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.Response;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents the command to Tasks that contains the keyword."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param keyword The key word to be searched for."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assert(keyword !\u003d null \u0026\u0026 keyword !\u003d \"\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Performs an action of searching the tasks by key word."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Prints out the list of task containing the keyword."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param tasks The TaskList for Duke."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param ui The Ui for Duke."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param storage The Storage for Duke."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return True because the program will continue running."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String execute(TaskList tasks, Response ui, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return (tasks.getTaskWithKeyword(keyword));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 36
    }
  },
  {
    "path": "src/main/java/duke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.backend.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.Response;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents a list of available instructions."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class HelpCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Performs the action to be taken."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param tasks   The TaskList to add the task to."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param ui      The Ui to show responses or error messages."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param storage The Storage to save the TaskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return True if Duke should continue running."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String execute(TaskList tasks, Response ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String result \u003d \"--------Instructions-------- \\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        for (CommandType type: CommandType.values()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            result +\u003d type.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        result +\u003d \"\\nTry me out!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 28
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.backend.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.Response;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents the Listing of all Tasks action."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Performs the printing of list of Tasks in TaskList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param tasks The TaskList for Duke."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param ui The Ui to show responses or error messages."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param storage The Storage to save the TaskList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return True because Duke should continue running."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String execute(TaskList tasks, Response ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return ui.showList(tasks);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 22
    }
  },
  {
    "path": "src/main/java/duke/command/ListDateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.backend.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.Response;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ListDateCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor with specified Date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param date The date specified."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public ListDateCommand(LocalDate date) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assert(date !\u003d null);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Performs the printing of all the Task on the specified date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param tasks The TaskList for Duke."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param ui The Ui to show responses or error messages."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param storage The Storage to save the TaskList."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return True because Duke should continue running."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String execute(TaskList tasks, Response ui, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return (tasks.getTasksOnDate(date));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 33
    }
  },
  {
    "path": "src/main/java/duke/command/UnknownCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.backend.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.Response;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.exception.DukeUnknownInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an action dealing with unknown inputs."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class UnknownCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Performs the printing of an unknown input error message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param tasks The TaskList to add the task to."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param ui The Ui to show responses or error messages."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param storage The Storage to save the TaskList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return True because Duke should continue running."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String execute(TaskList tasks, Response ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return ui.showError(new DukeUnknownInputException());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 24
    }
  },
  {
    "path": "src/main/java/duke/command/exception/DukeCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.command.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.common.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represent an exception thrown when dealing with Command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeCommandException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param message The error message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DukeCommandException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 17
    }
  },
  {
    "path": "src/main/java/duke/command/exception/DukeIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.command.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an exception thrown regarding indexes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeIndexException extends DukeCommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param message The error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DukeIndexException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 15
    }
  },
  {
    "path": "src/main/java/duke/command/exception/DukeInvalidIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.command.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an exception thrown when the index is out of Task List range."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeInvalidIndexException extends DukeIndexException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DukeInvalidIndexException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(\"OOPS!!! There is no such task.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 13
    }
  },
  {
    "path": "src/main/java/duke/common/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.common.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an exception thrown in Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param message The error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the error message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return String of error message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return this.getMessage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 25
    }
  },
  {
    "path": "src/main/java/duke/response/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.response;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.command.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.command.ListDateCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.command.UnknownCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.exception.DukeEmptyAtException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.exception.DukeEmptyByException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.exception.DukeEmptyDescriptionException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.exception.DukeEmptyIndexException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.exception.DukeEmptyKeywordException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.exception.DukeInvalidDateTimeInputException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.exception.DukeUnknownInputException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * An object that reads and understands user inputs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * It then returns the required commands needed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private static final int DEADLINE_LENGTH \u003d 9;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private static final int EVENT_LENGTH \u003d 6;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Reads and convert the date and time in String format to LocalDateTime."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Date is stored in index 0 and Time is stored in index 1."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * (eg. \"9/8/2020 2009\" is converted to Local Date and Local Time.)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param dateTimeString String representing date and time."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return List of LocalDateTime where index 0 is Date and index 1 is Time."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeInvalidDateTimeInputException If Date or Time is invalid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getCustomDateTimeList(String dateTimeString)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throws DukeInvalidDateTimeInputException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        //dateTimeString should be given in \"dd/mm/yyyy hhmm\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        //will use manual parser to check for invalid date time inputs"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        List\u003cLocalDateTime\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        //results returns index 0 as date, index 1 as time"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String[] tokens \u003d dateTimeString.split(\" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String dateString \u003d tokens[0];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String[] dateTokens \u003d dateString.split(\"/\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (dateTokens.length !\u003d 3) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw new DukeInvalidDateTimeInputException(\"OOPS!!! Invalid date format!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            int year \u003d Integer.parseInt(dateTokens[2]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            int month \u003d Integer.parseInt(dateTokens[1]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            int day \u003d Integer.parseInt(dateTokens[0]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                results.add(LocalDateTime.of(year, month, day, 0, 0));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                throw new DukeInvalidDateTimeInputException(\"OOPS!!! Invalid date. Date do not exist!\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (tokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            String timeString \u003d tokens[1];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            if (timeString.length() !\u003d 4) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                throw new DukeInvalidDateTimeInputException(\"OOPS!!! Invalid time format!\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                int hr \u003d Integer.parseInt(timeString.substring(0, 2));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                int min \u003d Integer.parseInt(timeString.substring(2));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                results.add(LocalDateTime.of(LocalDate.now(), LocalTime.of(hr, min)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                throw new DukeInvalidDateTimeInputException("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    \"OOPS!!! Invalid time. You can only input up to 23hr and 59min.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Parses the user input into an AddCommand."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param command The user input."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return AddCommand with specific Task."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeEmptyDescriptionException     If description of task is empty."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeEmptyByException              If user did not input deadline date time."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeEmptyAtException              If user did not input event date time."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeUnknownInputException         If user input is unknown."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeInvalidDateTimeInputException If date and time inputted is erroneous."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private static Command add(String command) throws DukeEmptyDescriptionException,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            DukeEmptyByException, DukeEmptyAtException, DukeUnknownInputException, DukeInvalidDateTimeInputException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (command.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                String des \u003d command.substring(5);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                Task toBeAdded \u003d new Todo(des);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                return new AddCommand(toBeAdded);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                throw new DukeEmptyDescriptionException(\"todo\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else if (command.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                return new AddCommand(parseTime(\"/by\", command));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                throw new DukeEmptyDescriptionException(\"deadline\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                throw new DukeEmptyByException();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            } catch (DukeInvalidDateTimeInputException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else if (command.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                return new AddCommand(parseTime(\"/at\", command));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                throw new DukeEmptyDescriptionException(\"event\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                throw new DukeEmptyAtException();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw new DukeUnknownInputException();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private static Task parseTime(String type, String command) throws DukeInvalidDateTimeInputException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assert(type.equals(\"/by\") || type.equals(\"/at\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String[] tokens \u003d command.split(String.format(\" %s \", type));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String des \u003d type.equals(\"/by\")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            ? tokens[0].substring(DEADLINE_LENGTH)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            : tokens[0].substring(EVENT_LENGTH);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        List\u003cLocalDateTime\u003e ldtList \u003d getCustomDateTimeList(tokens[1]);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return type.equals(\"/by\")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            ? parseDeadlineDateTimeList(des, ldtList)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            : parseEventDateTimeList(des, ldtList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private static Deadline parseDeadlineDateTimeList(String description,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            List\u003cLocalDateTime\u003e localDateTimeList) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        LocalDate date \u003d localDateTimeList.get(0).toLocalDate();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        LocalTime time \u003d null;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (localDateTimeList.size() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            time \u003d localDateTimeList.get(1).toLocalTime();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return new Deadline(description, date, time);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private static Event parseEventDateTimeList(String description,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            List\u003cLocalDateTime\u003e localDateTimeList) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        LocalDate date \u003d localDateTimeList.get(0).toLocalDate();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        LocalTime time \u003d null;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (localDateTimeList.size() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            time \u003d localDateTimeList.get(1).toLocalTime();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return new Event(description, date, time);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Parses the user input into a DoneCommand."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param command The user input."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return DoneCommand with specific index."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeEmptyIndexException If user did not input index."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private static Command markAsDone(String command) throws DukeEmptyIndexException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            int index;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            String[] tokens \u003d command.split(\" \");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            index \u003d Integer.parseInt(tokens[1]);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return new DoneCommand(index - 1);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw new DukeEmptyIndexException(\"done\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Parses the user input into a DeleteCommand."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param command The user input."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return DeleteCommand with specific index."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeEmptyIndexException If user did not input index."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private static Command delete(String command) throws DukeEmptyIndexException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            String[] tokens \u003d command.split(\" \");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            index \u003d Integer.parseInt(tokens[1]);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return new DeleteCommand(index - 1);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw new DukeEmptyIndexException(\"delete\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Parses the user input into a ListDateCommand."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param command The user input."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return ListDateCommand with specific date."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeInvalidDateTimeInputException If date and time inputted is erroneous."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private static ListDateCommand listDate(String command) throws DukeInvalidDateTimeInputException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            String dateString \u003d command.substring(5);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            String[] dateToken \u003d dateString.split(\"/\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            int[] date \u003d Arrays.stream(dateToken).mapToInt((str) -\u003e Integer.parseInt(str)).toArray();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return new ListDateCommand(LocalDate.of(date[2], date[1], date[0]));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw new DukeInvalidDateTimeInputException(\"OOPS!!! Invalid date format!\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw new DukeInvalidDateTimeInputException(\"OOPS!!! Invalid date. Date to not exist!\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Parses the user input into a FindCommand."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param command The user input."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return FindCommand with specific keyword."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeEmptyKeywordException If no keyword was inputted."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private static FindCommand find(String command) throws DukeEmptyKeywordException {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            String[] tokens \u003d command.split(\"find \");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            String keyword \u003d tokens[1];"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return new FindCommand(keyword);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw new DukeEmptyKeywordException();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Parses the user input and checking the type of command."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the correct command after calling for correct parser."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param command The user input."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return Command corresponding to user input."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeEmptyIndexException           If user did not input index."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeEmptyDescriptionException     If user did not input description."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeEmptyAtException              If user did not input event date time."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeEmptyByException              If user did not input deadline date time."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeInvalidDateTimeInputException If date and time inputted is erroneous."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static Command parse(String command) throws DukeEmptyIndexException,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            DukeEmptyDescriptionException, DukeEmptyAtException,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            DukeEmptyByException, DukeInvalidDateTimeInputException,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            DukeEmptyKeywordException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else if (command.startsWith(\"list \")) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return listDate(command);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else if (command.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return markAsDone(command);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else if (command.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return delete(command);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else if (command.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return find(command);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else if (command.startsWith(\"help\")) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                return add(command);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            } catch (DukeUnknownInputException e) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                return new UnknownCommand();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            } catch (DukeInvalidDateTimeInputException e) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 278
    }
  },
  {
    "path": "src/main/java/duke/response/Response.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.response;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * User interface which deals with user interactions."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Also prints relevant error messages and responses."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class Response {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Represents two spaces."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String TWO_INDENT \u003d \"  \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the Bye message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return Bye message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static String printBye() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the introduction message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Messages are printed in a chat window."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return Introduction message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static String intro() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return (\"Hello! I\u0027m Doraemon!\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                + \"What do you meow?\" + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the task marked as done in a chat window."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param task The task that is marked as done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String showMarkDone(Task task) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return (\"Nice! I\u0027ve marked this task as done: \\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                + TWO_INDENT + task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the added task in a chat window."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * It also tells the number of items in the list after addition."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param addedTask The task that is added."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param listSize The number of items in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String showAdded(Task addedTask, int listSize) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return (\"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                + TWO_INDENT + addedTask + \"\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                + String.format(\"Now you have %d tasks in the in the list\", listSize));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the deleted task in a chat window."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * It also tells the number of items in the list after deletion."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param deletedTask The task that is deleted."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param listSize The number of items in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String showDeleted(Task deletedTask, int listSize) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return (\"Noted. I\u0027ve removed this task: \\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                + TWO_INDENT + deletedTask"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                + String.format(\"\\nNow you have %d tasks in the list.\", listSize));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the loading error message in a chat window."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return Loading error message."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String showLoadingError() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return (\"Oops, error in loading the tasks! \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                + \"Please check the duke.txt file\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the tasks in the list as a String in a chat window."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param tasks The TaskList object with the list of tasks."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return String representation of Tasks in the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String showList(TaskList tasks) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return \"Currently, you have: \\n\" + tasks.getListAsString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Prints the error message in a chat window."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param e The error in which message is printed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return Error message of e."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String showError(Exception e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return (e.getMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 101
    }
  },
  {
    "path": "src/main/java/duke/response/exception/DukeEmptyAtException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.response.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an exception thrown when date is left empty for an Event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeEmptyAtException extends DukeTaskException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DukeEmptyAtException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(\"OOPS!!! The event time cannot be empty.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 13
    }
  },
  {
    "path": "src/main/java/duke/response/exception/DukeEmptyByException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.response.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an exception thrown when date is left empty for a Deadline."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeEmptyByException extends DukeTaskException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DukeEmptyByException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(\"OOPS!!! The deadline cannot be empty.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 13
    }
  },
  {
    "path": "src/main/java/duke/response/exception/DukeEmptyDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.response.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an exception thrown when description of a Task is left empty."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeEmptyDescriptionException extends DukeTaskException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param task String representation of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DukeEmptyDescriptionException(String task) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(String.format(\"OOPS!!! The description of %s cannot be empty.\", task));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 15
    }
  },
  {
    "path": "src/main/java/duke/response/exception/DukeEmptyIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.response.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.command.exception.DukeIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an exception thrown when index is left empty."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Index is required for marking task as done or delete task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeEmptyIndexException extends DukeIndexException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param type The type of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DukeEmptyIndexException(String type) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(String.format(\"OOPS!!! The index after %s cannot be empty.\", type));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 18
    }
  },
  {
    "path": "src/main/java/duke/response/exception/DukeEmptyKeywordException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.response.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an exception thrown when keyword for search is left empty."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Keyword is required for searching tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeEmptyKeywordException extends DukeInputException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DukeEmptyKeywordException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(\"OOPS!!! Keyword cannot be empty.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 14
    }
  },
  {
    "path": "src/main/java/duke/response/exception/DukeInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.response.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.common.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeInputException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param message The error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DukeInputException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 14
    }
  },
  {
    "path": "src/main/java/duke/response/exception/DukeInvalidDateTimeInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.response.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.command.exception.DukeCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an exception thrown when the Date or Time input is invalid."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeInvalidDateTimeInputException extends DukeCommandException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param message The error message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DukeInvalidDateTimeInputException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 17
    }
  },
  {
    "path": "src/main/java/duke/response/exception/DukeTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.response.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an exception thrown when dealing with Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeTaskException extends DukeInputException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param message The error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DukeTaskException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 15
    }
  },
  {
    "path": "src/main/java/duke/response/exception/DukeUnknownInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.response.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents an exception thrown when input by user is an unknown command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DukeUnknownInputException extends DukeInputException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public DukeUnknownInputException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that meows :-(\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 13
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents a Task with a deadline."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    final LocalDate byDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    final LocalTime byTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param description The description of task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param byDate The date of the deadline."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param byTime The time of the deadline."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Deadline(String description, LocalDate byDate, LocalTime byTime) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(description, TaskType.DEADLINE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assert(byDate !\u003d null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.byDate \u003d byDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.byTime \u003d byTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the date of the deadline."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return The date of the deadline."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return byDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Return the String representation of the deadline."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * The deadline is in the format \"dd/MM/yyyy HHmm\"."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * This is for saving purpose."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return String representation of the deadline."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String getBy() { //\"21/08/2020 1900\" eg"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String time \u003d byTime \u003d\u003d null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                ? \"\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                : \" \" + byTime.format(DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return byDate.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\")) + time;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the String representation of the Deadline task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * The deadline is in the format \"MMM-dd-yyyy h.mma\"."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return String representation of the Deadline task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String time \u003d byTime \u003d\u003d null"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                ? \"\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                : \", \" + byTime.format(DateTimeFormatter.ofPattern(\"h.mma\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        //special display of date and time"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return super.toString()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                + \" (by: \" + byDate.format(DateTimeFormatter.ofPattern(\"MMM-dd-yyyy\"))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                + time + \")\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 67
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents the Task happening on a Date."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    final LocalDate atDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    final LocalTime atTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param description The description of task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param atDate The date of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param atTime The time of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Event(String description, LocalDate atDate, LocalTime atTime) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(description, TaskType.EVENT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assert(atDate !\u003d null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.atDate \u003d atDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.atTime \u003d atTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the date of the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return The date of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return atDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the String representation of the occurrence of the event."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * The occurrence is in the format \"dd/MM/yyyy HHmm\"."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * This is for saving purpose."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return The String representation of the occurrence of the event."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String getAt() { //\"21/08/2020 1900\" eg"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String time \u003d atTime \u003d\u003d null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                ? \"\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                : \" \" + atTime.format(DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return atDate.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\")) + time;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the String representation of the Event task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * The occurrence is in the format \"MMM-dd-yyyy h.mma\"."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return The String representation of the occurrence of the event."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String time \u003d atTime \u003d\u003d null"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                        ? \"\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                : \", \" + atTime.format(DateTimeFormatter.ofPattern(\"h.mma\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        //special display of date and time"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return super.toString()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                + \" (at: \" + atDate.format(DateTimeFormatter.ofPattern(\"MMM-dd-yyyy\"))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                + time + \")\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 67
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents a Task object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    protected final TaskType taskType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param description The description of Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param taskType The type of Task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Task(String description, TaskType taskType) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns a tick if the task is done."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns a cross otherwise."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return Tick if tasks is done, cross otherwise."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return isDone ? \"\\u2713\" : \"\\u2718\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        //        return (isDone ? \"✓\" : \"✘\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Sets the isDone property to true."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return The description of the task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the isDone property of the task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return True if task is done, false otherwise."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the type of task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return The type of task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public TaskType getTaskType() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return this.taskType;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the String representation of the task."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return String representation of the task."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return taskType + \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 76
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.command.exception.DukeInvalidIndexException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.Response;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Contains the list of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * The \u003ccode\u003eTaskList\u003c/code\u003e object handles operations done to the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    protected List\u003cTask\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor specified with a list of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public TaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.list \u003d taskList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param task The task to be added to the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return The task that is added."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Task addTask(Task task) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.list.add(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Deletes a task from the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param index The index of the task in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return The task that is deleted."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeInvalidIndexException If index \u003c 0 or index \u003e\u003d list size."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Task deleteTask(int index) throws DukeInvalidIndexException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            Task toBeDeleted \u003d get(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            this.list.remove(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return toBeDeleted;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DukeInvalidIndexException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Marks a task in the list as done."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param index The index of the task in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return The task that has been marked as done."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeInvalidIndexException If index \u003c 0 or index \u003e\u003d list size."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Task markDone(int index) throws DukeInvalidIndexException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            Task task \u003d get(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DukeInvalidIndexException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the String representing the tasks in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the alternative String given if list is empty."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param list The list of tasks."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param alternative String returned if list is empty."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return String representing the tasks in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static String getListAsStringFromList(List\u003cTask\u003e list, String alternative) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            s +\u003d Response.TWO_INDENT + (i + 1) + \".\" + list.get(i);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            if (i !\u003d list.size() - 1) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                s +\u003d \u0027\\n\u0027;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (s.equals(\"\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return alternative;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return s;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns String representing the tasks in the list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return String representing the tasks in the list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String getListAsString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return getListAsStringFromList(this.list,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                \"There is nothing in the list!\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the size of the list of tasks."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return size of list of tasks."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the task at the specific index given."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param index The index of the task in the list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return The task at the index."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @throws DukeInvalidIndexException If index \u003c 0 or index \u003e\u003d list size."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Task get(int index) throws DukeInvalidIndexException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            return this.list.get(index);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            throw new DukeInvalidIndexException();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the String representing list of task on that date given."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param date The given date query."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return The String representing the list of tasks."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String getTasksOnDate(LocalDate date) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        List\u003cTask\u003e tasksOnDate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        list.forEach(task -\u003e {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                Deadline d \u003d (Deadline) task;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                if (d.getDate().isEqual(date)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    tasksOnDate.add(d);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                Event e \u003d (Event) task;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                if (e.getDate().isEqual(date)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    tasksOnDate.add(e);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        });"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return getListAsStringFromList(tasksOnDate,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                \"There are no tasks on this date!\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the String representing list of tasks with the keyword."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param keyword The specified keyword."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return String representing the list of tasks."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String getTaskWithKeyword(String keyword) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        List\u003cTask\u003e tasksWithKeyword \u003d list.stream().filter("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            task -\u003e {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                return description.contains(keyword);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            }).collect(Collectors.toList());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return getListAsStringFromList(tasksWithKeyword,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                \"No tasks with \" + keyword + \" was found\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 176
    }
  },
  {
    "path": "src/main/java/duke/task/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents the type of the task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    TODO(\"[T]\"), DEADLINE(\"[D]\"), EVENT(\"[E]\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final String bracketedTaskType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param bracketedTaskType The symbol for the Type of Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    TaskType(String bracketedTaskType) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        this.bracketedTaskType \u003d bracketedTaskType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the String representation of the Type of Task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return String representation of the Type of Task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return bracketedTaskType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 29
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents a Task without Date and Time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        super(description, TaskType.TODO);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns the String representation of the Todo task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return String representation of the Todo task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 24
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * and a label containing text from the speaker."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Display pictures taken from: https://www.veryicon.com/icons/movie--tv/doraemon/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Background image taken from: https://tenor.com/view/yay-hooray-party-celebrate-parties-gif-13284604"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Images used are of \"License: Free for personal and commercial purpose\"."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param text The text string."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param img The Image."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns a user dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param text The message."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param img The image."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return User dialog."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        db.setPadding(new Insets(10, 10, 10, 10));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Returns a Doraemon dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param text The message."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param img The image."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @return Doraemon dialog."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static DialogBox getDoraemonDialog(String text, Image img) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        db.setPadding(new Insets(10, 10, 10, 10));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 89
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.Response;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/nobita.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/doraemon.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Initialises the MainWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Set the variable duke."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * @param d The Duke to set duke to."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            DialogBox.getDoraemonDialog(Response.intro(), dukeImage)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @SafeVarargs"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private void addToDialogContainer(Node... nodes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        dialogContainer.getChildren().addAll(nodes);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        addToDialogContainer("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            DialogBox.getDoraemonDialog(response, dukeImage)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        );"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        if (response.equals(Response.printBye())) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    //Show the bye message for 1.5seconds before exit."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    Thread.sleep(1500);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    Platform.exit();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                        DialogBox.getUserDialog(e.getMessage(), dukeImage)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            });"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 86
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"CENTER\" minWidth\u003d\"50.0\" style\u003d\"-fx-background-color: #5AB2F4; -fx-opacity: 0.97; -fx-background-radius: 25; -fx-border-radius: 25; -fx-font-weight: 800;\" stylesheets\u003d\"@mainwindow.css\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            \u003cFont name\u003d\"Kristen ITC\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 30
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u003c?import javafx.scene.Group?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"800.0\" prefWidth\u003d\"600.0\" styleClass\u003d\"anchor\" stylesheets\u003d\"@mainwindow.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "      \u003cGroup layoutX\u003d\"14.0\" layoutY\u003d\"745.0\" AnchorPane.bottomAnchor\u003d\"14.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "              \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"504.0\" layoutY\u003d\"8.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"40.0\" prefWidth\u003d\"70.0\" stylesheets\u003d\"@mainwindow.css\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "              \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"5.0\" layoutY\u003d\"8.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"40.0\" prefWidth\u003d\"493.0\" styleClass\u003d\"userInput\" stylesheets\u003d\"@mainwindow.css\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "      \u003c/Group\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" cacheHint\u003d\"QUALITY\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutX\u003d\"14.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"730.0\" prefWidth\u003d\"570.0\" styleClass\u003d\"scrollPane\" stylesheets\u003d\"@mainwindow.css\" vvalue\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"14.0\" AnchorPane.rightAnchor\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" blendMode\u003d\"MULTIPLY\" cache\u003d\"true\" prefHeight\u003d\"732.0\" prefWidth\u003d\"555.0\" spacing\u003d\"10.0\" styleClass\u003d\"vbox\" stylesheets\u003d\"@mainwindow.css\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                  \u003cInsets bottom\u003d\"10.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 29
    }
  },
  {
    "path": "src/test/java/duke/response/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.response;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.backend.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.command.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.command.UnknownCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.common.exception.DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.exception.DukeEmptyAtException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.exception.DukeEmptyByException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.exception.DukeEmptyDescriptionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.exception.DukeEmptyIndexException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.exception.DukeEmptyKeywordException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.exception.DukeInvalidDateTimeInputException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents a test class for Parser."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String VALID_TODO \u003d \"todo task1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String INVALID_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String VALID_DEADLINE \u003d \"deadline task2 /by 15/9/2020 1800\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String INVALID_DEADLINE \u003d \"deadline task2 \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String VALID_EVENT \u003d \"event task3 /at 15/9/2020 1700\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public static final String INVALID_EVENT \u003d \"event task4 /at \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final TaskList taskList1 \u003d new TaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final TaskList taskList2 \u003d new TaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final Response response \u003d new Response();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final Storage testStorage1 \u003d new Storage(System.getProperty(\"user.home\") + \"/test\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private final Storage testStorage2 \u003d new Storage(System.getProperty(\"user.home\") + \"/test2\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void parser_validTodo_success()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        throws DukeEmptyDescriptionException, DukeEmptyKeywordException, DukeEmptyByException,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DukeInvalidDateTimeInputException, DukeEmptyIndexException, DukeEmptyAtException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        AddCommand result \u003d new AddCommand(new Todo(\"task1\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(Parser.parse(VALID_TODO).execute(taskList1, response, testStorage1),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                result.execute(taskList2, response, testStorage2));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void parser_invalidTodo_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DukeEmptyDescriptionException exception \u003d new DukeEmptyDescriptionException(\"todo\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            Parser.parse(INVALID_TODO).execute(taskList1, response, testStorage1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            assertEquals(e.getMessage(), exception.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void parser_validDeadline_success()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        throws DukeEmptyDescriptionException, DukeEmptyKeywordException, DukeEmptyByException,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DukeInvalidDateTimeInputException, DukeEmptyIndexException, DukeEmptyAtException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        AddCommand result \u003d new AddCommand(new Deadline(\"task2\", LocalDate.of(2020, 9, 15), LocalTime.of(18, 0)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(Parser.parse(VALID_DEADLINE).execute(taskList1, response, testStorage1),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                result.execute(taskList2, response, testStorage2));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void parser_invalidDeadline_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DukeEmptyByException exception \u003d new DukeEmptyByException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            Parser.parse(INVALID_DEADLINE).execute(taskList1, response, testStorage1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            assertEquals(e.getMessage(), exception.getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void parser_validEvent_success()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        throws DukeEmptyDescriptionException, DukeEmptyKeywordException, DukeEmptyByException,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DukeInvalidDateTimeInputException, DukeEmptyIndexException, DukeEmptyAtException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        AddCommand result \u003d new AddCommand(new Event(\"task3\", LocalDate.of(2020, 9, 15), LocalTime.of(17, 0)));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(Parser.parse(VALID_EVENT).execute(taskList1, response, testStorage1),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                result.execute(taskList2, response, testStorage2));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void parser_invalidEvent_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DukeEmptyAtException exception \u003d new DukeEmptyAtException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            Parser.parse(INVALID_EVENT).execute(taskList1, response, testStorage1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            assertEquals(e.getMessage(), exception.getMessage());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void parser_validHelp_success()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        throws DukeEmptyDescriptionException, DukeEmptyKeywordException, DukeEmptyByException,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DukeInvalidDateTimeInputException, DukeEmptyIndexException, DukeEmptyAtException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        HelpCommand helpCommand \u003d new HelpCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(Parser.parse(\"help\").execute(taskList1, response, testStorage1),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                helpCommand.execute(taskList2, response, testStorage2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void parser_validList_success()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        throws DukeEmptyDescriptionException, DukeEmptyKeywordException, DukeEmptyByException,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DukeInvalidDateTimeInputException, DukeEmptyIndexException, DukeEmptyAtException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(Parser.parse(\"list\").execute(taskList1, response, testStorage1),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                listCommand.execute(taskList2, response, testStorage2));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void parser_unknownCommand_success()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        throws DukeEmptyDescriptionException, DukeEmptyKeywordException, DukeEmptyByException,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        DukeInvalidDateTimeInputException, DukeEmptyIndexException, DukeEmptyAtException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        UnknownCommand unknownCommand \u003d new UnknownCommand();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(Parser.parse(\"unknown command\").execute(taskList1, response, testStorage1),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                unknownCommand.execute(taskList2, response, testStorage2));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 127
    }
  },
  {
    "path": "src/test/java/duke/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.command.exception.DukeInvalidIndexException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "import duke.response.Response;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " * Represents a test class for TaskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private Task todo \u003d new Todo(\"task 1\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private Task deadline \u003d new Deadline(\"task 2\", LocalDate.of(2020, 8, 24), LocalTime.of(8, 24));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    private Task event \u003d new Event(\"task 3\", LocalDate.of(2020, 9, 9), LocalTime.of(9, 9));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void addTodo_validTodo_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(todo, taskList.addTask(todo));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void addDeadline_validDeadline_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(deadline, taskList.addTask(deadline));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void addEvent_validEvent_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(event, taskList.addTask(event));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void deleteTask_validIndex_success() throws DukeInvalidIndexException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        tl.addTask(todo);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(todo, tl.deleteTask(0));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void deleteTask_invalidIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        tl.addTask(todo);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            assertEquals(tl.deleteTask(1), todo);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DukeInvalidIndexException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            assertEquals(\"OOPS!!! There is no such task.\", e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void markDone_validIndex_success() throws DukeInvalidIndexException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Task markDoneTodo \u003d new Todo(\"markDone test\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        tl.addTask(markDoneTodo);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        markDoneTodo.markAsDone();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(markDoneTodo, tl.markDone(0));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void markDone_invalidIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        Task markDoneTodo \u003d new Todo(\"markDone test\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        tl.addTask(markDoneTodo);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        markDoneTodo.markAsDone();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            assertEquals(markDoneTodo, tl.markDone(1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DukeInvalidIndexException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            assertEquals(\"OOPS!!! There is no such task.\", e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void getListAsStringFromList_emptyList_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(\"Alternative String\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                TaskList.getListAsStringFromList(list, \"Alternative String\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void getListAsStringFromList_validList_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        list.add(todo);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String expectedResult \u003d Response.TWO_INDENT + \"1.\" + todo.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(expectedResult,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                TaskList.getListAsStringFromList(list, \"Alternative String\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void getListAsStringFromList_validLongerList_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        list.add(todo);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        list.add(deadline);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String expectedResult \u003d Response.TWO_INDENT + \"1.\" + todo.toString() + \"\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                + Response.TWO_INDENT + \"2.\" + deadline.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(expectedResult, TaskList.getListAsStringFromList(list, \"Alternative\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void getListAsString_emptyTaskList_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(\"There is nothing in the list!\", tl.getListAsString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void getListAsString_validTaskList_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        tl.addTask(todo);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String expectedResult \u003d Response.TWO_INDENT + \"1.\" + todo.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(expectedResult, tl.getListAsString());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void getListAsString_validLongerTaskList_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        tl.addTask(todo);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        tl.addTask(deadline);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(Response.TWO_INDENT + \"1.\" + todo.toString()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                + \"\\n\" + Response.TWO_INDENT"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                + \"2.\" + deadline.toString(), tl.getListAsString());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void getSize_emptyTaskList_success() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(0, tl.getSize());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void getSize_validTaskList_success() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        tl.addTask(todo);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        tl.addTask(deadline);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        tl.addTask(event);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(3, tl.getSize());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void get_validIndex_success() throws DukeInvalidIndexException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        tl.addTask(todo);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(todo, tl.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void get_invalidIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            assertEquals(todo, tl.get(0));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        } catch (DukeInvalidIndexException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "            assertEquals(\"OOPS!!! There is no such task.\", e.getMessage());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void getTaskOnDate_validDate_success() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        tl.addTask(deadline);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String expectedResult \u003d Response.TWO_INDENT + \"1.\" + deadline.toString();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(expectedResult,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                tl.getTasksOnDate(LocalDate.of(2020, 8, 24)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void getTaskOnDate_emptyList_success() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(\"There are no tasks on this date!\","
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                tl.getTasksOnDate(LocalDate.of(2020, 1, 1)));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    public void getTaskWithKeyword_validKeyword_success() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        tl.addTask(deadline);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        String expectedResult \u003d Response.TWO_INDENT + \"1.\" + deadline.toString();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "        assertEquals(expectedResult,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "                tl.getTaskWithKeyword(\"task\"));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 186
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 11
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "SET MY_PATH\u003dC:\\Users\\Marcus\\Desktop\\NUS CS\\Year 2 - Sem 1\\CS2103T\\ip"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "if not exist \"%MY_PATH%\\bin\" mkdir \"%MY_PATH%\\bin\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "javac  -cp \"%MY_PATH%\\src\\main\\java\" -Xlint:none -d \"%MY_PATH%\\bin\" \"%MY_PATH%\\src\\main\\java\\Duke.java\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MarcusTw"
        },
        "content": "java -classpath \"%MY_PATH%\\bin\" Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "MarcusTw": 5,
      "-": 18
    }
  }
]
