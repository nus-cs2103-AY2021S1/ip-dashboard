[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "compileJava.options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    options.encoding(\u0027UTF-8\u0027)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "applicationDefaultJvmArgs \u003d [\"-Dfile.encoding\u003dutf-8\"]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    mainClassName \u003d \"alice.Launcher\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    archiveBaseName \u003d \"alice\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "task runCli(type: JavaExec) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    classpath \u003d sourceSets.main.runtimeClasspath"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    main \u003d \u0027alice.Launcher\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // arguments to pass to the application"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    args \u0027-c\u0027"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "// Depreciated"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "task textUiTest(type: Exec) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    workingDir \u0027./text-ui-test\u0027"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    if (System.properties[\u0027os.name\u0027].toLowerCase().contains(\u0027windows\u0027)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // on windows"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        commandLine \u0027cmd\u0027, \u0027/c\u0027, \u0027runtest.bat\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // on linux"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        commandLine \u0027./runtest.sh\u0027"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 49,
      "-": 47
    }
  },
  {
    "path": "src/main/java/alice/Alice.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.result.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.result.InvalidCommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.SaveStatus;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.StorageFile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.ui.cli.Cli;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.util.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the ALICE program."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class Alice {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final StorageFile storageFile;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private Cli cli;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates an ALICE program with default save file location."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * If the file does not exist, creates the appropriate directory and file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Alice() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this(StorageFile.DEFAULT_FILE_PATH);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates an ALICE program that reads data from specified location."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * If the file does not exist, creates the appropriate directory and file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param filePath relative path to the data file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Alice(String filePath) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        storageFile \u003d new StorageFile(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // Read stored data"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            tasks \u003d new TaskList(storageFile.load());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } catch (AliceException ex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // If save file is corrupted"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // Starts with a new file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Returns the status of loading the save file from specified or default location."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the load status of the file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String getLoadStatus() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return storageFile.getLoadStatus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Processes the command provided by the user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param inputCommand the command string input by the user"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the CommandResult which contains instructions for replying the user."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public CommandResult processCommand(String inputCommand) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            Command c \u003d Parser.parseCommand(inputCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return c.process(tasks, storageFile);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } catch (InvalidCommandException ex) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new InvalidCommandResult(ex.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Initialises and prepares the Alice\u0027s Command Line Interface."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the Alice object with CLI initialised."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected Alice initialiseCli() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.cli \u003d new Cli();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Runs the Alice program on the command line."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * The program uses the read-eval-print-loop framework."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected void run() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        cli.displayInitMessage(getLoadStatus());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        cli.displayWelcomeMsg();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        cli.displayLine();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            String input \u003d cli.readUserInput();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            cli.displayLine();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            CommandResult result \u003d processCommand(input);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // Prints result on CLI"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            if (result.isCommandFailure()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                cli.displayError(result.getMessage());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                cli.displayOutput(result.getMessage());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            if (result.getSaveStatus() \u003d\u003d SaveStatus.SAVE_FAILED) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                cli.displayError(\"Failed to save data\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            isExit \u003d result.shouldExit();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            cli.displayLine();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 113
    }
  },
  {
    "path": "src/main/java/alice/AliceException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the main exception thrown in Alice program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class AliceException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Constructs an {@code AliceException} with the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * specified detail message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param message the detail message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public AliceException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 16
    }
  },
  {
    "path": "src/main/java/alice/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.ui.AliceGui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * The main entry point to the Alice"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Starts the CLI or GUI depending on command line arguments."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Start up Alice GUI by default. Start the CLI by using \"-c\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * in the argument."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param args a string array containing the command line arguments"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (args.length \u003e 0 \u0026\u0026 args[0].equals(\"-c\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // Start CLI interface"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            new Alice().initialiseCli().run();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // By default start GUI interface"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Application.launch(AliceGui.class, args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 27
    }
  },
  {
    "path": "src/main/java/alice/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.result.ByeCommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.result.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.StorageFile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the command to exit the ALICE program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class ByeCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final List\u003cString\u003e NAMES \u003d List.of(\"bye\", \"exit\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final String DESCRIPTION \u003d \"Exits ALICE program\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final String USE_CASE \u003d \"[\" + String.join(\", \", NAMES) + \"]\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if the command word triggers the {@code ByeCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param name the command word to check."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if the command word belongs to {@code ByeCommand}; false otherwise."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static boolean hasCommandWord(String name) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return NAMES.contains(name);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static ByeCommand createCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return new ByeCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public CommandResult process(TaskList tasks, StorageFile storageFile) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return new ByeCommandResult(\"Goodbye. Hope to see you again soon!\", true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 36
    }
  },
  {
    "path": "src/main/java/alice/command/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.result.ClearCommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.result.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.AliceStorageException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.SaveStatus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.StorageFile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the command to clear all the tasks in ALICE."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class ClearCommand implements Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final List\u003cString\u003e NAMES \u003d List.of(\"clear\", \"clr\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final String DESCRIPTION \u003d \"Clear all tasks\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final String USE_CASE \u003d \"[\" + String.join(\", \", NAMES) + \"]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if the command word triggers the {@code ClearCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param name the command word to check."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if the command word belongs to {@code ClearCommand}; false otherwise."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static boolean hasCommandWord(String name) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return NAMES.contains(name);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static ClearCommand createCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return new ClearCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public CommandResult process(TaskList tasks, StorageFile storageFile) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String clearSuccessMessage \u003d \"All tasks successfully cleared!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            tasks.clearAllTasks();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            storageFile.save(tasks.encode());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new ClearCommandResult(clearSuccessMessage, true, SaveStatus.SAVE_SUCCESS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } catch (AliceStorageException ex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new ClearCommandResult(clearSuccessMessage, true, SaveStatus.SAVE_FAILED);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 45
    }
  },
  {
    "path": "src/main/java/alice/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.result.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.StorageFile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents a command recognised by ALICE."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param tasks       the list of tasks stored in ALICE."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param storageFile the file used to store ALICE data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the corresponding {@code CommandResult} with instructions for cleaning up."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    CommandResult process(TaskList tasks, StorageFile storageFile);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 20
    }
  },
  {
    "path": "src/main/java/alice/command/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.util.CheckedFunction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    CMD_BYE(ByeCommand::hasCommandWord, (arg) -\u003e ByeCommand.createCommand()),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    CMD_LIST(ListCommand::hasCommandWord, (arg) -\u003e ListCommand.createCommand()),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    CMD_FIND(FindCommand::hasCommandWord, FindCommand::createCommand),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    CMD_CLEAR(ClearCommand::hasCommandWord, (arg) -\u003e ClearCommand.createCommand()),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    CMD_HELP(HelpCommand::hasCommandWord, (arg) -\u003e HelpCommand.createCommand()),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    CMD_DONE(DoneCommand::hasCommandWord, DoneCommand::createCommand),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    CMD_DELETE(DeleteCommand::hasCommandWord, DeleteCommand::createCommand),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    CMD_TODO(TodoCommand::hasCommandWord, TodoCommand::createCommand),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    CMD_DEADLINE(DeadlineCommand::hasCommandWord, DeadlineCommand::createCommand),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    CMD_EVENT(EventCommand::hasCommandWord, EventCommand::createCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Function\u003cString, Boolean\u003e wordChecker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final CheckedFunction\u003cString, Command\u003e factoryMethod;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    CommandType(Function\u003cString, Boolean\u003e wordChecker, CheckedFunction\u003cString, Command\u003e factoryMethod) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.wordChecker \u003d wordChecker;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.factoryMethod \u003d factoryMethod;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean hasCommandWord(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return wordChecker.apply(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Command createCmd(String argument) throws InvalidCommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return factoryMethod.apply(argument);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 35
    }
  },
  {
    "path": "src/main/java/alice/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.result.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.result.DeadlineCommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.AliceStorageException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.SaveStatus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.StorageFile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.task.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.util.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the command to add a new deadline in ALICE."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class DeadlineCommand implements Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final List\u003cString\u003e NAMES \u003d List.of(\"deadline\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final String DESCRIPTION \u003d \"Create a task with deadline\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final String USE_CASE \u003d \"[\" + String.join(\", \", NAMES)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            + \"] \u003cdesc\u003e /by \u003cdatetime\u003e\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalDateTime by;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a new command to create a new {@code Deadline} with the details provided."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param description the description of the deadline."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param by          the due datetime of the deadline."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private DeadlineCommand(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assert !description.isBlank() : \"Cannot create an DeadlineCommand without providing description\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if the command word triggers the {@code DeadlineCommand}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param name the command word to check."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if the command word belongs to {@code DeadlineCommand}; false otherwise."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static boolean hasCommandWord(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return NAMES.contains(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a new command to create a new {@code Deadline} with the details given by the user."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param argument the deadline details input given by user."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the {@code DeadlineCommand} with the indicated details."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws InvalidCommandException if the user gives an invalid description and/or datetime."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static DeadlineCommand createCommand(String argument) throws InvalidCommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String[] arguments \u003d argument.split(\" /by \", 2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (arguments.length \u003d\u003d 2 \u0026\u0026 !arguments[1].isBlank()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            String description \u003d arguments[0];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            String dateTime \u003d arguments[1];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            LocalDateTime deadlineDt \u003d Parser.parseDateTime(dateTime);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new DeadlineCommand(description, deadlineDt);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } else if (argument.isBlank()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // Empty description"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new InvalidCommandException(\"The deadline description cannot be left empty.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } else if (argument.endsWith(\"/by\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // Empty date"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new InvalidCommandException(\"You cannot create an deadline without the date.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // No /by marker"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new InvalidCommandException(\"I can\u0027t find the deadline date.\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    + \"Did you forget to add \u0027/by\u0027?\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public CommandResult process(TaskList tasks, StorageFile storageFile) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Task deadline \u003d new Deadline(description, by);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        tasks.addTask(deadline);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String reply \u003d \"Roger. I\u0027ve added the deadline to your list:\\n    \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                + deadline + \"\\nNow you have \" + tasks.getNumberOfTasks()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                + \" tasks in your list!\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            storageFile.saveToLastLine(deadline.encode());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new DeadlineCommandResult(reply, true, SaveStatus.SAVE_SUCCESS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } catch (AliceStorageException ex) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new DeadlineCommandResult(reply, true, SaveStatus.SAVE_FAILED);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 92
    }
  },
  {
    "path": "src/main/java/alice/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.result.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.result.DeleteCommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.result.InvalidCommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.AliceStorageException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.SaveStatus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.StorageFile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the command to delete a task from ALICE."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final List\u003cString\u003e NAMES \u003d List.of(\"delete\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final String DESCRIPTION \u003d \"Delete a task\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final String USE_CASE \u003d \"[\" + String.join(\", \", NAMES) + \"] \u003ctask number\u003e\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final int taskIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a new command to delete the indicated task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param taskIndex the index indicating the task to delete."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private DeleteCommand(int taskIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if the command word triggers the {@code DeleteCommand}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param name the command word to check."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if the command word belongs to {@code DeleteCommand}; false otherwise."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static boolean hasCommandWord(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return NAMES.contains(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a new command to delete task indicated by the number given by the user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param inputIndex the string representing the task number given by user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the {@code DeleteCommand} with the verified task number."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws InvalidCommandException if the task number provided is invalid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static DeleteCommand createCommand(String inputIndex) throws InvalidCommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            int index \u003d Integer.parseInt(inputIndex) - 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new InvalidCommandException(\"Don\u0027t play around. Give me a proper number!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public CommandResult process(TaskList tasks, StorageFile storageFile) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String reply \u003d \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            Task deletedTask \u003d tasks.deleteTask(taskIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            reply \u003d \"Roger. I\u0027ve removed this task from your list:\\n    \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    + deletedTask"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    + \"\\nNow you have \" + tasks.getNumberOfTasks() + \" task in your list!\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            storageFile.save(tasks.encode());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new DeleteCommandResult(reply, true, SaveStatus.SAVE_SUCCESS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } catch (InvalidCommandException ex) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            String errorMessage \u003d \"Failed to delete task. \" + ex.getMessage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new InvalidCommandResult(errorMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } catch (AliceStorageException ex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new DeleteCommandResult(reply, true, SaveStatus.SAVE_FAILED);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 76
    }
  },
  {
    "path": "src/main/java/alice/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.result.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.result.DoneCommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.result.InvalidCommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.AliceStorageException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.SaveStatus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.StorageFile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the command to mark a task as done in ALICE."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final List\u003cString\u003e NAMES \u003d List.of(\"done\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final String DESCRIPTION \u003d \"Mark a task as done\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final String USE_CASE \u003d \"[\" + String.join(\", \", NAMES) + \"] \u003ctask number\u003e\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final int taskIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a new command to mark the indicated task as done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param taskIndex the index indicating the completed task to mark as done."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private DoneCommand(int taskIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if the command word triggers the {@code DoneCommand}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param name the command word to check."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if the command word belongs to {@code DoneCommand}; false otherwise."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static boolean hasCommandWord(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return NAMES.contains(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a new command to mark the task indicated by the user as done."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param inputIndex he string representing the task number given by user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the {@code DoneCommand} with the verified task number."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws InvalidCommandException if the task number provided is invalid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static DoneCommand createCommand(String inputIndex) throws InvalidCommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            int index \u003d Integer.parseInt(inputIndex) - 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new DoneCommand(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new InvalidCommandException(\"Don\u0027t play around. Give me a proper number!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public CommandResult process(TaskList tasks, StorageFile storageFile) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String reply \u003d \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            Task completedTask \u003d tasks.markTaskAsDone(taskIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            if (completedTask \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                reply \u003d \"You already completed this task!\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                return new DoneCommandResult(reply, false, SaveStatus.SAVE_NOT_APPLICABLE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            reply \u003d \"Great work! I\u0027ve marked this task as done:\\n    \" + completedTask;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            storageFile.save(tasks.encode());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new DoneCommandResult(reply, true, SaveStatus.SAVE_SUCCESS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } catch (InvalidCommandException ex) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            String errorMessage \u003d \"Failed to mark task as done.\\n\" + ex.getMessage();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new InvalidCommandResult(errorMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } catch (AliceStorageException ex) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new DoneCommandResult(reply, true, SaveStatus.SAVE_FAILED);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 80
    }
  },
  {
    "path": "src/main/java/alice/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.result.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.result.EventCommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.AliceStorageException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.SaveStatus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.StorageFile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.task.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.task.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.util.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the command to add a new event in ALICE."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class EventCommand implements Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final List\u003cString\u003e NAMES \u003d List.of(\"event\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final String DESCRIPTION \u003d \"Create an event\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final String USE_CASE \u003d \"[\" + String.join(\", \", NAMES)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            + \"] \u003cdesc\u003e /on \u003cdatetime\u003e\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalDateTime on;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a new command to create a new {@code Event} with the details provided."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param description the description of the event."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param on          the datetime of when the event is happening."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private EventCommand(String description, LocalDateTime on) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.on \u003d on;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assert !description.isBlank() : \"Cannot create an EventCommand without providing description\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if the command word triggers the {@code EventCommand}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param name the command word to check."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if the command word belongs to {@code EventCommand}; false otherwise."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static boolean hasCommandWord(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return NAMES.contains(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a new command to create a new {@code Event} with the details given by the user."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param argument the event details input given by user."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the {@code EventCommand} with the indicated details."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws InvalidCommandException if the user gives an invalid description and/or datetime."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static EventCommand createCommand(String argument) throws InvalidCommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String[] arguments \u003d argument.split(\" /on \", 2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (arguments.length \u003d\u003d 2 \u0026\u0026 !arguments[1].isBlank()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            String description \u003d arguments[0];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            String dateTime \u003d arguments[1];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            LocalDateTime eventDateTime \u003d Parser.parseDateTime(dateTime);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new EventCommand(description, eventDateTime);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } else if (argument.isBlank()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // Empty event description"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new InvalidCommandException(\"The event description cannot be left empty.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } else if (argument.endsWith(\"/on\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // Empty start-end time"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new InvalidCommandException(\"You cannot create an event without a date/time.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // No /on marker"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new InvalidCommandException(\"I can\u0027t find the date/time of the event.\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    + \"Did you forget to add \u0027/on\u0027?\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public CommandResult process(TaskList tasks, StorageFile storageFile) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Task event \u003d new Event(description, on);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        tasks.addTask(event);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String reply \u003d \"Roger. I\u0027ve added the event to your list:\\n    \" + event"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                + \"\\nNow you have \" + tasks.getNumberOfTasks() + \" tasks in your list\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            storageFile.saveToLastLine(event.encode());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new EventCommandResult(reply, true, SaveStatus.SAVE_SUCCESS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } catch (AliceStorageException ex) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new EventCommandResult(reply, true, SaveStatus.SAVE_FAILED);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 92
    }
  },
  {
    "path": "src/main/java/alice/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.result.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.result.FindCommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.StorageFile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the command to find specific tasks in ALICE."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final List\u003cString\u003e NAMES \u003d List.of(\"find\", \"search\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final String DESCRIPTION \u003d \"Find tasks using keywords\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final String USE_CASE \u003d \"[\" + String.join(\", \", NAMES) + \"] \u003ckeyword(s)\u003e\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final String[] keywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a new command to search for tasks based on keywords."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param keywords the list of keywords to search against."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private FindCommand(String... keywords) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assert keywords.length !\u003d 0 : \"Cannot execute FindCommand with not keywords\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if the command word triggers the {@code FindCommand}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param name the command word to check."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if the command word belongs to {@code FindCommand}; false otherwise."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static boolean hasCommandWord(String name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return NAMES.contains(name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a new Find command to search for tasks based on keywords given by the user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param argument the string of keywords provided by user"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the {@code FindCommand} with the user\u0027s keywords"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws InvalidCommandException if the keywords provided is an empty string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static FindCommand createCommand(String argument) throws InvalidCommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (!argument.isBlank()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new FindCommand(argument.strip().split(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new InvalidCommandException(\"The keyword for find cannot be left empty.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public CommandResult process(TaskList tasks, StorageFile storageFile) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String output \u003d tasks.find(keywords);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (output \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new FindCommandResult(\"There are no tasks matching your search.\", true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new FindCommandResult(\"Here, I found some tasks matching your search:\\n\" + output, true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 65
    }
  },
  {
    "path": "src/main/java/alice/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.result.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.result.HelpCommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.StorageFile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the command to get the list of commands that ALICE understands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class HelpCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final List\u003cString\u003e NAMES \u003d List.of(\"help\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final String DESCRIPTION \u003d \"Gets the list of commands\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final String USE_CASE \u003d \"[\" + String.join(\", \", NAMES) + \"]\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if the command word triggers the {@code HelpCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param name the command word to check."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if the command word belongs to {@code HelpCommand}; false otherwise."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static boolean hasCommandWord(String name) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return NAMES.contains(name);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static HelpCommand createCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return new HelpCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public CommandResult process(TaskList tasks, StorageFile storageFile) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String commandFormat \u003d \"%s - %s\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        StringBuilder output \u003d new StringBuilder(\"These are the commands in my dictionary:\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        output.append(String.format(commandFormat, ListCommand.USE_CASE, ListCommand.DESCRIPTION));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        output.append(String.format(commandFormat, FindCommand.USE_CASE, FindCommand.DESCRIPTION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        output.append(String.format(commandFormat, ClearCommand.USE_CASE, ClearCommand.DESCRIPTION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        output.append(String.format(commandFormat, DoneCommand.USE_CASE, DoneCommand.DESCRIPTION));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        output.append(String.format(commandFormat, DeleteCommand.USE_CASE, DeleteCommand.DESCRIPTION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        output.append(String.format(commandFormat, TodoCommand.USE_CASE, TodoCommand.DESCRIPTION));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        output.append(String.format(commandFormat, DeadlineCommand.USE_CASE, DeadlineCommand.DESCRIPTION));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        output.append(String.format(commandFormat, EventCommand.USE_CASE, EventCommand.DESCRIPTION));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        output.append(String.format(commandFormat, USE_CASE, DESCRIPTION));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        output.append(String.format(commandFormat, ByeCommand.USE_CASE, ByeCommand.DESCRIPTION));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // remove last newline char"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        output.setLength(output.length() - 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return new HelpCommandResult(output.toString(), true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 52
    }
  },
  {
    "path": "src/main/java/alice/command/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.AliceException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Throws when the command given by the user is invalid."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class InvalidCommandException extends AliceException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Constructs a {@code InvalidCommandException} with the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * specified detail message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param msg the detail message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public InvalidCommandException(String msg) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 18
    }
  },
  {
    "path": "src/main/java/alice/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.result.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.result.ListCommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.StorageFile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the command to list all tasks in ALICE."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final List\u003cString\u003e NAMES \u003d List.of(\"list\", \"ls\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final String DESCRIPTION \u003d \"Lists all tasks\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final String USE_CASE \u003d \"[\" + String.join(\", \", NAMES) + \"]\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if the command word triggers the {@code ListCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param name the command word to check."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if the command word belongs to {@code ListCommand}; false otherwise."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static boolean hasCommandWord(String name) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return NAMES.contains(name);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static ListCommand createCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public CommandResult process(TaskList tasks, StorageFile storageFile) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String output \u003d tasks.getAllTasks();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (output \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new ListCommandResult(\"You have no tasks at the moment.\", true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new ListCommandResult(\"Here are the tasks in your list:\\n\" + output, true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 41
    }
  },
  {
    "path": "src/main/java/alice/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.result.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.result.TodoCommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.AliceStorageException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.SaveStatus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.StorageFile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.task.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.task.Todo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the command to add a new todo task in ALICE."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class TodoCommand implements Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final List\u003cString\u003e NAMES \u003d List.of(\"todo\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final String DESCRIPTION \u003d \"Create a todo task\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    protected static final String USE_CASE \u003d \"[\" + String.join(\", \", NAMES) + \"] \u003cdesc\u003e\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a new command to create a new {@code Todo} with the provided description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param description the description of the task to be done."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private TodoCommand(String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assert !description.isBlank() : \"Cannot create a TodoCommand without providing description\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if the command word triggers the {@code TodoCommand}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param name the command word to check."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if the command word belongs to {@code TodoCommand}; false otherwise."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static boolean hasCommandWord(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return NAMES.contains(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a new command to create a new {@code Todo} with the description given by the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param description the description input given by user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the {@code TodoCommand} with the verified description."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws InvalidCommandException if the user gives an empty description."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static TodoCommand createCommand(String description) throws InvalidCommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (!description.isBlank()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new TodoCommand(description);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new InvalidCommandException(\"The todo description cannot be left empty.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public CommandResult process(TaskList tasks, StorageFile storageFile) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Task todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        tasks.addTask(todo);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String reply \u003d \"Roger. I\u0027ve added the task to your list:\\n    \" + todo"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                + \"\\nNow you have \" + tasks.getNumberOfTasks() + \" tasks in your list!\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            storageFile.saveToLastLine(todo.encode());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new TodoCommandResult(reply, true, SaveStatus.SAVE_SUCCESS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } catch (AliceStorageException ex) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new TodoCommandResult(reply, true, SaveStatus.SAVE_FAILED);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 73
    }
  },
  {
    "path": "src/main/java/alice/command/result/ByeCommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.command.result;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.SaveStatus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the result of executing the ByeCommand."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class ByeCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public ByeCommandResult(String commandMessage, boolean isCommandSuccess) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        super(commandMessage, isCommandSuccess, SaveStatus.SAVE_NOT_APPLICABLE);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean shouldExit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 17
    }
  },
  {
    "path": "src/main/java/alice/command/result/ClearCommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.command.result;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.SaveStatus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the result of executing the ClearCommand."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class ClearCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public ClearCommandResult(String commandMessage, boolean isCommandSuccess, SaveStatus saveStatus) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        super(commandMessage, isCommandSuccess, saveStatus);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 12
    }
  },
  {
    "path": "src/main/java/alice/command/result/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.command.result;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.SaveStatus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the result of processing a user command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * It contains a set of instructions which serves to provide the appropriate feedback to the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public abstract class CommandResult {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final String commandMessage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final SaveStatus saveStatus;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final boolean isCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a new command result with the specific message and command result status."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param commandMessage   the message to be returned to the user as feedback."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param isCommandSuccess the success status of the command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param saveStatus       the status of the save process during command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public CommandResult(String commandMessage, boolean isCommandSuccess, SaveStatus saveStatus) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.commandMessage \u003d commandMessage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.saveStatus \u003d saveStatus;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.isCommandSuccess \u003d isCommandSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assert !commandMessage.isBlank() : \"Cannot create CommandResult without a message\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Gets the status of the save process during command execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Returns a SaveStatus.SAVE_NOT_APPLICABLE in the case when a save process"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * is not supposed to be executed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the corresponding SaveStatus type."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public SaveStatus getSaveStatus() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return saveStatus;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Gets the output message of the command execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the output message."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return commandMessage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if the command execution failed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * The message of command result will be the corresponding error"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * message in the case of command execution failure."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if the command execution failed; false otherwise."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean isCommandFailure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return !isCommandSuccess;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if the command should exit the ALICE program after command execution."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if the command exits the ALICE program; false otherwise."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean shouldExit() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 68
    }
  },
  {
    "path": "src/main/java/alice/command/result/DeadlineCommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.command.result;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.SaveStatus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the result of executing the DeadlineCommand."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class DeadlineCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public DeadlineCommandResult(String commandMessage, boolean isCommandSuccess, SaveStatus saveStatus) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        super(commandMessage, isCommandSuccess, saveStatus);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 12
    }
  },
  {
    "path": "src/main/java/alice/command/result/DeleteCommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.command.result;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.SaveStatus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the result of executing the DeleteCommand."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class DeleteCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public DeleteCommandResult(String commandMessage, boolean isCommandSuccess, SaveStatus saveStatus) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        super(commandMessage, isCommandSuccess, saveStatus);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 12
    }
  },
  {
    "path": "src/main/java/alice/command/result/DoneCommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.command.result;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.SaveStatus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the result of executing the DoneCommand."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class DoneCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public DoneCommandResult(String commandMessage, boolean isCommandSuccess, SaveStatus saveStatus) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        super(commandMessage, isCommandSuccess, saveStatus);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 12
    }
  },
  {
    "path": "src/main/java/alice/command/result/EventCommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.command.result;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.SaveStatus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the result of executing the EventCommand."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class EventCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public EventCommandResult(String commandMessage, boolean isCommandSuccess, SaveStatus saveStatus) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        super(commandMessage, isCommandSuccess, saveStatus);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 12
    }
  },
  {
    "path": "src/main/java/alice/command/result/FindCommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.command.result;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.SaveStatus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the result of executing the FindCommand."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class FindCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public FindCommandResult(String commandMessage, boolean isCommandSuccess) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        super(commandMessage, isCommandSuccess, SaveStatus.SAVE_NOT_APPLICABLE);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 12
    }
  },
  {
    "path": "src/main/java/alice/command/result/HelpCommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.command.result;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.SaveStatus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the result of executing the HelpCommand."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class HelpCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public HelpCommandResult(String commandMessage, boolean isCommandSuccess) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        super(commandMessage, isCommandSuccess, SaveStatus.SAVE_NOT_APPLICABLE);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 12
    }
  },
  {
    "path": "src/main/java/alice/command/result/InvalidCommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.command.result;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.SaveStatus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents a special result when the command given by the user is invalid."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class InvalidCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public InvalidCommandResult(String commandMessage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        super(commandMessage, false, SaveStatus.SAVE_NOT_APPLICABLE);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 12
    }
  },
  {
    "path": "src/main/java/alice/command/result/ListCommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.command.result;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.SaveStatus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the result of executing the ListCommand."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class ListCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public ListCommandResult(String commandMessage, boolean isCommandSuccess) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        super(commandMessage, isCommandSuccess, SaveStatus.SAVE_NOT_APPLICABLE);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 12
    }
  },
  {
    "path": "src/main/java/alice/command/result/TodoCommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.command.result;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.SaveStatus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the result of executing the TodoCommand."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class TodoCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public TodoCommandResult(String commandMessage, boolean isCommandSuccess, SaveStatus saveStatus) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        super(commandMessage, isCommandSuccess, saveStatus);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 12
    }
  },
  {
    "path": "src/main/java/alice/storage/AliceStorageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.AliceException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Thrown when there is an error in writing, reading or creating the ALICE data file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class AliceStorageException extends AliceException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Constructs a {@code AliceStorageException} with the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * specified detail message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param msg the detail message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public AliceStorageException(String msg) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 18
    }
  },
  {
    "path": "src/main/java/alice/storage/SaveStatus.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public enum SaveStatus {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    SAVE_NOT_APPLICABLE, SAVE_SUCCESS, SAVE_FAILED"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 5
    }
  },
  {
    "path": "src/main/java/alice/storage/StorageFile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.nio.file.StandardOpenOption;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the file used to store the list of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class StorageFile {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Default file path to store ALICE data file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final String DEFAULT_FILE_PATH \u003d \"data/tasks.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private String loadMessage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a StorageFile from the default filePath."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public StorageFile() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this(DEFAULT_FILE_PATH);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a StorageFile from the indicated filePath."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param filePath relative path to the data file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public StorageFile(String filePath) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.filePath \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Loads the data file located at the filePath."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * If file does not exists, create the file and directory to file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return list of encoded tasks in the data file, or null if the data file does not exist."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public List\u003cString\u003e load() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        boolean fileExists \u003d Files.exists(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            if (fileExists) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                // Read from file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                List\u003cString\u003e taskStrings \u003d readFile();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                setLoadStatus(\"Save file loaded\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                return taskStrings;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                // Create data file and directory."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                createFile();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                setLoadStatus(\"New file created\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                assert Files.exists(filePath) : \"File is supposed to be successfully created\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } catch (AliceStorageException ex) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            setLoadStatus(ex.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Set load status message."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private void setLoadStatus(String message) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        loadMessage \u003d message;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Get load status message."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the string depicting the load status message."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String getLoadStatus() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return loadMessage;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Reads the data file located at the filePath."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return list of encoded tasks in the data file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws AliceStorageException if there were errors reading the file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private List\u003cString\u003e readFile() throws AliceStorageException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return Files.readAllLines(filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new AliceStorageException(\"Data file corrupted!\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a new data file at the filePath."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * If the file is nested in another directory, creates the respective directories too."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws AliceStorageException if there were errors creating the file at the path."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private void createFile() throws AliceStorageException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            Files.createDirectories(filePath.getParent());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            Files.createFile(filePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new AliceStorageException(\"File creation failed!\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Writes the encoded list of tasks onto the data file."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param tasks list of encoded tasks to save."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws AliceStorageException if there were errors writing to the file."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void save(List\u003cString\u003e tasks) throws AliceStorageException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            BufferedWriter writer \u003d Files.newBufferedWriter(filePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                writer.write(tasks.get(i));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                writer.newLine();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            writer.flush();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new AliceStorageException(\"File save error!\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Writes the encoded task onto the last line in the data file."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param taskToAdd encoded task to save."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws AliceStorageException if there were errors writing to the file."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void saveToLastLine(String taskToAdd) throws AliceStorageException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assert !taskToAdd.isBlank() : \"Cannot save empty string to data file\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            Files.write(filePath, (taskToAdd + \"\\n\").getBytes(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    StandardOpenOption.APPEND);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new AliceStorageException(\"File save error!\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 147
    }
  },
  {
    "path": "src/main/java/alice/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.AliceException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents a task with a deadline."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final DateTimeFormatter D_DATETIME_FORMAT \u003d DateTimeFormatter"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .ofPattern(\"EEEE, MMM dd uuuu, ha\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final DateTimeFormatter D_DATE_FORMAT \u003d DateTimeFormatter"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .ofPattern(\"EEEE, MMM dd uuuu\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalDateTime by;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final boolean hasTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates an undone task with the specified deadline."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param description describes the task to be done before the deadline."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param by          the latest datetime by which the task should be completed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this(false, description, by);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a task with the specified deadline and completion status."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param isDone      the completion status of the task, true if completed; false otherwise."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param description describes the task to be done before the deadline."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param by          the latest datetime by which the task should be completed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Deadline(boolean isDone, String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        super(isDone, description);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.hasTime \u003d !by.toLocalTime().equals(LocalTime.MIDNIGHT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assert !description.isBlank() : \"Cannot create a Deadline with no description\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Gets the string representation of the deadline by which the task should be completed by."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * If time is not specified by user, the time is omitted from the string representation."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the appropriate string representation of the deadline datetime"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String getDeadlineDateTime() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (hasTime) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            assert !by.toLocalTime().equals(LocalTime.MIDNIGHT) : \"Supposed to have time input\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return by.format(D_DATETIME_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            assert by.toLocalTime().equals(LocalTime.MIDNIGHT) : \"Not supposed to have time input\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return by.format(D_DATE_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Decode an encoded string representation of the {@code Deadline}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param saved the string representation of the encoded task with deadline."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the {@code Deadline} described in the string representation."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws AliceException if the encoded string is corrupted."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static Deadline decode(String saved) throws AliceException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String[] inputs \u003d saved.split(\" \\\\| \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        boolean isDone \u003d inputs[0].equals(\"1\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (inputs.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new Deadline(isDone, inputs[1], LocalDateTime.parse(inputs[2]));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new AliceException(\"Corrupted deadline data\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return \"D | \" + super.encode() + \" | \" + by.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + getDeadlineDateTime() + \")\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 88
    }
  },
  {
    "path": "src/main/java/alice/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.AliceException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents an event."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final DateTimeFormatter E_DATE_FORMAT \u003d DateTimeFormatter"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .ofPattern(\"EEEE, MMM dd uuuu\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final DateTimeFormatter E_DATETIME_FORMAT \u003d DateTimeFormatter"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            .ofPattern(\"EEEE, MMM dd uuuu, ha\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final LocalDateTime on;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final boolean hasTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a undone event happening at the specified time."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param description describes the event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param on          the date and time of the event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Event(String description, LocalDateTime on) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this(false, description, on);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates an event happening at the specified time."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param isDone      the completion status of the event, true if completed; false otherwise."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param description describes the event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param on          the date and time of the event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Event(boolean isDone, String description, LocalDateTime on) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        super(isDone, description);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.on \u003d on;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.hasTime \u003d !on.toLocalTime().equals(LocalTime.MIDNIGHT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assert !description.isBlank() : \"Cannot create an Event with no description\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Gets the string representation of the event date and time."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * If time is not specified by user, the time is omitted from the string representation."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the appropriate string representation of the event datetime."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String getEventDateTime() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (hasTime) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            assert !on.toLocalTime().equals(LocalTime.MIDNIGHT) : \"Supposed to have time input\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return on.format(E_DATETIME_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            assert on.toLocalTime().equals(LocalTime.MIDNIGHT) : \"Not supposed to have time input\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return on.format(E_DATE_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Decode an encoded string representation of the event."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param saved the string representation of the encoded event."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the {@code Event} described in the string representation."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws AliceException if the encoded string is corrupted."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static Event decode(String saved) throws AliceException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String[] inputs \u003d saved.split(\" \\\\| \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        boolean isDone \u003d inputs[0].equals(\"1\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (inputs.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new Event(isDone, inputs[1], LocalDateTime.parse(inputs[2]));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new AliceException(\"Corrupted event data\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return \"E | \" + super.encode() + \" | \" + on.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return \"[E]\" + super.toString() + \" (on: \" + getEventDateTime() + \")\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 88
    }
  },
  {
    "path": "src/main/java/alice/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents a task in ALICE."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a task with the indicated status and specified description."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param isDone      the completion status of the task, true if completed; false otherwise."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param description describes the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Task(boolean isDone, String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if successful; false otherwise."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean markAsDone() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Checks if the task description contains any of the provided keywords."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param keywords the list of keywords to check with."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return true if any keywords matches the task description; false otherwise."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public boolean containKeywords(String... keywords) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assert keywords.length !\u003d 0 : \"Keywords used for checking with task description cannot be empty\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        List\u003cString\u003e descriptionTokens \u003d Arrays.asList(description.split(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return Arrays.stream(keywords).anyMatch(descriptionTokens::contains);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Gets the task description."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the description of the task."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Gets the status completion of the task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return O if the task is completed; X otherwise."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return isDone ? \"\\u2714\" : \"\\u2718\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Encodes the task into a string for saving."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * The task is encoded in a form that ALICE can understand."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the string representation of the encoded task."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return (isDone ? \"1\" : \"0\") + \" | \" + description;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 82
    }
  },
  {
    "path": "src/main/java/alice/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.AliceException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.InvalidCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represent the list of tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a new TaskList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a new TaskList from previously saved tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param encodedTasks list of string of saved tasks from the previous session,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *                     or null if saved data does not exist."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws AliceException if the saved files are corrupted."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public TaskList(List\u003cString\u003e encodedTasks) throws AliceException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (encodedTasks !\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            for (int i \u003d 0; i \u003c encodedTasks.size(); i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                String currTask \u003d encodedTasks.get(i);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                String[] typeAndDetails \u003d currTask.split(\" \\\\| \", 2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                if (typeAndDetails.length !\u003d 2) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    throw new AliceException(\"Corrupted data\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                switch (typeAndDetails[0]) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    tasks.add(Todo.decode(typeAndDetails[1]));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    tasks.add(Deadline.decode(typeAndDetails[1]));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    tasks.add(Event.decode(typeAndDetails[1]));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    throw new AliceException(\"Corrupted data\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Create empty TaskList if encodedTask \u003d\u003d\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Encodes the list of tasks into a list of strings for saving."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * The tasks are encoded in a form that ALICE can understand."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the list of string representation of the encoded tasks."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public List\u003cString\u003e encode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String[] dataToSave \u003d new String[tasks.size()];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            dataToSave[i] \u003d tasks.get(i).encode();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return Arrays.asList(dataToSave);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Gets the string representation of all the tasks."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the string representation of all tasks, or null if there are no tasks."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String getAllTasks() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        StringBuilder s \u003d new StringBuilder();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            s.append(i + 1).append(\". \").append(tasks.get(i)).append(\"\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        s.setLength(s.length() - 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return s.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Searches for all tasks that matches any of the keywords."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param keywords the list of keywords to search against."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the string representation of all tasks that matches."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String find(String... keywords) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assert keywords.length !\u003d 0 : \"Keywords used for find tasks cannot be empty\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        StringBuilder s \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        boolean hasZeroResults \u003d true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            if (tasks.get(i).containKeywords(keywords)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                s.append(i + 1).append(\". \").append(tasks.get(i)).append(\"\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                hasZeroResults \u003d false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (hasZeroResults) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        s.setLength(s.length() - 1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return s.toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Gets the number of tasks in TaskList."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return number of tasks."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public int getNumberOfTasks() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Adds the task to TaskList."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param t the task to be added."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assert !t.getDescription().isBlank() : \"Cannot add a task with empty description\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Marks a task as done."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param index the index indicating the task to be marked as done."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the completed task."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws InvalidCommandException if the index does not point to a task."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Task markTaskAsDone(int index) throws InvalidCommandException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            boolean isOpSuccessful \u003d tasks.get(index).markAsDone();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            if (!isOpSuccessful) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return tasks.get(index);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new InvalidCommandException(\"That task number does not exist.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Deletes a task."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param index the index indicating the task to be deleted."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the deleted task."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws InvalidCommandException if the index does not point to a task."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Task deleteTask(int index) throws InvalidCommandException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return tasks.remove(index);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new InvalidCommandException(\"That task number does not exist.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Clears all tasks."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void clearAllTasks() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        tasks.clear();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 177
    }
  },
  {
    "path": "src/main/java/alice/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.AliceException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents a task to be done by the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates an undone task to be done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param description describes the task to be done."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this(false, description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a todo task with the specified completion status and description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param isDone      the completion status of the task, true if completed; false otherwise."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param description describes the task to be done."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private Todo(boolean isDone, String description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        super(isDone, description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assert !description.isBlank() : \"Cannot create a Todo with no description\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Decode an encoded string representation of the todo task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param saved the string representation of the encoded task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the {@code Todo} task described in the string representation."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws AliceException if the encoded string is corrupted."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static Todo decode(String saved) throws AliceException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String[] inputs \u003d saved.split(\" \\\\| \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        boolean isDone \u003d inputs[0].equals(\"1\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (inputs.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return new Todo(isDone, inputs[1]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            throw new AliceException(\"Corrupted Todo data\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return \"T | \" + super.encode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 56
    }
  },
  {
    "path": "src/main/java/alice/ui/AliceGui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.Alice;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.ui.controller.MainWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the GUI manager for Alice."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class AliceGui extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private Alice alice;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        alice \u003d new Alice();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, alice);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            mainWindow.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 33
    }
  },
  {
    "path": "src/main/java/alice/ui/cli/Cli.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.ui.cli;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents the client line interface of ALICE program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Mainly used for testing purposes."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class Cli {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Scanner sc;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a new user interface to be used by the program."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public Cli() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Prompts and reads user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String readUserInput() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Prompts user"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        System.out.print(\" \u003e \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Prints a divider to separate user input and program output."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void displayLine() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Prints a default welcome message."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void displayWelcomeMsg() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String logo \u003d \" _____  _     _____ _____  _____\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                + \"/  _  \\\\| |   |_   _/  __ \\\\|  ___|\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                + \"| |_| || |     | | | /  \\\\/| |__\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                + \"|  _  || |     | | | |    |  __|\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                + \"| | | || |_____| |_| \\\\__/\\\\| |___\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                + \"\\\\_| |_/\\\\_____/\\\\___/ \\\\____/\\\\____/\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        System.out.println(logo"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                + \"\\nHello! I\u0027m Alice\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                + \"How can I help you today?\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Prints the file loading status message for initialisation of ALICE."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void displayInitMessage(String msg) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        displayOutput(String.format(\"\u003c%s\u003e\", msg));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Prints an error message to the user."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param errorMessage error message to print."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void displayError(String errorMessage) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        System.out.println(\"Oops! \" + errorMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Prints a message to the user."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param outputMessage message to print."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void displayOutput(String outputMessage) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        System.out.println(outputMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 78
    }
  },
  {
    "path": "src/main/java/alice/ui/controller/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.ui.controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.storage.SaveStatus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.scene.control.Tooltip;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents a dialog box consisting of an ImageView to represent the speaker\u0027s face"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * and a label containing text from the speaker."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Image is created by u/Osmeromar as part of \"Me\" telegram sticker pack."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Image USER_AVATAR \u003d new Image(DialogBox.class.getResourceAsStream(\"/images/robo.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    // Image is created by u/Percangelo as part of \"Alice Zuberg\" telegram sticker pack."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static final Image ALICE_AVATAR \u003d new Image(DialogBox.class.getResourceAsStream(\"/images/alice.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private VBox chatBubble;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private HBox chatRow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(this.getClass().getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        ObservableList\u003cNode\u003e nodes \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        FXCollections.reverse(nodes);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        getChildren().setAll(nodes);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        chatBubble.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a user dialog box with the given string input as dialog text."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param text the dialog string given by the user."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the corresponding DialogBox with the user string input."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static DialogBox getUserDialog(String text) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return new DialogBox(text, USER_AVATAR);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates a Alice dialog box with the given string input as dialog text."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param text the dialog string output by Alice."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the corresponding DialogBox representing Alice\u0027s feedback to the user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static DialogBox getAliceDialog(String text) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, ALICE_AVATAR);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        db.chatBubble.setStyle(\"-fx-background-color: darkslateblue; -fx-background-radius: 15\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        HBox.setMargin(db.chatBubble, new Insets(0, 15, 0, 5));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        db.dialog.setTextFill(Paint.valueOf(\"white\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Adds an appropriate save status icon at the bottom of the dialog box."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * The icon is equipped with a tooltip which displays when hovered upon."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * The icon is not added if the saveStatus is of type SAVE_NOT_APPLICABLE"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * as no save process was attempted."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param saveStatus the SaveStatus of the command execution."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void addSaveIndicator(SaveStatus saveStatus) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (saveStatus \u003d\u003d SaveStatus.SAVE_NOT_APPLICABLE) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            // do not add save indicator"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        VBox statusRow \u003d new VBox();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        statusRow.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Circle circle \u003d new Circle();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        circle.setRadius(4);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        circle.setStrokeWidth(0.0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Tooltip tooltip \u003d new Tooltip(\"Saved failed\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (saveStatus \u003d\u003d SaveStatus.SAVE_SUCCESS) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            circle.setFill(Paint.valueOf(\"lawngreen\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            tooltip.setText(\"Save successful\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (saveStatus \u003d\u003d SaveStatus.SAVE_FAILED) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            circle.setFill(Paint.valueOf(\"red\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            tooltip.setText(\"Save failed\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Add tooltip to circle. Tooltip appears on hover with some delay"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Tooltip.install(circle, tooltip);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        statusRow.getChildren().add(circle);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        chatBubble.getChildren().add(statusRow);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        chatBubble.setPadding(new Insets(15, 15, 10, 15));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 126
    }
  },
  {
    "path": "src/main/java/alice/ui/controller/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.ui.controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.Alice;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.result.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class MainWindow {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final Font SYSTEM_FONT \u003d new Font(12);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Stage primaryStage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private final Alice alice;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates the display for the Alice GUI, which contains the main chat interface."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param primaryStage the Stage to place the main layout."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param alice        the Alice program that handles the logic."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws IOException if an error occur during FXML loading."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public MainWindow(Stage primaryStage, Alice alice) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.alice \u003d alice;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(this.getClass().getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        fxmlLoader.setRoot(primaryStage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        fxmlLoader.load();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        primaryStage.getIcons().add(new Image(this.getClass().getResourceAsStream(\"/images/icon.png\")));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Show the stage to the user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Welcomes the user and display the load status of the program\u0027s initialisation."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * This method is called immediately after the class is loaded and constructed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        displaySystemMessage(String.format(\"\u003c%s\u003e\", alice.getLoadStatus()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        welcomeUser();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Alice\u0027s reply and then appends them to the dialog container."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Clears the user input after processing."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getUserDialog(input));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        CommandResult result \u003d alice.processCommand(input);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        DialogBox responseBubble;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (result.isCommandFailure()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            responseBubble \u003d respondToUser(\"ERROR: \" + result.getMessage());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            responseBubble \u003d respondToUser(result.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        if (result.shouldExit()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            exitAlice();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        responseBubble.addSaveIndicator(result.getSaveStatus());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private DialogBox respondToUser(String response) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        DialogBox db \u003d DialogBox.getAliceDialog(response);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        dialogContainer.getChildren().add(db);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private void exitAlice() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Disable any additional input."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        userInput.setOnAction(null);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        sendButton.setOnAction(null);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Set short delay for displaying of exit message."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        PauseTransition delay \u003d new PauseTransition(Duration.seconds(1));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        delay.setOnFinished(event -\u003e primaryStage.close());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        delay.play();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private void welcomeUser() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        respondToUser(\"Hello! I\u0027m Alice\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                + \"How can I help you today?\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private void displaySystemMessage(String message) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Label sysMessage \u003d new Label(message);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        sysMessage.setFont(SYSTEM_FONT);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        sysMessage.setWrapText(true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        sysMessage.setTextFill(Paint.valueOf(\"blue\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        dialogContainer.getChildren().add(sysMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 132
    }
  },
  {
    "path": "src/main/java/alice/util/CheckedFunction.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents a function that accepts one argument and produces a result."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * It can take in function that throws an {@code InvalidCommandException}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * @param \u003cT\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * @param \u003cR\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "@FunctionalInterface"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public interface CheckedFunction\u003cT, R\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    R apply(T t) throws InvalidCommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 15
    }
  },
  {
    "path": "src/main/java/alice/util/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.CommandType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.InvalidCommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " * Represents a parser that makes sense of user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * List of known datetime formats that ALICE accepts."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static final List\u003cDateTimeFormatter\u003e KNOWN_DT_FORMATS \u003d createDateFormats();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Creates the list of formatter that accepts a specified list of known datetime patterns."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return list of DateTimeFormatter with acceptable date time format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    private static List\u003cDateTimeFormatter\u003e createDateFormats() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // List of acceptable date time format with optional time/year"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        List\u003cString\u003e knownPatterns \u003d Arrays.asList("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \"d/M[/uuuu][ HHmm]\", \"d-M[-uuuu][ HHmm]\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \"M/d[/uuuu][ HHmm]\", \"M-d[-uuuu][ HHmm]\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \"uuuu/M/d[ HHmm]\", \"uuuu-M-d[ HHmm]\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \"d-MMM[-uuuu][ HHmm]\", \"d MMM[ HHmm]\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        List\u003cDateTimeFormatter\u003e knownFormats \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Create a formatter for each known patterns to be used for parsing dates"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        for (int i \u003d 0; i \u003c knownPatterns.size(); i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            knownFormats.add("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                            .appendPattern(knownPatterns.get(i))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                            .parseDefaulting(ChronoField.YEAR, LocalDateTime.now().getYear())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                            .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                            .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                            .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                            .toFormatter()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return knownFormats;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Parses the user input into the appropriate commands."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param userInput the input from user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the appropriate command indicated by the user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws InvalidCommandException if the userInput does not match any commands and/or its command signature."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static Command parseCommand(String userInput) throws InvalidCommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Split the userInput into the command word and subsequent command details"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String[] arr \u003d userInput.strip().split(\" \", 2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String cmd \u003d arr[0];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        String argument \u003d arr.length \u003d\u003d 2 ? arr[1] : \"\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Iterate through the command types"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        CommandType[] commands \u003d CommandType.values();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        for (int i \u003d 0; i \u003c commands.length; i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            if (commands[i].hasCommandWord(cmd)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                return commands[i].createCmd(argument);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        throw new InvalidCommandException(\"Sorry I cannot register that command!\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                + \"Use \u0027help\u0027 command to see the lists of available command\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * Parses the datetime input given by the user into the implied {@code LocalDateTime}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @param dateTimeString the user input containing a date and time."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @return the {@code LocalDateTime} indicated by the user input."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     * @throws InvalidCommandException if the datetime input given by the user does not match any known patterns."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public static LocalDateTime parseDateTime(String dateTimeString) throws InvalidCommandException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        for (int i \u003d 0; i \u003c KNOWN_DT_FORMATS.size(); i++) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                return LocalDateTime.parse(dateTimeString, KNOWN_DT_FORMATS.get(i));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                // Ignore exception, fall through expected"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        throw new InvalidCommandException(\"Invalid datetime! Please use 24h format for time\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 97
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003cfx:root fx:id\u003d\"chatRow\" alignment\u003d\"CENTER_RIGHT\" fillHeight\u003d\"false\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "         spacing\u003d\"5.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        \u003cVBox fx:id\u003d\"chatBubble\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"-Infinity\" spacing\u003d\"5.0\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "              style\u003d\"-fx-background-color: skyblue; -fx-background-radius: 15;\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u003cInsets left\u003d\"15.0\" right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u003cDropShadow blurType\u003d\"GAUSSIAN\" color\u003d\"#9c9a9a\" height\u003d\"16.23\" radius\u003d\"9.9625\" width\u003d\"25.62\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u003cLabel fx:id\u003d\"dialog\" lineSpacing\u003d\"5.0\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                        \u003cFont name\u003d\"Lucida Fax Regular\" size\u003d\"12.0\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 36
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.Group?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.paint.LinearGradient?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.paint.Stop?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003cfx:root iconified\u003d\"true\" minHeight\u003d\"600.0\" minWidth\u003d\"500.0\" title\u003d\"Alice\" type\u003d\"Stage\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            \u003croot\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                            prefHeight\u003d\"600.0\" prefWidth\u003d\"500.0\" style\u003d\"-fx-background-color: lightblue;\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                        \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"5.0\" layoutY\u003d\"558.0\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                   minWidth\u003d\"-Infinity\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\" prefWidth\u003d\"450.0\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                   promptText\u003d\"Enter your command here...\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                   style\u003d\"-fx-background-radius: 17; -fx-border-radius: 15; -fx-background-color: white; -fx-border-color: slategray; -fx-border-width: 2;\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                   AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"5.0\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                   AnchorPane.rightAnchor\u003d\"45.0\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                            \u003cfont\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                \u003cFont name\u003d\"Lucida Console\" size\u003d\"12.0\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                            \u003c/font\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                \u003cInsets left\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                        \u003c/TextField\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"464.0\" layoutY\u003d\"566.0\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                minWidth\u003d\"-Infinity\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                prefHeight\u003d\"25.0\" prefWidth\u003d\"25.0\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                style\u003d\"-fx-shape: \u0026quot;M 700 350 L 200 175 L 200 325 L 550 350 L 200 375 L 200 525 Z\u0026quot;; -fx-background-color: black;\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                textFill\u003d\"#0b06a2\" AnchorPane.bottomAnchor\u003d\"8.399999999999977\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                AnchorPane.rightAnchor\u003d\"10.399999999999977\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                            \u003cfont\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                \u003cFont name\u003d\"Lucida Fax Demibold\" size\u003d\"13.0\"/\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                            \u003c/font\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                        \u003c/Button\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                        \u003cScrollPane fx:id\u003d\"scrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                    hvalue\u003d\"1.0\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                    minWidth\u003d\"-Infinity\" prefHeight\u003d\"557.0\" prefWidth\u003d\"600.0\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                    style\u003d\"-fx-base: aliceblue;\" vvalue\u003d\"1.0\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                    AnchorPane.bottomAnchor\u003d\"42.39999999999998\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                    AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                \u003cVBox fx:id\u003d\"dialogContainer\" alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                      prefWidth\u003d\"585.0\" spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                        \u003cHBox alignment\u003d\"CENTER\" prefHeight\u003d\"100.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                \u003cGroup\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                        \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"ALICE\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                            \u003cfont\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                                \u003cFont name\u003d\"Snap ITC\" size\u003d\"69.0\"/\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                            \u003c/font\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                            \u003cfill\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                                \u003cLinearGradient endX\u003d\"1.0\" endY\u003d\"1.0\" startX\u003d\"1.0\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                                                startY\u003d\"0.05725190839694656\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                                    \u003cstops\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                                        \u003cStop color\u003d\"#050506\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                                        \u003cStop color\u003d\"#050506\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                                              offset\u003d\"0.007633587786259542\"/\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                                        \u003cStop color\u003d\"#0b06a2\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                                              offset\u003d\"0.7984441466115025\"/\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                                        \u003cStop color\u003d\"#0b06a2\" offset\u003d\"1.0\"/\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                                    \u003c/stops\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                                \u003c/LinearGradient\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                            \u003c/fill\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                        \u003c/Text\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                        \u003cText layoutX\u003d\"128.0\" layoutY\u003d\"22.0\" strokeType\u003d\"OUTSIDE\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                              strokeWidth\u003d\"0.0\" text\u003d\"Leave your tasks to me!\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                              textAlignment\u003d\"RIGHT\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                            \u003cfont\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                                \u003cFont name\u003d\"Gabriola\" size\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                            \u003c/font\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                        \u003c/Text\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                \u003c/Group\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                            \u003c/children\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                                \u003cInsets/\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                        \u003cInsets bottom\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "            \u003c/root\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 107
    }
  },
  {
    "path": "src/test/java/alice/AliceTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class AliceTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 12
    }
  },
  {
    "path": "src/test/java/alice/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.command.InvalidCommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.util.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    void parseDateTimeTest() throws InvalidCommandException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        LocalDateTime dateTime \u003d Parser.parseDateTime(\"12-Aug 1350\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(LocalDateTime.of(2020, 8, 12, 13, 50), dateTime);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 18
    }
  },
  {
    "path": "src/test/java/alice/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.AliceException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.task.stub.TodoStub;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    void addTaskTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(0, tasks.getNumberOfTasks());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        tasks.addTask(new TodoStub());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(1, tasks.getNumberOfTasks());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    void loadSavedTasks() throws AliceException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        List\u003cString\u003e encodedTasks \u003d List.of(\"T | 1 | Task\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        TaskList tasks \u003d new TaskList(encodedTasks);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(1, tasks.getNumberOfTasks());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(\"1. [T][✔] Task\", tasks.getAllTasks());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 30
    }
  },
  {
    "path": "src/test/java/alice/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    void testStringConversion() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Task task \u003d new Task(false, \"TaskTest\") {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        };"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // test toString"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(task.toString(), \"[✘] TaskTest\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // test encode"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(task.encode(), \"0 | TaskTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    void testMarkAsDone() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Task task \u003d new Task(false, \"TaskTest\") {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        };"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // test toString"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(task.toString(), \"[✔] TaskTest\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // test encode"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(task.encode(), \"1 | TaskTest\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    void testContainKeywords() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Task task \u003d new Task(false, \"Key1 Key2 Key3\") {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        };"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Search 1 keyword"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(task.containKeywords(\"Key1\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Search by multiple keywords"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertTrue(task.containKeywords(\"InvalidKey\", \"Key3\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // Keyword not found"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertFalse(task.containKeywords(\"InvalidKey\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 46
    }
  },
  {
    "path": "src/test/java/alice/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    void testStringConversion() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        Task task \u003d new Todo(\"Test\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // test toString"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(task.toString(), \"[T][✘] Test\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        // test encode"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        assertEquals(task.encode(), \"T | 0 | Test\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 17
    }
  },
  {
    "path": "src/test/java/alice/task/stub/TodoStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "package alice.task.stub;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "import alice.task.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "public class TodoStub extends Todo {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public TodoStub() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        super(\"TodoStub\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "        return \"TodoStub\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 14
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "clear"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "ls"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "deadline return book /by 14-Dec 0200"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "event project meeting /on 03/12/2019"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "deadline homework /by 02-Aug-2020 2359"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "find book"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "search book meeting"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "blah"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "done one"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "todo"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "deadline fake deadline /by"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "deadline unrecognised datetime /by Monday"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "deadline hello"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "event"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "event fake event /on"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "event hello"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "todo return book"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "ls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "help"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "delete one"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 32
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "REM create bin directory"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "rmdir /s /q ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "mkdir ..\\bin"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "dir /s /B ..\\src\\main\\java\\alice\\*.java \u003e sources.txt"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "javac -cp ..\\src -Xlint:none -d ..\\bin @sources.txt"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "java -classpath ..\\bin Launcher \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 7,
      "-": 17
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/alice/Alice.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "java -classpath ../bin alice.Alice -cli \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 2,
      "-": 36
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\Alice.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\AliceException.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\Launcher.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\command\\ByeCommand.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\command\\ClearCommand.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\command\\Command.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\command\\DeadlineCommand.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\command\\DeleteCommand.java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\command\\DoneCommand.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\command\\EventCommand.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\command\\FindCommand.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\command\\HelpCommand.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\command\\InvalidCommandException.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\command\\ListCommand.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\command\\TodoCommand.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\command\\result\\ByeCommandResult.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\command\\result\\ClearCommandResult.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\command\\result\\CommandResult.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\command\\result\\DeadlineCommandResult.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\command\\result\\DeleteCommandResult.java"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\command\\result\\DoneCommandResult.java"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\command\\result\\EventCommandResult.java"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\command\\result\\FindCommandResult.java"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\command\\result\\HelpCommandResult.java"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\command\\result\\InvalidCommandResult.java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\command\\result\\ListCommandResult.java"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\command\\result\\TodoCommandResult.java"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\storage\\AliceStorageException.java"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\storage\\SaveStatus.java"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\storage\\StorageFile.java"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\task\\Deadline.java"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\task\\Event.java"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\task\\Task.java"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\task\\TaskList.java"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\task\\Todo.java"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\ui\\AliceGui.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\ui\\cli\\Cli.java"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\ui\\controller\\DialogBox.java"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\ui\\controller\\MainWindow.java"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JinHao-L"
        },
        "content": "C:\\Users\\JinHao\\Desktop\\ip\\src\\main\\java\\alice\\util\\Parser.java"
      }
    ],
    "authorContributionMap": {
      "JinHao-L": 40
    }
  }
]
