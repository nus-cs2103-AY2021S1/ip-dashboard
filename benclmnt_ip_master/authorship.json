[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    mainClassName \u003d \"main.java.Main\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 16,
      "-": 45
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "T | 1 | read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "D | 0 | return book | 2020-06-06"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "E | 0 | project meeting | 2020-08-06"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "T | 1 | join sports club"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 4
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 7
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import ui.MainWindow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            scene.getStylesheets().add(\"/view/main.css\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 28
    }
  },
  {
    "path": "src/main/java/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Implements the Command object created when user quits the application"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Shows close message"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param tasks   current task list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param ui      text ui interface"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param storage storage file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public CommandResult execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return new CommandResult(ui.showCloseMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 27
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Parent class of all supported commands"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Implements the execution of the command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param tasks   current task list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param ui      text ui interface"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param storage storage file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public abstract CommandResult execute(TaskList tasks, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 24
    }
  },
  {
    "path": "src/main/java/command/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    protected String result;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public CommandResult(String result) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.result \u003d result;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public String getResult() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 13
    }
  },
  {
    "path": "src/main/java/command/CommandTypes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public enum CommandTypes {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    BYE,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    LIST,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    DONE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    VIEWALL,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    FIND,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 13
    }
  },
  {
    "path": "src/main/java/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Add a new deadline into the task list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public DeadlineCommand(Deadline deadline) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Insert a new deadline into tasklist, and save it to storage file"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param tasks   current task list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param ui      text ui interface"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param storage storage file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public CommandResult execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        tasks.add(deadline);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        int size \u003d tasks.size();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return new CommandResult(ui.printAddConfirmation(tasks.show(size - 1), size));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 33
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Remove a task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public DeleteCommand(int taskNumber) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Removes a specific task from task list and save the changes to storage file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param tasks   current task list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param ui      text ui interface"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param storage storage file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public CommandResult execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // Check that the task number makes sense."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (taskNumber \u003e\u003d 0 \u0026\u0026 taskNumber \u003c tasks.size()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            String removedTask \u003d tasks.remove(taskNumber).showTask();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            ui.print(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            ui.print(removedTask);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            ui.print(String.format(\"Now you have %d %s in the list\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                    tasks.size(), tasks.size() \u003e 1 ? \"tasks\" : \"task\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                    \"Noted. I\u0027ve removed this task: \\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                            + removedTask + \"\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                            + String.format(\"Now you have %d %s in the list\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                            tasks.size(), tasks.size() \u003e 1 ? \"tasks\" : \"task\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            ui.print(\"Sorry, I can\u0027t find it in your list!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return new CommandResult(\"Sorry, I can\u0027t find it in your list!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 45
    }
  },
  {
    "path": "src/main/java/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Mark a task done"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public DoneCommand(int taskNumber) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Mark a specific task as done and save it to storage file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param tasks   current task list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param ui      text ui interface"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param storage storage file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public CommandResult execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // Check that the task number makes sense."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (taskNumber \u003e\u003d 0 \u0026\u0026 taskNumber \u003c tasks.size()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            tasks.markAsDone(taskNumber);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            ui.print(\"Good job! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            ui.print(tasks.show(taskNumber));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                    \"Good job! I\u0027ve marked this task as done: \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                            + tasks.show(taskNumber)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            ui.print(\"Sorry, I can\u0027t find it in your list!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return new CommandResult(\"Sorry, I can\u0027t find it in your list!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 42
    }
  },
  {
    "path": "src/main/java/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Add a new event into the task list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public EventCommand(Event event) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Insert an event into the task list and save it in the storage file"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param tasks   current task list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param ui      text ui interface"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param storage storage file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public CommandResult execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        tasks.add(event);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        int size \u003d tasks.size();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return new CommandResult(ui.printAddConfirmation(tasks.show(size - 1), size));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 33
    }
  },
  {
    "path": "src/main/java/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public CommandResult execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        TaskList filtered \u003d taskList.find(keyword);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        ui.print(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String response \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        for (int i \u003d 0; i \u003c filtered.size(); i++) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            ui.print(String.format(\"%d. %s\", i + 1, filtered.show(i)));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            response +\u003d String.format(\"%d. %s%n\", i + 1, filtered.show(i));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return new CommandResult(response);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 25
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * List all tasks in the current task list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * List all tasks saved in the current task list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param tasks   current task list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param ui      text ui interface"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param storage storage file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public CommandResult execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        ui.print(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String response \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            ui.print(String.format(\"%d. %s\", i + 1, tasks.show(i)));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            response +\u003d String.format(\"%d. %s%n\", i + 1, tasks.show(i));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return new CommandResult(response);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 28
    }
  },
  {
    "path": "src/main/java/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Insert a new todo into current task list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private Todo todo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public TodoCommand(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Insert a new todo into the current task list and save it to the storage file"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param tasks   current task list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param ui      text ui interface"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param storage storage file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public CommandResult execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        tasks.add(this.todo);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        int size \u003d tasks.size();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return new CommandResult(ui.printAddConfirmation(tasks.show(size - 1), size));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 33
    }
  },
  {
    "path": "src/main/java/command/ViewallCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * View all tasks in the current task list based on a certain date"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class ViewallCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public ViewallCommand(LocalDate date) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * View all tasks in the current task list based on a certain date"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param tasks   current task list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param ui      text ui interface"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param storage storage file"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public CommandResult execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        TaskList filtered \u003d tasks.viewAll(date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        ui.print(\"Here are the tasks on given date:\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String response \u003d \"Here are the tasks on given date:\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        for (int i \u003d 0; i \u003c filtered.size(); i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            ui.print(String.format(\"%d. %s\", i + 1, filtered.show(i)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            response +\u003d String.format(\"%d. %s%n\", i + 1, filtered.show(i));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return new CommandResult(response);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 37
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import exception.InvalidUsageException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import exception.StorageException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import exception.UnknownCommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Main class for the Duke application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    // current task list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    // storage file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    // text ui interface"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Constructor for Duke application"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (StorageException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Main method to start the application"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        ui.showWelcomeMessage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            String input \u003d ui.readCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            ui.buildChatFence();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            // handle commands"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                Command command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                command.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            } catch (InvalidUsageException | UnknownCommandException ex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                ui.print(ex.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                ui.buildChatFence();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        CommandResult response;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            Command command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            response \u003d command.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (InvalidUsageException | UnknownCommandException ex) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            ui.print(ex.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            response \u003d new CommandResult(ex.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            ui.buildChatFence();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return response.getResult();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 71
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import command.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import command.CommandTypes;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import command.DeadlineCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import command.EventCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import command.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import command.TodoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import command.ViewallCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import exception.DeadlineInvalidUsageException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import exception.EventInvalidUsageException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import exception.InvalidUsageException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import exception.TodoInvalidUsageException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import exception.UnknownCommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import exception.ViewallInvalidUsageException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Represents parser class to parse user commands"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Main method to call to parse user commands"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param input user commands"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @return a {@code Command} object representing user actions"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @throws InvalidUsageException   on malformed commands"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @throws UnknownCommandException on unsupported command types"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static Command parseCommand(String input) throws InvalidUsageException, UnknownCommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String[] commands \u003d parseInput(input);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        CommandTypes command;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            // modify parsed[0] to uppercase to ensure that comparison with the commands enum is standardized"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            command \u003d CommandTypes.valueOf(commands[0].toUpperCase());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            // if parsed[0] not amongst valid commands, will throw an IllegalArgumentException"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new UnknownCommandException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            // we ignore the argument after `list`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                int taskNumber \u003d Integer.parseInt(commands[1]) - 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                return new DoneCommand(taskNumber);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            } catch (NumberFormatException | ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                throw new InvalidUsageException(\"Usage: done \u003ctask number\u003e\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                int taskNumber \u003d Integer.parseInt(commands[1]) - 1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                return new DeleteCommand(taskNumber);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            } catch (NumberFormatException | ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                throw new InvalidUsageException(\"Usage: delete \u003ctask number\u003e\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                return new TodoCommand(commands[1]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                throw new TodoInvalidUsageException(\"Todo description cannot be empty.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                String[] parsedDeadline \u003d commands[1].split(\"\\\\s*/by\\\\s*\", 2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                if (parsedDeadline.length \u003c 2) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                    throw new DeadlineInvalidUsageException(\"Please re-check your command format!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                if (parsedDeadline[0].equals(\"\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                    throw new DeadlineInvalidUsageException(\"Deadline description cannot be empty.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                    Deadline deadline \u003d Deadline.create(parsedDeadline[0], parsedDeadline[1]);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                    return new DeadlineCommand(deadline);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                    throw new DeadlineInvalidUsageException(\"Deadline date must be of the form yyyy-mm-dd.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                throw new DeadlineInvalidUsageException(\"Deadline description cannot be empty.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                String[] parsedEvent \u003d commands[1].split(\"\\\\s*/at\\\\s*\", 2);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                if (parsedEvent.length \u003c 2) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                    throw new EventInvalidUsageException(\"Please re-check your command format!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                if (parsedEvent[0].equals(\"\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                    throw new EventInvalidUsageException(\"Event description cannot be empty.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                    Event event \u003d Event.create(parsedEvent[0], parsedEvent[1]);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                    return new EventCommand(event);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                    throw new EventInvalidUsageException(\"Deadline date must be of the form yyyy-mm-dd.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                throw new EventInvalidUsageException(\"Event description cannot be empty.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        case VIEWALL:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                LocalDate date \u003d LocalDate.parse(commands[1]);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                return new ViewallCommand(date);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException | DateTimeException ex) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                throw new ViewallInvalidUsageException(\"Date should be in yyyy-mm-dd format.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                return new FindCommand(commands[1]);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                throw new InvalidUsageException(\"Usage: find \u003ckeyword\u003e\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new UnknownCommandException();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Split the input string into first word (command) and others"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @return an array, first element is command, second element is input"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private static String[] parseInput(String input) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return input.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 145
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import exception.DeadlineInvalidUsageException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import exception.EventInvalidUsageException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import exception.StorageException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Represents the storage file that handles storage operations"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static final String DEFAULT_STORAGE_FILEPATH \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public final Path path;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this(DEFAULT_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Loads file from storage file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @return a list of task saved in storage file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @throws StorageException on I/O error or parse error"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public List\u003cTask\u003e load() throws StorageException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            createFileIfNotExists(path);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            // read from file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            BufferedReader br \u003d Files.newBufferedReader(path);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            br.lines().forEach(line -\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                    Task task \u003d parseStorageData(line);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                    tasks.add(task);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                } catch (StorageException ex) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                    System.out.println(ex.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new StorageException(\"Error writing to file: \" + path);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Save tasks to storage file"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param tasks a list of task to save"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @return true indicating storage is updated, or false indicating storage fails to update"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public boolean save(TaskList tasks) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            BufferedWriter bw \u003d Files.newBufferedWriter(Path.of(\"data/duke.txt\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            for (Task task : tasks.getAll()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                String storeFormat \u003d String.format("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                        \"%s | %d | %s\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                        task.getType(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                        task.getStatus() ? 1 : 0,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                        task.getDescription()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                );"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                bw.write(storeFormat);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                bw.newLine();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Create storage file (and parent folders)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param path file string"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @throws IOException on I/O error"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private void createFileIfNotExists(Path path) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Path folderPath \u003d Path.of(\"data\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Path filePath \u003d folderPath.resolve(\"duke.txt\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // create folders containing the file and its parents"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Files.createDirectories(folderPath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            Files.createFile(filePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Parse storage data by the following format task_type | task_status | task_description | task_date(optional)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param line lines in storage file"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @return {@code Task} object represented by the line"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @throws StorageException on parse error"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private Task parseStorageData(String line) throws StorageException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        // split by the pipe `|` token"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String[] tokens \u003d line.split(\"(\\\\s)*(\\\\|)(\\\\s)*\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            switch (tokens[0]) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                task \u003d new Todo(tokens[2]);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                task \u003d Deadline.create(tokens[2], tokens[3]);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                task \u003d Event.create(tokens[2], tokens[3]);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                throw new StorageException(\"Unknown task identifier \" + tokens[0] + \"! Skipping...\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            if (tokens[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                task.markAsDone();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new StorageException(\"Data\" + line + \"in wrong format! Skipping...\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (EventInvalidUsageException | DeadlineInvalidUsageException ex) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new StorageException(ex.getMessage());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 147
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Represents a {@code Tasklist} object to store tasks in memory"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private final List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public TaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public Task add(Task task) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Removes a specific task based on task number"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param taskNumber task index"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @return removed task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public Task remove(int taskNumber) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return taskList.remove(taskNumber);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Marks a task as done"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param taskNumber task index"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @return updated task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public Task markAsDone(int taskNumber) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        taskList.get(taskNumber).markAsDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return taskList.get(taskNumber);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Show task description"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param taskNumber task index"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @return string description of task showing status, type and task description"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public String show(int taskNumber) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return taskList.get(taskNumber).showTask();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Get all tasks stored"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @return list of tasks stored"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public List\u003cTask\u003e getAll() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Get number of tasks stored"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @return size of taskList"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Returns a task list containing all tasks on the date"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param date date in ISO-8601 format"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @return all tasks on 1 date"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public TaskList viewAll(LocalDate date) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return new TaskList("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                this.taskList"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                        .filter(x -\u003e ("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                                x instanceof Event \u0026\u0026 ((Event) x).getDate().equals(date))"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                                || (x instanceof Deadline \u0026\u0026 ((Deadline) x).getDate().equals(date)))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                        .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Find all tasks that contain a specific keyword"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param keyword user-inputted keyword"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @return a Tasklist containing all tasks that contain a specific keyword"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public TaskList find(String keyword) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return new TaskList("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                this.taskList"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                        .filter(x -\u003e x.getDescription().contains(keyword))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                        .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 104
    }
  },
  {
    "path": "src/main/java/exception/DeadlineInvalidUsageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class DeadlineInvalidUsageException extends InvalidUsageException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public DeadlineInvalidUsageException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return super.getMessage() + \"\\n     Usage: deadline \u003cdeadline description\u003e /by \u003cdeadline date\u003e\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 12
    }
  },
  {
    "path": "src/main/java/exception/EventInvalidUsageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class EventInvalidUsageException extends InvalidUsageException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public EventInvalidUsageException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return super.getMessage() + \"\\n     Usage: event \u003cevent description\u003e /at \u003cevent date\u003e\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 12
    }
  },
  {
    "path": "src/main/java/exception/InvalidUsageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class InvalidUsageException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public InvalidUsageException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        super(\"     \" + message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return \"Invalid usage!\\n\" + super.getMessage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 12
    }
  },
  {
    "path": "src/main/java/exception/StorageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class StorageException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public StorageException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        super(\"StorageException: \" + message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 7
    }
  },
  {
    "path": "src/main/java/exception/TodoInvalidUsageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class TodoInvalidUsageException extends InvalidUsageException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public TodoInvalidUsageException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return super.getMessage() + \"\\n     Usage: todo \u003ctodo description\u003e\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 12
    }
  },
  {
    "path": "src/main/java/exception/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class UnknownCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return \"I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 8
    }
  },
  {
    "path": "src/main/java/exception/ViewallInvalidUsageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class ViewallInvalidUsageException extends InvalidUsageException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public ViewallInvalidUsageException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return super.getMessage() + \"\\n     Usage: Viewall \u003cdate\u003e\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 12
    }
  },
  {
    "path": "src/main/java/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import exception.DeadlineInvalidUsageException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private Deadline(String description, LocalDate by) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Factory method for {@code Deadline} object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param deadline deadline description"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param by       deadline date in ISO-8601 format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @return the Deadline object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @throws DeadlineInvalidUsageException on empty description or wrong date format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static Deadline create(String deadline, String by) throws DeadlineInvalidUsageException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (deadline.equals(\"\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new DeadlineInvalidUsageException(\"Deadline description cannot be empty.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return new Deadline(deadline, parseDate(by));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new DeadlineInvalidUsageException(\"Deadline date must be of the form yyyy-mm-dd.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private static LocalDate parseDate(String str) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return LocalDate.parse(str);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private static String showDate(LocalDate date) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"MMM d, yyyy\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Show task\u0027s name and status"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @return a string that represents the task"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public String showTask() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return String.format(\"[%s]%s (by: %s)\", this.getType(), super.showTask(), showDate(this.by));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return super.getDescription() + \" | \" + this.by;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 68
    }
  },
  {
    "path": "src/main/java/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import exception.EventInvalidUsageException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Represents an {@code Event} object. Inherits from {@code Task} object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    protected LocalDate at;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private Event(String description, LocalDate at) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Factory method for {@code Event} object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param event event description"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param at    event date in ISO-8601 format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @return the Event object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @throws EventInvalidUsageException on empty description or wrong date format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static Event create(String event, String at) throws EventInvalidUsageException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (event.equals(\"\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new EventInvalidUsageException(\"Event description cannot be empty.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return new Event(event, parseDate(at));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            throw new EventInvalidUsageException(\"Event date must be of the form yyyy-mm-dd.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private static LocalDate parseDate(String str) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return LocalDate.parse(str);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private static String showDate(LocalDate date) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"MMM d, yyyy\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Show task\u0027s name and status"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @return a string that represents the task"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public String showTask() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return String.format(\"[%s]%s (at: %s)\", this.getType(), super.showTask(), showDate(this.at));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return super.getDescription() + \" | \" + this.at;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 71
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    Task(String name) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Show task\u0027s name and status"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @return a string that represents the task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public String showTask() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), this.name);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public abstract String getType();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Mark the task as done"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @return true if it is not done before, otherwise false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public boolean markAsDone() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    //    private String getStatusIcon() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "//        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return (isDone ? \"V\" : \"X\"); //return tick or X symbols"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 53
    }
  },
  {
    "path": "src/main/java/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Show task\u0027s name and status"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @return a string that represents the task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public String showTask() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return String.format(\"[%s]%s\", this.getType(), super.showTask());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 23
    }
  },
  {
    "path": "src/main/java/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private TextFlow dialog;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Text response \u003d new Text(text);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        response.setFont(new Font(13));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        dialog.getChildren().addAll(response);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        dialog.setLineSpacing(1.15);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        dialog.setTranslateX(-5);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        dialog.setTextAlignment(TextAlignment.RIGHT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        displayPicture.setClip(new Circle(50, 50, 49));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        this.setTranslateX(40);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        db.setTranslateX(0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        db.dialog.setStyle(\"-fx-background-radius: 0px 10px 10px 10px\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        db.dialog.setTranslateX(5);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        db.dialog.setTextAlignment(TextAlignment.LEFT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 77
    }
  },
  {
    "path": "src/main/java/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 52
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " * Represents the text ui interface"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Read user commands"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @return user command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        if (sc.hasNext()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return sc.nextLine();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Prints chatbot response"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param message chatbot response"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void print(String message) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        System.out.print(\"     \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Build line separator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void buildChatFence() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        print(\"----------------------------------------\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Show welcome message"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public String showWelcomeMessage() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        buildChatFence();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        print(\"Hellowww!! I\u0027m Alexa, your personal todo manager!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        print(\"How can I help you today?\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        buildChatFence();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return \"Hellowww!! I\u0027m Alexa, your personal todo manager!\\nHow can I help you today?\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Show close message"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public String showCloseMessage() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        print(\"Bye? I hope it\u0027s not forever! Come back soon!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return \"Bye? I hope it\u0027s not forever! Come back soon!\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * Show message when user adds a new todo, deadline or event"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param message string to print"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     * @param size    task list current size"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public String printAddConfirmation(String message, int size) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        print(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        print(message);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        print(String.format(\"Now you have %d %s in the list\", size, size \u003e 1 ? \"tasks\" : \"task\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        return \"Got it. I\u0027ve added this task:\\n\" "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + message + \"\\n\" "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                + String.format(\"Now you have %d %s in the list\", size, size \u003e 1 ? \"tasks\" : \"task\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 79
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "         maxWidth\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "         prefWidth\u003d\"350.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "         styleClass\u003d\"responseContainer\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    \u003cTextFlow fx:id\u003d\"dialog\" styleClass\u003d\"dialog\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "               styleClass\u003d\"displayPicture\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 17
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            fx:controller\u003d\"ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "               AnchorPane.bottomAnchor\u003d\"1.0\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "                vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 19
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import command.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import command.DeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import command.EventCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import command.TodoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import command.ViewallCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import exception.DeadlineInvalidUsageException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import exception.EventInvalidUsageException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import exception.InvalidUsageException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import exception.UnknownCommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import exception.ViewallInvalidUsageException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    void unknownCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String input \u003d \"test\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            Command c \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            assertTrue(ex instanceof UnknownCommandException);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void parseBye_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String input \u003d \"bye\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            assertTrue(Parser.parseCommand(input) instanceof ByeCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            fail(\"Exception should not be thrown\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void parseList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String input \u003d \"list\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            assertTrue(Parser.parseCommand(input) instanceof ListCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            fail(\"Exception should not be thrown\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void parseDone_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String input \u003d \"done 1\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            assertTrue(Parser.parseCommand(input) instanceof DoneCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            fail(\"Exception should not be thrown\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void parseDone_missingTaskNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String input \u003d \"done\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            Command c \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            assertTrue(ex instanceof InvalidUsageException);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void parseDone_invalidTaskNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String input \u003d \"done asdf\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            Command c \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            assertTrue(ex instanceof InvalidUsageException);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void parseDelete_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String input \u003d \"delete 1\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            assertTrue(Parser.parseCommand(input) instanceof DeleteCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            fail(\"Exception should not be thrown\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void parseDelete_missingTaskNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String input \u003d \"delete\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            Command c \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            assertTrue(ex instanceof InvalidUsageException);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void parseDelete_invalidTaskNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String input \u003d \"delete asdf\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            Command c \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            assertTrue(ex instanceof InvalidUsageException);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void parseTodo_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String input \u003d \"todo return book\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            assertTrue(Parser.parseCommand(input) instanceof TodoCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            fail(\"Exception should not be thrown\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void parseTodo_missingDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String input \u003d \"todo\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            Command c \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            assertTrue(ex instanceof InvalidUsageException);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void parseEvent_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String input \u003d \"event my birthday /at 2020-08-25\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            assertTrue(Parser.parseCommand(input) instanceof EventCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            fail(\"Exception should not be thrown\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void parseEvent_missingDate_exceptionThrown() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String input \u003d \"event my birthday /at\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            Command c \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            assertTrue(ex instanceof EventInvalidUsageException);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void parseEvent_wrongDateSeparator_exceptionThrown() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String input \u003d \"event my birthday /by 2020-08-25\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            Command c \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            assertTrue(ex instanceof EventInvalidUsageException);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void parseEvent_wrongDateFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String input \u003d \"event my birthday /at 25/08/2020\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            Command c \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            assertTrue(ex instanceof EventInvalidUsageException);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void parseDeadline_success() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String input \u003d \"deadline finish level 6 /by 2020-08-25\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            assertTrue(Parser.parseCommand(input) instanceof DeadlineCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            fail(\"Exception should not be thrown\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void parseDeadline_missingDate_exceptionThrown() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String input \u003d \"deadline finish level 6 /by\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            Command c \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            assertTrue(ex instanceof DeadlineInvalidUsageException);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void parseDeadline_wrongDateSeparator_exceptionThrown() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String input \u003d \"deadline finish level 6 /at\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            Command c \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            assertTrue(ex instanceof DeadlineInvalidUsageException);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void parseDeadline_wrongDateFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String input \u003d \"deadline finish level 6 /at 19/08/2020\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            Command c \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            assertTrue(ex instanceof DeadlineInvalidUsageException);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void parseViewAll_success() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String input \u003d \"viewall 2020-08-20\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            assertTrue(Parser.parseCommand(input) instanceof ViewallCommand);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            fail(\"Exception should not be thrown\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void parseViewAll_wrongDateFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String input \u003d \"viewall 2020-08-20\";"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            Command c \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            assertTrue(ex instanceof ViewallInvalidUsageException);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void parseViewAll_missingDate_exceptionThrown() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        String input \u003d \"viewall\";"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            Command c \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "            assertTrue(ex instanceof ViewallInvalidUsageException);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 243
    }
  },
  {
    "path": "src/test/java/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    TaskList taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void initEach() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        List\u003cTask\u003e task \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        task.add(new Todo(\"borrow book\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        task.add(new Todo(\"return book\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        taskList \u003d new TaskList(task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void addTask() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        taskList.add(new Todo(\"help a friend\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertEquals(taskList.size(), 3);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benclmnt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    public void removeTask() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        taskList.remove(1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "        assertEquals(taskList.size(), 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 35
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "deadline do homework /by no idea :-p"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "list"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 9
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Main.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benclmnt"
        },
        "content": "java -classpath ..\\bin Main \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "benclmnt": 2,
      "-": 19
    }
  }
]
