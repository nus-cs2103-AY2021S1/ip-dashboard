[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 16,
      "-": 45
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 59
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import processor.UI;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private boolean isWorking;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Constructor for this object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.isWorking \u003d true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Checks if Duke is working."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return working status of Duke. False if Duke have not terminated, true otherwise."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public boolean isWorking() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return this.isWorking;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns the repsonse to a given command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param input command entered by user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return response processed by UI"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    String getResponse(String input) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        String reply \u003d this.ui.interact(input);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (ui.getDoneStatus()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            this.isWorking \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return reply;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 35,
      "-": 3
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 29
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import processor.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.jpg\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.jpg\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Initialises the main window"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        String greeting \u003d UI.getGreeting();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                DialogBox.getDukeDialog(greeting, dukeImage)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Sets this object\u0027s duke to the inputted duke"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Checks if Duke is still working and perform relevant action."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * If Duke is working, creates dialog boxes else do nothing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Clears the user input after processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (this.duke.isWorking()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            displayDialog();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * the dialog container."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private void displayDialog() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 73
    }
  },
  {
    "path": "src/main/java/exception/DateTimeInvalidFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Encapsulates the message of an exception or error related to Duke\u0027s operation."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *  It is to be thrown when extracting date and time from user\u0027s command input of"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *  incorrect format."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003eThe \u0027DateTimeInvalidFormatException\u0027 supports operators, supported include: \u003c/p\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003e (i) Getters to error message \u003c/p\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class DateTimeInvalidFormatException extends InvalidActionException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Constructor of this object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public DateTimeInvalidFormatException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        super(\"Action invalid. Date and Time Format incorrect.\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Constructor of this object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param message error message of this exception."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public DateTimeInvalidFormatException(String message) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 29
    }
  },
  {
    "path": "src/main/java/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Encapsulates the message of an exception or error related to Duke\u0027s operation."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003eThe \u0027DukeException\u0027 supports operators, supported include: \u003c/p\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003e (i) Getters to error message \u003c/p\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Constructor of this object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param message error message of this exception."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * String representation of this object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return string representation of this object. Contains display frame and error message."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        String errorMessage \u003d \"    ____________________________________________________\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + \"     (~.^.~)  OOPS!!! \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + getMessage()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + \"    ____________________________________________________\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 36
    }
  },
  {
    "path": "src/main/java/exception/EmptyActionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Encapsulates the message of an exception or error related to Duke\u0027s operation"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *  on empty command or action."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003eThe \u0027EmptyActionException\u0027 supports operators, supported include: \u003c/p\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003e (i) Getters to error message \u003c/p\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class EmptyActionException extends DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private static final String DESCRIPTION \u003d \"The description of a command cannot be empty.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Constructor of this object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public EmptyActionException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        super(DESCRIPTION);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 20
    }
  },
  {
    "path": "src/main/java/exception/FileCorruptedException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Encapsulates the message of an exception or error related to Duke\u0027s operation when"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *  loading file from computer."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003eThe \u0027FileCorruptedException\u0027 supports operators, supported include: \u003c/p\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003e (i) Getters to error message \u003c/p\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class FileCorruptedException extends DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private static final String DESCRIPTION \u003d \"File is corrupted. Unable to convert file into list of Tasks.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Constructor of this object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public FileCorruptedException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        super(DESCRIPTION);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Constructor of this object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param message error message of this exception."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public FileCorruptedException(String message) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 29
    }
  },
  {
    "path": "src/main/java/exception/InvalidActionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Encapsulates the message of an exception or error related to Duke\u0027s invalid"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *  action on command operation."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003eThe \u0027InvalidActionException\u0027 supports operators, supported include: \u003c/p\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003e (i) Getters to error message \u003c/p\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class InvalidActionException extends DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private static final String DESCRIPTION \u003d \"The action is invalid.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Constructor of this object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public InvalidActionException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        super(DESCRIPTION);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Constructor of this object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param message error message of this exception."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public InvalidActionException(String message) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 29
    }
  },
  {
    "path": "src/main/java/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Encapsulates the message of an exception or error related to Duke\u0027s operation on"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * invalid commands."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003eThe \u0027InvalidCommandException\u0027 supports operators, supported include: \u003c/p\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003e (i) Getters to error message \u003c/p\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private static final String DESCRIPTION \u003d \"I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Constructor of this object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public InvalidCommandException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        super(DESCRIPTION);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 20
    }
  },
  {
    "path": "src/main/java/processor/CommandProcessor.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package processor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import exception.EmptyActionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import exception.InvalidActionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import exception.InvalidCommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import task.DeadlineTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import task.EventTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import task.ToDoTask;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Processes command entered by user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003eThe \u0027CommandProcessor\u0027 supports operators, supported include: \u003c/p\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003e (i) processing the String command and run the operation \u003c/p\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class CommandProcessor {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private final HashMap\u003cString, Function\u003cString, String\u003e\u003e map \u003d setUpCommandMap();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    CommandProcessor(TaskList taskList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private HashMap\u003cString, Function\u003cString, String\u003e\u003e setUpCommandMap() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        HashMap\u003cString, Function\u003cString, String\u003e\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        map.put(\"list\", (command) -\u003e listCommand());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        map.put(\"done\", (command) -\u003e doneCommand(command));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        map.put(\"todo\", (command) -\u003e toDoCommand(command));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        map.put(\"deadline\", (command) -\u003e deadlineCommand(command));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        map.put(\"event\", (command) -\u003e eventCommand(command));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        map.put(\"delete\", (command) -\u003e deleteCommand(command));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        map.put(\"find\", (command) -\u003e findCommand(command));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Run command enter by user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Prints error message if command is invalid."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param command the command entered by user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return reply to the command given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public String runCommand(String command) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Function\u003cString, String\u003e action \u003d map.get(command.replaceAll(\" .*\", \"\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            if (action \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                throw new InvalidCommandException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                return action.apply(command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return e.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private String listCommand() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return this.taskList.showList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private String doneCommand(String command) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int length \u003d command.length();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            if (length \u003c 5) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                throw new EmptyActionException(); // only \"done\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    String num \u003d command.substring(5);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    int index \u003d Integer.parseInt(num);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    if (index \u003d\u003d 0 || index \u003e this.taskList.size()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                        throw new InvalidActionException(); // \"done 0\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    this.taskList.getTask(index - 1).markAsDone();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    return \"    ____________________________________________________\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                            + \"     Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                            + \"     \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                            + this.taskList.getTask(index - 1)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                            + \"\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                            + \"    ____________________________________________________\\n\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    throw new InvalidActionException(); // \"done 1A\" etc"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return e.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private String toDoCommand(String command) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int spaceIndex \u003d command.indexOf(\" \");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            if (spaceIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                throw new EmptyActionException(); // \"todo\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            String action \u003d command.substring(spaceIndex + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            if (action.toLowerCase().contains(\"/by\") || action.toLowerCase().contains(\"/at\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                throw new InvalidActionException(); // \"todo borrow book /by Sunday\" etc"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            } else if (action.replaceAll(\" \", \"\").equals(\"\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                throw new EmptyActionException(); // \"todo     \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                Task task \u003d new ToDoTask(command.substring(spaceIndex + 1));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                return this.taskList.addToTaskList(task);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return e.toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private String deadlineCommand(String command) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int spaceIndex \u003d command.indexOf(\" \");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int slashIndex \u003d command.indexOf(\"/by\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            if (spaceIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                throw new EmptyActionException(); // \"deadline\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            } else if (slashIndex \u003d\u003d -1 || spaceIndex + 1 \u003d\u003d slashIndex || slashIndex + 4 \u003e command.length()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                throw new InvalidActionException(); // \"deadline project submission | /by Sunday | return book /by\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                String description \u003d command.substring(spaceIndex + 1, slashIndex - 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                String time \u003d command.substring(slashIndex + 4);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                Task task \u003d new DeadlineTask(description, time);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                return this.taskList.addToTaskList(task);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return e.toString();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private String eventCommand(String command) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int spaceIndex \u003d command.indexOf(\" \");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int slashIndex \u003d command.indexOf(\"/at\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            if (spaceIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                throw new EmptyActionException(); // \"event\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            } else if (slashIndex \u003d\u003d -1 || spaceIndex + 1 \u003d\u003d slashIndex || slashIndex + 4 \u003e command.length()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                throw new InvalidActionException(); //\"event project submission\"\"event /at 1-2pm\"\"deadline meeting /at\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                String description \u003d command.substring(spaceIndex + 1, slashIndex - 1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                String time \u003d command.substring(slashIndex + 4);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                Task task \u003d new EventTask(description, time);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                return this.taskList.addToTaskList(task);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return e.toString();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private String deleteCommand(String command) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int length \u003d command.length();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            if (length \u003c 7) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                throw new EmptyActionException(); // only \"delete\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    String num \u003d command.substring(7);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    int index \u003d Integer.parseInt(num);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    if (index \u003d\u003d 0 || index \u003e this.taskList.size()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                        throw new InvalidActionException(); // \"delete 0\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    return this.taskList.deleteFromTaskList(index - 1);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    throw new InvalidActionException(); // \"delete 1A\" etc"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return e.toString();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private String findCommand(String command) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            if (command.length() \u003c 6) { // find"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                throw new EmptyActionException();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            String searchWord \u003d command.substring(5);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            if (searchWord.equals(\" \") || searchWord.equals(\"\")) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                throw new EmptyActionException();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int size \u003d this.taskList.size();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                Task task \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                String taskInfo \u003d task.toString();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                if (taskInfo.contains(searchWord)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    list.add(task);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            TaskList filterList \u003d new TaskList(list);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return filterList.showList();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return e.toString();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 215
    }
  },
  {
    "path": "src/main/java/processor/FileToTaskListConverter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package processor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.regex.PatternSyntaxException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import exception.FileCorruptedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import task.DeadlineTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import task.EventTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import task.ToDoTask;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Converts data from file to TaskList class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003eThe \u0027FileToTaskListConverter\u0027 supports operators, supported include: \u003c/p\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003e (i) converting file to TaskList object \u003c/p\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003e (ii) saving TaskList data into file provided \u003c/p\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public abstract class FileToTaskListConverter {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Converts file to TaskList object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param data the file loaded to be converted."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return a TaskList containing all tasks inscribed in file"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @throws FileCorruptedException If file is not formmatted in the correct order. ie"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *  not in [type]//[status]//[task description]//[date if applicable]//[time if applicable]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static TaskList convert(File data) throws FileCorruptedException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        List\u003cString\u003e dataList \u003d loadStringData(data);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        for (int i \u003d 0; i \u003c dataList.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            list.add(getTaskFromData(dataList.get(i)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return new TaskList(list);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Saves TaskList to file provided."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Data is stored in [type]//[status]//[task description]//[date if applicable]//[time if applicable]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param list the TaskList to be saved."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param file the file to be saved in."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return save status of TaskList. True if successful, false otherwise."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static boolean saveToFile(TaskList list, File file) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            FileWriter fw \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                Task task \u003d list.getTask(i);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                String type \u003d task.getType();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                sb.append(type + \"//\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                sb.append(task.isDone() ? \"O\" : \"X\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                sb.append(\"//\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                sb.append(task.getDescription() + \"//\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                if (type.equals(\"D\") || type.equals(\"E\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    sb.append(task.getDateInput() + \"//\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    sb.append(task.getTimeInput());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                sb.append(\"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            fw.write(sb.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            System.out.println(\"Unable to save\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private static List\u003cString\u003e loadStringData(File data) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            Scanner sc \u003d new Scanner(data);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                list.add(sc.nextLine());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            sc.close();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            File directory \u003d data.getParentFile();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                if (directory.exists() \u0026\u0026 directory.isDirectory()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    data.createNewFile();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    directory.mkdirs();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    data.createNewFile();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                System.out.println(\"Unable to open/create file\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private static Task getTaskFromData(String info) throws FileCorruptedException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            String[] words \u003d info.split(\"//\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            char type \u003d words[0].charAt(0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            boolean isDone \u003d words[1].equals(\"✓\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            String description \u003d words[2];"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            case \u0027T\u0027:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                return new ToDoTask(description, isDone);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            case \u0027D\u0027:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                return new DeadlineTask(description, words[3] + \" \" + words[4], isDone);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            case \u0027E\u0027:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                return new EventTask(description, words[3] + \" \" + words[4], isDone);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                return new Task(\"No Task !!!!\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (DukeException de) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new FileCorruptedException();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (IndexOutOfBoundsException ioobe) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new FileCorruptedException();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (PatternSyntaxException pse) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new FileCorruptedException();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 136
    }
  },
  {
    "path": "src/main/java/processor/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package processor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import exception.FileCorruptedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Interacts with users command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003eThe \u0027UI\u0027 supports operators, supported include: \u003c/p\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003e (i) interacting with user \u003c/p\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private static final String GREETING \u003d \"    ____________________________________________________\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            + \"     Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            + \"     What can I do for you?\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            + \"    ____________________________________________________\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private static final String ENDWORDS \u003d \"    ____________________________________________________\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            + \"     Bye. Hope to see you again soon!\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            + \"    ____________________________________________________\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private CommandProcessor commandProcessor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Constructor for this object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Loads data file and creates one if it does not exists"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public UI() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        String home \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.filePath \u003d Paths.get(home, \"Downloads\", \"CS2103 IP\", \"data\", \"duke.txt\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        File file \u003d this.filePath.toFile();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            this.taskList \u003d FileToTaskListConverter.convert(file);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (FileCorruptedException fce) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.commandProcessor \u003d new CommandProcessor(this.taskList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static String getGreeting() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return GREETING;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Interacts with user input command."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * User\u0027s command entered through interface is stored and processed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public String interact(String command) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            FileToTaskListConverter.saveToFile(this.taskList, this.filePath.toFile());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            isDone \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return UI.ENDWORDS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return this.commandProcessor.runCommand(command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public boolean getDoneStatus() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 78
    }
  },
  {
    "path": "src/main/java/task/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.regex.PatternSyntaxException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import exception.DateTimeInvalidFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Encapsulates the details of a task with a deadline."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003eThe \u0027DeadlineTask\u0027 class extends from Task class and supports operators,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * supported include: \u003c/p\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003e (i) getters \u003c/p\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    protected static final DateTimeFormatter DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy kk:mm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    protected LocalDateTime dateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Constructor to create this object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Use dateTimeString inputted to get LocalDateTime object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param dateTimeString the end dateTime of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @throws DateTimeInvalidFormatException if dateTimeString is not formatted in \"YYYY-MM-DD HHmm\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public DeadlineTask(String description, String dateTimeString) throws DateTimeInvalidFormatException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            String[] arr \u003d dateTimeString.split(\" \"); // dateTimeString will be in  \"YYYY-MM-DD HHmm\" format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int year \u003d Integer.parseInt(arr[0].substring(0, 4));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int mth \u003d Integer.parseInt(arr[0].substring(5, 7));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int day \u003d Integer.parseInt(arr[0].substring(8));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int hour \u003d Integer.parseInt(arr[1].substring(0, 2));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int min \u003d Integer.parseInt(arr[1].substring(2));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            LocalDateTime dateTime \u003d LocalDateTime.of(year, mth, day, hour, min);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (NumberFormatException nfe) { // Integer cannot parse string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new DateTimeInvalidFormatException("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    \"Action invalid. Date and Time Format incorrect.\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                            + \"     Correct Format: YYYY-MM-DD HHmm\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (IndexOutOfBoundsException ioobe) { // String formatted different from expected"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new DateTimeInvalidFormatException("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    \"Action invalid. Date and Time Format incorrect.\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                            + \"     Correct Format: YYYY-MM-DD HHmm\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (PatternSyntaxException pse) { // No space between date and time"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new DateTimeInvalidFormatException("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    \"Action invalid. Date and Time Format incorrect.\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                            + \"     Correct Format: YYYY-MM-DD HHmm\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (DateTimeException dte) { // invalid date time eg 9999-13-32 2400"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new DateTimeInvalidFormatException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    \"Action invalid. Date and Time value invalid.\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Constructor to create this object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Use dateTimeString inputted to get LocalDateTime object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param dateTimeString the end dateTime of the task."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param isDone completion status of this object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @throws DateTimeInvalidFormatException if dateTimeString is not formatted in \"YYYY-MM-DD HHmm\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public DeadlineTask(String description, String dateTimeString, boolean isDone)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throws DateTimeInvalidFormatException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            String[] arr \u003d dateTimeString.split(\" \"); // dateTimeString will be in  \"YYYY-MM-DD HHmm\" format"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int year \u003d Integer.parseInt(arr[0].substring(0, 4));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int mth \u003d Integer.parseInt(arr[0].substring(5, 7));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int day \u003d Integer.parseInt(arr[0].substring(8));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int hour \u003d Integer.parseInt(arr[1].substring(0, 2));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int min \u003d Integer.parseInt(arr[1].substring(2));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            LocalDateTime dateTime \u003d LocalDateTime.of(year, mth, day, hour, min);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (NumberFormatException nfe) { // Integer cannot parse string"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new DateTimeInvalidFormatException("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    \"Action invalid. Date and Time Format incorrect.\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                            + \"     Correct Format: YYYY-MM-DD HHmm\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            );"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (IndexOutOfBoundsException ioobe) { // String formatted different from expected"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new DateTimeInvalidFormatException("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    \"Action invalid. Date and Time Format incorrect.\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                            + \"     Correct Format: YYYY-MM-DD HHmm\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            );"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (PatternSyntaxException pse) { // No space between date and time"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new DateTimeInvalidFormatException("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    \"Action invalid. Date and Time Format incorrect.\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                            + \"     Correct Format: YYYY-MM-DD HHmm\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            );"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (DateTimeException dte) { // invalid date time eg 9999-13-32 2400"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new DateTimeInvalidFormatException("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    \"Action invalid. Date and Time value invalid.\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            );"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Gets the type of Tasks."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return type of Task."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Gets the date inputted by user in string."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return date inputted by user."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public String getDateInput() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return this.dateTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Gets the date inputted by user in string."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return time inputted by user."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public String getTimeInput() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return this.dateTime.format(DateTimeFormatter.ofPattern(\"kkmm\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * String representation of this object."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return string representation of this object ([type][statusIcon] description (by: date time))."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.dateTime.format(DeadlineTask.DATE_TIME_FORMAT) + \")\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 150
    }
  },
  {
    "path": "src/main/java/task/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.regex.PatternSyntaxException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import exception.DateTimeInvalidFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Encapsulates the details of a task with a event time range."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003eThe \u0027EventTask\u0027 class extends from Task class and supports operators,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * supported include: \u003c/p\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003e (i) getters \u003c/p\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    protected static final DateTimeFormatter TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"kk:mm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    protected static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    protected LocalTime startTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    protected LocalTime endTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Constructor to create this object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Use dateTimeString inputted to get LocalTime and LocalTime."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param dateTimeString the end dateTime of the task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @throws DateTimeInvalidFormatException if dateTimeString is not formatted in \"YYYY-MM-DD HHmm-HHmm\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public EventTask(String description, String dateTimeString) throws DateTimeInvalidFormatException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            // dateTimeString will be in  \"YYYY-MM-DD kkmm-kkmm\" format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            String[] arr \u003d dateTimeString.split(\" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int year \u003d Integer.parseInt(arr[0].substring(0, 4));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int mth \u003d Integer.parseInt(arr[0].substring(5, 7));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int day \u003d Integer.parseInt(arr[0].substring(8));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int startHour \u003d Integer.parseInt(arr[1].substring(0, 2));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int startMin \u003d Integer.parseInt(arr[1].substring(2, 4));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int endHour \u003d Integer.parseInt(arr[1].substring(5, 7));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int endMin \u003d Integer.parseInt(arr[1].substring(7));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            if (endHour \u003c startHour || (endHour \u003d\u003d startHour \u0026\u0026 endMin \u003c startMin)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                throw new DateTimeInvalidFormatException("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                        \"Action invalid. End Time less than Start Time.\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            LocalDate date \u003d LocalDate.of(year, mth, day);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            LocalTime startTime \u003d LocalTime.of(startHour, startMin);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            LocalTime endTime \u003d LocalTime.of(endHour, endMin);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new DateTimeInvalidFormatException("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    \"Action invalid. Date and Time Format incorrect.\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                            + \"     Correct Format: YYYY-MM-DD HHmm-HHmm\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            );"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (IndexOutOfBoundsException ioobe) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new DateTimeInvalidFormatException("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    \"Action invalid. Date and Time Format incorrect.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                            + \"     Correct Format: YYYY-MM-DD HHmm-HHmm\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (PatternSyntaxException pse) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new DateTimeInvalidFormatException("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    \"Action invalid. Date and Time Format incorrect.\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                            + \"     Correct Format: YYYY-MM-DD HHmm-HHmm\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            );"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (DateTimeException dte) { // invalid date time eg 9999-13-32 2400"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new DateTimeInvalidFormatException("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    \"Action invalid. Date and Time value invalid.\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            );"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Constructor to create this object."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Use dateTimeString inputted to get LocalTime and LocalTime."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param dateTimeString the end dateTime of the task."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param isDone completion status of this object."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @throws DateTimeInvalidFormatException if dateTimeString is not formatted in \"YYYY-MM-DD HHmm-HHmm\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public EventTask(String description, String dateTimeString, boolean isDone)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throws DateTimeInvalidFormatException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            // dateTimeString will be in  \"YYYY-MM-DD HHmm-HHmm\" format"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            String[] arr \u003d dateTimeString.split(\" \");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int year \u003d Integer.parseInt(arr[0].substring(0, 4));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int mth \u003d Integer.parseInt(arr[0].substring(5, 7));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int day \u003d Integer.parseInt(arr[0].substring(8));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int startHour \u003d Integer.parseInt(arr[1].substring(0, 2));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int startMin \u003d Integer.parseInt(arr[1].substring(2, 4));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int endHour \u003d Integer.parseInt(arr[1].substring(5, 7));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            int endMin \u003d Integer.parseInt(arr[1].substring(7));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            if (endHour \u003c startHour || (endHour \u003d\u003d startHour \u0026\u0026 endMin \u003c startMin)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                throw new DateTimeInvalidFormatException("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                        \"Action invalid. End Time less than Start Time.\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                );"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            LocalDate date \u003d LocalDate.of(year, mth, day);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            LocalTime startTime \u003d LocalTime.of(startHour, startMin);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            LocalTime endTime \u003d LocalTime.of(endHour, endMin);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new DateTimeInvalidFormatException("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    \"Action invalid. Date and Time Format incorrect.\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                            + \"     Correct Format: YYYY-MM-DD HHmm-HHmm\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            );"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (IndexOutOfBoundsException ioobe) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new DateTimeInvalidFormatException("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    \"Action invalid. Date and Time Format incorrect.\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                            + \"     Correct Format: YYYY-MM-DD HHmm-HHmm\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            );"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (PatternSyntaxException pse) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new DateTimeInvalidFormatException("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    \"Action invalid. Date and Time Format incorrect.\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                            + \"     Correct Format: YYYY-MM-DD HHmm-HHmm\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            );"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (DateTimeException dte) { // invalid date time eg 9999-13-32 2400"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new DateTimeInvalidFormatException("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    \"Action invalid. Date and Time value invalid.\\n\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            );"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Gets the type of Tasks."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return type of Task."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Gets the date inputted by user in string."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return date inputted by user."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public String getDateInput() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return this.date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Gets the date inputted by user in string."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return time inputted by user."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public String getTimeInput() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return this.startTime.format(DateTimeFormatter.ofPattern(\"kkmm\"))"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + \"-\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + this.endTime.format(DateTimeFormatter.ofPattern(\"kkmm\"));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * String representation of this object."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return string representation of this object ([type][statusIcon] description (by: date time-time))."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + this.date.format(EventTask.DATE_FORMAT) + \" \""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + this.startTime.format(EventTask.TIME_FORMAT) + \"-\""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + this.endTime.format(EventTask.TIME_FORMAT) + \")\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 189
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Encapsulates the details of a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003eThe \u0027Task\u0027 supports operators, supported include: \u003c/p\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003e (i) Getters to details \u003c/p\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Constructor to create Task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Constructor to create Task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param isDone the completion status of the task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Gets statusIcon of this object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return statusIcon of this object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return (isDone ? \"O\" : \"X\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Marks this object as completed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Check if this object is done."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return status of this object, true if completed, false otherwise."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Gets the type of Tasks."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return type of Task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return \"1\"; // dummy type;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Gets description of this object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return description of this object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Gets the date inputted by user in string."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return date inputted by user."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public String getDateInput() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return \"No date available\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Gets the date inputted by user in string."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return time inputted by user."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public String getTimeInput() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return \"No time available\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * String representation of this object."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return string representation of this object ([statusIcon] description)."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 105
    }
  },
  {
    "path": "src/main/java/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Encapsulates a list of tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003eThe \u0027TaskList\u0027 supports operators, supported include: \u003c/p\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003e (i) Adding to list \u003c/p\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003e (ii) Deleting from list \u003c/p\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003e (iii) Getting task from list \u003c/p\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003e (iv) Displaying full content of list \u003c/p\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private final List\u003ctask.Task\u003e taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Constructor to create this object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        List\u003ctask.Task\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Constructor to create this object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param list the list of tasks to be encapsulated."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public TaskList(List\u003ctask.Task\u003e list) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.taskList \u003d list;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Add a task to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param task the task to be added."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return string containing information on deletion and list size."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public String addToTaskList(task.Task task) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return \"    ____________________________________________________\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + \"     Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + \"     \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + task"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + \"     Now you have \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + size()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + \" task(s) in the list.\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + \"    ____________________________________________________\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Delete a task from the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * IndexOutOfBoundsException will still be thrown if index exceeds size or is negative."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param index the index of task to be delete."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return string containing information on deletion and list size."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public String deleteFromTaskList(int index) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        task.Task task \u003d getTask(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.taskList.remove(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return \"    ____________________________________________________\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + \"     Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + \"     \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + task"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + \"     Now you have \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + size()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + \" task(s) in the list.\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + \"    ____________________________________________________\\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Gets a task from the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * IndexOutOfBoundsException will still be thrown if index exceeds size or is negative."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param index the index of task to be receive."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return Task at this particular index"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public task.Task getTask(int index) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return this.taskList.get(index);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Gets the size of the list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return size of list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Displays the full content of this object."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return string representing the display of TaskList contents"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public String showList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        StringBuilder listDisplay \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        listDisplay.append(\"    ____________________________________________________\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        listDisplay.append(\"     Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d this.taskList.size(); i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            listDisplay.append(\"     \");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            listDisplay.append(i);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            listDisplay.append(\".\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            listDisplay.append(this.taskList.get(i - 1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            listDisplay.append(\"\\n\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        listDisplay.append(\"    ____________________________________________________\\n\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return listDisplay.toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 119
    }
  },
  {
    "path": "src/main/java/task/ToDoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Encapsulates the details of a task to be done without time restriction."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003eThe \u0027Task\u0027 supports operators, supported include: \u003c/p\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003e (i) Getters to details \u003c/p\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class ToDoTask extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Constructor to create this object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ToDoTask(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Constructor to create this object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param isDone the completion status of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ToDoTask(String description, boolean isDone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Gets the type of Tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return type of Task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * String representation of this object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return string representation of this object ([statusIcon] description)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 50
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            \u003cInsets bottom\u003d\"4.0\" left\u003d\"4.0\" right\u003d\"4.0\" top\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "         \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 19
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 19
    }
  },
  {
    "path": "src/test/java/task/DeadlineTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import exception.DateTimeInvalidFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class DeadlineTaskTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            DeadlineTask task \u003d new DeadlineTask(\"Hello\", \"2020-08-25 2359\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            DeadlineTask task2 \u003d new DeadlineTask(\"Jello\", \"2020-12-25 1359\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            DeadlineTask task3 \u003d new DeadlineTask(\"Pello\", \"2020-09-25 2059\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            assertEquals(\"[D][✘] Hello (by: 25 Aug 2020 23:59)\", task.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            assertEquals(\"[D][✘] Jello (by: 25 Dec 2020 13:59)\", task2.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            assertEquals(\"[D][✘] Pello (by: 25 Sep 2020 20:59)\", task3.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (DateTimeInvalidFormatException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            String temp \u003d \"    ____________________________________________________________\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    + \"     ☹ OOPS!!! \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    + \"Action invalid. Date and Time Format incorrect.\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    + \"    ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            assertEquals(temp, e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void testGetDateInput() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            DeadlineTask task \u003d new DeadlineTask(\"Hello\", \"2020-08-25 2359\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            DeadlineTask task2 \u003d new DeadlineTask(\"Jello\", \"2020-12-25 1359\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            DeadlineTask task3 \u003d new DeadlineTask(\"Pello\", \"2020-09-25 2059\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            assertEquals(\"2020-08-25\", task.getDateInput());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            assertEquals(\"2020-12-25\", task2.getDateInput());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            assertEquals(\"2020-09-25\", task3.getDateInput());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (DateTimeInvalidFormatException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            String temp \u003d \"    ____________________________________________________________\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    + \"     ☹ OOPS!!! \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    + \"Action invalid. Date and Time Format incorrect.\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    + \"    ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            assertEquals(temp, e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void testGetTimeInput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            DeadlineTask task \u003d new DeadlineTask(\"Hello\", \"2020-08-25 2359\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            DeadlineTask task2 \u003d new DeadlineTask(\"Jello\", \"2020-12-25 1359\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            DeadlineTask task3 \u003d new DeadlineTask(\"Pello\", \"2020-09-25 2059\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            assertEquals(\"2359\", task.getTimeInput());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            assertEquals(\"1359\", task2.getTimeInput());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            assertEquals(\"2059\", task3.getTimeInput());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (DateTimeInvalidFormatException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            String temp \u003d \"    ____________________________________________________________\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    + \"     ☹ OOPS!!! \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    + \"Action invalid. Date and Time Format incorrect.\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    + \"    ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            assertEquals(temp, e.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 71
    }
  },
  {
    "path": "src/test/java/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final Task TASK \u003d new Task(\"Test\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final Task TASK2 \u003d new Task(\"Meh2\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final Task TASK3 \u003d new Task(\"GG3\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        list.add(TASK);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        list.add(TASK2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        list.add(TASK3);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        TaskList tl \u003d new TaskList(list);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(\"[✘] Test\", tl.getTask(0).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(\"[✘] Meh2\", tl.getTask(1).toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(\"[✘] GG3\", tl.getTask(2).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void testSize() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        list.add(TASK);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        TaskList tl \u003d new TaskList(list);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(1, tl.size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        list.add(TASK2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(2, tl.size());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        list.add(TASK3);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(3, tl.size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void testGetTask() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        list.add(TASK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        list.add(TASK2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        list.add(TASK3);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        TaskList tl \u003d new TaskList(list);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(TASK, tl.getTask(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(TASK2, tl.getTask(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(TASK3, tl.getTask(2));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void testAdding() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        tl.addToTaskList(TaskListTest.TASK);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        tl.addToTaskList(TaskListTest.TASK2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        tl.addToTaskList(TaskListTest.TASK3);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(TASK, tl.getTask(0));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(TASK2, tl.getTask(1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(TASK3, tl.getTask(2));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void testDeleting() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        tl.addToTaskList(TaskListTest.TASK);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        tl.addToTaskList(TaskListTest.TASK2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        tl.addToTaskList(TaskListTest.TASK3);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(TASK, tl.getTask(0));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(TASK2, tl.getTask(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(TASK3, tl.getTask(2));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        tl.deleteFromTaskList(2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            assertEquals(TASK3, tl.getTask(2));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            assertEquals(\"Index 2 out of bounds for length 2\", e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 82
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "deadline return book /by 2020-08-24 1800"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "event project meeting /at 2020-08-24 1900-2359"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "blah"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "done"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "done1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "doneA"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "done 1A"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "todo"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "todoborrowagain"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "todo study /by Monday"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "todo study /at 12am-1am"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "todo"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "deadline project submission"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "deadline /by Sunday"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "deadline project submission /by"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "event"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "event project submission"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "event /at 1-2pm"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "event meeting /at"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "delete"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "delete1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "delete 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "delete 1A"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "deadline iP /by 25-08-2020 2359"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "deadline iP /by 08-25-20 2359"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "deadline iP /by 08-AUG-2020 1259pm"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "deadline iP /by 2020-08-252359"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "deadline iP /by 9999-99-99 2400"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "deadline iP /by 2020/08/25 2359"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "event tP /at 25-08-2020 2359"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "event tP /at 08-25-20 2200-2359"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "event tP /at 08-AUG-2020 1259-3pm"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "event tP /at 2020-08-252350 2359111"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "event tP /at 9999-99-99 2200-2000"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "event tP /at 9999-99-99 2400-2500"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "event tP /at 2020/08/25 2200-2359"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "find book"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "find 25 Aug"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "find"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "find //"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "find 2020-08-25"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 56
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "::set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java ..\\src\\main\\java\\task\\*.java ..\\src\\main\\java\\exception\\*.java ..\\src\\main\\java\\processor\\*.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 3,
      "-": 20
    }
  }
]
