[
  {
    "path": "src/main/java/DeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This DeadlineException is used to print out exceptions when there is an incomplete input where wither the description"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * or date is absent."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class DeadlineException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * description tests shows whether the description is present in the input of the user or not."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * If description is not present it is true, else it is false"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param description input, depneding on whether the description is present or not in the input.txt file. If present it is false"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *   else it is true."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public DeadlineException(boolean description){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * doesn\u0027t take in any arguments, overrides the in-built toString() method."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return returns a string informing that the description is empty if description is true. Else, if description is"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * false, it means that the date is absent and it informs accordingly."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(this.description){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \"  \u0027\\u2639\u0027 OOPS!!! The description of a deadline cannot be empty.\\n\" +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  \u0027\\u2639\u0027 OOPS!!! The specific date/time of a deadline cannot be empty.\\n\" +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                \"  ____________________________________________________________\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 33
    }
  },
  {
    "path": "src/main/java/DeleteException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This DeleteException is used to print out exceptions when there is an incomplete input where the ID is absent or the ID"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * of that Task hasnt been defined yet or it has previously been deleted."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class DeleteException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * IDabsent tests shows whether the ID is present in the input of the user or not."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * If ID is not present it is true, else it is false"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * deleted checks whether the task was previously deleted, if deleted it is true else false."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean IDabsent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean deleted;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param IDabsent input, depneding on whether the ID is present or not in the input.txt file. If present it is false"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *   else it is true."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public DeleteException(boolean IDabsent, boolean deleted){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.IDabsent \u003d IDabsent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.deleted \u003d deleted;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * doesn\u0027t take in any arguments, overrides the in-built toString() method."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return returns a string depending on the scenario. If the IDabsent is true, then description that the description of"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * delete cannot be empty. If the ID is previously deleted, it prints that it was deleted."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Else, it means that the ID, of the Task given is not defined yet."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(deleted){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \"  \u0027\\u2639\u0027 OOPS!!! This task is previously deleted.\\n\" +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(IDabsent){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \"  \u0027\\u2639\u0027 OOPS!!! The description of delete cannot be empty.\\n\" +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  \u0027\\u2639\u0027 OOPS!!! The ID is not yet defined.\\n\" +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                \"  ____________________________________________________________\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 42
    }
  },
  {
    "path": "src/main/java/DoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This DoneException is used to print out exceptions when there is an incomplete input where the ID is absent or the ID"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * of that Task hasnt been defined yet."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class DoneException extends Exception{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * IDabsent tests shows whether the ID is present in the input of the user or not."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * If ID is not present it is true, else it is false"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean IDabsent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean deleted;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param IDabsent input, depneding on whether the ID is present or not in the input.txt file. If present it is false"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *   else it is true."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public DoneException(boolean IDabsent, boolean deleted){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.IDabsent \u003d IDabsent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.deleted \u003d deleted;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * doesn\u0027t take in any arguments, overrides the in-built toString() method."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return returns a string depending on the scenario. If the IDabsent is true, then description that the description of"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * done cannot be empty. Else, it means that the ID, of the Task given is not defined yet."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(deleted){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \"  \u0027\\u2639\u0027 OOPS!!! This task has already been deleted.\\n\" +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(IDabsent){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \"  \u0027\\u2639\u0027 OOPS!!! The description of a done cannot be empty.\\n\" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  \u0027\\u2639\u0027 OOPS!!! The ID is not yet defined.\\n\" +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                \"  ____________________________________________________________\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 39
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This Duke class is the main class that prints out the relevant outputs by including all the subclasses of Task and"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * taking in the input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * todos includes all the string being input into the input.txt file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static List\u003cString\u003e todos \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * This is a static function because it adds all the string in a line into the todos list is static, which contains information"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * of the action you want to do."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static void scan(){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(sc.hasNext()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                todos.add(sc.nextLine());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            } while (sc.hasNextLine());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * The output function is also static and it reads the input strings that is stored in the static list of todos. This"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * then gives differently outputs and behaves differently depending on the input string."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * If bye is the first word, it breaks out the loop and gives by message"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * If the first word is list, it lists out all the Tasks that are added"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * If the first word is delete, it deletes the task with the number given following this, if task is present, previously not deleted and the number is present, else it prints out error message depending on situation"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * If the first word is done, it marks the task with the number given following this as done, if task is present, previously not deleted and the number is present, else it prints out error message depending on situation"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * If the first word is todo, it adds the todo task if the description is present and prints that the todo is added, if not error message saying that the task is absent is printed"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * If the first word is deadline, it adds the description task if the description and day is present and prints that the deadline is added, else error message is printed depending on situation"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * If the first word is event, it adds the event task if the description and daytime is present and prints that the event is added, else error message is printed depending on situation"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * If the first word is neither of those listed above, then an error message is printed saying that it is incomprehensible"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static void output(){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        System.out.println(\"  ____________________________________________________________\\n\" + \"  Hello! I\u0027m Duke\\n\" + \"  What can I do for you?\\n\" +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                \"  ____________________________________________________________\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (String string : todos) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if (string.length() \u003e\u003d 3 \u0026\u0026 string.equals(\"bye\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                System.out.println(\"\\n\" + string + \"\\n  ____________________________________________________________\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                System.out.println(\"  Bye. Hope to see you again soon!\\n\" + \"  ____________________________________________________________\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            else if (string.length() \u003e\u003d 4 \u0026\u0026 string.equals(\"list\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                System.out.println(\"\\n\" + string + \"\\n  ____________________________________________________________\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                Task.listing();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            else if(string.length() \u003e\u003d 6 \u0026\u0026 string.substring(0, 6).equals(\"delete\")){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                System.out.println(\"\\n\" + string + \"\\n  ____________________________________________________________\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                if(string.length() \u003d\u003d 6 || string.length() \u003d\u003d 7){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    System.out.println(new DeleteException(true, false).toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                int ID \u003d Integer.parseInt(string.substring(7));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                Task.deleteDone(ID);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            else if (string.length() \u003e\u003d 4 \u0026\u0026 string.substring(0, 4).equals(\"done\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                System.out.println(\"\\n\" + string + \"\\n  ____________________________________________________________\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                if(string.length() \u003d\u003d 4 || string.length() \u003d\u003d 5){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    System.out.println(new DoneException(true, false).toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                int ID \u003d Integer.parseInt(string.substring(5));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                Task.setDone(ID);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            else if (string.length() \u003e\u003d 4 \u0026\u0026 string.substring(0, 4).equals(\"todo\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                System.out.println(\"\\n\" + string + \"\\n  ____________________________________________________________\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                if(string.length() \u003d\u003d 4 || string.length() \u003d\u003d 5){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    System.out.println(new TodoException().toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                }else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    todo t \u003d new todo(string.substring(5));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    t.output();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            else if (string.length() \u003e\u003d 5 \u0026\u0026 string.substring(0, 5).equals(\"event\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                System.out.println(\"\\n\" + string + \"\\n  ____________________________________________________________\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                if(string.length() \u003d\u003d 5 || string.length() \u003d\u003d 6){"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    System.out.println(new EventException(true).toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                String s \u003d \"\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                int index \u003d -1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                boolean time \u003d false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                for (int i \u003d 5; i \u003c string.length(); i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    if (string.charAt(i) \u003d\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        index \u003d i;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        time \u003d true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    s \u003d s + string.charAt(i);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                if(!time){"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    System.out.println(new EventException(false).toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                event e \u003d new event(s.substring(1, s.length() - 1), string.substring(index + 4));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                e.output();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }else if (string.length() \u003e\u003d 8 \u0026\u0026 string.substring(0, 8).equals(\"deadline\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                System.out.println(\"\\n\" + string + \"\\n  ____________________________________________________________\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                if(string.length() \u003d\u003d 8 || string.length() \u003d\u003d 9){"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    System.out.println(new DeadlineException(true).toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                String s \u003d \"\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                int index \u003d -1;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                boolean time \u003d false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                for (int i \u003d 8; i \u003c string.length(); i++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    if (string.charAt(i) \u003d\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        index \u003d i;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        time \u003d true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    s \u003d s + string.charAt(i);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                if(!time){"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    System.out.println(new DeadlineException(false).toString());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                deadline e \u003d new deadline(s.substring(1, s.length() - 1), string.substring(index + 4));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                e.output();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                System.out.println(\"\\n\" + string + \"\\n  ____________________________________________________________\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                System.out.println(new WrongInputException().toString());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            //System.out.println(string);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param args of type String[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * reads input using scan() and adds it to todos."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *  Then, prints out relevant information using the output() func."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static void main(String[] args)  {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        scan();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        output();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "itssodium": 142
    }
  },
  {
    "path": "src/main/java/EventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This EventException is used to print out exceptions when there is an incomplete input where whether the description"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * or date is absent."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class EventException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * description tests shows whether the description is present in the input of the user or not."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * If description is not present it is true, else it is false"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param description input, depending on whether the description is present or not in the input.txt file. If"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *                    present it is false else it is true."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public EventException(boolean description){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * doesn\u0027t take in any arguments, overrides the in-built toString() method."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return returns a string informing that the description is empty if description is true. Else, if description is"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * false, it means that the date is absent and it informs accordingly."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(this.description){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \"  \u0027\\u2639\u0027 OOPS!!! The description of an event cannot be empty.\\n\" +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  \u0027\\u2639\u0027 OOPS!!! The specific date of an event cannot be empty.\\n\" +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                \"  ____________________________________________________________\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 33
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This Task is made abstract because it is never intialized in the actual code, however, it is used so that polymorphism"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * is able to work properly."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "abstract public class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Tasks is made static because it contains the different tasks that are added, and therefore it is not limited to"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * a single instance of Task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static int num \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean done;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private int ID;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean deleted;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param name this assigns the name of the Task to the name being given in the constructor. Then assigns done to be"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *             false as it is not completed when it is being defined. The ID number is assigned to be prev size of Tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *             plus one because it is a task that is added now and this task is added to tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    Task(String name){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        num++;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.ID \u003d num;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.deleted \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        tasks.add(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * this prints out that this task is added successfully to the task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void output(){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        System.out.println(\"  Got it. I\u0027ve added this task:\\n  \" + this.toString() + \"\\n\" +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                \"  Now you have \" + tasks.size() + \" tasks in the list.\\n\" + \"  ____________________________________________________________\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ID is the ID of tShe task that you wish to delete. Since it needs to delete task from tasks, which is static,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *           this function is also static. If the ID is not present in tasks, it prints that it is not present. If task"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *           is previously deleted, it prints that it was deleted."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *           Else, it prints that it is successfully deleted."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static void deleteDone(int ID){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(ID \u003e num){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            System.out.println(new DeleteException(false, false).toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Task task \u003d tasks.get(ID - 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if(!task.deleted) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                tasks.get(ID - 1).deleted \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                System.out.println(\"   Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                System.out.println(\"   \" + tasks.get(ID - 1).toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                System.out.println(\"  Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                System.out.println(\"  ____________________________________________________________\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                System.out.println(new DeleteException(false, true).toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ID is the ID of the task that you wish to set as done. Since it needs to assign truth to task from tasks,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *           which is static, this function is also static. If the ID is not present in tasks, it prints that it is not present."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *           If the task is deleted, it would print that it was deleted."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *           Else, it prints that it is successfully completed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static void setDone(int ID){"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(ID \u003e num){"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            System.out.println(new DoneException(false, false).toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Task task \u003d tasks.get(ID - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if(task.deleted) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                System.out.println(new DoneException(false, true).toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                tasks.get(ID - 1).done \u003d true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                System.out.println(\"   Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                System.out.println(\"   \" + tasks.get(ID - 1).toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                System.out.println(\"  ____________________________________________________________\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * This prints out all tje Since it needs to assign truth to task from tasks,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *                 which is static, this function is also static. Then it prints all the tasks curr present in Tasks"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *                 and also gives info on whether it is present or not."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static void listing(){"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        System.out.println(\"   Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for(Task task : tasks){"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if(!task.deleted) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                System.out.println(\"  \" + task.ID + \".\" + task.toString());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        System.out.println(\"  ____________________________________________________________\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *  Overrides the toString methods"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String which contains info on task name as well as whether it is completed(tick sign) or not(cross sign)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(this.done) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \"[\" + \"\\u2713\" + \"] \" + this.name;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"[\" + \"\\u2717\" + \"] \" + this.name;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 119
    }
  },
  {
    "path": "src/main/java/TodoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This TodoException is used to print out exceptions when there is an incomplete input where whether the description"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * or date is absent."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class TodoException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * doesn\u0027t take in any arguments, overrides the in-built toString() method."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return returns a string informing that the description of the todo is absent as it cant be."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  \u0027\\u2639\u0027 OOPS!!! The description of a todo cannot be empty\\n\" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                \"  ____________________________________________________________\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 14
    }
  },
  {
    "path": "src/main/java/WrongInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This prints the exception when a wrong word is being input."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class WrongInputException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * This takes not args and overrides the toString() method"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return a string that describes the error that took place which is that an invalid string has been inserted"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  \u0027\\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\" +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                \"  ____________________________________________________________\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 13
    }
  },
  {
    "path": "src/main/java/deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * The deadline is a subclass of Task and it is used to describe tasks that has to be completed by a specific day."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String day;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param name super(name) so that it does whatever is mentioned in the parent class"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param day assigns this.day to day value"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public deadline(String name, String day) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * takes no arguments and overrides the toString method"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the specific representation for deadline class as mentioned with [D] indicating that it is a deadline class"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * and also mentions the deadline."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"[D]\" + super.toString() + \"(by: \" + this.day + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 25
    }
  },
  {
    "path": "src/main/java/event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * The event is a subclass of Task and it is used to describe tasks that has to be completed by a specific day and time"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String dateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param name super(name) so that it does whatever is mentioned in the parent class"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param dateTime assigns this.dayTime to dayTime value"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public event(String name, String dateTime) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *  Overrides the toString methods"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the specific representation for event class as mentioned with [E] indicating that it is a event class"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *      * and also mentions the event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"[E]\" + super.toString() + \"(at: \" + this.dateTime + \")\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 23
    }
  },
  {
    "path": "src/main/java/todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * The todo is a subclass of Task and it is used to describe tasks that have no specific deadline"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class todo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param name super(name) so that it does whatever is mentioned in the parent class"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public todo(String name) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * takes no arguments and overrides the toString method"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the specific representation for todo class as mentioned with [T] indicating that it is a todo class"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 22
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "delete"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "event"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "event read book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "deadline read book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "deadline"
      }
    ],
    "authorContributionMap": {
      "itssodium": 10
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "if"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ! ("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    find ../src/main/java -name \"*.java\" \u003esources.txt"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  )"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "itssodium": 7
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/EventException.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/DeadlineException.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/DeleteException.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/event.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/DoneException.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/TodoException.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Task.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke.java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/deadline.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/todo.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/WrongInputException.java"
      }
    ],
    "authorContributionMap": {
      "itssodium": 11
    }
  }
]
