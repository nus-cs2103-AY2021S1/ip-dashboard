[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "hogantan": 23
    }
  },
  {
    "path": "data/TaskList.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "T | 0 | test"
      }
    ],
    "authorContributionMap": {
      "hogantan": 1
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "T | 1 | buy books"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "D | 1 | eat bread | 6 May 2020 04:00 AM"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "E | 0 | eat dinner | 12 December 2018 11:00 PM to 01:00 AM"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "T | 0 | A Valid ToDo"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "D | 0 | A Valid Deadline | 24 August 2020 08:00 PM"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "E | 0 | A Valid Event | 24 August 2020 08:00 PM to 01:00 AM"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "T | 0 | homework"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "T | 0 | CS2103T Homework"
      }
    ],
    "authorContributionMap": {
      "hogantan": 8
    }
  },
  {
    "path": "data/dummyText.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "T | 0 | A Valid ToDo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "D | 0 | A Valid Deadline | 24 August 2020 08:00 PM"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "E | 0 | A Valid Event | 24 August 2020 08:00 PM to 01:00 AM"
      }
    ],
    "authorContributionMap": {
      "hogantan": 3
    }
  },
  {
    "path": "data/storageValidTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "T | 1 | buy books"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "D | 1 | eat bread | 6 May 2020 04:00 AM"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "E | 0 | eat dinner | 12 December 2018 11:00 PM to 01:00 AM"
      }
    ],
    "authorContributionMap": {
      "hogantan": 3
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 59
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Entry point of the Posh Duke Chat Bot."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Drives the entire process of Duke from start to end."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private boolean isChatting;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Duke(String file) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.isChatting \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList \u003d new TaskList(new ArrayList\u003c\u003e(), this.ui);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.storage \u003d new Storage(file);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.parser \u003d new Parser(this.taskList, this.storage, this.ui);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Runs Duke until termination."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private void startChat() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.ui.showGreeting();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.storage.loadTaskList(this.taskList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (DukeInvalidUserInputException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.ui.showDukeError(e);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        while (this.isChatting) { //isChatting is always true, System.exit() is used to terminate programme."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String user_input \u003d this.ui.getUserInput();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                Command user_command \u003d this.parser.parseCommand(user_input);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                user_command.execute();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                this.ui.showDukeError(e);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        PrintStream ps \u003d new PrintStream(baos);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        PrintStream old \u003d System.out;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        System.setOut(ps);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            Command user_command \u003d this.parser.parseCommand(input);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            user_command.execute();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.ui.showDukeError(e);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        System.setOut(old);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return baos.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String initDuke() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        PrintStream ps \u003d new PrintStream(baos);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        PrintStream old \u003d System.out;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        System.setOut(ps);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.ui.showGreeting();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        System.setOut(old);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.storage.loadTaskList(this.taskList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (DukeInvalidUserInputException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.ui.showDukeError(e);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return baos.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Duke chatBot \u003d new Duke(\"data/duke.txt\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        chatBot.startChat();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "hogantan": 94
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Duke duke \u003d new Duke(\"data/TaskList.txt\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 30
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    //private Image userImage \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    //private Image dukeImage \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DukeBunnyTxt.PNG\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DukeBunnyTxt.PNG\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //Welcome Message"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                DialogBox.getDukeDialog(duke.initDuke(), dukeImage)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void handleUserInput() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 53
    }
  },
  {
    "path": "src/main/java/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Exits from Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class ByeCommand extends Command{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ByeCommand(Ui ui) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.ui.showExit();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"ByeCommand\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 26
    }
  },
  {
    "path": "src/main/java/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Base class of a Command in Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Executes the given command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws DukeException when a certain constraint has not been met."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public abstract void execute() throws DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 16
    }
  },
  {
    "path": "src/main/java/commands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeIllegalCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Adds a Deadline task into the current task list of Duke."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class DeadlineCommand extends Command{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private String user_input;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public DeadlineCommand(TaskList taskList, Storage storage, Ui ui, String user_input) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.user_input \u003d user_input;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void execute() throws DukeInvalidUserInputException, DukeIllegalCommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String withoutCommand \u003d user_input.substring(user_input.indexOf(\u0027 \u0027));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String[] withoutCommandArr \u003d withoutCommand.split(\"/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String description \u003d withoutCommandArr[0].trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (description.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                throw new DukeInvalidUserInputException(\"I\u0027m sorry to inform you that the \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                        + \"description of a deadline must not be empty.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (withoutCommandArr.length \u003c 2) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                throw new DukeInvalidUserInputException(\"It appears you are missing a \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                        + \"follow up \u0027/by\u0027 command.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String followUpCommand \u003d Parser.parseFollowUpCommand(withoutCommandArr[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (followUpCommand.equals(\"by\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                if (!withoutCommandArr[1].trim().contains(\" \")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    throw new DukeInvalidUserInputException(\"It appears you are missing \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                            + \"the date and time for your deadline.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                String dateTime \u003d withoutCommandArr[1].substring(withoutCommandArr[1].indexOf(\" \")).trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                Deadline newTask \u003d new Deadline(description, dateTime);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                this.taskList.add(newTask);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                this.ui.showTotalTasks(this.taskList.getTotalTask());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                this.storage.saveTask(newTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                throw new DukeIllegalCommandException(followUpCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"I\u0027m sorry to inform you that the description \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    + \"of a deadline must not be empty.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"DeadlineCommand\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 66
    }
  },
  {
    "path": "src/main/java/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Deletes a specific task in the current task list of Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private String user_input;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public DeleteCommand(TaskList taskList, Storage storage, Ui ui, String user_input) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.user_input \u003d user_input;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void execute() throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //Get number after done keyword"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String int_substring \u003d user_input.substring(7);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            int int_substring_converted \u003d Integer.parseInt(int_substring);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.taskList.delete(int_substring_converted);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.ui.showTotalTasks(this.taskList.getTotalTask());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.storage.saveTaskList(this.taskList); //Overwrites current data.txt file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"My sincere apologies, but please enter a valid number.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"Oh dear, it appears that item does not exist.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"DeleteCommand\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 45
    }
  },
  {
    "path": "src/main/java/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Marks a specific task in the current task list of Duke as done."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private String user_input;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public DoneCommand(TaskList taskList, Storage storage, String user_input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.user_input \u003d user_input;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void execute() throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //Get number after done keyword"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (this.user_input.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"I\u0027m sorry to inform you that the \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    + \"description of a done must not be empty.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String int_substring \u003d this.user_input.substring(5);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            int int_substring_converted \u003d Integer.parseInt(int_substring);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.taskList.markDone(int_substring_converted);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.storage.saveTaskList(this.taskList); //Overwrites current data.txt file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"My sincere apologies, but please enter a valid number.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"Oh dear, it appears that item does not exist.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"DoneCommand\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 45
    }
  },
  {
    "path": "src/main/java/commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeIllegalCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Adds an Event task into the current task list of Duke."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class EventCommand extends Command{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private String user_input;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public EventCommand(TaskList taskList, Storage storage, Ui ui, String user_input) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.user_input \u003d user_input;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void execute() throws DukeInvalidUserInputException, DukeIllegalCommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String withoutCommand \u003d user_input.substring(user_input.indexOf(\u0027 \u0027));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String[] withoutCommandArr \u003d withoutCommand.split(\"/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String description \u003d withoutCommandArr[0].trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (description.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                throw new DukeInvalidUserInputException(\"I\u0027m sorry to inform you that the \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                        + \"description of an event must not be empty.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (withoutCommandArr.length \u003c 2) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                throw new DukeInvalidUserInputException(\"It appears you are missing a \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                        + \"follow up \u0027/at\u0027 command.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String followUpCommand \u003d Parser.parseFollowUpCommand(withoutCommandArr[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (followUpCommand.equals(\"at\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                if (!withoutCommandArr[1].trim().contains(\" \")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    throw new DukeInvalidUserInputException(\"It appears you are missing the \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                            + \"date and time for your event.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                String dateTime \u003d withoutCommandArr[1].substring(withoutCommandArr[1].indexOf(\" \")).trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                Event newTask \u003d new Event(description, dateTime);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                this.taskList.add(newTask);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                this.ui.showTotalTasks(this.taskList.getTotalTask());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                this.storage.saveTask(newTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                throw new DukeIllegalCommandException(followUpCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"I\u0027m sorry to inform you that the \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    + \"description of an event must not be empty.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"EventCommand\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 66
    }
  },
  {
    "path": "src/main/java/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Finds tasks based on their description that matches a specific user_input keyword."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class FindCommand extends Command{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private String user_input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public FindCommand(TaskList taskList, Ui ui, String user_input) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.user_input \u003d user_input;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (this.user_input.trim().length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.ui.showFindResults(this.taskList.getTaskList(), \"\"); //show all tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String[] userInputArr \u003d this.user_input.split(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (userInputArr.length \u003e 2) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                throw new DukeInvalidUserInputException(\"My deepest apologies but I\u0027m only able to \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                        + \"find tasks based on a single keyword.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                String keyword \u003d userInputArr[1];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                ArrayList\u003cTask\u003e result \u003d this.taskList.findTasksKeyword(keyword);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                this.ui.showFindResults(result, keyword);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 43
    }
  },
  {
    "path": "src/main/java/commands/FindDateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Finds tasks based on their date that matches a specific user_input date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class FindDateCommand extends Command{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private String user_input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public FindDateCommand(TaskList taskList, Ui ui, String user_input) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.user_input \u003d user_input;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (this.user_input.trim().length() \u003d\u003d 6) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.ui.showFindResults(this.taskList.getTaskList(), \"\"); //show all tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String[] userInputArr \u003d this.user_input.split(\" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (userInputArr.length \u003e 2) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                throw new DukeInvalidUserInputException(\"My deepest apologies but it appears the input \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                        + \"date is of the wrong format. (Format: YYYY-MM-DD)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                String keyword \u003d userInputArr[1];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                if (keyword.split(\"-\").length !\u003d 3) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    throw new DukeInvalidUserInputException(\"My deepest apologies but it appears the input \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                            + \"date is of the wrong format. (Format: YYYY-MM-DD)\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    ArrayList\u003cTask\u003e result \u003d this.taskList.findTasksDate(keyword);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    this.ui.showFindResults(result, keyword);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 47
    }
  },
  {
    "path": "src/main/java/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Prints the task list currently stored in Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class ListCommand extends Command{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ListCommand(Ui ui, TaskList taskList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.ui.showTaskList(this.taskList.getTaskList());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"ListCommand\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 27
    }
  },
  {
    "path": "src/main/java/commands/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.ToDo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Adds a To_Do task into the current task list of Duke."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private String user_input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ToDoCommand(TaskList taskList, Storage storage, Ui ui, String user_input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.user_input \u003d user_input;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void execute() throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String description \u003d user_input.substring(5).trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (description.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                throw new DukeInvalidUserInputException(\"I\u0027m sorry to inform you that the \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                        + \"description of a todo must not be empty.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            ToDo newTask \u003d new ToDo(description);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.taskList.add(newTask);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.ui.showTotalTasks(this.taskList.getTotalTask());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.storage.saveTask(newTask);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"I\u0027m sorry to inform you that the \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    + \"description of a todo must not be empty.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"ToDoCommand\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 48
    }
  },
  {
    "path": "src/main/java/data/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package data.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Parent class of all Duke Exceptions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 10
    }
  },
  {
    "path": "src/main/java/data/exception/DukeIllegalCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package data.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Signals that a given command is not recognised by Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class DukeIllegalCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param command that is not recognised by Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public DukeIllegalCommandException(String command) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(\"I\u0027m terribly sorry to inform you that \" + command + \" is not an unrecognizable command.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 13
    }
  },
  {
    "path": "src/main/java/data/exception/DukeInvalidUserInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package data.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Signals that a given user input is invalid and does not fulfill certain constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class DukeInvalidUserInputException extends DukeException{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param msg that contains information related to the failed constraints."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public DukeInvalidUserInputException(String msg) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 13
    }
  },
  {
    "path": "src/main/java/data/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * A specific type of task that contains a description of a task and a specific date and time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private String dateTimeTxt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Deadline(String description, String dateTime) throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        convertDateTime(dateTime);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Converts the given string into a LocalDateTime to be stored in the given Deadline."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param dateTime to be converted into LocalDateTime."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws DukeInvalidUserInputException when an invalid a date time format is used as input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private void convertDateTime(String dateTime) throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String[] dateTimeArr \u003d dateTime.split(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.date \u003d LocalDate.parse(dateTimeArr[0]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.time"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    \u003d LocalTime.parse(dateTimeArr[1].substring(0, 2) + \":\" + dateTimeArr[1].substring(2, 4));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.dateTimeTxt \u003d this.date.format(DateTimeFormatter.ofPattern(\"d MMMM yyyy\")) + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    + this.time.format(DateTimeFormatter.ofPattern(\"hh:mm a\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"It seems you have entered an invalid date and time. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    + \"The format should be as follows YYYY-MM-DD hhmm.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Converts the Deadline task into a string to be saved into a text file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return Deadline task in the form of a string."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toTxtFormat() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"D | \" + super.toTxtFormat() + \" | \" + this.dateTimeTxt;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Parses a given string array into a Deadline task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param txtArray to be parsed into a Deadline task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return Deadline task based on input string array."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws DukeInvalidUserInputException when an invalid date and time format is found in the input string array."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static Deadline parse(String[] txtArray) throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String done \u003d txtArray[1].trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String description \u003d txtArray[2].trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] unFormattedDateTime \u003d txtArray[3].trim().split(\" \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String unformattedDate"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                \u003d unFormattedDateTime[0] + \" \" + unFormattedDateTime[1] + \" \" + unFormattedDateTime[2];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String unformattedTime"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                \u003d unFormattedDateTime[3] + \" \" + unFormattedDateTime[4];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String formattedDate"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                \u003d LocalDate.parse(unformattedDate, DateTimeFormatter.ofPattern(\"d MMMM yyyy\")).toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String time"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                \u003d LocalTime.parse(unformattedTime, DateTimeFormatter.ofPattern(\"hh:mm a\")).toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String formattedTime \u003d time.substring(0, time.indexOf(\u0027:\u0027))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                + time.substring(time.indexOf(\u0027:\u0027) + 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String finalDateTime \u003d formattedDate + \" \" + formattedTime;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Deadline deadline \u003d new Deadline(description,finalDateTime);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (done.equals(\"1\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            deadline.markAsDone();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.dateTimeTxt + \")\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 89
    }
  },
  {
    "path": "src/main/java/data/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * A specific type of task that contains a description of a task and a specific date, start and end time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private String dateTimeTxt;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Event(String description, String dateTime) throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        convertDateTime(dateTime);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Converts the given string into a LocalDate and LocalTime to be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     *     stored as the Event\u0027s date,start and end time."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param dateTime to be converted into LocalDate and LocalTime."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws DukeInvalidUserInputException when an invalid a date time format is used as input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private void convertDateTime(String dateTime) throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String[] dateTimeArr \u003d dateTime.split(\" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.date \u003d LocalDate.parse(dateTimeArr[0]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String []timeArr \u003d dateTimeArr[1].split(\"-\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.startTime \u003d LocalTime.parse(timeArr[0].substring(0, 2) + \":\" + timeArr[0].substring(2, 4));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.endTime \u003d LocalTime.parse(timeArr[1].substring(0, 2) + \":\" + timeArr[1].substring(2, 4));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.dateTimeTxt \u003d this.date.format(DateTimeFormatter.ofPattern(\"d MMMM yyyy\"))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    + \" \" + this.startTime.format(DateTimeFormatter.ofPattern(\"hh:mm a\")) + \" to \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    + this.endTime.format(DateTimeFormatter.ofPattern(\"hh:mm a\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"It seems you have entered an invalid date and time.\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    + \" The format should be as follows YYYY-MM-DD hhmm-hhmm.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Converts the Event task into a string to be saved into a text file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return Event task in the form of a string."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toTxtFormat() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"E | \" + super.toTxtFormat() + \" | \" + this.dateTimeTxt;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Parses a given string array into a Event task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param txtArray to be parsed into a Event task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return Event task based on input string array."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws DukeInvalidUserInputException when an invalid date and time format"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     *     is found in the input string array."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static Event parse(String[] txtArray) throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String done \u003d txtArray[1].trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String description \u003d txtArray[2].trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] unFormattedDateTime \u003d txtArray[3].trim().split(\" \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String unformattedDate"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                \u003d unFormattedDateTime[0] + \" \" + unFormattedDateTime[1] + \" \" + unFormattedDateTime[2];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String unformattedStartTime"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                \u003d unFormattedDateTime[3] + \" \" + unFormattedDateTime[4];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String unformattedEndTime"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                \u003d unFormattedDateTime[6] + \" \" + unFormattedDateTime[7];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String formattedDate"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                \u003d LocalDate.parse(unformattedDate, DateTimeFormatter.ofPattern(\"d MMMM yyyy\")).toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String startLocalTime"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                \u003d LocalTime.parse(unformattedStartTime, DateTimeFormatter.ofPattern(\"hh:mm a\")).toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String endLocalTime"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                \u003d LocalTime.parse(unformattedEndTime, DateTimeFormatter.ofPattern(\"hh:mm a\")).toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String formattedStartTime \u003d startLocalTime.substring(0, startLocalTime.indexOf(\u0027:\u0027))"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                + startLocalTime.substring(startLocalTime.indexOf(\u0027:\u0027) + 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String formattedEndTime \u003d endLocalTime.substring(0, endLocalTime.indexOf(\u0027:\u0027))"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                + endLocalTime.substring(endLocalTime.indexOf(\u0027:\u0027) + 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String finalDateTime \u003d formattedDate + \" \" + formattedStartTime + \"-\" + formattedEndTime;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Event event \u003d new Event(description, finalDateTime);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (done.equals(\"1\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            event.markAsDone();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + this.dateTimeTxt + \")\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 101
    }
  },
  {
    "path": "src/main/java/data/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Base class of a task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private String[] descriptionArr; //to facilitate finding/searching of keyword"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.descriptionArr \u003d description.split(\" \");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Obtains status icon(either tick or cross symbol) based on the Task\u0027s isDone status."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return status icon string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    //return tick or cross symbol accordingly"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return \"\\u2713\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return \"\\u2718\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Parses a given string into a specific type of task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param txtFormat to be parsed into a task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return a specific task type based on the txtFormat."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws DukeInvalidUserInputException when txtFormat is of invalid format to be parsed into a task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static Task parse(String txtFormat) throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        char firstLetter \u003d txtFormat.charAt(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] txtArray \u003d txtFormat.split(\"\\\\|\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (firstLetter \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return ToDo.parse(txtArray);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } else if (firstLetter \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return Deadline.parse(txtArray);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } else if (firstLetter \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return Event.parse(txtArray);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"My apologies but I am not familiar with such a task type.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Converts the task into a string to be saved into a text file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return task in the form of a string."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toTxtFormat() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return \"1 | \" + this.description;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return \"0 | \" + this.description;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Checks whether the description of a task contains a specific keyword."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param keyword to be checked."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return whether the keyword is within the description."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public boolean descriptionContains(String keyword) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        for (String word : descriptionArr) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (word.toLowerCase().equals(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 90
    }
  },
  {
    "path": "src/main/java/data/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Represents an array list of tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList, Ui ui) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Adds a task into the list and then generates and prints a success message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param task to be added into the list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.ui.showAddedToList(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Adds a task into the list only."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Used when loading data from a storage file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param task to be added into the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void load(Task task) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Deletes a specific task based on the task\u0027s index in the task array list and then generates and prints a success message."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param i index of task to be deleted."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void delete(int i) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Task task \u003d this.taskList.get(i - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList.remove(i - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.ui.showDelete(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Marks a specific task as done based on task\u0027s index in the task array list and then generates and prints a success message."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param i index of task to be marked."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void markDone(int i) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Task task \u003d this.taskList.get(i - 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.ui.showMarkDone(task);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Task getTask(int i) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this.taskList.get(i);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public int getTotalTask() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Finds tasks that contain the input keyword within their descriptions."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param keyword to find."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return an array list of tasks that contain the keyword."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ArrayList\u003cTask\u003e findTasksKeyword(String keyword) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        for (Task task : this.taskList) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (task.descriptionContains(keyword)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                result.add(task);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return  result;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Finds tasks that contain the input date within their dates."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param date to find."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return an array list of tasks that contain the date."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ArrayList\u003cTask\u003e findTasksDate(String date) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        LocalDate inputDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        for (Task task : this.taskList) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                if (deadline.getDate().equals(inputDate)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    result.add(task);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                if (event.getDate().equals(inputDate)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    result.add(task);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                //ignore To_Do tasks as they do not have dates"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return  result;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 111
    }
  },
  {
    "path": "src/main/java/data/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * A specific type of task that only contains a description of a task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Converts the To_Do task into a string to be saved into a text file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return To_Do task in the form of a string."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toTxtFormat() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"T | \" + super.toTxtFormat();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Parses a given string array into a To_Do task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param txtArray to be parsed into a To_Do task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return To_Do task based on input string array."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static ToDo parse(String[] txtArray) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ToDo toDo \u003d new ToDo(txtArray[2].trim());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (txtArray[1].trim().equals(\"1\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            toDo.markAsDone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return toDo;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 38
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import commands.ToDoCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import commands.DeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import commands.EventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import commands.ListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import commands.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import commands.ByeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import commands.DoneCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import commands.FindDateCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeIllegalCommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Parser(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Parses user input into a command for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param user_input full user_input string to be parsed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return command based on user_input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws DukeIllegalCommandException when an invalid command is detected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Command parseCommand(String user_input) throws DukeIllegalCommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] user_inputArr \u003d user_input.split(\" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (user_inputArr.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeIllegalCommandException(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String keyword \u003d user_inputArr[0];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        switch (keyword) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return new ListCommand(this.ui, this.taskList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return new DoneCommand(this.taskList, this.storage, user_input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return new ByeCommand(this.ui);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return new ToDoCommand(this.taskList, this.storage, this.ui, user_input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return new EventCommand(this.taskList, this.storage, this.ui, user_input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return new DeadlineCommand(this.taskList, this.storage, this.ui, user_input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return new DeleteCommand(this.taskList, this.storage, this.ui, user_input);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return new FindCommand(this.taskList, this.ui, user_input);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        case \"finddt\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return new FindDateCommand(this.taskList, this.ui, user_input);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                throw new DukeIllegalCommandException(keyword);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Parses user_input when there are commands that follow a \u0027/\u0027 into a command string."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param user_input full follow-up user_input string to be parsed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return string command keyword based on user_input."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static String parseFollowUpCommand(String user_input) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] user_inputArr \u003d user_input.split(\" \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return user_inputArr[0];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 78
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Represents the storage of where Duke is loading information from and saving information to."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (filepath \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Loads the data in the text file from the file path to an assigned TaskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param taskList to load data to."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws DukeInvalidUserInputException if there are any invalid inputs in the file that are unable to be parsed into a Task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void loadTaskList(TaskList taskList) throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        File saveFile \u003d new File(this.filepath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            Scanner s \u003d new Scanner(saveFile);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                Task toAdd \u003d Task.parse(s.nextLine());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                taskList.load(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            //can be ignored as if file is not found it will just be created when saving data"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Saves the given task to the text file from the file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param task to be saved into text file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void saveTask(Task task) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        File saveFile \u003d new File(this.filepath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            saveFile.getParentFile().mkdir(); //to create data directory"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            saveFile.createNewFile(); //to create TaskList.txt file"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            //Check to see whether duke.txt file exists"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (saveFile.length() \u003e 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                FileWriter toSave \u003d new FileWriter(saveFile, true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                toSave.write(System.lineSeparator() + task.toTxtFormat());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                toSave.close();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                FileWriter toSave \u003d new FileWriter(saveFile);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                toSave.write(task.toTxtFormat());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                toSave.close();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            Ui.showUnknownError();;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Overwrites and saves an entire tasklist into the text file from the file path."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param taskList to be saved into the text file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void saveTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            FileWriter overwriteFile \u003d new FileWriter(this.filepath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (taskList.getTotalTask() \u003e 0) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                overwriteFile.write(taskList.getTask(0).toTxtFormat());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                overwriteFile.close();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                for (int i \u003d 1 ; i \u003c taskList.getTaskList().size() ; i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    saveTask(taskList.getTask(i));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                overwriteFile.write(\"\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                overwriteFile.close();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            Ui.showUnknownError();;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 92
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * User interface of Duke which manages all text output."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final Scanner user_input;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.user_input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Generates and prints greeting message upon launching of Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void showGreeting() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String greeting \u003d \"Oh Golly! Who do we have here?\\nThe name\u0027s Duke, how can I be of assistance?\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        System.out.println(greeting);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Generates and prints Duke specific error messages upon catching them."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param e Duke specific exception."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void showDukeError(DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Prints each task in the input tasklist in a labelled and ordered list view."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Generates and prints a message when input tasklist is empty."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param taskList to be printed as an indexed list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void showTaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            Task currentTask \u003d taskList.get(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (i \u003d\u003d taskList.size() - 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                output \u003d output + (i + 1) + \".\" + currentTask;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                output \u003d output + (i + 1) + \".\" + currentTask + \"\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String getListMsg \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String emptyListMsg \u003d \"Oh dear, it seems that your tasks list is empty!\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (taskList.size() \u003c 1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            System.out.println(emptyListMsg);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            System.out.println(getListMsg);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            System.out.println(output);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Prints a message which displays the total number of tasks in a tasklist."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param i the total number of task in a tasklist."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void showTotalTasks(int i) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        System.out.println(\"Marvellous! Now you have \" + i + \" tasks in your list!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Generates and prints the exit message upon exiting Duke."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void showExit() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String parting \u003d \"Well, I\u0027m utterly knackered! Cheerios!\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        System.out.println(parting);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Generates and prints the task that has been added to the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param task that is added to the tasklist."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void showAddedToList(Task task) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String add_to_listMsg \u003d \"No worries, the following task has been added to your list:\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        System.out.println(add_to_listMsg);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        System.out.println(\"\\t\" + task);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void showFindResults(ArrayList\u003cTask\u003e taskList, String user_input) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            Task currentTask \u003d taskList.get(i);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (i \u003d\u003d taskList.size() - 1) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                output \u003d output + (i + 1) + \".\" + currentTask;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                output \u003d output + (i + 1) + \".\" + currentTask + \"\\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String getListMsg \u003d \"Splendid! Here are the tasks in your list that matches \" + \"\u0027\" + user_input + \"\u0027\" + \":\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String emptyListMsg \u003d \"Oh dear, it seems that there are no tasks that matches \" + \"\u0027\" + user_input + \"\u0027\" + \".\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (taskList.size() \u003c 1) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            System.out.println(emptyListMsg);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            System.out.println(getListMsg);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            System.out.println(output);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Generates and prints the unknown error message upon encountering an unidentifiable error."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static void showUnknownError() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        System.out.println(\"OH FIDDLESTICKS, WE SEEM TO HAVE HIT A BUMP ON THE ROAD HERE. \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                + \"AN UNKNOWN ERROR HAS BEEN DETECTED.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this.user_input.nextLine();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Generates and prints the done message when a task is being marked as done."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param task that is being marked as done."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void showMarkDone(Task task) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String markDoneMsg \u003d \"Splendid! I\u0027ve marked the following task as done:\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        System.out.println(markDoneMsg);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        System.out.println(\"  [\" + task.getStatusIcon() + \"] \" + task.getDescription());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Generates and prints the delete message when a task is being deleted."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param task that is being deleted."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void showDelete(Task task) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String deleteMsg \u003d \"No worries, the following task has been deleted from your list:\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        System.out.println(deleteMsg);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        System.out.println(\"  [\" + task.getStatusIcon() + \"] \" + task.getDescription());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 139
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #011627;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" textFill\u003d\"#2ec4b6\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "hogantan": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #011627;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"14.0\" layoutY\u003d\"567.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"25.0\" prefWidth\u003d\"303.0\" promptText\u003d\"Type command here\" AnchorPane.bottomAnchor\u003d\"7.666666666666629\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"332.0\" layoutY\u003d\"567.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"7.0\" prefWidth\u003d\"56.0\" style\u003d\"-fx-background-color: #2ec4b6;\" text\u003d\"Send\" textAlignment\u003d\"JUSTIFY\" textFill\u003d\"#fdfffc\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #011627;\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: #011627;\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "hogantan": 23
    }
  },
  {
    "path": "src/test/data/dummyText.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "T | 0 | A Valid ToDo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "D | 0 | A Valid Deadline | 24 August 2020 08:00 PM"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "E | 0 | A Valid Event | 24 August 2020 08:00 PM to 01:00 AM"
      }
    ],
    "authorContributionMap": {
      "hogantan": 3
    }
  },
  {
    "path": "src/test/data/storageValidTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "T | 1 | buy books"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "D | 1 | eat bread | 6 May 2020 04:00 AM"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "E | 0 | eat dinner | 12 December 2018 11:00 PM to 01:00 AM"
      }
    ],
    "authorContributionMap": {
      "hogantan": 3
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.Deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.ToDo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void convertDateTime_nullInput_throwsException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Deadline(\"Description\", null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void convertDateTime_validInput_returnsValidDateTime() throws Exception{"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Description\", \"2020-02-02 2020\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"[D][\\u2718] Description (by: 2 February 2020 08:20 PM)\", deadline.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void convertDateTime_invalidDate_throwsException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(DukeInvalidUserInputException.class, () -\u003e new Deadline(\"Description\", \"2020-20-20 2020\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void convertDateTime_invalidTime_throwsException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(DukeInvalidUserInputException.class, () -\u003e new Deadline(\"Description\", \"2020-02-02 3000\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void toTxtFormat_validInput_returnsTxtFormat() throws Exception{"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Description\", \"2020-02-02 2020\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"D | 0 | Description | 2 February 2020 08:20 PM\", deadline.toTxtFormat());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_nullInput_throwsException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] txtArray \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Deadline.parse(txtArray));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_validInput_returnsDeadline() throws Exception{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] txtArray \u003d {\"D\", \"0\", \"A Valid Description\", \"24 August 2020 08:00 PM\"};"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Deadline deadline \u003d Deadline.parse(txtArray);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"[D][\\u2718] A Valid Description (by: 24 August 2020 08:00 PM)\", deadline.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 50
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.Deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void convertDateTime_nullInput_throwsException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Event(\"Description\", null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void convertDateTime_validInput_returnsValidDateTime() throws Exception{"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Event deadline \u003d new Event(\"Description\", \"2020-02-02 2020-2121\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"[E][\\u2718] Description (at: 2 February 2020 08:20 PM to 09:21 PM)\", deadline.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void convertDateTime_invalidDate_throwsException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(DukeInvalidUserInputException.class, () -\u003e new Event(\"Description\", \"2020-20-20 2020-2121\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void convertDateTime_invalidTime_throwsException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(DukeInvalidUserInputException.class, () -\u003e new Event(\"Description\", \"2020-02-02 3000-3000\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void toTxtFormat_validInput_returnsTxtFormat() throws Exception{"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Event event \u003d new Event(\"Description\", \"2020-02-02 2020-2121\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"E | 0 | Description | 2 February 2020 08:20 PM to 09:21 PM\", event.toTxtFormat());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_nullInput_throwsException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] txtArray \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Event.parse(txtArray));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_validInput_returnsDeadline() throws Exception{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] txtArray \u003d {\"D\", \"0\", \"A Valid Description\", \"24 August 2020 08:00 PM to 01:00 AM\"};"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Event event \u003d Event.parse(txtArray);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"[E][\\u2718] A Valid Description (at: 24 August 2020 08:00 PM to 01:00 AM)\", event.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 49
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeIllegalCommandException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_emptyUserInput_returnsIllegalCommand() throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Parser parser \u003d createDummyParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(DukeIllegalCommandException.class, () -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_blankUserInput_returnsIllegalCommand() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Parser parser \u003d createDummyParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(DukeIllegalCommandException.class, () -\u003e parser.parseCommand(\" \"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_unknownCommand_returnsIllegalCommand() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Parser parser \u003d createDummyParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(DukeIllegalCommandException.class, () -\u003e parser.parseCommand(\"unknown blah blah\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_listCommand_returnsListCommand() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Parser parser \u003d createDummyParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Command output \u003d parser.parseCommand(\"list\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"ListCommand\", output.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_byeCommand_returnsByeCommand() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Parser parser \u003d createDummyParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Command output \u003d parser.parseCommand(\"bye\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"ByeCommand\", output.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_toDoCommand_returnsToDoCommand() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Parser parser \u003d createDummyParser();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Command output \u003d parser.parseCommand(\"todo arguments\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"ToDoCommand\", output.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_deadlineCommand_returnsDeadlineCommand() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Parser parser \u003d createDummyParser();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Command output \u003d parser.parseCommand(\"deadline arguments /by 2020-20-20 2020\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"DeadlineCommand\", output.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_eventCommand_returnsEventCommand() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Parser parser \u003d createDummyParser();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Command output \u003d parser.parseCommand(\"event arguments /at 2020-20-20 2020-2020\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"EventCommand\", output.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_doneCommand_returnsDoneCommand() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Parser parser \u003d createDummyParser();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Command output \u003d parser.parseCommand(\"done 1\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"DoneCommand\", output.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_deleteCommand_returnsDeleteCommand() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Parser parser \u003d createDummyParser();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Command output \u003d parser.parseCommand(\"delete 1\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"DeleteCommand\", output.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_unknownFollowUpCommand_returnsCommandKeyword() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String output \u003d Parser.parseFollowUpCommand(\"unknowncommand\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"unknowncommand\", output);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_atFollowUpCommand_returnsCommandKeyword() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String output \u003d Parser.parseFollowUpCommand(\"at\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"at\", output);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_byFollowUpCommand_returnsCommandKeyword() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String output \u003d Parser.parseFollowUpCommand(\"by\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"by\", output);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Parser createDummyParser() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new Parser(new TaskList(new ArrayList\u003c\u003e(), new Ui()), new Storage(\"data/dummyText.txt\"), new Ui());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 105
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void constructor_nullFilePath_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Storage(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void load_validTxtFile() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String validTxtFile \u003d \"data/storageValidTest.txt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Storage storage \u003d new Storage(validTxtFile);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        TaskList dummyTaskList \u003d createDummyTaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        storage.loadTaskList(dummyTaskList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(3, dummyTaskList.getTotalTask());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(dummyTaskList.getTask(0).toTxtFormat(), \"T | 1 | buy books\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(dummyTaskList.getTask(1).toTxtFormat(), \"D | 1 | eat bread | 6 May 2020 04:00 AM\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(dummyTaskList.getTask(2).toTxtFormat(), \"E | 0 | eat dinner | 12 December 2018 11:00 PM to 01:00 AM\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void load_nonExistentFile() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String validTxtFile \u003d \"data/doesNotExist.txt\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Storage storage \u003d new Storage(validTxtFile);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        TaskList dummyTaskList \u003d createDummyTaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        storage.loadTaskList(dummyTaskList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(0, dummyTaskList.getTotalTask());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void save_nullTask() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String validTxtFile \u003d \"data/storageValidTest.txt\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Storage storage \u003d new Storage(validTxtFile);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e storage.saveTask(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void save_validTask() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        emptyDummyText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String validTxtFile \u003d \"data/dummyText.txt\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Storage storage \u003d new Storage(validTxtFile);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ToDo validToDo \u003d createDummyToDo();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Deadline validDeadline \u003d createDummyDeadline();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Event validEvent \u003d createDummyEvent();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        storage.saveTask(validToDo);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        storage.saveTask(validDeadline);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        storage.saveTask(validEvent);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Scanner s \u003d new Scanner(new File(validTxtFile));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String todo \u003d s.nextLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String deadline \u003d s.nextLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String event \u003d s.nextLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"T | 0 | A Valid ToDo\", todo);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"D | 0 | A Valid Deadline | 24 August 2020 08:00 PM\", deadline);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"E | 0 | A Valid Event | 24 August 2020 08:00 PM to 01:00 AM\", event);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private TaskList createDummyTaskList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new TaskList(new ArrayList\u003cTask\u003e(), new Ui());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private ToDo createDummyToDo() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new ToDo(\"A Valid ToDo\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Deadline createDummyDeadline() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new Deadline(\"A Valid Deadline\", \"2020-08-24 2000\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Event createDummyEvent() throws Exception{"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new Event(\"A Valid Event\", \"2020-08-24 2000-0100\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private void emptyDummyText() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        File dummyText \u003d new File(\"data/dummyText.txt\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        FileWriter fw \u003d new FileWriter(dummyText);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        fw.write(\"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 92
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.ToDo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void toTxtFormat_emptyDescription_returnsEmptyDescription() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ToDo toDo \u003d new ToDo(\"\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"T | 0 | \", toDo.toTxtFormat());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void toTxtFormat_nonEmptyDescription_returnsDescription() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ToDo toDo \u003d new ToDo(\"Description\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"T | 0 | Description\", toDo.toTxtFormat());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_nullTxtArray_throwsException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] txtArray \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ToDo.parse(txtArray));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_validTxtArray_returnsToDo() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] txtArray \u003d {\"T\", \"1\", \"A Valid Description\"};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ToDo toDo \u003d ToDo.parse(txtArray);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"[T][\\u2713] A Valid Description\", toDo.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 33
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done123"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done 123"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done todo"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done bye"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done deadline"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "list123"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "list list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "list 123"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "deadline fake deadline"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "deadline fake deadline2 /byThisDay"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "deadline fake deadline3 /atThatDay"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "event fake event"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "event fake event2 /atThisDay"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "event fake event3 /byThatDay"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "delete 7"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "delete 7"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "delete 6"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "delete"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "todo"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "event"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "hogantan": 39
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "SET MY_PATH\u003d \"C:\\Users\\hogan\\Desktop\\Computer Science\\CS2103T Y2S1\\iP\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "if not exist %MY_PATH%\\bin mkdir %MY_PATH%\\bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "hogantan": 4
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "cp EXPECTED.TXT.TXT EXPECTED.TXT-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED.TXT-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "hogantan": 3
    }
  },
  {
    "path": "text-ui-test/testidea.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test todo command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test deadline command"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test event command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test todo command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test todo command"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test list command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test done command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt done command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt done command (out of bound)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt done command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt done command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt done command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt done command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt done command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt done command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test done command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test list command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test deadline command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test event command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt list command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt list command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt list command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test deadline command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test deadline command (w/o space by)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test deadline command (w/o space at)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test event command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test event command (w/o space at)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test event command (w/o space by)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test list command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test delete command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test delete command"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test delete command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test incomplete done command"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test incomplete delete command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test incomplete todo command"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test incomplete event command"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test incomplete deadline command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test empty command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test bye"
      }
    ],
    "authorContributionMap": {
      "hogantan": 39
    }
  }
]
