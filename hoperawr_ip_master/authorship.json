[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "# duke.duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.duke.java` file, right-click it, and choose `Run duke.duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 2,
      "-": 24
    }
  },
  {
    "path": "src/main/java/duke/Deadlines.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class Deadlines extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    LocalDate date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    LocalTime time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    Deadlines(String name, String time) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        super(name,time);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String[] by \u003d time.split(\" \");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        this.date \u003d parseDate(by[1]);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        this.time \u003d parseTime(by[2]);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public LocalDate parseDate(String dateString) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return LocalDate.parse(dateString, format);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public LocalTime parseTime(String timeString) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return LocalTime.parse(timeString, format);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String printDateTime() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        DateTimeFormatter formatDate \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        DateTimeFormatter formatTime \u003d DateTimeFormatter.ofPattern(\"h:mma\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return String.format(\"%s, %s\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                formatDate.format(date),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                formatTime.format(time));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (super.completed) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return \"[D]\" + \"[\" + \"✓\" + \"] \" + name + \"(by: \" + printDateTime() + \")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return \"[D]\" + \"[\" + \"✗\" + \"] \" + name + \"(by: \" + printDateTime() + \")\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 44
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public Duke() throws IOException{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        ui.drawLine();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList \u003d new TaskList(storage.loadFile());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public static void main(String[] args) throws  IOException{"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        new Duke().bot();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void bot() throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                String first \u003d input.split(\" \")[0];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    ui.bye();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                } else if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    ui.printList(taskList.getList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    ui.drawLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                } else if (input.split(\" \")[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    ui.doneTask(taskList.done(Integer.parseInt(input.split(\" \")[1])));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    ui.listCount(taskList.countList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    ui.drawLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    storage.saveFile(taskList.getList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                } else if (first.equals(\"todo\")|| first.equals(\"deadline\") || first.equals(\"event\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    ui.addTask(taskList.add(input));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    ui.listCount(taskList.countList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    ui.drawLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    storage.saveFile(taskList.getList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                } else if (first.equals(\"delete\")){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    ui.deleteTask(taskList.delete(input));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    ui.listCount(taskList.countList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    ui.drawLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    storage.saveFile(taskList.getList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    throw new DukeException(\"Sorry I don\u0027t know what you mean\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        catch (DukeException ex){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            System.out.println(ex.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hoperawr": 62,
      "-": 8
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public DukeException(String message){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 7
    }
  },
  {
    "path": "src/main/java/duke/Events.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class Events extends Task{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    LocalDate date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    LocalTime startTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    LocalTime endTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    Events(String name, String time) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        super(name,time);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String[] at \u003d time.split(\" \");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        this.date \u003d parseDate(at[1]);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String[] timeArray \u003d at[2].split(\"-\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        this.startTime \u003d parseTime(timeArray[0]);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        this.endTime \u003d parseTime(timeArray[1]);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public LocalDate parseDate(String dateString) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return LocalDate.parse(dateString, format);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public LocalTime parseTime(String timeString) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return LocalTime.parse(timeString, format);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String printDateTime() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        DateTimeFormatter formatDate \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        DateTimeFormatter formatTime \u003d DateTimeFormatter.ofPattern(\"h:mma\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return String.format(\"%s, %s to %s\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                formatDate.format(date),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                formatTime.format(startTime),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                formatTime.format(endTime));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (super.completed) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return \"[E]\" + \"[\" + \"✓\" + \"] \" + name + \"(at: \" + printDateTime()  +\")\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return \"[E]\" + \"[\" + \"✗\" + \"] \" + name + \"(at: \" + printDateTime()  +\")\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 51
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.io.File;  // Import the File class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.io.IOException;  // Import the IOException class to handle errors"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "private Path path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public Storage() throws IOException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String home \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String fp \u003d \"/save.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        path \u003d Paths.get(home, fp);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (Files.notExists(path)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            File newDir \u003d new File(path.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            newDir.createNewFile();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void saveFile(List\u003cTask\u003e list) throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        FileWriter fw \u003d new FileWriter(String.valueOf(path));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String contents \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        for (Task x : list) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (x.getClass().getSimpleName() \u003d\u003d \"Duke.ToDo\") {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                String temp \u003d \"Duke.ToDo\\n\" + x.completed + \"\\n\" + x.name + \"\\n\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                contents +\u003d temp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } else if (x.getClass().getSimpleName() \u003d\u003d \"Duke.Deadlines\") {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                String temp \u003d \"Duke.Deadlines\\n\" + x.completed + \"\\n\" + x.name + \"\\n\" + x.time + \"\\n\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                contents +\u003d temp;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                String temp \u003d \"Duke.Events\\n\" + x.completed + \"\\n\" +x.name + \"\\n\" + x.time + \"\\n\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                contents +\u003d temp;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        fw.write(contents);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public List\u003cTask\u003e loadFile() throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        Scanner sc \u003d new Scanner(path);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        while(sc.hasNextLine()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String type \u003d sc.nextLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String done \u003d sc.nextLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String name \u003d sc.nextLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (type.equals(\"Duke.ToDo\")){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                sc.nextLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                Task temp \u003d new ToDo(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                if (done \u003d\u003d \"true\"){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    temp.completedTask();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                list.add(temp);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } else if (type.equals(\"Duke.Deadlines\")){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                String time \u003d sc.nextLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                sc.nextLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                Task temp \u003d new Deadlines(name,time);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                if (done \u003d\u003d \"true\"){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    temp.completedTask();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                list.add(temp);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                String time \u003d sc.nextLine();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                sc.nextLine();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                Task temp \u003d new Events(name,time);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                if (done \u003d\u003d \"true\"){"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    temp.completedTask();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                list.add(temp);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hoperawr": 86
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    boolean completed \u003d false;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    String name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    String time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    Task(String name){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    Task(String name, String time){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public Task completedTask(){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        completed \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 25
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    List\u003cTask\u003e list;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    TaskList(List\u003cTask\u003e list){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public Task add(String input) throws DukeException{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (input.split(\" \")[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String[] temp \u003d input.split(\" \",2);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (temp.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                throw new DukeException(\"Description of todo cannot be empty!\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            Task newTask \u003d new ToDo(temp[1]);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            list.add(newTask);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return newTask;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else if (input.split(\" \")[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String[] temp \u003d input.split(\" \",2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (temp.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                throw new DukeException(\"Description of deadline cannot be empty!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String[] temp2 \u003d temp[1].split(\"/by\",2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (temp2.length \u003c\u003d 1){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                throw new DukeException(\"You need to specify a time!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            Task newTask \u003d new Deadlines(temp2[0], temp2[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            list.add(newTask);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return newTask;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else if (input.split(\" \")[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String[] temp \u003d input.split(\" \",2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (temp.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                throw new DukeException(\"Description of event cannot be empty!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String[] temp2 \u003d temp[1].split(\"/at\",2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (temp2.length \u003c\u003d 1){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                throw new DukeException(\"You need to specify a time!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            Task newTask \u003d new Events(temp2[0], temp2[1]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            list.add(newTask);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return newTask;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"Sorry I don\u0027t know what you mean by that\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public Task delete(String input){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String num \u003d input.split(\" \")[1];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (num.equals(\"all\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            deleteAll();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            int intNum \u003d Integer.parseInt(num);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            Task temp \u003d list.get(intNum-1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            list.remove(intNum-1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return temp;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public Task done(int num){"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return list.set(num-1, list.get(num-1).completedTask());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public List\u003cTask\u003e getList(){"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public int countList(){"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void deleteAll(){"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public static void main(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        TaskList tasklist \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        tasklist.add(\"todo eat\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        ToDo temp1 \u003d new ToDo(\"eat\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        ToDo temp2 \u003d new ToDo(\"eat\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        System.out.println(temp1.equals(temp2));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 93
    }
  },
  {
    "path": "src/main/java/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    TaskList taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void setUp(){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void dummyTest(){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void testAddToDo() throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.add(\"todo eat\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        assertEquals(taskList.countList(),1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void testAddDeadline() throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.add(\"deadline /by 27/08/2020 2359\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        assertEquals(taskList.countList(),1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void testAddEvent() throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.add(\"event sleep /at 28/08/2020 0000-0800\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        assertEquals(taskList.countList(),1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void delete() throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.add(\"event sleep /at 28/08/2020 0000-0800\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.add(\"deadline /by 27/08/2020 2359\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.delete(\"delete 1\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        assertEquals(taskList.countList(),1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void deleteAll() throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.add(\"event sleep /at 28/08/2020 0000-0800\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.add(\"deadline /by 27/08/2020 2359\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.add(\"todo eat\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.delete(\"delete all\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        assertEquals(taskList.countList(),0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 62
    }
  },
  {
    "path": "src/main/java/duke/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class ToDo extends Task{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    ToDo(String name) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (super.completed){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return \"[T]\" + \"[\" + \"✓\" + \"] \" + name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return \"[T]\" + \"[\" + \"✗\" + \"] \" + name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 17
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    String line \u003d \"--------------------------------------------------\"; //50 dashes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    Ui(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void drawLine(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void addTask(Task task){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        System.out.println(\"added: \" + task.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void deleteTask(Task task){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (task \u003d\u003d null){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            deleteAll();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            System.out.println(\"Noted. I\u0027ve removed this task: \" + \"\\n\" + task.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void doneTask(Task task){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        System.out.println(task.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void listCount(int count){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        System.out.println(\"Now you have \"+count+\" tasks in the list.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void bye(){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void deleteAll(){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        System.out.println(\"All tasks have been deleted!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void printList(List\u003cTask\u003e list){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        int tempIndex \u003d 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        for (Task x: list){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            System.out.println(tempIndex + \".\" + x.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            tempIndex +\u003d 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 53
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "todo CS2103"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "deadline ip /by 27/08/2020 2359"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "event tutorial /at 28/08/2020 1600-1800"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "delete all"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 13
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "java -classpath ..\\bin duke.duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 4,
      "-": 19
    }
  }
]
