[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":16,"author":{"gitId":"xyzhangg"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":18,"author":{"gitId":"xyzhangg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"xyzhangg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"xyzhangg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"xyzhangg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"xyzhangg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"xyzhangg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"xyzhangg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"xyzhangg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"xyzhangg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"xyzhangg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"xyzhangg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"xyzhangg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"xyzhangg"},"content":"    mainClassName \u003d \"Duke\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.23\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"xyzhangg"},"content":"    enableAssertions \u003d true"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xyzhangg":17,"-":45}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"xyzhangg"},"content":"- Adding tasks: todo, deadline, event"},{"lineNumber":5,"author":{"gitId":"xyzhangg"},"content":"- View tasks added: list"},{"lineNumber":6,"author":{"gitId":"xyzhangg"},"content":"- Find tasks: find"},{"lineNumber":7,"author":{"gitId":"xyzhangg"},"content":"- Finish tasks: done"},{"lineNumber":8,"author":{"gitId":"xyzhangg"},"content":"- Remove tasks: delete"},{"lineNumber":9,"author":{"gitId":"xyzhangg"},"content":"- Exit application: bye"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"xyzhangg"},"content":"Notes about the command format:"},{"lineNumber":12,"author":{"gitId":"xyzhangg"},"content":"- words in `UPPER_CASE` are the parameters supplied by the user"},{"lineNumber":13,"author":{"gitId":"xyzhangg"},"content":"- items in square brackets `[]` are optional"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"xyzhangg"},"content":"### Feature 1 "},{"lineNumber":18,"author":{"gitId":"xyzhangg"},"content":"Adding tasks to the task list"},{"lineNumber":19,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":20,"author":{"gitId":"xyzhangg"},"content":"#### `todo` - Adds a todo task to the task list"},{"lineNumber":21,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":22,"author":{"gitId":"xyzhangg"},"content":"Format: `todo TASK_DESCRIPTION`"},{"lineNumber":23,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":24,"author":{"gitId":"xyzhangg"},"content":"Examples of correct usage: "},{"lineNumber":25,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":26,"author":{"gitId":"xyzhangg"},"content":"- todo return book"},{"lineNumber":27,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":28,"author":{"gitId":"xyzhangg"},"content":"Examples of wrong usage: "},{"lineNumber":29,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":30,"author":{"gitId":"xyzhangg"},"content":"- todo"},{"lineNumber":31,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":32,"author":{"gitId":"xyzhangg"},"content":"#### `deadline` - Adds a deadline task to the task list"},{"lineNumber":33,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":34,"author":{"gitId":"xyzhangg"},"content":"Format: `deadline TASK_DESCRIPTION /by YYYY-MM-DD`"},{"lineNumber":35,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":36,"author":{"gitId":"xyzhangg"},"content":"Examples of correct usage: "},{"lineNumber":37,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":38,"author":{"gitId":"xyzhangg"},"content":"- deadline return book /by 2020-01-01"},{"lineNumber":39,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":40,"author":{"gitId":"xyzhangg"},"content":"Examples of wrong usage: "},{"lineNumber":41,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":42,"author":{"gitId":"xyzhangg"},"content":"- deadline return book by 2020-01-01"},{"lineNumber":43,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":44,"author":{"gitId":"xyzhangg"},"content":"- deadline return book /by 2020/01/01"},{"lineNumber":45,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":46,"author":{"gitId":"xyzhangg"},"content":"- deadline return book"},{"lineNumber":47,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":48,"author":{"gitId":"xyzhangg"},"content":"- deadline"},{"lineNumber":49,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":50,"author":{"gitId":"xyzhangg"},"content":"#### `event` - Adds a event task to the task list"},{"lineNumber":51,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":52,"author":{"gitId":"xyzhangg"},"content":"Format: `event TASK_DESCRIPTION /at YYYY-MM-DD`"},{"lineNumber":53,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":54,"author":{"gitId":"xyzhangg"},"content":"Examples of correct usage: "},{"lineNumber":55,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":56,"author":{"gitId":"xyzhangg"},"content":"- event read book /at 2020-01-01"},{"lineNumber":57,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":58,"author":{"gitId":"xyzhangg"},"content":"Examples of wrong usage: "},{"lineNumber":59,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":60,"author":{"gitId":"xyzhangg"},"content":"- event read book at 2020-01-01"},{"lineNumber":61,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":62,"author":{"gitId":"xyzhangg"},"content":"- event read book /at 2020/01/01"},{"lineNumber":63,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":64,"author":{"gitId":"xyzhangg"},"content":"- event read book"},{"lineNumber":65,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":66,"author":{"gitId":"xyzhangg"},"content":"- event"},{"lineNumber":67,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":68,"author":{"gitId":"xyzhangg"},"content":"### Feature 2"},{"lineNumber":69,"author":{"gitId":"xyzhangg"},"content":"View tasks in the list"},{"lineNumber":70,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":71,"author":{"gitId":"xyzhangg"},"content":"#### `list` - Displays all the added tasks in a list"},{"lineNumber":72,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":73,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":74,"author":{"gitId":"xyzhangg"},"content":"### Feature 3"},{"lineNumber":75,"author":{"gitId":"xyzhangg"},"content":"Find tasks from the list"},{"lineNumber":76,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":77,"author":{"gitId":"xyzhangg"},"content":"#### `find` - Finds all the tasks that contains a keyword"},{"lineNumber":78,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":79,"author":{"gitId":"xyzhangg"},"content":"Format: `find KEYWORD`"},{"lineNumber":80,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":81,"author":{"gitId":"xyzhangg"},"content":"Examples of correct usage: "},{"lineNumber":82,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":83,"author":{"gitId":"xyzhangg"},"content":"- find book"},{"lineNumber":84,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":85,"author":{"gitId":"xyzhangg"},"content":"Examples of wrong usage: "},{"lineNumber":86,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":87,"author":{"gitId":"xyzhangg"},"content":"- find"},{"lineNumber":88,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":89,"author":{"gitId":"xyzhangg"},"content":"### Feature 4"},{"lineNumber":90,"author":{"gitId":"xyzhangg"},"content":"Finish tasks in the list"},{"lineNumber":91,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":92,"author":{"gitId":"xyzhangg"},"content":"#### `done` - Marks tasks as done"},{"lineNumber":93,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":94,"author":{"gitId":"xyzhangg"},"content":"Format: `done TASK_INDEX [TASK_INDEX] ...` (multiple task indexes should be separated by a single space)"},{"lineNumber":95,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":96,"author":{"gitId":"xyzhangg"},"content":"Examples of correct usage: "},{"lineNumber":97,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":98,"author":{"gitId":"xyzhangg"},"content":"- done 1"},{"lineNumber":99,"author":{"gitId":"xyzhangg"},"content":"- done 1 2 3"},{"lineNumber":100,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":101,"author":{"gitId":"xyzhangg"},"content":"Examples of wrong usage: "},{"lineNumber":102,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":103,"author":{"gitId":"xyzhangg"},"content":"- done"},{"lineNumber":104,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":105,"author":{"gitId":"xyzhangg"},"content":"### Feature 5"},{"lineNumber":106,"author":{"gitId":"xyzhangg"},"content":"Remove tasks from the list"},{"lineNumber":107,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":108,"author":{"gitId":"xyzhangg"},"content":"#### `delete` - Deletes tasks from the list"},{"lineNumber":109,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":110,"author":{"gitId":"xyzhangg"},"content":"Format: `delete TASK_INDEX [TASK_INDEX] ...` (multiple task indexes should be separated by a single space)"},{"lineNumber":111,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":112,"author":{"gitId":"xyzhangg"},"content":"Examples of correct usage: "},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"xyzhangg"},"content":"- delete 1"},{"lineNumber":115,"author":{"gitId":"xyzhangg"},"content":"- delete 1 2 3"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"xyzhangg"},"content":"Examples of wrong usage: "},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"xyzhangg"},"content":"- delete"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"xyzhangg"},"content":"### Feature 6"},{"lineNumber":122,"author":{"gitId":"xyzhangg"},"content":"Exit the application"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"xyzhangg"},"content":"#### `bye` - Closes the application"}],"authorContributionMap":{"xyzhangg":112,"-":12}},{"path":"src/main/java/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xyzhangg"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"xyzhangg"},"content":" * Encapsulates an AddCommand object, contains information about the task being added."},{"lineNumber":3,"author":{"gitId":"xyzhangg"},"content":" */"},{"lineNumber":4,"author":{"gitId":"xyzhangg"},"content":"public class AddCommand extends Command {"},{"lineNumber":5,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":6,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"xyzhangg"},"content":"     * Represents the task being added to the task list."},{"lineNumber":8,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"xyzhangg"},"content":"    private final Task task;"},{"lineNumber":10,"author":{"gitId":"xyzhangg"},"content":"    "},{"lineNumber":11,"author":{"gitId":"xyzhangg"},"content":"    AddCommand(Task task) {"},{"lineNumber":12,"author":{"gitId":"xyzhangg"},"content":"        this.task \u003d task;"},{"lineNumber":13,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":15,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"xyzhangg"},"content":"     * Adds a task to the task list and updates the storage."},{"lineNumber":17,"author":{"gitId":"xyzhangg"},"content":"     * "},{"lineNumber":18,"author":{"gitId":"xyzhangg"},"content":"     * @param taskList taskList which the task is being added to.  "},{"lineNumber":19,"author":{"gitId":"xyzhangg"},"content":"     * @param ui ui used to show the added task."},{"lineNumber":20,"author":{"gitId":"xyzhangg"},"content":"     * @param storage storage used to store the taskList."},{"lineNumber":21,"author":{"gitId":"xyzhangg"},"content":"     * @return a string representation of the added task."},{"lineNumber":22,"author":{"gitId":"xyzhangg"},"content":"     * @throws DukeException if updateTasks fails."},{"lineNumber":23,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"xyzhangg"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"xyzhangg"},"content":"    String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":26,"author":{"gitId":"xyzhangg"},"content":"        taskList.addNewTask(task);"},{"lineNumber":27,"author":{"gitId":"xyzhangg"},"content":"        storage.updateTasks(taskList);"},{"lineNumber":28,"author":{"gitId":"xyzhangg"},"content":"        return ui.showAddedTask(task, taskList.getListLength());"},{"lineNumber":29,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"xyzhangg"},"content":"}"}],"authorContributionMap":{"xyzhangg":30}},{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xyzhangg"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"xyzhangg"},"content":" * Encapsulates the Command object, supports the function execute which executes a series of instructions."},{"lineNumber":3,"author":{"gitId":"xyzhangg"},"content":" */"},{"lineNumber":4,"author":{"gitId":"xyzhangg"},"content":"public abstract class Command {"},{"lineNumber":5,"author":{"gitId":"xyzhangg"},"content":"    "},{"lineNumber":6,"author":{"gitId":"xyzhangg"},"content":"    abstract String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;"},{"lineNumber":7,"author":{"gitId":"xyzhangg"},"content":"    "},{"lineNumber":8,"author":{"gitId":"xyzhangg"},"content":"    boolean isExit() {"},{"lineNumber":9,"author":{"gitId":"xyzhangg"},"content":"        return false;"},{"lineNumber":10,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"xyzhangg"},"content":"    "},{"lineNumber":12,"author":{"gitId":"xyzhangg"},"content":"}"}],"authorContributionMap":{"xyzhangg":12}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xyzhangg"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"xyzhangg"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":4,"author":{"gitId":"xyzhangg"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"xyzhangg"},"content":" * Encapsulates the Deadline object, contains information about the due date. "},{"lineNumber":6,"author":{"gitId":"xyzhangg"},"content":" */"},{"lineNumber":7,"author":{"gitId":"xyzhangg"},"content":"public class Deadline extends Task {"},{"lineNumber":8,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":9,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"xyzhangg"},"content":"     * Represents the due date."},{"lineNumber":11,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"xyzhangg"},"content":"    protected LocalDate by;"},{"lineNumber":13,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":14,"author":{"gitId":"xyzhangg"},"content":"    public Deadline(String description, LocalDate by) {"},{"lineNumber":15,"author":{"gitId":"xyzhangg"},"content":"        super(description);"},{"lineNumber":16,"author":{"gitId":"xyzhangg"},"content":"        this.by \u003d by;"},{"lineNumber":17,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":19,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"xyzhangg"},"content":"     * Converts to a string format to be saved in a text file."},{"lineNumber":21,"author":{"gitId":"xyzhangg"},"content":"     * "},{"lineNumber":22,"author":{"gitId":"xyzhangg"},"content":"     * @return a string representation of the deadline object."},{"lineNumber":23,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"xyzhangg"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"xyzhangg"},"content":"    public String saveAsString() {"},{"lineNumber":26,"author":{"gitId":"xyzhangg"},"content":"        return \"D\" + super.saveAsString() + \" | \" + by;"},{"lineNumber":27,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":29,"author":{"gitId":"xyzhangg"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"xyzhangg"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"xyzhangg"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":32,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"xyzhangg"},"content":"}"}],"authorContributionMap":{"xyzhangg":33}},{"path":"src/main/java/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xyzhangg"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":3,"author":{"gitId":"xyzhangg"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"xyzhangg"},"content":" * Encapsulates a DeleteCommand object, contains information about the indexes of tasks to be deleted"},{"lineNumber":5,"author":{"gitId":"xyzhangg"},"content":" * from the task list."},{"lineNumber":6,"author":{"gitId":"xyzhangg"},"content":" */"},{"lineNumber":7,"author":{"gitId":"xyzhangg"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":9,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"xyzhangg"},"content":"     * Represents the indexes of tasks to be deleted from the task list."},{"lineNumber":11,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"xyzhangg"},"content":"    private final ArrayList\u003cInteger\u003e taskIndexes;"},{"lineNumber":13,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":14,"author":{"gitId":"xyzhangg"},"content":"    DeleteCommand(ArrayList\u003cInteger\u003e taskIndexes) {"},{"lineNumber":15,"author":{"gitId":"xyzhangg"},"content":"        this.taskIndexes \u003d taskIndexes;"},{"lineNumber":16,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":18,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"xyzhangg"},"content":"     * Deletes tasks from the task list and updates the storage. "},{"lineNumber":20,"author":{"gitId":"xyzhangg"},"content":"     * "},{"lineNumber":21,"author":{"gitId":"xyzhangg"},"content":"     * @param taskList task list from which the tasks are deleted."},{"lineNumber":22,"author":{"gitId":"xyzhangg"},"content":"     * @param ui ui used to show the deleted tasks."},{"lineNumber":23,"author":{"gitId":"xyzhangg"},"content":"     * @param storage storage used to store the taskList."},{"lineNumber":24,"author":{"gitId":"xyzhangg"},"content":"     * @return a string representation of the deleted tasks."},{"lineNumber":25,"author":{"gitId":"xyzhangg"},"content":"     * @throws DukeException if updateTasks fails."},{"lineNumber":26,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"xyzhangg"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"xyzhangg"},"content":"    String  execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":29,"author":{"gitId":"xyzhangg"},"content":"        ArrayList\u003cTask\u003e tasks \u003d taskList.deleteTasks(taskIndexes);"},{"lineNumber":30,"author":{"gitId":"xyzhangg"},"content":"        storage.updateTasks(taskList);"},{"lineNumber":31,"author":{"gitId":"xyzhangg"},"content":"        return ui.showDeleteTasks(tasks, taskList.getListLength());"},{"lineNumber":32,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"xyzhangg"},"content":"}"}],"authorContributionMap":{"xyzhangg":33}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xyzhangg"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"xyzhangg"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":4,"author":{"gitId":"xyzhangg"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"xyzhangg"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"xyzhangg"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"xyzhangg"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"xyzhangg"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"xyzhangg"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"xyzhangg"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"xyzhangg"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"xyzhangg"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"xyzhangg"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":15,"author":{"gitId":"xyzhangg"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"xyzhangg"},"content":" * An example of a custom control using FXML."},{"lineNumber":17,"author":{"gitId":"xyzhangg"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":18,"author":{"gitId":"xyzhangg"},"content":" * containing text from the speaker."},{"lineNumber":19,"author":{"gitId":"xyzhangg"},"content":" */"},{"lineNumber":20,"author":{"gitId":"xyzhangg"},"content":"public class DialogBox extends HBox {"},{"lineNumber":21,"author":{"gitId":"xyzhangg"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"xyzhangg"},"content":"    private Label dialog;"},{"lineNumber":23,"author":{"gitId":"xyzhangg"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"xyzhangg"},"content":"    private ImageView displayPicture;"},{"lineNumber":25,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":26,"author":{"gitId":"xyzhangg"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":27,"author":{"gitId":"xyzhangg"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"xyzhangg"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":29,"author":{"gitId":"xyzhangg"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":30,"author":{"gitId":"xyzhangg"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":31,"author":{"gitId":"xyzhangg"},"content":"            fxmlLoader.load();"},{"lineNumber":32,"author":{"gitId":"xyzhangg"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"xyzhangg"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"xyzhangg"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":36,"author":{"gitId":"xyzhangg"},"content":"        dialog.setText(text);"},{"lineNumber":37,"author":{"gitId":"xyzhangg"},"content":"        displayPicture.setImage(img);"},{"lineNumber":38,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":40,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"xyzhangg"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":42,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"xyzhangg"},"content":"    private void flip() {"},{"lineNumber":44,"author":{"gitId":"xyzhangg"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":45,"author":{"gitId":"xyzhangg"},"content":"        Collections.reverse(tmp);"},{"lineNumber":46,"author":{"gitId":"xyzhangg"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":47,"author":{"gitId":"xyzhangg"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":48,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":50,"author":{"gitId":"xyzhangg"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":51,"author":{"gitId":"xyzhangg"},"content":"        return new DialogBox(text, img);"},{"lineNumber":52,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":54,"author":{"gitId":"xyzhangg"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":55,"author":{"gitId":"xyzhangg"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":56,"author":{"gitId":"xyzhangg"},"content":"        db.flip();"},{"lineNumber":57,"author":{"gitId":"xyzhangg"},"content":"        return db;"},{"lineNumber":58,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"xyzhangg"},"content":"}"}],"authorContributionMap":{"xyzhangg":59}},{"path":"src/main/java/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xyzhangg"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":3,"author":{"gitId":"xyzhangg"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"xyzhangg"},"content":" * Encapsulates a DoneCommand object, contains information about the indexes of tasks to be marked as done."},{"lineNumber":5,"author":{"gitId":"xyzhangg"},"content":" */"},{"lineNumber":6,"author":{"gitId":"xyzhangg"},"content":"public class DoneCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":8,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"xyzhangg"},"content":"     * Represents the indexes of tasks to be marked as done."},{"lineNumber":10,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"xyzhangg"},"content":"    private final ArrayList\u003cInteger\u003e taskIndexes;"},{"lineNumber":12,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":13,"author":{"gitId":"xyzhangg"},"content":"    DoneCommand(ArrayList\u003cInteger\u003e taskIndexes) {"},{"lineNumber":14,"author":{"gitId":"xyzhangg"},"content":"        this.taskIndexes \u003d taskIndexes;"},{"lineNumber":15,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":17,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"xyzhangg"},"content":"     * Marks tasks from the task list as done and updates the storage. "},{"lineNumber":19,"author":{"gitId":"xyzhangg"},"content":"     * "},{"lineNumber":20,"author":{"gitId":"xyzhangg"},"content":"     * @param taskList task list containing the tasks to be marked as done."},{"lineNumber":21,"author":{"gitId":"xyzhangg"},"content":"     * @param ui ui used to show the tasks that are marked as done."},{"lineNumber":22,"author":{"gitId":"xyzhangg"},"content":"     * @param storage storage used to store the taskList."},{"lineNumber":23,"author":{"gitId":"xyzhangg"},"content":"     * @return a string representation of the tasks that are marked as done."},{"lineNumber":24,"author":{"gitId":"xyzhangg"},"content":"     * @throws DukeException if updateTasks fails."},{"lineNumber":25,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"xyzhangg"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"xyzhangg"},"content":"    String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":28,"author":{"gitId":"xyzhangg"},"content":"        ArrayList\u003cTask\u003e tasks \u003d taskList.doneTasks(taskIndexes);"},{"lineNumber":29,"author":{"gitId":"xyzhangg"},"content":"        storage.updateTasks(taskList);"},{"lineNumber":30,"author":{"gitId":"xyzhangg"},"content":"        return ui.showDoneTasks(tasks);"},{"lineNumber":31,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"xyzhangg"},"content":"}"}],"authorContributionMap":{"xyzhangg":32}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xyzhangg"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":3,"author":{"gitId":"xyzhangg"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"xyzhangg"},"content":" * Encapsulates the Duke object, supports the function getResponse which returns a response when "},{"lineNumber":5,"author":{"gitId":"xyzhangg"},"content":" * provided with a user input."},{"lineNumber":6,"author":{"gitId":"xyzhangg"},"content":" */"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":8,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":9,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"xyzhangg"},"content":"     * Represents the file path for the file that saves the task list."},{"lineNumber":11,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"xyzhangg"},"content":"    public static String FILE_PATH \u003d \"myTaskList.txt\";"},{"lineNumber":13,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":14,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"xyzhangg"},"content":"     * Represents the storage object in charge of storing and loading data."},{"lineNumber":16,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"xyzhangg"},"content":"    private final Storage storage;"},{"lineNumber":18,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":19,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"xyzhangg"},"content":"     * Represents the taskList object in charge of maintaining the list of tasks."},{"lineNumber":21,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"xyzhangg"},"content":"    private TaskList tasks;"},{"lineNumber":23,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":24,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"xyzhangg"},"content":"     * Represents the ui object in charge of showing the response to the user."},{"lineNumber":26,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"xyzhangg"},"content":"    private final Ui ui;"},{"lineNumber":28,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":29,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"xyzhangg"},"content":"     * Represents whether the user wants to exit the application."},{"lineNumber":31,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"xyzhangg"},"content":"    boolean isExit \u003d false;"},{"lineNumber":33,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":34,"author":{"gitId":"xyzhangg"},"content":"    public Duke() {"},{"lineNumber":35,"author":{"gitId":"xyzhangg"},"content":"        ui \u003d new Ui();"},{"lineNumber":36,"author":{"gitId":"xyzhangg"},"content":"        storage \u003d new Storage(FILE_PATH);"},{"lineNumber":37,"author":{"gitId":"xyzhangg"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"xyzhangg"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":39,"author":{"gitId":"xyzhangg"},"content":"        } catch (DukeException e) {"},{"lineNumber":40,"author":{"gitId":"xyzhangg"},"content":"            ui.showError(e);"},{"lineNumber":41,"author":{"gitId":"xyzhangg"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":42,"author":{"gitId":"xyzhangg"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":45,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"xyzhangg"},"content":"     * Takes in a user input and parses it to generate a command. Executes the command and returns the output"},{"lineNumber":47,"author":{"gitId":"xyzhangg"},"content":"     * as a string."},{"lineNumber":48,"author":{"gitId":"xyzhangg"},"content":"     * "},{"lineNumber":49,"author":{"gitId":"xyzhangg"},"content":"     * @param input user input"},{"lineNumber":50,"author":{"gitId":"xyzhangg"},"content":"     * @return a string representing the output."},{"lineNumber":51,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"xyzhangg"},"content":"    String getResponse(String input) {"},{"lineNumber":53,"author":{"gitId":"xyzhangg"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"xyzhangg"},"content":"            Command c \u003d Parser.parse(input);"},{"lineNumber":55,"author":{"gitId":"xyzhangg"},"content":"            isExit \u003d c.isExit();"},{"lineNumber":56,"author":{"gitId":"xyzhangg"},"content":"            return ui.formatResponse(c.execute(tasks, ui, storage));"},{"lineNumber":57,"author":{"gitId":"xyzhangg"},"content":"        } catch (DukeException e) {"},{"lineNumber":58,"author":{"gitId":"xyzhangg"},"content":"            return ui.showError(e);"},{"lineNumber":59,"author":{"gitId":"xyzhangg"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":62,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"xyzhangg"},"content":"     * Returns the duke logo and welcome message."},{"lineNumber":64,"author":{"gitId":"xyzhangg"},"content":"     * "},{"lineNumber":65,"author":{"gitId":"xyzhangg"},"content":"     * @return a string representation of the duke logo and welcome message. "},{"lineNumber":66,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"xyzhangg"},"content":"    String showWelcome() {"},{"lineNumber":68,"author":{"gitId":"xyzhangg"},"content":"        return ui.showWelcome();"},{"lineNumber":69,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":72,"author":{"gitId":"xyzhangg"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":73,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xyzhangg":70,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xyzhangg"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"xyzhangg"},"content":" * Encapsulates a DukeException object, contains information about the exception being thrown."},{"lineNumber":3,"author":{"gitId":"xyzhangg"},"content":" */"},{"lineNumber":4,"author":{"gitId":"xyzhangg"},"content":"public class DukeException extends Exception {"},{"lineNumber":5,"author":{"gitId":"xyzhangg"},"content":"    "},{"lineNumber":6,"author":{"gitId":"xyzhangg"},"content":"    DukeException(String message) {"},{"lineNumber":7,"author":{"gitId":"xyzhangg"},"content":"        super(message);"},{"lineNumber":8,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":10,"author":{"gitId":"xyzhangg"},"content":"    DukeException() {"},{"lineNumber":11,"author":{"gitId":"xyzhangg"},"content":"        super(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":12,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":14,"author":{"gitId":"xyzhangg"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"xyzhangg"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitId":"xyzhangg"},"content":"        return super.getMessage();"},{"lineNumber":17,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"xyzhangg"},"content":"}"}],"authorContributionMap":{"xyzhangg":18}},{"path":"src/main/java/EmptyDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xyzhangg"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"xyzhangg"},"content":" * Encapsulates an EmptyDescriptionException object, thrown when the description of a todo,"},{"lineNumber":3,"author":{"gitId":"xyzhangg"},"content":" * deadline, event or find command is empty. "},{"lineNumber":4,"author":{"gitId":"xyzhangg"},"content":" */"},{"lineNumber":5,"author":{"gitId":"xyzhangg"},"content":"public class EmptyDescriptionException extends DukeException {"},{"lineNumber":6,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":7,"author":{"gitId":"xyzhangg"},"content":"    EmptyDescriptionException(String command) {"},{"lineNumber":8,"author":{"gitId":"xyzhangg"},"content":"        super(\"OOPS!!! The description of a \" + command + \" cannot be empty.\");"},{"lineNumber":9,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":11,"author":{"gitId":"xyzhangg"},"content":"}"}],"authorContributionMap":{"xyzhangg":11}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xyzhangg"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"xyzhangg"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":4,"author":{"gitId":"xyzhangg"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"xyzhangg"},"content":" * Encapsulates the Event object, contains information about the event timing. "},{"lineNumber":6,"author":{"gitId":"xyzhangg"},"content":" */"},{"lineNumber":7,"author":{"gitId":"xyzhangg"},"content":"public class Event extends Task {"},{"lineNumber":8,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":9,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"xyzhangg"},"content":"     * Represents the event timing."},{"lineNumber":11,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"xyzhangg"},"content":"    protected LocalDate at;"},{"lineNumber":13,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":14,"author":{"gitId":"xyzhangg"},"content":"    public Event(String description, LocalDate at) {"},{"lineNumber":15,"author":{"gitId":"xyzhangg"},"content":"        super(description);"},{"lineNumber":16,"author":{"gitId":"xyzhangg"},"content":"        this.at \u003d at;"},{"lineNumber":17,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":19,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"xyzhangg"},"content":"     * Converts to a string format to be saved in a text file."},{"lineNumber":21,"author":{"gitId":"xyzhangg"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"xyzhangg"},"content":"     * @return a string representation of the event object."},{"lineNumber":23,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"xyzhangg"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"xyzhangg"},"content":"    public String saveAsString() {"},{"lineNumber":26,"author":{"gitId":"xyzhangg"},"content":"        return \"E\" + super.saveAsString() + \" | \" + at;"},{"lineNumber":27,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":29,"author":{"gitId":"xyzhangg"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"xyzhangg"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"xyzhangg"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":32,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"xyzhangg"},"content":"}"}],"authorContributionMap":{"xyzhangg":33}},{"path":"src/main/java/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xyzhangg"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"xyzhangg"},"content":" * Encapsulates an ExitCommand object, used to exit the application."},{"lineNumber":3,"author":{"gitId":"xyzhangg"},"content":" */"},{"lineNumber":4,"author":{"gitId":"xyzhangg"},"content":"public class ExitCommand extends Command {"},{"lineNumber":5,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":6,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"xyzhangg"},"content":"     * Says bye to the user."},{"lineNumber":8,"author":{"gitId":"xyzhangg"},"content":"     *"},{"lineNumber":9,"author":{"gitId":"xyzhangg"},"content":"     * @param taskList task list containing the tasks."},{"lineNumber":10,"author":{"gitId":"xyzhangg"},"content":"     * @param ui ui used to say bye to the user."},{"lineNumber":11,"author":{"gitId":"xyzhangg"},"content":"     * @param storage storage used to store the taskList."},{"lineNumber":12,"author":{"gitId":"xyzhangg"},"content":"     * @return a string saying goodbye."},{"lineNumber":13,"author":{"gitId":"xyzhangg"},"content":"     * @throws DukeException if updateTasks fails."},{"lineNumber":14,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"xyzhangg"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"xyzhangg"},"content":"    String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":17,"author":{"gitId":"xyzhangg"},"content":"        storage.updateTasks(taskList);"},{"lineNumber":18,"author":{"gitId":"xyzhangg"},"content":"        return ui.showGoodbye();"},{"lineNumber":19,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":21,"author":{"gitId":"xyzhangg"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"xyzhangg"},"content":"    boolean isExit() {"},{"lineNumber":23,"author":{"gitId":"xyzhangg"},"content":"        return true;"},{"lineNumber":24,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"xyzhangg"},"content":"}"}],"authorContributionMap":{"xyzhangg":25}},{"path":"src/main/java/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xyzhangg"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"xyzhangg"},"content":" * Encapsulates a FindCommand object, contains information about the keyword that the task description"},{"lineNumber":3,"author":{"gitId":"xyzhangg"},"content":" * need to contain."},{"lineNumber":4,"author":{"gitId":"xyzhangg"},"content":" */"},{"lineNumber":5,"author":{"gitId":"xyzhangg"},"content":"public class FindCommand extends Command {"},{"lineNumber":6,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":7,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"xyzhangg"},"content":"     * Represents the keyword used to search for tasks."},{"lineNumber":9,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"xyzhangg"},"content":"    private final String keyword;"},{"lineNumber":11,"author":{"gitId":"xyzhangg"},"content":"    "},{"lineNumber":12,"author":{"gitId":"xyzhangg"},"content":"    FindCommand(String keyword) {"},{"lineNumber":13,"author":{"gitId":"xyzhangg"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":14,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":16,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"xyzhangg"},"content":"     * Finds all the tasks in the task list that contains the keyword in their description."},{"lineNumber":18,"author":{"gitId":"xyzhangg"},"content":"     * "},{"lineNumber":19,"author":{"gitId":"xyzhangg"},"content":"     * @param taskList task list that contains the tasks to be searched."},{"lineNumber":20,"author":{"gitId":"xyzhangg"},"content":"     * @param ui ui used to show the tasks that contain the keyword."},{"lineNumber":21,"author":{"gitId":"xyzhangg"},"content":"     * @param storage storage used to store the taskList."},{"lineNumber":22,"author":{"gitId":"xyzhangg"},"content":"     * @return a string representation of the tasks that contain the keyword."},{"lineNumber":23,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"xyzhangg"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"xyzhangg"},"content":"    String execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":26,"author":{"gitId":"xyzhangg"},"content":"        String matchingTasks \u003d taskList.findTask(keyword);"},{"lineNumber":27,"author":{"gitId":"xyzhangg"},"content":"        return ui.showMatchingTask(matchingTasks);"},{"lineNumber":28,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"xyzhangg"},"content":"}"}],"authorContributionMap":{"xyzhangg":29}},{"path":"src/main/java/InvalidDateTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xyzhangg"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"xyzhangg"},"content":" * Encapsulates an InvalidDateTimeException object, thrown when the user enters an invalid format"},{"lineNumber":3,"author":{"gitId":"xyzhangg"},"content":" * for the date when using a deadline or event command."},{"lineNumber":4,"author":{"gitId":"xyzhangg"},"content":" */"},{"lineNumber":5,"author":{"gitId":"xyzhangg"},"content":"public class InvalidDateTimeException extends DukeException {"},{"lineNumber":6,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":7,"author":{"gitId":"xyzhangg"},"content":"    InvalidDateTimeException(String task) {"},{"lineNumber":8,"author":{"gitId":"xyzhangg"},"content":"        super(\"OOPS!!! Please enter a valid date/time for a \" + task + \".\");"},{"lineNumber":9,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"xyzhangg"},"content":"}"}],"authorContributionMap":{"xyzhangg":10}},{"path":"src/main/java/InvalidTaskIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xyzhangg"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"xyzhangg"},"content":" * Encapsulates an InvalidTaskIndexException object, thrown when the user enters an invalid task index"},{"lineNumber":3,"author":{"gitId":"xyzhangg"},"content":" * when using the done or delete command."},{"lineNumber":4,"author":{"gitId":"xyzhangg"},"content":" */"},{"lineNumber":5,"author":{"gitId":"xyzhangg"},"content":"public class InvalidTaskIndexException extends DukeException {"},{"lineNumber":6,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":7,"author":{"gitId":"xyzhangg"},"content":"    InvalidTaskIndexException(String command) {"},{"lineNumber":8,"author":{"gitId":"xyzhangg"},"content":"        super(\"OOPS!!! Please enter a valid task index or task indexes to be \" + (command.startsWith(\"done\")"},{"lineNumber":9,"author":{"gitId":"xyzhangg"},"content":"                ? \"marked as done.\""},{"lineNumber":10,"author":{"gitId":"xyzhangg"},"content":"                : \"deleted.\"));"},{"lineNumber":11,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"xyzhangg"},"content":"}"}],"authorContributionMap":{"xyzhangg":12}},{"path":"src/main/java/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xyzhangg"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"xyzhangg"},"content":" * Encapsulates a ListCommand object."},{"lineNumber":3,"author":{"gitId":"xyzhangg"},"content":" */"},{"lineNumber":4,"author":{"gitId":"xyzhangg"},"content":"public class ListCommand extends Command {"},{"lineNumber":5,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":6,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"xyzhangg"},"content":"     * Displays all the tasks in the task list."},{"lineNumber":8,"author":{"gitId":"xyzhangg"},"content":"     *"},{"lineNumber":9,"author":{"gitId":"xyzhangg"},"content":"     * @param taskList task list containing the tasks."},{"lineNumber":10,"author":{"gitId":"xyzhangg"},"content":"     * @param ui ui used to show the list of tasks."},{"lineNumber":11,"author":{"gitId":"xyzhangg"},"content":"     * @param storage storage used to store the taskList."},{"lineNumber":12,"author":{"gitId":"xyzhangg"},"content":"     * @return a string representation of the list of tasks."},{"lineNumber":13,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"xyzhangg"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"xyzhangg"},"content":"    String execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":16,"author":{"gitId":"xyzhangg"},"content":"        return ui.showTaskList(taskList.toString());"},{"lineNumber":17,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"xyzhangg"},"content":"}"}],"authorContributionMap":{"xyzhangg":18}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xyzhangg"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":3,"author":{"gitId":"xyzhangg"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"xyzhangg"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"xyzhangg"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"xyzhangg"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"xyzhangg"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":9,"author":{"gitId":"xyzhangg"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"xyzhangg"},"content":" * A GUI for Duke using FXML."},{"lineNumber":11,"author":{"gitId":"xyzhangg"},"content":" */"},{"lineNumber":12,"author":{"gitId":"xyzhangg"},"content":"public class Main extends Application {"},{"lineNumber":13,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":14,"author":{"gitId":"xyzhangg"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":15,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":16,"author":{"gitId":"xyzhangg"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"xyzhangg"},"content":"    public void start(Stage stage) {"},{"lineNumber":18,"author":{"gitId":"xyzhangg"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"xyzhangg"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":20,"author":{"gitId":"xyzhangg"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":21,"author":{"gitId":"xyzhangg"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":22,"author":{"gitId":"xyzhangg"},"content":"            stage.setScene(scene);"},{"lineNumber":23,"author":{"gitId":"xyzhangg"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":24,"author":{"gitId":"xyzhangg"},"content":"            stage.show();"},{"lineNumber":25,"author":{"gitId":"xyzhangg"},"content":"        } catch (IOException e) {"},{"lineNumber":26,"author":{"gitId":"xyzhangg"},"content":"            e.printStackTrace();"},{"lineNumber":27,"author":{"gitId":"xyzhangg"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"xyzhangg"},"content":"}"}],"authorContributionMap":{"xyzhangg":29}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xyzhangg"},"content":"import javafx.application.Platform;"},{"lineNumber":2,"author":{"gitId":"xyzhangg"},"content":"import javafx.fxml.FXML;"},{"lineNumber":3,"author":{"gitId":"xyzhangg"},"content":"import javafx.scene.control.Button;"},{"lineNumber":4,"author":{"gitId":"xyzhangg"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":5,"author":{"gitId":"xyzhangg"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":6,"author":{"gitId":"xyzhangg"},"content":"import javafx.scene.image.Image;"},{"lineNumber":7,"author":{"gitId":"xyzhangg"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":8,"author":{"gitId":"xyzhangg"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":9,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":10,"author":{"gitId":"xyzhangg"},"content":"import javax.swing.*;"},{"lineNumber":11,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":12,"author":{"gitId":"xyzhangg"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"xyzhangg"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":14,"author":{"gitId":"xyzhangg"},"content":" */"},{"lineNumber":15,"author":{"gitId":"xyzhangg"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":16,"author":{"gitId":"xyzhangg"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"xyzhangg"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":18,"author":{"gitId":"xyzhangg"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"xyzhangg"},"content":"    private VBox dialogContainer;"},{"lineNumber":20,"author":{"gitId":"xyzhangg"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"xyzhangg"},"content":"    private TextField userInput;"},{"lineNumber":22,"author":{"gitId":"xyzhangg"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"xyzhangg"},"content":"    private Button sendButton;"},{"lineNumber":24,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":25,"author":{"gitId":"xyzhangg"},"content":"    private Duke duke;"},{"lineNumber":26,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":27,"author":{"gitId":"xyzhangg"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":28,"author":{"gitId":"xyzhangg"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":29,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":30,"author":{"gitId":"xyzhangg"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"xyzhangg"},"content":"    public void initialize() {"},{"lineNumber":32,"author":{"gitId":"xyzhangg"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":33,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":35,"author":{"gitId":"xyzhangg"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":36,"author":{"gitId":"xyzhangg"},"content":"        duke \u003d d;"},{"lineNumber":37,"author":{"gitId":"xyzhangg"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(duke.showWelcome(), dukeImage));"},{"lineNumber":38,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":40,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"xyzhangg"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":42,"author":{"gitId":"xyzhangg"},"content":"     * the dialog container. Clears the user input after processing. If user input is an exit command, displays an exit"},{"lineNumber":43,"author":{"gitId":"xyzhangg"},"content":"     * message and closes the application."},{"lineNumber":44,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"xyzhangg"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"xyzhangg"},"content":"    private void handleUserInput() {"},{"lineNumber":47,"author":{"gitId":"xyzhangg"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":48,"author":{"gitId":"xyzhangg"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":49,"author":{"gitId":"xyzhangg"},"content":"        if (duke.isExit) {"},{"lineNumber":50,"author":{"gitId":"xyzhangg"},"content":"            JOptionPane.showMessageDialog(null, response);"},{"lineNumber":51,"author":{"gitId":"xyzhangg"},"content":"            Platform.exit();"},{"lineNumber":52,"author":{"gitId":"xyzhangg"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"xyzhangg"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":54,"author":{"gitId":"xyzhangg"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":55,"author":{"gitId":"xyzhangg"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":56,"author":{"gitId":"xyzhangg"},"content":"        );"},{"lineNumber":57,"author":{"gitId":"xyzhangg"},"content":"        userInput.clear();"},{"lineNumber":58,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"xyzhangg"},"content":"}"}],"authorContributionMap":{"xyzhangg":59}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xyzhangg"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"xyzhangg"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":3,"author":{"gitId":"xyzhangg"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":5,"author":{"gitId":"xyzhangg"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"xyzhangg"},"content":" * Encapsulates a parser class, supports the function to parse the user input into a command."},{"lineNumber":7,"author":{"gitId":"xyzhangg"},"content":" */"},{"lineNumber":8,"author":{"gitId":"xyzhangg"},"content":"public class Parser {"},{"lineNumber":9,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":10,"author":{"gitId":"xyzhangg"},"content":"    final static String BYE \u003d \"bye\";"},{"lineNumber":11,"author":{"gitId":"xyzhangg"},"content":"    final static String LIST \u003d \"list\";"},{"lineNumber":12,"author":{"gitId":"xyzhangg"},"content":"    final static String DONE \u003d \"done\";"},{"lineNumber":13,"author":{"gitId":"xyzhangg"},"content":"    final static String DELETE \u003d \"delete\";"},{"lineNumber":14,"author":{"gitId":"xyzhangg"},"content":"    final static String FIND \u003d \"find\";"},{"lineNumber":15,"author":{"gitId":"xyzhangg"},"content":"    final static String TODO \u003d \"todo\";"},{"lineNumber":16,"author":{"gitId":"xyzhangg"},"content":"    final static String DEADLINE \u003d \"deadline\";"},{"lineNumber":17,"author":{"gitId":"xyzhangg"},"content":"    final static String EVENT \u003d \"event\";"},{"lineNumber":18,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":19,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":20,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"xyzhangg"},"content":"     * Returns a list of task indexes for a done or delete user input."},{"lineNumber":22,"author":{"gitId":"xyzhangg"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"xyzhangg"},"content":"     * @param input       user input."},{"lineNumber":24,"author":{"gitId":"xyzhangg"},"content":"     * @param commandType type of command, either a done or delete."},{"lineNumber":25,"author":{"gitId":"xyzhangg"},"content":"     * @return an arrayList of integer representing the task indexes."},{"lineNumber":26,"author":{"gitId":"xyzhangg"},"content":"     * @throws DukeException if input has an invalid format."},{"lineNumber":27,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"xyzhangg"},"content":"    private static ArrayList\u003cInteger\u003e getTaskIndexes(String input, String commandType) throws DukeException {"},{"lineNumber":29,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":30,"author":{"gitId":"xyzhangg"},"content":"        final int TASK_INDEX_POSITION \u003d commandType.equals(DONE)"},{"lineNumber":31,"author":{"gitId":"xyzhangg"},"content":"                ? 5"},{"lineNumber":32,"author":{"gitId":"xyzhangg"},"content":"                : commandType.equals(DELETE)"},{"lineNumber":33,"author":{"gitId":"xyzhangg"},"content":"                ? 7"},{"lineNumber":34,"author":{"gitId":"xyzhangg"},"content":"                : 0;"},{"lineNumber":35,"author":{"gitId":"xyzhangg"},"content":"        assert TASK_INDEX_POSITION !\u003d 0 : \"Command type should be done or delete.\";"},{"lineNumber":36,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":37,"author":{"gitId":"xyzhangg"},"content":"        if (input.equals(commandType) || input.equals(commandType + \" \")) {"},{"lineNumber":38,"author":{"gitId":"xyzhangg"},"content":"            throw new InvalidTaskIndexException(input);"},{"lineNumber":39,"author":{"gitId":"xyzhangg"},"content":"        } else if (input.startsWith(commandType + \" \") \u0026\u0026 input.length() \u003e TASK_INDEX_POSITION) {"},{"lineNumber":40,"author":{"gitId":"xyzhangg"},"content":"            try {"},{"lineNumber":41,"author":{"gitId":"xyzhangg"},"content":"                return parseIndexString(input.substring(TASK_INDEX_POSITION), new ArrayList\u003c\u003e());"},{"lineNumber":42,"author":{"gitId":"xyzhangg"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":43,"author":{"gitId":"xyzhangg"},"content":"                throw new InvalidTaskIndexException(input);"},{"lineNumber":44,"author":{"gitId":"xyzhangg"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"xyzhangg"},"content":"        } else {"},{"lineNumber":46,"author":{"gitId":"xyzhangg"},"content":"            throw new DukeException();"},{"lineNumber":47,"author":{"gitId":"xyzhangg"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":50,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"xyzhangg"},"content":"     * Parses the given string of indexes into an arrayList of indexes."},{"lineNumber":52,"author":{"gitId":"xyzhangg"},"content":"     * "},{"lineNumber":53,"author":{"gitId":"xyzhangg"},"content":"     * @param taskIndexString string containing indexes separated by spaces."},{"lineNumber":54,"author":{"gitId":"xyzhangg"},"content":"     * @param taskIndexes arrayList containing the indexes."},{"lineNumber":55,"author":{"gitId":"xyzhangg"},"content":"     * @return an arrayList of integers."},{"lineNumber":56,"author":{"gitId":"xyzhangg"},"content":"     * @throws NumberFormatException if input string has an invalid format."},{"lineNumber":57,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"xyzhangg"},"content":"    private static ArrayList\u003cInteger\u003e parseIndexString("},{"lineNumber":59,"author":{"gitId":"xyzhangg"},"content":"            String taskIndexString, ArrayList\u003cInteger\u003e taskIndexes) throws NumberFormatException {"},{"lineNumber":60,"author":{"gitId":"xyzhangg"},"content":"        "},{"lineNumber":61,"author":{"gitId":"xyzhangg"},"content":"        int firstIndexEndPosition \u003d taskIndexString.indexOf(\" \");"},{"lineNumber":62,"author":{"gitId":"xyzhangg"},"content":"        if (firstIndexEndPosition \u003c 0) {"},{"lineNumber":63,"author":{"gitId":"xyzhangg"},"content":"            int firstIndex \u003d Integer.parseInt(taskIndexString);"},{"lineNumber":64,"author":{"gitId":"xyzhangg"},"content":"            taskIndexes.add(firstIndex);"},{"lineNumber":65,"author":{"gitId":"xyzhangg"},"content":"            return taskIndexes;"},{"lineNumber":66,"author":{"gitId":"xyzhangg"},"content":"        } else {"},{"lineNumber":67,"author":{"gitId":"xyzhangg"},"content":"            String firstIndexString \u003d taskIndexString.substring(0, firstIndexEndPosition);"},{"lineNumber":68,"author":{"gitId":"xyzhangg"},"content":"            int firstIndex \u003d Integer.parseInt(firstIndexString);"},{"lineNumber":69,"author":{"gitId":"xyzhangg"},"content":"            taskIndexes.add(firstIndex);"},{"lineNumber":70,"author":{"gitId":"xyzhangg"},"content":"            String remainingIndexString \u003d taskIndexString.substring(firstIndexEndPosition + 1);"},{"lineNumber":71,"author":{"gitId":"xyzhangg"},"content":"            return parseIndexString(remainingIndexString, taskIndexes);"},{"lineNumber":72,"author":{"gitId":"xyzhangg"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":75,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"xyzhangg"},"content":"     * Takes in a user input starting with \u0027done\u0027 and returns a done command."},{"lineNumber":77,"author":{"gitId":"xyzhangg"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"xyzhangg"},"content":"     * @param input user input that starts with \u0027done\u0027."},{"lineNumber":79,"author":{"gitId":"xyzhangg"},"content":"     * @return a done command."},{"lineNumber":80,"author":{"gitId":"xyzhangg"},"content":"     * @throws DukeException if user input has an invalid format."},{"lineNumber":81,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"xyzhangg"},"content":"    private static DoneCommand done(String input) throws DukeException {"},{"lineNumber":83,"author":{"gitId":"xyzhangg"},"content":"        return new DoneCommand(getTaskIndexes(input, DONE));"},{"lineNumber":84,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":86,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"xyzhangg"},"content":"     * Takes in a user input starting with \u0027delete\u0027 and returns a delete command."},{"lineNumber":88,"author":{"gitId":"xyzhangg"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"xyzhangg"},"content":"     * @param input user input that starts with \u0027delete\u0027."},{"lineNumber":90,"author":{"gitId":"xyzhangg"},"content":"     * @return a delete command."},{"lineNumber":91,"author":{"gitId":"xyzhangg"},"content":"     * @throws DukeException if user input has an invalid format."},{"lineNumber":92,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"xyzhangg"},"content":"    private static DeleteCommand delete(String input) throws DukeException {"},{"lineNumber":94,"author":{"gitId":"xyzhangg"},"content":"        return new DeleteCommand(getTaskIndexes(input, DELETE));"},{"lineNumber":95,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":97,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"xyzhangg"},"content":"     * Takes in a user input starting with \u0027find\u0027 and returns a find command."},{"lineNumber":99,"author":{"gitId":"xyzhangg"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"xyzhangg"},"content":"     * @param input user input that starts with \u0027find\u0027."},{"lineNumber":101,"author":{"gitId":"xyzhangg"},"content":"     * @return a find command."},{"lineNumber":102,"author":{"gitId":"xyzhangg"},"content":"     * @throws DukeException if user input has an invalid format."},{"lineNumber":103,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"xyzhangg"},"content":"    private static FindCommand find(String input) throws DukeException {"},{"lineNumber":105,"author":{"gitId":"xyzhangg"},"content":"        final int KEYWORD_INDEX \u003d 5;"},{"lineNumber":106,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":107,"author":{"gitId":"xyzhangg"},"content":"        if (input.equals(FIND) || input.equals(FIND + \" \")) {"},{"lineNumber":108,"author":{"gitId":"xyzhangg"},"content":"            throw new EmptyDescriptionException(FIND);"},{"lineNumber":109,"author":{"gitId":"xyzhangg"},"content":"        } else if (input.startsWith(FIND + \" \") \u0026\u0026 input.length() \u003e KEYWORD_INDEX) {"},{"lineNumber":110,"author":{"gitId":"xyzhangg"},"content":"            return new FindCommand(input.substring(KEYWORD_INDEX));"},{"lineNumber":111,"author":{"gitId":"xyzhangg"},"content":"        } else {"},{"lineNumber":112,"author":{"gitId":"xyzhangg"},"content":"            throw new DukeException();"},{"lineNumber":113,"author":{"gitId":"xyzhangg"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":116,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"xyzhangg"},"content":"     * Takes in a user input starting with \u0027todo\u0027 and returns an add command that adds a new todo."},{"lineNumber":118,"author":{"gitId":"xyzhangg"},"content":"     *"},{"lineNumber":119,"author":{"gitId":"xyzhangg"},"content":"     * @param input user input that starts with \u0027todo\u0027."},{"lineNumber":120,"author":{"gitId":"xyzhangg"},"content":"     * @return an add command."},{"lineNumber":121,"author":{"gitId":"xyzhangg"},"content":"     * @throws DukeException if user input has an invalid format."},{"lineNumber":122,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"xyzhangg"},"content":"    private static AddCommand newTodo(String input) throws DukeException {"},{"lineNumber":124,"author":{"gitId":"xyzhangg"},"content":"        final int DESCRIPTION_INDEX \u003d 5;"},{"lineNumber":125,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":126,"author":{"gitId":"xyzhangg"},"content":"        if (input.equals(TODO) || input.equals(TODO + \" \")) {"},{"lineNumber":127,"author":{"gitId":"xyzhangg"},"content":"            throw new EmptyDescriptionException(TODO);"},{"lineNumber":128,"author":{"gitId":"xyzhangg"},"content":"        } else if (input.startsWith(TODO + \" \") \u0026\u0026 input.length() \u003e DESCRIPTION_INDEX) {"},{"lineNumber":129,"author":{"gitId":"xyzhangg"},"content":"            Todo newTodo \u003d new Todo(input.substring(DESCRIPTION_INDEX));"},{"lineNumber":130,"author":{"gitId":"xyzhangg"},"content":"            return new AddCommand(newTodo);"},{"lineNumber":131,"author":{"gitId":"xyzhangg"},"content":"        } else {"},{"lineNumber":132,"author":{"gitId":"xyzhangg"},"content":"            throw new DukeException();"},{"lineNumber":133,"author":{"gitId":"xyzhangg"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":136,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"xyzhangg"},"content":"     * Creates an add command for tasks with timings. Takes in a user input starting with \u0027deadline\u0027 or"},{"lineNumber":138,"author":{"gitId":"xyzhangg"},"content":"     * \u0027event\u0027 and returns an add command for those tasks."},{"lineNumber":139,"author":{"gitId":"xyzhangg"},"content":"     *"},{"lineNumber":140,"author":{"gitId":"xyzhangg"},"content":"     * @param input user input that starts with \u0027deadline\u0027 or \u0027event\u0027."},{"lineNumber":141,"author":{"gitId":"xyzhangg"},"content":"     * @return an add command."},{"lineNumber":142,"author":{"gitId":"xyzhangg"},"content":"     * @throws DukeException if user input has an invalid format."},{"lineNumber":143,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"xyzhangg"},"content":"    private static AddCommand newTaskWithTiming(String input, String taskType) throws DukeException {"},{"lineNumber":145,"author":{"gitId":"xyzhangg"},"content":"        final int DESCRIPTION_INDEX \u003d taskType.equals(DEADLINE)"},{"lineNumber":146,"author":{"gitId":"xyzhangg"},"content":"                ? 9"},{"lineNumber":147,"author":{"gitId":"xyzhangg"},"content":"                : taskType.equals(EVENT)"},{"lineNumber":148,"author":{"gitId":"xyzhangg"},"content":"                ? 6"},{"lineNumber":149,"author":{"gitId":"xyzhangg"},"content":"                : 0;"},{"lineNumber":150,"author":{"gitId":"xyzhangg"},"content":"        final int TIME_INDEX \u003d 5;"},{"lineNumber":151,"author":{"gitId":"xyzhangg"},"content":"        final String TIME_DESCRIPTOR \u003d taskType.equals(DEADLINE)"},{"lineNumber":152,"author":{"gitId":"xyzhangg"},"content":"                ? \" /by \""},{"lineNumber":153,"author":{"gitId":"xyzhangg"},"content":"                : taskType.equals(EVENT)"},{"lineNumber":154,"author":{"gitId":"xyzhangg"},"content":"                ? \" /at \""},{"lineNumber":155,"author":{"gitId":"xyzhangg"},"content":"                : \"\";"},{"lineNumber":156,"author":{"gitId":"xyzhangg"},"content":"        assert DESCRIPTION_INDEX !\u003d 0 : \"Task type should deadline or event.\";"},{"lineNumber":157,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":158,"author":{"gitId":"xyzhangg"},"content":"        if (input.equals(taskType) || input.equals(taskType + \" \")) {"},{"lineNumber":159,"author":{"gitId":"xyzhangg"},"content":"            throw new EmptyDescriptionException(taskType);"},{"lineNumber":160,"author":{"gitId":"xyzhangg"},"content":"        } else if (input.startsWith(taskType + \" \") \u0026\u0026 input.length() \u003e DESCRIPTION_INDEX) {"},{"lineNumber":161,"author":{"gitId":"xyzhangg"},"content":"            if (!input.contains(TIME_DESCRIPTOR)) {"},{"lineNumber":162,"author":{"gitId":"xyzhangg"},"content":"                throw new InvalidDateTimeException(taskType);"},{"lineNumber":163,"author":{"gitId":"xyzhangg"},"content":"            } else {"},{"lineNumber":164,"author":{"gitId":"xyzhangg"},"content":"                int index \u003d input.indexOf(TIME_DESCRIPTOR);"},{"lineNumber":165,"author":{"gitId":"xyzhangg"},"content":"                String description \u003d input.substring(DESCRIPTION_INDEX, index);"},{"lineNumber":166,"author":{"gitId":"xyzhangg"},"content":"                String date \u003d input.substring(index + TIME_INDEX);"},{"lineNumber":167,"author":{"gitId":"xyzhangg"},"content":"                try {"},{"lineNumber":168,"author":{"gitId":"xyzhangg"},"content":"                    LocalDate eventDate \u003d LocalDate.parse(date);"},{"lineNumber":169,"author":{"gitId":"xyzhangg"},"content":"                    Task newTask;"},{"lineNumber":170,"author":{"gitId":"xyzhangg"},"content":"                    if (taskType.equals(DEADLINE)) {"},{"lineNumber":171,"author":{"gitId":"xyzhangg"},"content":"                        newTask \u003d new Deadline(description, eventDate);"},{"lineNumber":172,"author":{"gitId":"xyzhangg"},"content":"                    } else {"},{"lineNumber":173,"author":{"gitId":"xyzhangg"},"content":"                        newTask \u003d new Event(description, eventDate);"},{"lineNumber":174,"author":{"gitId":"xyzhangg"},"content":"                    }"},{"lineNumber":175,"author":{"gitId":"xyzhangg"},"content":"                    return new AddCommand(newTask);"},{"lineNumber":176,"author":{"gitId":"xyzhangg"},"content":"                } catch (DateTimeParseException e) {"},{"lineNumber":177,"author":{"gitId":"xyzhangg"},"content":"                    throw new InvalidDateTimeException(taskType);"},{"lineNumber":178,"author":{"gitId":"xyzhangg"},"content":"                }"},{"lineNumber":179,"author":{"gitId":"xyzhangg"},"content":"            }"},{"lineNumber":180,"author":{"gitId":"xyzhangg"},"content":"        } else {"},{"lineNumber":181,"author":{"gitId":"xyzhangg"},"content":"            throw new DukeException();"},{"lineNumber":182,"author":{"gitId":"xyzhangg"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":185,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":186,"author":{"gitId":"xyzhangg"},"content":"     * Takes in a user input starting with \u0027deadline\u0027 and returns an add command."},{"lineNumber":187,"author":{"gitId":"xyzhangg"},"content":"     *"},{"lineNumber":188,"author":{"gitId":"xyzhangg"},"content":"     * @param input user input that starts with \u0027deadline\u0027."},{"lineNumber":189,"author":{"gitId":"xyzhangg"},"content":"     * @return an add command."},{"lineNumber":190,"author":{"gitId":"xyzhangg"},"content":"     * @throws DukeException if user input has an invalid format."},{"lineNumber":191,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":192,"author":{"gitId":"xyzhangg"},"content":"    private static AddCommand newDeadline(String input) throws DukeException {"},{"lineNumber":193,"author":{"gitId":"xyzhangg"},"content":"        return newTaskWithTiming(input, DEADLINE);"},{"lineNumber":194,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":196,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":197,"author":{"gitId":"xyzhangg"},"content":"     * Takes in a user input starting with \u0027event\u0027 and returns an add command."},{"lineNumber":198,"author":{"gitId":"xyzhangg"},"content":"     *"},{"lineNumber":199,"author":{"gitId":"xyzhangg"},"content":"     * @param input user input that starts with \u0027event\u0027."},{"lineNumber":200,"author":{"gitId":"xyzhangg"},"content":"     * @return an add command."},{"lineNumber":201,"author":{"gitId":"xyzhangg"},"content":"     * @throws DukeException if user input has an invalid format."},{"lineNumber":202,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":203,"author":{"gitId":"xyzhangg"},"content":"    private static AddCommand newEvent(String input) throws DukeException {"},{"lineNumber":204,"author":{"gitId":"xyzhangg"},"content":"        return newTaskWithTiming(input, EVENT);"},{"lineNumber":205,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":207,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":208,"author":{"gitId":"xyzhangg"},"content":"     * Parses the user\u0027s input and returns the corresponding command."},{"lineNumber":209,"author":{"gitId":"xyzhangg"},"content":"     *"},{"lineNumber":210,"author":{"gitId":"xyzhangg"},"content":"     * @param input user\u0027s input"},{"lineNumber":211,"author":{"gitId":"xyzhangg"},"content":"     * @return a command"},{"lineNumber":212,"author":{"gitId":"xyzhangg"},"content":"     * @throws DukeException if user input has an invalid format."},{"lineNumber":213,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":214,"author":{"gitId":"xyzhangg"},"content":"    static Command parse(String input) throws DukeException {"},{"lineNumber":215,"author":{"gitId":"xyzhangg"},"content":"        if (input.equals(BYE)) {"},{"lineNumber":216,"author":{"gitId":"xyzhangg"},"content":"            return new ExitCommand();"},{"lineNumber":217,"author":{"gitId":"xyzhangg"},"content":"        } else if (input.equals(LIST) || input.equals(LIST + \" \")) {"},{"lineNumber":218,"author":{"gitId":"xyzhangg"},"content":"            return new ListCommand();"},{"lineNumber":219,"author":{"gitId":"xyzhangg"},"content":"        } else {"},{"lineNumber":220,"author":{"gitId":"xyzhangg"},"content":"            if (input.startsWith(DONE)) {"},{"lineNumber":221,"author":{"gitId":"xyzhangg"},"content":"                return done(input);"},{"lineNumber":222,"author":{"gitId":"xyzhangg"},"content":"            } else if (input.startsWith(DELETE)) {"},{"lineNumber":223,"author":{"gitId":"xyzhangg"},"content":"                return delete(input);"},{"lineNumber":224,"author":{"gitId":"xyzhangg"},"content":"            } else if (input.startsWith(FIND)) {"},{"lineNumber":225,"author":{"gitId":"xyzhangg"},"content":"                return find(input);"},{"lineNumber":226,"author":{"gitId":"xyzhangg"},"content":"            } else if (input.startsWith(TODO)) {"},{"lineNumber":227,"author":{"gitId":"xyzhangg"},"content":"                return newTodo(input);"},{"lineNumber":228,"author":{"gitId":"xyzhangg"},"content":"            } else if (input.startsWith(DEADLINE)) {"},{"lineNumber":229,"author":{"gitId":"xyzhangg"},"content":"                return newDeadline(input);"},{"lineNumber":230,"author":{"gitId":"xyzhangg"},"content":"            } else if (input.startsWith(EVENT)) {"},{"lineNumber":231,"author":{"gitId":"xyzhangg"},"content":"                return newEvent(input);"},{"lineNumber":232,"author":{"gitId":"xyzhangg"},"content":"            } else {"},{"lineNumber":233,"author":{"gitId":"xyzhangg"},"content":"                throw new DukeException();"},{"lineNumber":234,"author":{"gitId":"xyzhangg"},"content":"            }"},{"lineNumber":235,"author":{"gitId":"xyzhangg"},"content":"        }"},{"lineNumber":236,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":237,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":238,"author":{"gitId":"xyzhangg"},"content":"}"}],"authorContributionMap":{"xyzhangg":238}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xyzhangg"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"xyzhangg"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":3,"author":{"gitId":"xyzhangg"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"xyzhangg"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"xyzhangg"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"xyzhangg"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"xyzhangg"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"xyzhangg"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":10,"author":{"gitId":"xyzhangg"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"xyzhangg"},"content":" * Encapsulates a storage class, handles the writing or reading of the task list to or from a text file."},{"lineNumber":12,"author":{"gitId":"xyzhangg"},"content":" */"},{"lineNumber":13,"author":{"gitId":"xyzhangg"},"content":"public class Storage {"},{"lineNumber":14,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":15,"author":{"gitId":"xyzhangg"},"content":"    private final String filePath;"},{"lineNumber":16,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":17,"author":{"gitId":"xyzhangg"},"content":"    Storage(String filePath) {"},{"lineNumber":18,"author":{"gitId":"xyzhangg"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":19,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":21,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"xyzhangg"},"content":"     * Reads the tasks from the local storage file and creates a list of Tasks."},{"lineNumber":23,"author":{"gitId":"xyzhangg"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"xyzhangg"},"content":"     * @return a list of Tasks stored in the local storage file."},{"lineNumber":25,"author":{"gitId":"xyzhangg"},"content":"     * @throws DukeException if the local storage file cannot be created or loaded."},{"lineNumber":26,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"xyzhangg"},"content":"    ArrayList\u003cTask\u003e load() throws DukeException {"},{"lineNumber":28,"author":{"gitId":"xyzhangg"},"content":"        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":29,"author":{"gitId":"xyzhangg"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":30,"author":{"gitId":"xyzhangg"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"xyzhangg"},"content":"            //noinspection ResultOfMethodCallIgnored"},{"lineNumber":32,"author":{"gitId":"xyzhangg"},"content":"            file.createNewFile();"},{"lineNumber":33,"author":{"gitId":"xyzhangg"},"content":"        } catch (IOException e) {"},{"lineNumber":34,"author":{"gitId":"xyzhangg"},"content":"            throw new DukeException(\"OOPS!!! There was an error creating a save file.\");"},{"lineNumber":35,"author":{"gitId":"xyzhangg"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"xyzhangg"},"content":"        assert file.exists() : \"File should exist.\";"},{"lineNumber":37,"author":{"gitId":"xyzhangg"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"xyzhangg"},"content":"            Scanner fileReader \u003d new Scanner(file);"},{"lineNumber":39,"author":{"gitId":"xyzhangg"},"content":"            while (fileReader.hasNextLine()) {"},{"lineNumber":40,"author":{"gitId":"xyzhangg"},"content":"                String s \u003d fileReader.nextLine();"},{"lineNumber":41,"author":{"gitId":"xyzhangg"},"content":"                Task task \u003d getTask(s);"},{"lineNumber":42,"author":{"gitId":"xyzhangg"},"content":"                taskList.add(task);"},{"lineNumber":43,"author":{"gitId":"xyzhangg"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"xyzhangg"},"content":"            return taskList;"},{"lineNumber":45,"author":{"gitId":"xyzhangg"},"content":"        } catch (FileNotFoundException | DukeException e) {"},{"lineNumber":46,"author":{"gitId":"xyzhangg"},"content":"            throw new DukeException(\"OOPS!!! There was an error while loading the file\");"},{"lineNumber":47,"author":{"gitId":"xyzhangg"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":50,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"xyzhangg"},"content":"     * Converts a string into a Task."},{"lineNumber":52,"author":{"gitId":"xyzhangg"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"xyzhangg"},"content":"     * @param taskString string description of a Task."},{"lineNumber":54,"author":{"gitId":"xyzhangg"},"content":"     * @return a Task described by the input string."},{"lineNumber":55,"author":{"gitId":"xyzhangg"},"content":"     * @throws DukeException if input string is in the wrong format."},{"lineNumber":56,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"xyzhangg"},"content":"    private Task getTask(String taskString) throws DukeException {"},{"lineNumber":58,"author":{"gitId":"xyzhangg"},"content":"        final int DESCRIPTION_INDEX \u003d 8;"},{"lineNumber":59,"author":{"gitId":"xyzhangg"},"content":"        final int IS_DONE_INDEX \u003d 4;"},{"lineNumber":60,"author":{"gitId":"xyzhangg"},"content":"        try {"},{"lineNumber":61,"author":{"gitId":"xyzhangg"},"content":"            Task currentTask \u003d null;"},{"lineNumber":62,"author":{"gitId":"xyzhangg"},"content":"            if (taskString.startsWith(\"T\")) {"},{"lineNumber":63,"author":{"gitId":"xyzhangg"},"content":"                currentTask \u003d new Todo(taskString.substring(DESCRIPTION_INDEX));"},{"lineNumber":64,"author":{"gitId":"xyzhangg"},"content":"            } else {"},{"lineNumber":65,"author":{"gitId":"xyzhangg"},"content":"                int timeIndex \u003d taskString.lastIndexOf(\" |\");"},{"lineNumber":66,"author":{"gitId":"xyzhangg"},"content":"                String dateTime \u003d taskString.substring(timeIndex + 3);"},{"lineNumber":67,"author":{"gitId":"xyzhangg"},"content":"                if (taskString.startsWith(\"D\")) {"},{"lineNumber":68,"author":{"gitId":"xyzhangg"},"content":"                    currentTask \u003d new Deadline(taskString.substring(DESCRIPTION_INDEX, timeIndex),"},{"lineNumber":69,"author":{"gitId":"xyzhangg"},"content":"                            LocalDate.parse(dateTime));"},{"lineNumber":70,"author":{"gitId":"xyzhangg"},"content":"                } else if (taskString.startsWith(\"E\")) {"},{"lineNumber":71,"author":{"gitId":"xyzhangg"},"content":"                    currentTask \u003d new Event(taskString.substring(DESCRIPTION_INDEX, timeIndex),"},{"lineNumber":72,"author":{"gitId":"xyzhangg"},"content":"                            LocalDate.parse(dateTime));"},{"lineNumber":73,"author":{"gitId":"xyzhangg"},"content":"                } "},{"lineNumber":74,"author":{"gitId":"xyzhangg"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"xyzhangg"},"content":"            assert currentTask !\u003d null : \"Invalid task description.\";"},{"lineNumber":76,"author":{"gitId":"xyzhangg"},"content":"            "},{"lineNumber":77,"author":{"gitId":"xyzhangg"},"content":"            if (taskString.charAt(IS_DONE_INDEX) \u003d\u003d \u00271\u0027) {"},{"lineNumber":78,"author":{"gitId":"xyzhangg"},"content":"                currentTask.markAsDone();"},{"lineNumber":79,"author":{"gitId":"xyzhangg"},"content":"            }"},{"lineNumber":80,"author":{"gitId":"xyzhangg"},"content":"            return currentTask;"},{"lineNumber":81,"author":{"gitId":"xyzhangg"},"content":"        } catch (StringIndexOutOfBoundsException | DateTimeParseException e) {"},{"lineNumber":82,"author":{"gitId":"xyzhangg"},"content":"            throw new DukeException();"},{"lineNumber":83,"author":{"gitId":"xyzhangg"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":86,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"xyzhangg"},"content":"     * Updates the local storage file and stores the list of Tasks."},{"lineNumber":88,"author":{"gitId":"xyzhangg"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"xyzhangg"},"content":"     * @param taskList list of Tasks to be stored."},{"lineNumber":90,"author":{"gitId":"xyzhangg"},"content":"     * @throws DukeException if local storage file cannot be accessed."},{"lineNumber":91,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"xyzhangg"},"content":"    void updateTasks(TaskList taskList) throws DukeException {"},{"lineNumber":93,"author":{"gitId":"xyzhangg"},"content":"        try {"},{"lineNumber":94,"author":{"gitId":"xyzhangg"},"content":"            assert new File(filePath).exists() : \"File should exist.\";"},{"lineNumber":95,"author":{"gitId":"xyzhangg"},"content":"            FileWriter fileWriter \u003d new FileWriter(filePath);"},{"lineNumber":96,"author":{"gitId":"xyzhangg"},"content":"            for (Task t : taskList.getMyTaskList()) {"},{"lineNumber":97,"author":{"gitId":"xyzhangg"},"content":"                fileWriter.write(t.saveAsString() + \"\\n\");"},{"lineNumber":98,"author":{"gitId":"xyzhangg"},"content":"            }"},{"lineNumber":99,"author":{"gitId":"xyzhangg"},"content":"            fileWriter.close();"},{"lineNumber":100,"author":{"gitId":"xyzhangg"},"content":"        } catch (IOException e) {"},{"lineNumber":101,"author":{"gitId":"xyzhangg"},"content":"            throw new DukeException(\"OOPS!!! Unable to update tasks.\");"},{"lineNumber":102,"author":{"gitId":"xyzhangg"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"xyzhangg"},"content":"}"}],"authorContributionMap":{"xyzhangg":104}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xyzhangg"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"xyzhangg"},"content":" * Encapsulates the Task object, contains information about the description and whether it is completed. "},{"lineNumber":3,"author":{"gitId":"xyzhangg"},"content":" */"},{"lineNumber":4,"author":{"gitId":"xyzhangg"},"content":"public abstract class Task {"},{"lineNumber":5,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":6,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"xyzhangg"},"content":"     * Represents the description of the task."},{"lineNumber":8,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"xyzhangg"},"content":"    protected String description;"},{"lineNumber":10,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":11,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"xyzhangg"},"content":"     * Represents whether the task is completed."},{"lineNumber":13,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"xyzhangg"},"content":"    protected boolean isDone;"},{"lineNumber":15,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":16,"author":{"gitId":"xyzhangg"},"content":"    public Task(String description) {"},{"lineNumber":17,"author":{"gitId":"xyzhangg"},"content":"        this.description \u003d description;"},{"lineNumber":18,"author":{"gitId":"xyzhangg"},"content":"        this.isDone \u003d false;"},{"lineNumber":19,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":21,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"xyzhangg"},"content":"     * Returns a tick or a cross depending on whether the task is done."},{"lineNumber":23,"author":{"gitId":"xyzhangg"},"content":"     * @return a tick or a cross."},{"lineNumber":24,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"xyzhangg"},"content":"    public String getStatusIcon() {"},{"lineNumber":26,"author":{"gitId":"xyzhangg"},"content":"        return (isDone ? \"[\\u2713] \" : \"[\\u2718] \"); //return tick or X symbols"},{"lineNumber":27,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":29,"author":{"gitId":"xyzhangg"},"content":"    public void markAsDone() {"},{"lineNumber":30,"author":{"gitId":"xyzhangg"},"content":"        isDone \u003d true;"},{"lineNumber":31,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":33,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"xyzhangg"},"content":"     * Converts to a string format to be saved in a text file."},{"lineNumber":35,"author":{"gitId":"xyzhangg"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"xyzhangg"},"content":"     * @return a string representation of the task object."},{"lineNumber":37,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"xyzhangg"},"content":"    public String saveAsString() {"},{"lineNumber":39,"author":{"gitId":"xyzhangg"},"content":"        return \" | \" + (isDone ? \"1\" : \"0\") + \" | \" + description;"},{"lineNumber":40,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"xyzhangg"},"content":"    "},{"lineNumber":42,"author":{"gitId":"xyzhangg"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"xyzhangg"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"xyzhangg"},"content":"        return getStatusIcon() + description;"},{"lineNumber":45,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"xyzhangg"},"content":"}"}],"authorContributionMap":{"xyzhangg":46}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xyzhangg"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"xyzhangg"},"content":"import java.util.function.Consumer;"},{"lineNumber":3,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":4,"author":{"gitId":"xyzhangg"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"xyzhangg"},"content":" * Encapsulates a taskList object, contains a list of tasks and supports operations that adds, deletes or"},{"lineNumber":6,"author":{"gitId":"xyzhangg"},"content":" * finds tasks, or marks tasks as done."},{"lineNumber":7,"author":{"gitId":"xyzhangg"},"content":" */"},{"lineNumber":8,"author":{"gitId":"xyzhangg"},"content":"public class TaskList {"},{"lineNumber":9,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":10,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"xyzhangg"},"content":"     * Represents the list of tasks."},{"lineNumber":12,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"xyzhangg"},"content":"    private final ArrayList\u003cTask\u003e myTaskList;"},{"lineNumber":14,"author":{"gitId":"xyzhangg"},"content":"    "},{"lineNumber":15,"author":{"gitId":"xyzhangg"},"content":"    TaskList() {"},{"lineNumber":16,"author":{"gitId":"xyzhangg"},"content":"        myTaskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":19,"author":{"gitId":"xyzhangg"},"content":"    TaskList(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":20,"author":{"gitId":"xyzhangg"},"content":"        this.myTaskList \u003d taskList;"},{"lineNumber":21,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":23,"author":{"gitId":"xyzhangg"},"content":"    ArrayList\u003cTask\u003e getMyTaskList() {"},{"lineNumber":24,"author":{"gitId":"xyzhangg"},"content":"        return myTaskList;"},{"lineNumber":25,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":27,"author":{"gitId":"xyzhangg"},"content":"    int getListLength() {"},{"lineNumber":28,"author":{"gitId":"xyzhangg"},"content":"        return myTaskList.size();"},{"lineNumber":29,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":31,"author":{"gitId":"xyzhangg"},"content":"    public void addNewTask(Task newTask) {"},{"lineNumber":32,"author":{"gitId":"xyzhangg"},"content":"        myTaskList.add(newTask);"},{"lineNumber":33,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":35,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"xyzhangg"},"content":"     * Updates the tasks with the given indexes and function."},{"lineNumber":37,"author":{"gitId":"xyzhangg"},"content":"     * "},{"lineNumber":38,"author":{"gitId":"xyzhangg"},"content":"     * @param taskIndexes indexes of tasks to be updated."},{"lineNumber":39,"author":{"gitId":"xyzhangg"},"content":"     * @param updateTask function used to update a task, either mark as done or delete."},{"lineNumber":40,"author":{"gitId":"xyzhangg"},"content":"     * @return an arrayList of the updated tasks."},{"lineNumber":41,"author":{"gitId":"xyzhangg"},"content":"     * @throws IndexOutOfBoundsException if task indexes given are out of range."},{"lineNumber":42,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"xyzhangg"},"content":"    ArrayList\u003cTask\u003e updateTasks(ArrayList\u003cInteger\u003e taskIndexes,"},{"lineNumber":44,"author":{"gitId":"xyzhangg"},"content":"                                Consumer\u003cTask\u003e updateTask) throws IndexOutOfBoundsException {"},{"lineNumber":45,"author":{"gitId":"xyzhangg"},"content":"        "},{"lineNumber":46,"author":{"gitId":"xyzhangg"},"content":"        ArrayList\u003cTask\u003e updatedTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":47,"author":{"gitId":"xyzhangg"},"content":"        for (int taskIndex : taskIndexes) {"},{"lineNumber":48,"author":{"gitId":"xyzhangg"},"content":"            Task current \u003d myTaskList.get(taskIndex - 1);"},{"lineNumber":49,"author":{"gitId":"xyzhangg"},"content":"            updatedTasks.add(current);"},{"lineNumber":50,"author":{"gitId":"xyzhangg"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"xyzhangg"},"content":"        for (Task task : updatedTasks) {"},{"lineNumber":52,"author":{"gitId":"xyzhangg"},"content":"            updateTask.accept(task);"},{"lineNumber":53,"author":{"gitId":"xyzhangg"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"xyzhangg"},"content":"        return updatedTasks;"},{"lineNumber":55,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":57,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"xyzhangg"},"content":"     * Marks one or more tasks as done. Throws an exception if any task index is invalid."},{"lineNumber":59,"author":{"gitId":"xyzhangg"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"xyzhangg"},"content":"     * @param taskIndexes indexes of tasks to be marked as done."},{"lineNumber":61,"author":{"gitId":"xyzhangg"},"content":"     * @return the done tasks."},{"lineNumber":62,"author":{"gitId":"xyzhangg"},"content":"     * @throws DukeException if an index is invalid."},{"lineNumber":63,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"xyzhangg"},"content":"    public ArrayList\u003cTask\u003e doneTasks(ArrayList\u003cInteger\u003e taskIndexes) throws DukeException {"},{"lineNumber":65,"author":{"gitId":"xyzhangg"},"content":"        try {"},{"lineNumber":66,"author":{"gitId":"xyzhangg"},"content":"            Consumer\u003cTask\u003e doneTask \u003d task -\u003e task.markAsDone(); "},{"lineNumber":67,"author":{"gitId":"xyzhangg"},"content":"            return updateTasks(taskIndexes, doneTask);"},{"lineNumber":68,"author":{"gitId":"xyzhangg"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":69,"author":{"gitId":"xyzhangg"},"content":"            throw new InvalidTaskIndexException(\"done\");"},{"lineNumber":70,"author":{"gitId":"xyzhangg"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":73,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"xyzhangg"},"content":"     * Deletes one or more tasks from the list. Throws an exception if any task index is invalid."},{"lineNumber":75,"author":{"gitId":"xyzhangg"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"xyzhangg"},"content":"     * @param taskIndexes indexes of tasks to be deleted."},{"lineNumber":77,"author":{"gitId":"xyzhangg"},"content":"     * @return the deleted tasks."},{"lineNumber":78,"author":{"gitId":"xyzhangg"},"content":"     * @throws DukeException if an index is invalid."},{"lineNumber":79,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"xyzhangg"},"content":"    public ArrayList\u003cTask\u003e deleteTasks(ArrayList\u003cInteger\u003e taskIndexes) throws DukeException {"},{"lineNumber":81,"author":{"gitId":"xyzhangg"},"content":"        try {"},{"lineNumber":82,"author":{"gitId":"xyzhangg"},"content":"            Consumer\u003cTask\u003e deleteTask \u003d task -\u003e myTaskList.remove(task);"},{"lineNumber":83,"author":{"gitId":"xyzhangg"},"content":"            return updateTasks(taskIndexes, deleteTask);"},{"lineNumber":84,"author":{"gitId":"xyzhangg"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":85,"author":{"gitId":"xyzhangg"},"content":"            throw new InvalidTaskIndexException(\"delete\");"},{"lineNumber":86,"author":{"gitId":"xyzhangg"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":89,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"xyzhangg"},"content":"     * Finds all the tasks with description that contains the input."},{"lineNumber":91,"author":{"gitId":"xyzhangg"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"xyzhangg"},"content":"     * @param input the required keyword to be searched for."},{"lineNumber":93,"author":{"gitId":"xyzhangg"},"content":"     * @return a string describing the list of tasks that contains the input in their description."},{"lineNumber":94,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":96,"author":{"gitId":"xyzhangg"},"content":"    String findTask(String input) {"},{"lineNumber":97,"author":{"gitId":"xyzhangg"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":98,"author":{"gitId":"xyzhangg"},"content":"        for (Task t : myTaskList) {"},{"lineNumber":99,"author":{"gitId":"xyzhangg"},"content":"            if (t.description.contains(input)) {"},{"lineNumber":100,"author":{"gitId":"xyzhangg"},"content":"                tasks.add(t);"},{"lineNumber":101,"author":{"gitId":"xyzhangg"},"content":"            }"},{"lineNumber":102,"author":{"gitId":"xyzhangg"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"xyzhangg"},"content":"        return new TaskList(tasks).toString();"},{"lineNumber":104,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":106,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"xyzhangg"},"content":"     * Returns a numbered list of all the tasks in the task list, with each task on a new line. "},{"lineNumber":108,"author":{"gitId":"xyzhangg"},"content":"     * @return a numbered list of tasks."},{"lineNumber":109,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"xyzhangg"},"content":"    @Override"},{"lineNumber":111,"author":{"gitId":"xyzhangg"},"content":"    public String toString() {"},{"lineNumber":112,"author":{"gitId":"xyzhangg"},"content":"        if (myTaskList.isEmpty()) {"},{"lineNumber":113,"author":{"gitId":"xyzhangg"},"content":"            return \"\";"},{"lineNumber":114,"author":{"gitId":"xyzhangg"},"content":"        } else {"},{"lineNumber":115,"author":{"gitId":"xyzhangg"},"content":"            StringBuilder taskListString \u003d new StringBuilder();"},{"lineNumber":116,"author":{"gitId":"xyzhangg"},"content":"            for (int i \u003d 1; i \u003c myTaskList.size() + 1; i++) {"},{"lineNumber":117,"author":{"gitId":"xyzhangg"},"content":"                taskListString"},{"lineNumber":118,"author":{"gitId":"xyzhangg"},"content":"                        .append(\"   \")"},{"lineNumber":119,"author":{"gitId":"xyzhangg"},"content":"                        .append(i)"},{"lineNumber":120,"author":{"gitId":"xyzhangg"},"content":"                        .append(\".\")"},{"lineNumber":121,"author":{"gitId":"xyzhangg"},"content":"                        .append(myTaskList.get(i - 1))"},{"lineNumber":122,"author":{"gitId":"xyzhangg"},"content":"                        .append(\"\\n\");"},{"lineNumber":123,"author":{"gitId":"xyzhangg"},"content":"            }"},{"lineNumber":124,"author":{"gitId":"xyzhangg"},"content":"            taskListString.delete(taskListString.length() - 1, taskListString.length());"},{"lineNumber":125,"author":{"gitId":"xyzhangg"},"content":"            return taskListString.toString();"},{"lineNumber":126,"author":{"gitId":"xyzhangg"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"xyzhangg"},"content":"}"}],"authorContributionMap":{"xyzhangg":128}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xyzhangg"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"xyzhangg"},"content":" * Encapsulates the todo object."},{"lineNumber":3,"author":{"gitId":"xyzhangg"},"content":" */"},{"lineNumber":4,"author":{"gitId":"xyzhangg"},"content":"public class Todo extends Task {"},{"lineNumber":5,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":6,"author":{"gitId":"xyzhangg"},"content":"    public Todo(String description) {"},{"lineNumber":7,"author":{"gitId":"xyzhangg"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":10,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"xyzhangg"},"content":"     * Converts to a string format to be saved in a text file."},{"lineNumber":12,"author":{"gitId":"xyzhangg"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"xyzhangg"},"content":"     * @return a string representation of the todo object."},{"lineNumber":14,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"xyzhangg"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"xyzhangg"},"content":"    public String saveAsString() {"},{"lineNumber":17,"author":{"gitId":"xyzhangg"},"content":"        return \"T\" + super.saveAsString();"},{"lineNumber":18,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":20,"author":{"gitId":"xyzhangg"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"xyzhangg"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"xyzhangg"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":23,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"xyzhangg"},"content":"}"}],"authorContributionMap":{"xyzhangg":24}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xyzhangg"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":3,"author":{"gitId":"xyzhangg"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"xyzhangg"},"content":" * Encapsulates the UI object, in charge of interacting with the user."},{"lineNumber":5,"author":{"gitId":"xyzhangg"},"content":" */"},{"lineNumber":6,"author":{"gitId":"xyzhangg"},"content":"public class Ui {"},{"lineNumber":7,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":8,"author":{"gitId":"xyzhangg"},"content":"    private static final String LOGO \u003d"},{"lineNumber":9,"author":{"gitId":"xyzhangg"},"content":"            \" \\n____        _        \\n\""},{"lineNumber":10,"author":{"gitId":"xyzhangg"},"content":"                    + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":11,"author":{"gitId":"xyzhangg"},"content":"                    + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":12,"author":{"gitId":"xyzhangg"},"content":"                    + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":13,"author":{"gitId":"xyzhangg"},"content":"                    + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":14,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":15,"author":{"gitId":"xyzhangg"},"content":"    private static final String DIVIDER \u003d"},{"lineNumber":16,"author":{"gitId":"xyzhangg"},"content":"            \"______________________________\\n\";"},{"lineNumber":17,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":18,"author":{"gitId":"xyzhangg"},"content":"    String showDivider() {"},{"lineNumber":19,"author":{"gitId":"xyzhangg"},"content":"        return DIVIDER;"},{"lineNumber":20,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":22,"author":{"gitId":"xyzhangg"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"xyzhangg"},"content":"     * Wraps the text provided with the divider."},{"lineNumber":24,"author":{"gitId":"xyzhangg"},"content":"     * "},{"lineNumber":25,"author":{"gitId":"xyzhangg"},"content":"     * @param response duke\u0027s response."},{"lineNumber":26,"author":{"gitId":"xyzhangg"},"content":"     * @return duke\u0027s response with dividers."},{"lineNumber":27,"author":{"gitId":"xyzhangg"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"xyzhangg"},"content":"    String formatResponse(String response) {"},{"lineNumber":29,"author":{"gitId":"xyzhangg"},"content":"        return showDivider() + response + \"\\n\" + showDivider();"},{"lineNumber":30,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":32,"author":{"gitId":"xyzhangg"},"content":"    String showError(DukeException e) {"},{"lineNumber":33,"author":{"gitId":"xyzhangg"},"content":"        return \"   \" + e.getMessage();"},{"lineNumber":34,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":36,"author":{"gitId":"xyzhangg"},"content":"    String showWelcome() {"},{"lineNumber":37,"author":{"gitId":"xyzhangg"},"content":"        return \"Hello from\\n\" + LOGO"},{"lineNumber":38,"author":{"gitId":"xyzhangg"},"content":"                + showDivider()"},{"lineNumber":39,"author":{"gitId":"xyzhangg"},"content":"                + \"Hello! I\u0027m Duke!\\n\" + \"What can I do for you?\\n\""},{"lineNumber":40,"author":{"gitId":"xyzhangg"},"content":"                + showDivider();"},{"lineNumber":41,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":43,"author":{"gitId":"xyzhangg"},"content":"    String showGoodbye() {"},{"lineNumber":44,"author":{"gitId":"xyzhangg"},"content":"        return \"Bye. Hope to see you again soon!\\n\";"},{"lineNumber":45,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":47,"author":{"gitId":"xyzhangg"},"content":"    String showTaskList(String taskListString) {"},{"lineNumber":48,"author":{"gitId":"xyzhangg"},"content":"        return \"Here are the tasks in your list:\\n\" +  taskListString;"},{"lineNumber":49,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":51,"author":{"gitId":"xyzhangg"},"content":"    private String buildTaskString(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":52,"author":{"gitId":"xyzhangg"},"content":"        StringBuilder taskString \u003d new StringBuilder();"},{"lineNumber":53,"author":{"gitId":"xyzhangg"},"content":"        for (Task task : tasks) {"},{"lineNumber":54,"author":{"gitId":"xyzhangg"},"content":"            taskString.append(task).append(\"\\n   \");"},{"lineNumber":55,"author":{"gitId":"xyzhangg"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"xyzhangg"},"content":"        return taskString.toString();"},{"lineNumber":57,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"xyzhangg"},"content":"    "},{"lineNumber":59,"author":{"gitId":"xyzhangg"},"content":"    String showDoneTasks(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":60,"author":{"gitId":"xyzhangg"},"content":"        String doneTasks \u003d buildTaskString(tasks);"},{"lineNumber":61,"author":{"gitId":"xyzhangg"},"content":"        return \"Nice! I\u0027ve marked these tasks as done:\\n   \" + doneTasks;"},{"lineNumber":62,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":64,"author":{"gitId":"xyzhangg"},"content":"    String showDeleteTasks(ArrayList\u003cTask\u003e tasks, int listLength) {"},{"lineNumber":65,"author":{"gitId":"xyzhangg"},"content":"        String deleteTasks \u003d buildTaskString(tasks);"},{"lineNumber":66,"author":{"gitId":"xyzhangg"},"content":"        return \"Noted. I\u0027ve removed these tasks:\\n   \" + deleteTasks "},{"lineNumber":67,"author":{"gitId":"xyzhangg"},"content":"                + \"\\nNow you have \" + listLength + \" tasks in the list.\";"},{"lineNumber":68,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":70,"author":{"gitId":"xyzhangg"},"content":"    String showAddedTask(Task task, int listLength) {"},{"lineNumber":71,"author":{"gitId":"xyzhangg"},"content":"        return \"Got it. I\u0027ve added this task:\\n   \" + task"},{"lineNumber":72,"author":{"gitId":"xyzhangg"},"content":"                + \"\\nNow you have \" + listLength + \" tasks in the list.\";"},{"lineNumber":73,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"xyzhangg"},"content":"    "},{"lineNumber":75,"author":{"gitId":"xyzhangg"},"content":"    String showMatchingTask(String taskList) {"},{"lineNumber":76,"author":{"gitId":"xyzhangg"},"content":"        return \"Here are the matching tasks in your list:\\n\" + taskList;"},{"lineNumber":77,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"xyzhangg"},"content":"}"}],"authorContributionMap":{"xyzhangg":78}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"xyzhangg"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":3,"author":{"gitId":"xyzhangg"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"xyzhangg"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"xyzhangg"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"xyzhangg"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"xyzhangg"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":8,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":9,"author":{"gitId":"xyzhangg"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"500.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":10,"author":{"gitId":"xyzhangg"},"content":"    \u003cpadding\u003e"},{"lineNumber":11,"author":{"gitId":"xyzhangg"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"xyzhangg"},"content":"    \u003c/padding\u003e"},{"lineNumber":13,"author":{"gitId":"xyzhangg"},"content":"    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" textFill\u003d\"BLUE\" wrapText\u003d\"true\"\u003e"},{"lineNumber":14,"author":{"gitId":"xyzhangg"},"content":"        \u003cpadding\u003e"},{"lineNumber":15,"author":{"gitId":"xyzhangg"},"content":"        \u003cInsets left\u003d\"20.0\" right\u003d\"20.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"xyzhangg"},"content":"        \u003c/padding\u003e"},{"lineNumber":17,"author":{"gitId":"xyzhangg"},"content":"        \u003cfont\u003e"},{"lineNumber":18,"author":{"gitId":"xyzhangg"},"content":"        \u003cFont name\u003d\"Monospaced Regular\" size\u003d\"12.0\" /\u003e"},{"lineNumber":19,"author":{"gitId":"xyzhangg"},"content":"        \u003c/font\u003e"},{"lineNumber":20,"author":{"gitId":"xyzhangg"},"content":"    \u003c/Label\u003e"},{"lineNumber":21,"author":{"gitId":"xyzhangg"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":22,"author":{"gitId":"xyzhangg"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"xyzhangg":22}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"xyzhangg"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":3,"author":{"gitId":"xyzhangg"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"xyzhangg"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"xyzhangg"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"xyzhangg"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"xyzhangg"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":9,"author":{"gitId":"xyzhangg"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"xyzhangg"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"xyzhangg"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"xyzhangg"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"xyzhangg"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"xyzhangg"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"xyzhangg"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"xyzhangg"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"xyzhangg"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"xyzhangg"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"xyzhangg"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"xyzhangg":19}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xyzhangg"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":3,"author":{"gitId":"xyzhangg"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":5,"author":{"gitId":"xyzhangg"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":6,"author":{"gitId":"xyzhangg"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"xyzhangg"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":8,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":9,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":10,"author":{"gitId":"xyzhangg"},"content":"public class TaskListTest {"},{"lineNumber":11,"author":{"gitId":"xyzhangg"},"content":"    "},{"lineNumber":12,"author":{"gitId":"xyzhangg"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"xyzhangg"},"content":"    public void doneTask_success() throws Exception {"},{"lineNumber":14,"author":{"gitId":"xyzhangg"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":15,"author":{"gitId":"xyzhangg"},"content":"        ArrayList\u003cInteger\u003e taskIndexes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":16,"author":{"gitId":"xyzhangg"},"content":"        tasks.add(new Todo(\"read book\"));"},{"lineNumber":17,"author":{"gitId":"xyzhangg"},"content":"        taskIndexes.add(1);"},{"lineNumber":18,"author":{"gitId":"xyzhangg"},"content":"        TaskList taskList \u003d new TaskList(tasks);"},{"lineNumber":19,"author":{"gitId":"xyzhangg"},"content":"        assertTrue(taskList.doneTasks(taskIndexes).get(0).isDone);"},{"lineNumber":20,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":22,"author":{"gitId":"xyzhangg"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"xyzhangg"},"content":"    public void doneTask_taskIndexOutOfBounds_exceptionThrown() {"},{"lineNumber":24,"author":{"gitId":"xyzhangg"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"xyzhangg"},"content":"        ArrayList\u003cInteger\u003e taskIndexes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"xyzhangg"},"content":"        tasks.add(new Todo(\"read book\"));"},{"lineNumber":27,"author":{"gitId":"xyzhangg"},"content":"        taskIndexes.add(2);"},{"lineNumber":28,"author":{"gitId":"xyzhangg"},"content":"        TaskList taskList \u003d new TaskList(tasks);"},{"lineNumber":29,"author":{"gitId":"xyzhangg"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"xyzhangg"},"content":"            assertTrue(taskList.doneTasks(taskIndexes).get(1).isDone);"},{"lineNumber":31,"author":{"gitId":"xyzhangg"},"content":"            fail();"},{"lineNumber":32,"author":{"gitId":"xyzhangg"},"content":"        } catch (Exception e) {"},{"lineNumber":33,"author":{"gitId":"xyzhangg"},"content":"            assertEquals("},{"lineNumber":34,"author":{"gitId":"xyzhangg"},"content":"                    \"OOPS!!! Please enter a valid task index or task indexes to be marked as done.\", "},{"lineNumber":35,"author":{"gitId":"xyzhangg"},"content":"                    e.getMessage());"},{"lineNumber":36,"author":{"gitId":"xyzhangg"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"xyzhangg"},"content":"    "},{"lineNumber":39,"author":{"gitId":"xyzhangg"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"xyzhangg"},"content":"    public void deleteTask_success() throws Exception {"},{"lineNumber":41,"author":{"gitId":"xyzhangg"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":42,"author":{"gitId":"xyzhangg"},"content":"        ArrayList\u003cInteger\u003e taskIndexes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":43,"author":{"gitId":"xyzhangg"},"content":"        tasks.add(new Todo(\"read book\"));"},{"lineNumber":44,"author":{"gitId":"xyzhangg"},"content":"        taskIndexes.add(1);"},{"lineNumber":45,"author":{"gitId":"xyzhangg"},"content":"        TaskList taskList \u003d new TaskList(tasks);"},{"lineNumber":46,"author":{"gitId":"xyzhangg"},"content":"        taskList.deleteTasks(taskIndexes);"},{"lineNumber":47,"author":{"gitId":"xyzhangg"},"content":"        assertTrue(taskList.getMyTaskList().isEmpty());"},{"lineNumber":48,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"xyzhangg"},"content":""},{"lineNumber":50,"author":{"gitId":"xyzhangg"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"xyzhangg"},"content":"    public void deleteTask_taskIndexOutOfBounds_exceptionThrown() {"},{"lineNumber":52,"author":{"gitId":"xyzhangg"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":53,"author":{"gitId":"xyzhangg"},"content":"        ArrayList\u003cInteger\u003e taskIndexes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":54,"author":{"gitId":"xyzhangg"},"content":"        tasks.add(new Todo(\"read book\"));"},{"lineNumber":55,"author":{"gitId":"xyzhangg"},"content":"        taskIndexes.add(2);"},{"lineNumber":56,"author":{"gitId":"xyzhangg"},"content":"        TaskList taskList \u003d new TaskList(tasks);"},{"lineNumber":57,"author":{"gitId":"xyzhangg"},"content":"        try {"},{"lineNumber":58,"author":{"gitId":"xyzhangg"},"content":"            taskList.deleteTasks(taskIndexes);"},{"lineNumber":59,"author":{"gitId":"xyzhangg"},"content":"            fail();"},{"lineNumber":60,"author":{"gitId":"xyzhangg"},"content":"        } catch (Exception e) {"},{"lineNumber":61,"author":{"gitId":"xyzhangg"},"content":"            assertEquals("},{"lineNumber":62,"author":{"gitId":"xyzhangg"},"content":"                    \"OOPS!!! Please enter a valid task index or task indexes todo to be deleted.\","},{"lineNumber":63,"author":{"gitId":"xyzhangg"},"content":"                    e.getMessage());"},{"lineNumber":64,"author":{"gitId":"xyzhangg"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"xyzhangg"},"content":"    "},{"lineNumber":67,"author":{"gitId":"xyzhangg"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"xyzhangg"},"content":"    public void testStringConversion() {"},{"lineNumber":69,"author":{"gitId":"xyzhangg"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":70,"author":{"gitId":"xyzhangg"},"content":"        tasks.add(new Todo(\"read book\"));"},{"lineNumber":71,"author":{"gitId":"xyzhangg"},"content":"        TaskList taskList \u003d new TaskList(tasks);"},{"lineNumber":72,"author":{"gitId":"xyzhangg"},"content":"        assertEquals(\"     1.[T][✘] read book\", taskList.toString());"},{"lineNumber":73,"author":{"gitId":"xyzhangg"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"xyzhangg"},"content":"    "},{"lineNumber":75,"author":{"gitId":"xyzhangg"},"content":"}"}],"authorContributionMap":{"xyzhangg":75}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"xyzhangg"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"xyzhangg"},"content":"deadline return book /by Sunday"},{"lineNumber":3,"author":{"gitId":"xyzhangg"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":4,"author":{"gitId":"xyzhangg"},"content":"list"},{"lineNumber":5,"author":{"gitId":"xyzhangg"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"xyzhangg"},"content":"list"},{"lineNumber":7,"author":{"gitId":"xyzhangg"},"content":"delete 1"},{"lineNumber":8,"author":{"gitId":"xyzhangg"},"content":"list"}],"authorContributionMap":{"xyzhangg":8}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"xyzhangg"},"content":"set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"},{"lineNumber":4,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":5,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":8,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":11,"author":{"gitId":"xyzhangg"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":15,"author":{"gitId":"-"},"content":")"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"xyzhangg":2,"-":20}}]
