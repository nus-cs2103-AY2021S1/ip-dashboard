[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "simonteozw": 17
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### List out all Tasks"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Use `list` to view all tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### Search for specific keywords"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Use `find KEYWORD` to list all tasks that contain the specified keyword."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### Complete a Task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Use `done INDEX` to complete the task at the specified index."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### Delete a Task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Use `delete INDEX` to delete the task at the specified index."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### Get Help"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Use `help` for Duke to give you some instructions and tips in case you have forgotten any commands."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### Exiting Duke"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Use `bye` to save your data and exit the programme."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### `list`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "`Here are your tasks: ...` If no such tasks exists it will return `None`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### `find`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "`find (keyword1 keyword2...)`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "All tasks that contain all the keywords. If no such tasks exists it will return `None`."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### `done`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "`done INDEX` "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Index must be within range."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "`Nice! I\u0027ve marked this task as done: [TASK IN QUESTION]` "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "If the specified index is not within range, the response will be `duke.exception.InvalidIndexException: OOPS!!! The index you have "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "chosen is out of bounds`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### `delete`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "`delete INDEX` "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Index must be within range."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "`Nice! I\u0027ve removed this task: [TASK IN QUESTION] Now you have XYZ tasks in the list.` "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "If the specified index is not within range, the response will be `duke.exception.InvalidIndexException: OOPS!!! The index you have "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "chosen is out of bounds`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### `todo`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Creates a todo task."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "`todo DESCRIPTION` Description cannot be empty. It must contain at least 1 nonspace character."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "`Got it. I\u0027ve added this task:[TASK IN QUESTION] Now you have XYZ tasks in the list.`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "If description is invalid, the response will be: `duke.exception.InvalidDescriptionException: OOPS!!! The description of a task cannot be empty`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### `event`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Creates an event task."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "`event DESCRIPTION /at TIMING` Description and timing cannot be empty. They must contain at least 1 nonspace character."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "`Got it. I\u0027ve added this task: [TASK IN QUESTION] Now you have XYZ tasks in the list.`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "If description or timing is invalid, the response will be: `duke.exception.InvalidDescriptionException: OOPS!!! The description of a task cannot be empty`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### `deadline`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Creates an event task."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "`event DESCRIPTION /by TIMING` Description and timing cannot be empty. They must contain at least 1 nonspace character."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "`Got it. I\u0027ve added this task: [TASK IN QUESTION] Now you have XYZ tasks in the list.`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "If description or timing is invalid, the response will be: `duke.exception.InvalidDescriptionException: OOPS!!! The description of a task cannot be empty`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### `help`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "`Don\u0027t panic! I am here. Here are some useful commands: ...`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "### `bye`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "Window closes."
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "simonteozw": 121
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 56
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import duke.exception.InvalidDataException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import duke.exception.InvalidTypeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import duke.misc.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import duke.misc.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Constructor for Duke class"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Function to get Duke\u0027s response to user inputs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return A string representing Duke\u0027s response."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (!taskList.isInitialised()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                taskList.initialise();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                return e.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            } catch (InvalidTypeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                return e.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            } catch (InvalidDataException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                return e.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        assert taskList.isInitialised();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return parser.allocate(input, taskList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "simonteozw": 42
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 28
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import duke.misc.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Sets the stage for Duke and shows starting message."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                DialogBox.getDukeDialog(Ui.WELCOME, dukeImage)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 63
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Exception class unique to Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Constructor for DukeException class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param errorMessage Error message that will be shown."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDataException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Invalid Data Exception that extends Duke Exception class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class InvalidDataException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Constructor for InvalidDataException class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public InvalidDataException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        super(\"OOPS!!! The data here is invalid!\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Invalid Description Exception that extends Duke Exception class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class InvalidDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Constructor for InvalidDescriptionException class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public InvalidDescriptionException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        super(\"OOPS!!! The description of a task cannot be empty\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Invalid Index Exception that extends Duke Exception class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class InvalidIndexException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Constructor for InvalidIndexException class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public InvalidIndexException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        super(\"OOPS!!! The index you have chosen is out of bounds\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTypeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Invalid Type Exception that extends Duke Exception class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class InvalidTypeException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Constructor for InvalidTypeException class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public InvalidTypeException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        super(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 13
    }
  },
  {
    "path": "src/main/java/duke/misc/Constants.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "package duke.misc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "final class Constants {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Actionable keywords."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    static final String BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    static final String LIST \u003d \"list\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    static final String FIND \u003d \"find\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    static final String DONE \u003d \"done\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    static final String DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    static final String HELP \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Task type keywords."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    static final String TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    static final String DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    static final String EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 20
    }
  },
  {
    "path": "src/main/java/duke/misc/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "package duke.misc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import static duke.misc.Constants.BYE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import static duke.misc.Constants.DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import static duke.misc.Constants.DELETE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import static duke.misc.Constants.DONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import static duke.misc.Constants.EVENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import static duke.misc.Constants.FIND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import static duke.misc.Constants.HELP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import static duke.misc.Constants.LIST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import static duke.misc.Constants.TODO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import duke.exception.InvalidDescriptionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import duke.exception.InvalidTypeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Parser class to handle user inputs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Categorise user input into different types of tasks to add."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return A task to be added by the TaskList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @throws InvalidDescriptionException In case the task description is empty."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @throws InvalidTypeException        In case the task type is not one of Event, Deadline, Todo."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static Task handleInput(String input) throws InvalidDescriptionException, InvalidTypeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        String[] tags \u003d extractTags(input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        String cleanInput \u003d removeHashTags(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        String type \u003d cleanInput.split(\"\\\\s+\")[0];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            if (!cleanInput.matches(Todo.FORMAT)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                throw new InvalidDescriptionException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            return new Todo(cleanInput.substring(5), tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            if (!cleanInput.matches(Deadline.FORMAT)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                throw new InvalidDescriptionException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            String[] dl \u003d cleanInput.split(\" /by \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            return new Deadline(dl[0].substring(9), dl[1], tags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            if (!cleanInput.matches(Event.FORMAT)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                throw new InvalidDescriptionException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            String[] e \u003d cleanInput.split(\" /at \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            return new Event(e[0].substring(6), e[1], tags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw new InvalidTypeException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private static String[] extractTags(String input) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return Arrays.stream(input.split(\"\\\\s+\")).filter(str -\u003e str.matches(\"#.+\")).toArray(String[]::new);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private static String removeHashTags(String input) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return input.replace(\"#\", \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Maps user input to actions the TaskList must carry out."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param tl    TaskList to be used."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static String allocate(String input, TaskList tl) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        String[] arr \u003d input.split(\" \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        int idx;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        switch (arr[0]) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                tl.saveData();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                return Ui.GOODBYE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                return e.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            return tl.display();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            return Ui.HELP_MESSAGE;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                return tl.find(input);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            } catch (InvalidDescriptionException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                return e.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            idx \u003d Integer.parseInt(arr[1]) - 1;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                return tl.completeTask(idx);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            } catch (InvalidIndexException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                return e.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            idx \u003d Integer.parseInt(arr[1]) - 1;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                return tl.deleteTask(idx);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            } catch (InvalidIndexException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                return e.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                Task toAdd \u003d handleInput(input);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                return tl.add(toAdd);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            } catch (InvalidDescriptionException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                return e.toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            } catch (InvalidTypeException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                return e.toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 126
    }
  },
  {
    "path": "src/main/java/duke/misc/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "package duke.misc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import duke.exception.InvalidDataException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import duke.exception.InvalidTypeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Storage class that interacts with the .txt file to store and retrieve data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    static final String HOME \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    static final Path DIR \u003d Paths.get(HOME, \"data\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    static final Path PATH \u003d Paths.get(HOME, \"data\", \"iPStore.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Constructor for Storage class."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public Storage() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Combines all tasks into 1 long string separated by newlines."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param items List of tasks."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return A string that can be stored in the .txt file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    String combineAllTasks(ArrayList\u003cTask\u003e items) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        String res \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        for (Task item : items) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            res +\u003d String.format(\"%s\", item.getSaveString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            res +\u003d \"\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private String[] retrieveTags(String input) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return input.split(\"/\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Converts string to a task."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param str String to be converted."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @throws InvalidTypeException In case task type is not one of Event, Deadline, Todo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @throws InvalidDataException In case string is not in the correct format."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    Task stringToTask(String str) throws InvalidTypeException, InvalidDataException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        String[] info \u003d str.split(\"\\\\|\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        int infoLength \u003d info.length;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (infoLength \u003c 3) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw new InvalidDataException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        boolean isComplete \u003d info[1].equals(\"1\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        boolean hasTags;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        String[] tags \u003d new String[]{};"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        switch (info[0]) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        case Todo.SYMBOL:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            hasTags \u003d infoLength \u003d\u003d 4;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            tags \u003d hasTags ? retrieveTags(info[3]) : tags;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            return new Todo(info[2], isComplete, tags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        case Deadline.SYMBOL:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            hasTags \u003d infoLength \u003d\u003d 5;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            tags \u003d hasTags ? retrieveTags(info[4]) : tags;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            return new Deadline(info[2], isComplete, info[3], tags);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        case Event.SYMBOL:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            hasTags \u003d infoLength \u003d\u003d 5;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            tags \u003d hasTags ? retrieveTags(info[4]) : tags;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            return new Event(info[2], isComplete, info[3], tags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw new InvalidTypeException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Writes data to the .txt file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param items List of items to write"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @throws IOException In case there are errors when reading the data."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void writeData(ArrayList\u003cTask\u003e items) throws IOException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        boolean directoryExists \u003d Files.exists(DIR);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (!directoryExists) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            Files.createDirectory(DIR);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            FileWriter fw \u003d new FileWriter(PATH.toFile());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            PrintWriter pw \u003d new PrintWriter(fw);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            pw.print(combineAllTasks(items));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            pw.close();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Reads data from .txt file."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return An ArrayList of tasks."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public ArrayList\u003cTask\u003e readData() throws IOException, InvalidTypeException, InvalidDataException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        boolean pathExists \u003d Files.exists(PATH);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        ArrayList\u003cTask\u003e res \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (pathExists) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                FileReader fr \u003d new FileReader(PATH.toFile());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                BufferedReader br \u003d new BufferedReader(fr);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                String str;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                while ((str \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                    res.add(stringToTask(str));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            } catch (InvalidTypeException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            } catch (InvalidDataException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 139
    }
  },
  {
    "path": "src/main/java/duke/misc/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "package duke.misc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import duke.exception.InvalidDataException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import duke.exception.InvalidDescriptionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import duke.exception.InvalidTypeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * TaskList class to store all the tasks in Duke."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private static final String SEARCH_FORMAT \u003d \"find [^ ]+.+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private ArrayList\u003cTask\u003e items;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private boolean isInitialised;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Constructor for TaskList class."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.isInitialised \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Function to read in data from .txt file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @throws IOException In case data has errors"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @throws InvalidTypeException In cases data has an invalid type."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @throws InvalidDataException In case data is invalid."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void initialise() throws IOException, InvalidTypeException, InvalidDataException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            this.items \u003d this.storage.readData();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            this.isInitialised \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        } catch (InvalidTypeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        } catch (InvalidDataException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Function to tell whether items have been loaded from the .txt file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return A boolean indicating whether the taskList has been initialised."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public boolean isInitialised() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return this.isInitialised;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Exit function for TaskList class, writes data to .txt file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void saveData() throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            storage.writeData(this.items);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Adds a task to the current TaskList."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param toAdd Task to be added."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public String add(Task toAdd) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.items.add(toAdd);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return String.format(\"    Got it. I\u0027ve added this task:\\n    %s\\n    \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                \"Now you have %d tasks in the list.\", toAdd, this.items.size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Gets all tasks in TaskList"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return A formatted string."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public String display() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        String res \u003d \"Here are your tasks:\\n\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        for (int i \u003d 0; i \u003c this.items.size(); i++) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            res +\u003d String.format(\"    %d.%s\\n\", i + 1, this.items.get(i));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (items.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            res +\u003d \"    None\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Overloads the display method."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param arrayList ArrayList of tasks to be displayed."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return A formatted string."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public String display(ArrayList\u003cTask\u003e arrayList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        String res \u003d \"Here are your tasks:\\n\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        for (int i \u003d 0; i \u003c arrayList.size(); i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            res +\u003d String.format(\"    %d.%s\\n\", i + 1, arrayList.get(i));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (arrayList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            res +\u003d \"    None\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Function to find all tasks with specified keyword."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param keyWord Keyword to search for."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return A String containing all relevant tasks."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @throws InvalidDescriptionException InvalidDescriptionException In case keyword is empty."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public String find(String keyWord) throws InvalidDescriptionException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (!keyWord.matches(SEARCH_FORMAT)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw new InvalidDescriptionException();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        for (Task task : this.items) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            if (task.toString().contains(keyWord.substring(5))) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                temp.add(task);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return this.display(temp);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Completes the specified task."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param idx Index of task to be completed."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return A string to validate completion of task."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @throws InvalidIndexException In case idx is out of bounds."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public String completeTask(int idx) throws InvalidIndexException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (idx \u003c 0 || idx \u003e\u003d this.items.size()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw new InvalidIndexException();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        Task t \u003d this.items.get(idx);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        t.complete();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return String.format(\"    Nice! I\u0027ve marked this task as done:\\n    %s\", t);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Deletes the specified task."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param idx Index of task to be deleted."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return A string to validate deletion of task."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @throws InvalidIndexException In case idx is out of bounds."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public String deleteTask(int idx) throws InvalidIndexException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (idx \u003c 0 || idx \u003e\u003d this.items.size()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            throw new InvalidIndexException();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        Task t \u003d this.items.get(idx);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.items.remove(idx);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return String.format(\"    Nice! I\u0027ve removed this task:\\n    %s\\n    \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                \"Now you have %d tasks in the list.\", t, this.items.size());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 166
    }
  },
  {
    "path": "src/main/java/duke/misc/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "package duke.misc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * UI class to handle aesthetics of Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    static final String OPENING \u003d \"D\\n    U\\n        K\\n            E\\n\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    static final String GOODBYE \u003d \"Goodbye. See you soon!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    static final String HELP_MESSAGE \u003d \"Don\u0027t panic! I am here. Here are some useful commands:\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            + \"- list: Lists all tasks at the moment.\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            + \"- bye: Exit Duke.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            + \"- find [KEYWORD]: Find all tasks with a specific keyword\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            + \"- done [INDEX]: Complete the task at the specific index\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            + \"- delete [INDEX]: Delete the task at the specific index\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final String WELCOME \u003d OPENING + \"\\nHello I am Duke, a sentient AI here to help you!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 16
    }
  },
  {
    "path": "src/main/java/duke/task/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * DateTime class used to store date objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Constructor for the DateTime class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param date Defaults to today if the date passed in is invalid."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public DateTime(String date) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        if (isValidFormat(date)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            this.date \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Check if the input date is of a valid format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param date Input date."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return A boolean to show whether the input date is valid."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static boolean isValidFormat(String date) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            FORMATTER.parse(date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Function that converts the date to the proper format to which it should be saved."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return A String of the date in proper format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public String getSaveString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Overrides the standard toString method."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return A String describing the date in the MMM d yyyy format."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 58
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Deadline class for tasks that have a set deadline."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final String FORMAT \u003d \"deadline [^ ]+.* /by [^ ]+.*\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final String SYMBOL \u003d \"D\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private DateTime deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Constructor for Deadline class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param title    Title of task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param deadline Deadline of task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public Deadline(String title, String deadline, String[] tags) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        super(title, tags);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.deadline \u003d new DateTime(deadline);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Overloads constructor for Deadline class. Used when reading data from .txt file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param title      Title of task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param isComplete Boolean to represent completion status of task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param deadline   Deadline of task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public Deadline(String title, boolean isComplete, String deadline, String[] tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        super(title, isComplete, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.deadline \u003d new DateTime(deadline);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Overrides method of saveString method in Task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return A string to that can be saved into the .txt file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public String getSaveString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        int completeSymbol \u003d this.isComplete ? 1 : 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return String.format(\"%s|%d|%s|%s|%s\", SYMBOL, completeSymbol, title,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                deadline.getSaveString(), convertTagsToString(\"/\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Overrides the standard toString method."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return A String describing the task with deadline."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        String completeSymbol \u003d this.isComplete ? \"[/]\" : \"[X]\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return String.format(\"[%s]%s %s (by: %s) %s\", SYMBOL, completeSymbol, title, deadline, convertTagsToString(\"\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 56
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Event class for tasks that have a set timing."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final String FORMAT \u003d \"event [^ ]+.* /at [^ ]+.*\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final String SYMBOL \u003d \"E\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private DateTime time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Constructor for Event class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param title Title of task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param time  Time of task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public Event(String title, String time, String[] tags) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        super(title, tags);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.time \u003d new DateTime(time);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Overloads constructor for Event class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param title      Title of task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param isComplete Boolean to represent completion status of task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param time       Time of task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public Event(String title, boolean isComplete, String time, String[] tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        super(title, isComplete, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.time \u003d new DateTime(time);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Overrides method of saveString method in Task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return A string to that can be saved into the .txt file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public String getSaveString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        int completeSymbol \u003d this.isComplete ? 1 : 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return String.format(\"%s|%d|%s|%s|%s\", SYMBOL, completeSymbol, title,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                time.getSaveString(), convertTagsToString(\"/\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Overrides the standard toString method."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return A String describing the task with deadline."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        String completeSymbol \u003d this.isComplete ? \"[/]\" : \"[X]\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return String.format(\"[%s]%s %s (at: %s) %s\", SYMBOL, completeSymbol, title,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                time, convertTagsToString(\"\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 57
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Task class to represent a task to be manipulated by Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final String SYMBOL \u003d \"T\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    protected String title;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    protected boolean isComplete;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    protected String[] tags;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Constructor of Task class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param title Title of task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public Task(String title, String[] tags) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.isComplete \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Overloads constructor of Task class. Only used to read data from .txt file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param title      Title of task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param isComplete Boolean to represent completion status of task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public Task(String title, boolean isComplete, String[] tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.isComplete \u003d isComplete;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Completes this task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void complete() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        this.isComplete \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    protected String convertTagsToString(String separator) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        String res \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        for (int i \u003d 0; i \u003c tags.length; i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            if (i \u003d\u003d tags.length - 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                res +\u003d String.format(\"%s\", tags[i]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                res +\u003d String.format(\"%s%s\", tags[i], separator);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Converts the task to a suitable string that can be saved to the .txt file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return String describing the task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public String getSaveString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        int completeSymbol \u003d this.isComplete ? 1 : 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return String.format(\"%s|%d|%s|%s\", SYMBOL, completeSymbol, title, convertTagsToString(\"/\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Overrides the standard toString method."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @return A string describing the task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        String completeSymbol \u003d this.isComplete ? \"[/]\" : \"[X]\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        return String.format(\"[%s]%s %s %s\", SYMBOL, completeSymbol, title, convertTagsToString(\"\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 74
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " * Todo class for Tasks that need to be completed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final String SYMBOL \u003d \"T\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public static final String FORMAT \u003d \"todo [^ ]+.*\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Constructor for Todo class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param title Title of task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public Todo(String title, String[] tags) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        super(title, tags);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * Overloads constructor for Todo class. Only used to read data from .txt file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param input      Title of task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     * @param isComplete Boolean to represent completion status of task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public Todo(String input, boolean isComplete, String[] tags) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        super(input, isComplete, tags);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 28
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" stylesheets\u003d\"@/css/duke.css\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" styleClass\u003d\"dialogBox\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" styleClass\u003d\"sendButton\" stylesheets\u003d\"@/css/duke.css\" text\u003d\"Send\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 23
    }
  },
  {
    "path": "src/test/java/duke/misc/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "package duke.misc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import duke.exception.InvalidDescriptionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import duke.exception.InvalidTypeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void invalidCommandTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            Parser.handleInput(\"example hello\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        } catch (InvalidTypeException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            assertEquals(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        } catch (InvalidDescriptionException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            assertEquals(\"OOPS!!! The description of a task cannot be empty\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 23
    }
  },
  {
    "path": "src/test/java/duke/misc/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "package duke.misc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import duke.exception.InvalidDataException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import duke.exception.InvalidTypeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private Storage s \u003d new Storage();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void invalidDataTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            s.stringToTask(\"example hello\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        } catch (InvalidTypeException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            assertEquals(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        } catch (InvalidDataException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            assertEquals(\"OOPS!!! The data here is invalid!\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 25
    }
  },
  {
    "path": "src/test/java/duke/misc/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "package duke.misc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    private TaskList t \u003d new TaskList();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    public void invalidIndexTest() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            t.completeTask(-1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        } catch (InvalidIndexException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "            assertEquals(\"OOPS!!! The index you have chosen is out of bounds\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 21
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "todo return book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "event eat dinner /at 7pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "deadline finish quiz /by tonight"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "todo"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "blank"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "delete -1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "simonteozw": 14
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "simonteozw"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "simonteozw": 1
    }
  }
]
