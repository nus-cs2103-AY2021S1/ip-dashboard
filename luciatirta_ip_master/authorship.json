[
  {
    "path": "src/main/java/Commands.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public enum Commands {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tTODO,"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tDEADLINE,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tEVENT,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tDONE,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tDELETE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tLIST,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tBYE"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 9
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tprotected final String by;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tpublic Deadline(String description, String by) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\tsuper(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\tthis.by \u003d by;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tpublic Deadline(String description, boolean isDone, String by) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\tsuper(description, isDone);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\tthis.by \u003d by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tpublic Deadline completeTask() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\treturn new Deadline(description, true, by);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tpublic String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\treturn \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 23
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import exception.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static void printDivider() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        System.out.println(\"          ____________________________________________________________\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static void printOutput(String output) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String[] splitted \u003d output.split(\"\\n\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        for(String line : splitted) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            System.out.println(\"          \" + line);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static void printWelcome() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        printOutput(\"Hi! I\u0027m Duke \\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static void printGoodbye() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        printOutput(\"Bye. See you again next time!\" );"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static void printAddedTask(String task, int numberOfTask) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        printOutput(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        printOutput(task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        printOutput(\"Now you have \" + numberOfTask + \" tasks in the list.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static void printTaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        printOutput(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        for(int index \u003d 0; index \u003c taskList.size(); index++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            printOutput((index + 1) + \": \" + taskList.get(index));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static void printCompleteTask(String task) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        printOutput(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        printOutput(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static void printDeleteTask(String task, int numberOfTask) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        printOutput(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        printOutput(task);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        printOutput(\"Now you have \" + numberOfTask + \" tasks in the list.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static void checkCommands (String input) throws InvalidCommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            Commands.valueOf(input.trim().toUpperCase());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        } catch(IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            throw new InvalidCommandException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static void checkDescription (String[] task, Commands type) throws EmptyDescriptionException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String usage \u003d \"Please input using the format: \" +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            (type.equals(Commands.TODO) ? \"todo \u003ctodo_desc\u003e\" :"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            type.equals(Commands.DEADLINE) ? \"deadline \u003cdeadline_desc\u003e /by \u003ctime\u003e\" :"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                \"event \u003cevent_desc\u003e /at \u003ctime\u003e\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        if (task.length \u003c 2 || task[1].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            throw new EmptyDescriptionException(\"Please specify the task description\\n\" + usage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static void checkTime (String[] desc, Commands type) throws EmptyTimeException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String usage \u003d \"Please input using the format: \" +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            (type.equals(Commands.TODO) ? \"todo \u003ctodo_desc\u003e\" :"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                type.equals(Commands.DEADLINE) ? \"deadline \u003cdeadline_desc\u003e /by \u003ctime\u003e\" :"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    \"event \u003cevent_desc\u003e /at \u003ctime\u003e\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        if (desc.length \u003c 2 || desc[1].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            throw new EmptyTimeException(\"Please specify the time for the task\\n\" + usage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static void checkIndex (String[] inputs, int numberOfTask) throws InvalidIndexException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String usage \u003d (numberOfTask \u003e 1 ? \"\\nInput a number between 1 - \" + numberOfTask : \"\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        if(inputs.length \u003c 2 ||"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            inputs[1].trim().equals(\"\") ||"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            Integer.parseInt(inputs[1]) \u003c 1 ||"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            Integer.parseInt(inputs[1]) \u003e numberOfTask) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            throw new InvalidIndexException(\"Please input a valid index of task\" + usage );"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        printWelcome();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        while(sc.hasNextLine()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String[] inputs \u003d input.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                checkCommands(inputs[0]);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                Commands command \u003d Commands.valueOf(inputs[0].trim().toUpperCase());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                if (command.equals(Commands.BYE)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    printGoodbye();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                } else if (command.equals((Commands.LIST))) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    printTaskList(taskList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                } else if (command.equals(Commands.DONE)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        checkIndex(inputs, taskList.size());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        int index \u003d Integer.parseInt(inputs[1]) - 1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        taskList.set(index, taskList.get(index).completeTask());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        printCompleteTask(taskList.get(index).toString());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    } catch (InvalidIndexException ex) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        printDivider();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        printOutput(ex.getMessage());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        printDivider();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                } else if (command.equals(Commands.DELETE)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        checkIndex(inputs, taskList.size());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        int index \u003d Integer.parseInt(inputs[1]) - 1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        printDeleteTask(taskList.get(index).toString(), taskList.size() - 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        taskList.remove(index);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    } catch (InvalidIndexException ex) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        printDivider();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        printOutput(ex.getMessage());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        printDivider();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                } else if (command.equals(Commands.TODO)){"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        checkDescription(inputs, command);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        taskList.add(new Todo(inputs[1]));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        printAddedTask(taskList.get(taskList.size() - 1).toString(), taskList.size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    } catch (EmptyDescriptionException ex) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        printDivider();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        printOutput(ex.getMessage());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        printDivider();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                } else if (command.equals(Commands.DEADLINE)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        checkDescription(inputs, command);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        String temp \u003d \" \" + inputs[1];"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        String[] desc \u003d temp.split(\"/by\", 2);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        inputs[1] \u003d desc[0];"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        checkDescription(inputs, command);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        checkTime(desc, command);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        taskList.add(new Deadline(desc[0].trim(), desc[1].trim()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        printAddedTask(taskList.get(taskList.size() - 1).toString(), taskList.size());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    } catch (EmptyDescriptionException ex) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        printDivider();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        printOutput(ex.getMessage());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        printDivider();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    } catch (EmptyTimeException ex) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        printDivider();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        printOutput(ex.getMessage());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        printDivider();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        checkDescription(inputs, command);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        String temp \u003d \" \" + inputs[1];"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        String[] desc \u003d temp.split(\"/at\", 2);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        inputs[1] \u003d desc[0];"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        checkDescription(inputs, command);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        checkTime(desc, command);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        taskList.add(new Event(desc[0].trim(), desc[1].trim()));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        printAddedTask(taskList.get(taskList.size() - 1).toString(), taskList.size());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    } catch (EmptyDescriptionException ex) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        printDivider();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        printOutput(ex.getMessage());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        printDivider();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    } catch (EmptyTimeException ex) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        printDivider();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        printOutput(ex.getMessage());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        printDivider();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            } catch (InvalidCommandException ex) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                printDivider();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                printOutput(ex.getMessage());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                printDivider();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 191,
      "-": 9
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tprotected final String at;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tpublic Event(String description, String at) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\tsuper(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\tthis.at \u003d at;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tpublic Event(String description, boolean isDone, String at) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\tsuper(description, isDone);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\tthis.at \u003d at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tpublic Event completeTask() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\treturn new Event(description, true, at);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tpublic String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\treturn \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 23
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tprotected final String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tprotected final boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tpublic Task(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\tthis.description \u003d description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\tthis.isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tpublic Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\tthis.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\tthis.isDone \u003d isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tpublic Task completeTask() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\treturn new Task(description, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tpublic String getStatusIcon() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\treturn (isDone ? \"[\\u2713]\" : \"[\\u2718]\"); //return tick or X symbols"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tpublic String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\treturn getStatusIcon() + \u0027 \u0027 + description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 26
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tpublic Todo(String description) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\tsuper(description);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tpublic Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\tsuper(description, isDone);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tpublic Todo completeTask() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\treturn new Todo(description, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tpublic String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\treturn \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 20
    }
  },
  {
    "path": "src/main/java/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tpublic DukeException (String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\tsuper(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tpublic String getMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\treturn \"Invalid use of Duke: \" + super.getMessage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 12
    }
  },
  {
    "path": "src/main/java/exception/EmptyDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class EmptyDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tpublic EmptyDescriptionException (String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\tsuper(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tpublic String getMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\treturn super.getMessage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 12
    }
  },
  {
    "path": "src/main/java/exception/EmptyTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class EmptyTimeException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tpublic EmptyTimeException (String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\tsuper(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tpublic String getMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\treturn super.getMessage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 12
    }
  },
  {
    "path": "src/main/java/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tpublic InvalidCommandException (String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\tsuper(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tpublic String getMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\treturn super.getMessage() + \"\\nAvailable commands are: \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\t\t+ \"\\n1. todo \u003ctodo_desc\u003e\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\t\t+ \"\\n2. deadline \u003cdeadline_desc\u003e /by \u003ctime\u003e\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\t\t+ \"\\n3. event \u003cevent_desc\u003e /at \u003ctime\u003e\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\t\t+ \"\\n4. done \u003ctask_no\u003e\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\t\t+ \"\\n5. delete \u003ctask_no\u003e\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\t\t+ \"\\n6. list\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\t\t+ \"\\n7. bye\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 19
    }
  },
  {
    "path": "src/main/java/exception/InvalidIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class InvalidIndexException extends DukeException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tpublic InvalidIndexException (String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\tsuper(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\tpublic String getMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t\treturn super.getMessage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 12
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "hello"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "todo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deadline return book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "event /at 3pm"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deadline do homework /by no idea :-p"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "done 10"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "todo swimming"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 18
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 1,
      "-": 20
    }
  }
]
