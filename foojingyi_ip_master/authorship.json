[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 1,
      "-": 45
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.command.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * The Duke program is an interactive bot that offers commands to help the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * user keep track of a mutable list of tasks that can be of 3 types:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * \u003ccode\u003eTodo\u003c/code\u003e, \u003ccode\u003eDeadline\u003c/code\u003e or \u003ccode\u003eEvent\u003c/code\u003e."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * These tasks can also be marked as done and will be saved in the hard disk."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * @author Foo Jing Yi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /** Storage object used by Duke to load from and write to hard disk */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /** TaskList object that contains the list of tasks */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /** Ui object that deals with interactions with the user */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Public class constructor that takes in the location of a file as a string"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * indicating the relative file path."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * The list of tasks will be loaded from and saved to this file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param pathFile Relative file path."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public Duke(String pathFile) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.storage \u003d new Storage(pathFile);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            this.tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            // todo"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Runs the bot."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        ui.showWelcomeMsg();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                String fullCommand \u003d this.ui.readCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                this.ui.showLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                command.execute(tasks, storage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                this.ui.showLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 62,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Represents the hard disk storage used by the bot."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * While this class does not store the data within the class objects,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * each \u003ccode\u003eStorage\u003c/code\u003e object keeps a link to an actual file where"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * data is stored, and handles loading and writing to this file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /** File where data is stored */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private final File taskFile;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Public constructor."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param filePath Relative file path."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.taskFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Loads list of tasks from \u003ccode\u003etaskFile\u003c/code\u003e."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @return List of tasks to be passed to a \u003ccode\u003eTaskList\u003c/code\u003e object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @throws DukeException If file cannot be created, read or parsed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (!this.taskFile.exists()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            File dir \u003d this.taskFile.getParentFile();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            if (dir !\u003d null \u0026\u0026 !dir.exists()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                dir.mkdirs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                this.taskFile.createNewFile();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                e.printStackTrace(); // todo"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Scanner sc \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            sc \u003d new Scanner(this.taskFile);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            e.printStackTrace(); // todo"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (sc !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                String storedTask \u003d sc.nextLine();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                Task task \u003d parseFromStorage(storedTask);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                list.add(task);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return new ArrayList\u003cTask\u003e(); //todo"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Updates file by added a new task."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param task Task to be added to file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @throws DukeException If task cannot be parsed or file cannot be written to."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void update(Task task) throws DukeException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(this.taskFile, true);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            fileWriter.write(\"\\n\" + parseToStorage(task));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Updates file with list when tasks are marked or deleted."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param list Updated list given by \u003ccode\u003eTaskList\u003c/code\u003e object."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @throws DukeException If tasks cannot be parsed or file cannot be written to."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void update(List\u003cTask\u003e list) throws DukeException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(this.taskFile);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            String fileContents \u003d parseToStorage(list.get(0));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            for (int i \u003d 1; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                fileContents +\u003d \"\\n\" + parseToStorage(list.get(i));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            fileWriter.write(fileContents);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            e.printStackTrace(); // todo"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Parses \u003ccode\u003eTask\u003c/code\u003e objects into strings to be written to the"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * file on the hard disk."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param task \u003ccode\u003eTask\u003c/code\u003e object to be parsed"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @return String representation of the task. Note that this string is"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *          different from the string returned by \u003ccode\u003etask.toString()\u003c/code\u003e."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *          e.g. \"[T][✓] Homework\" from \u003ccode\u003etask.toString()\u003c/code\u003e will be"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *          represented as \"T | 1 | Homework\"."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @throws DukeException If the type of the task cannot be recognised."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    protected String parseToStorage(Task task) throws DukeException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String taskType \u003d \"\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String status \u003d task.isDone() ? \"1\" : \"0\"; // 1 for done and 0 for not done"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String taskDescription \u003d \"\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (task instanceof Todo) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            taskType \u003d \"T\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            taskDescription \u003d task.getTaskName();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            taskType \u003d \"D\"; // + date"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            taskDescription \u003d task.getTaskName() +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                \" | \" +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                ((Deadline) task).getDateTime().format("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    DateTimeFormatter.ofPattern(\"d MMM yyyy, h.m a\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            taskType \u003d \"E\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            taskDescription \u003d task.getTaskName() +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                \" | \" +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                ((Event) task).getDateTime().format("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    DateTimeFormatter.ofPattern(\"d MMM yyyy, h.m a\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            throw new DukeException(\"Cannot recognise type\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return taskType + \" | \" + status + \" | \" + taskDescription;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Parses string representation of task stored in the file on the hard disk"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * to create a \u003ccode\u003eTask\u003c/code\u003e object."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param storedTask String representation of the task"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @return Task represented by the string input."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @throws DukeException If the string is in the wrong format."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    protected Task parseFromStorage(String storedTask) throws DukeException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String[] taskElements \u003d storedTask.split(\" \\\\| \", 4);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            Task task \u003d null;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            if (storedTask.charAt(0) \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                task \u003d new Todo(taskElements[2]);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            } else if (storedTask.charAt(0) \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                String taskName \u003d taskElements[2];"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                LocalDateTime dateTime \u003d LocalDateTime.parse(taskElements[3],"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    DateTimeFormatter.ofPattern(\"d MMM yyyy, h.m a\"));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                task \u003d new Deadline(taskName, dateTime);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            } else if (storedTask.charAt(0) \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                String taskName \u003d taskElements[2];"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                LocalDateTime dateTime \u003d LocalDateTime.parse(taskElements[3],"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    DateTimeFormatter.ofPattern(\"d MMM yyyy, h.m a\"));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                task \u003d new Event(taskName, dateTime);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            if (taskElements[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                task.markDone();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            if (task !\u003d null) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                return task;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                throw new DukeException(\"Cannot read tasks from file.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            throw new DukeException(\"Cannot read tasks from file.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 197
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Contains the list of tasks based on user inputs"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * and handles operations on this list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /** List object containing tasks represented by Task objects */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private final List\u003cTask\u003e list;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Public constructor that creates a new (empty) list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Public constructor taking in an existing list loaded from"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * the hard disk."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param list List loaded from the hard disk."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public TaskList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Adds a task to the list and updates the hard disk with this new task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param task Task to be added."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param storage Storage object that updates the relevant file on the hard disk."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @throws DukeException If exception is thrown by the update method of the Storage class."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void addTask(Task task, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.list.add(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        storage.update(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Deletes the task represented by a \u003ccode\u003etaskNum\u003c/code\u003e from the numbered list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * displayed to the user. The task is the \"taskNum\"th task in the list when numbering"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * the tasks chronologically starting from 1 (not zero)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param taskNum Number that corresponds to the task to be deleted."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param storage Storage object that updates the relevant file on the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @throws DukeException If exception is thrown by the update method of the Storage class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void deleteTask(int taskNum, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.list.remove(taskNum - 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        storage.update(this.list);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Marks the task represented by a \u003ccode\u003etaskNum\u003c/code\u003e as done."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * The task is the \"taskNum\"th task in the list when numbering"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * the tasks chronologically starting from 1 (not zero)."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param taskNum Number that corresponds to the task to be marked."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param storage Storage object that updates the relevant file on the hard disk."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @throws DukeException If exception is thrown by the update method of the Storage class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void markDone(int taskNum, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.list.get(taskNum - 1).markDone();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        storage.update(this.list);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Returns the task represented by a \u003ccode\u003etaskNum\u003c/code\u003e."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * The task is the \"taskNum\"th task in the list when numbering"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * the tasks chronologically starting from 1 (not zero)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param taskNum Number that corresponds to the task to be returned."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @return Task represented by the \u003ccode\u003etaskNum\u003c/code\u003e."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public Task getTask(int taskNum) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return this.list.get(taskNum - 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Returns the number of tasks in the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @return Current size of list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public int getListLength() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return this.list.size();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String finalString \u003d \"\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        for (Task task : this.list) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            finalString +\u003d \"\\n\" + counter + \".\" + task.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return finalString;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 106
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Represents the user interface that deals with interactions with the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /** Scanner to take in user input */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private final Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Public constructor. Should only be used by bot."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public Ui() { }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Displays the welcome message to the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void showWelcomeMsg() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        System.out.println(\"Eh what\u0027s up! I\u0027m Meimei\" +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \"\\nWhat you want ah?\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Reads user inputs which should contain commands to the bot."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @return the line inputted by the user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Prints lines to frame bot responses."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Prints error messages from DukeExceptions thrown during"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * the bot execution."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param message message from the getMessage() method of a DukeException"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 52
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.dukeexception.WrongDeadlineException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Command that adds a task to the user\u0027s list when executed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /** Represents the type of the command used by the user */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private CommandType commandType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /** Additional information needed for executing the command */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Public constructor."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param commandType Either \u003ccode\u003eTODO\u003c/code\u003e, \u003ccode\u003eDeadline\u003c/code\u003e,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *                    or \u003ccode\u003eEvent\u003c/code\u003e."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param description Name of the task (and date and time if"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *                    \u003ccode\u003eDeadline\u003c/code\u003e or \u003ccode\u003eEvent\u003c/code\u003e."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public AddCommand(CommandType commandType, String description) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (this.commandType \u003d\u003d CommandType.TODO) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            task \u003d new Todo(this.description);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        } else if (this.commandType \u003d\u003d CommandType.DEADLINE) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            String[] descElements \u003d this.description.split(\" /by \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                LocalDateTime dateTime \u003d LocalDateTime.parse(descElements[1],"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                String taskName \u003d descElements[0];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                task \u003d new Deadline(taskName, dateTime);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                throw new WrongDeadlineException(\"deadline\", \"/by\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        } else { // should be event"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            String[] descElements \u003d this.description.split(\" /at \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                LocalDateTime dateTime \u003d LocalDateTime.parse(descElements[1],"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                String taskName \u003d descElements[0];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                task \u003d new Event(taskName, dateTime);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                throw new WrongDeadlineException(\"event\", \"/at\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (task !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            tasks.addTask(task, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            System.out.println(\"Orh. I added:\" + \"\\n  \" + task.toString()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    + \"\\nNow you got \" + tasks.getListLength() + \" things in the list.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 78
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Represents a (bot) command that can be executed by the bot."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Executes the command as derived from the user\u0027s input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param tasks The user\u0027s tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param storage Handles updating the hard disk accordingly."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @throws DukeException If a DukeException is thrown in executing the command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public abstract void execute(TaskList tasks, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Returns true when the command is an exit command and false otherwise."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @return A boolean indicating if the command is an exit command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 27
    }
  },
  {
    "path": "src/main/java/duke/command/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Types of user commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * User has to type these commands in each line of input"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * to command the bot."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    LIST,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    DONE,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    BYE,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    FIND"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 17
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.dukeexception.WrongItemIndexException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Command that deletes a task from the user\u0027s list when executed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /** A string representation of the number corresponding to the task to be deleted */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Public constructor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param description String representation of the number"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *                    corresponding to the task to be deleted."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public DeleteCommand(String description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            int taskNum \u003d Integer.parseInt(this.description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            Task task \u003d tasks.getTask(taskNum);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            tasks.deleteTask(taskNum, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            System.out.println(\"Okay, I deleted this liao:\" + \"\\n  \" + task.toString()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    + \"\\nNow left \" + tasks.getListLength() + \" things in the list.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            throw new WrongItemIndexException(CommandType.DELETE.toString().toLowerCase(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                tasks.getListLength());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 46
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.dukeexception.WrongItemIndexException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Command that marks a task from the user\u0027s list as completed(\"done\") when executed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /** A string representation of the number corresponding to the task to be marked */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Public constructor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param description String representation of the number"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *                    corresponding to the task to be marked."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public DoneCommand(String description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            int taskNum \u003d Integer.parseInt(this.description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            Task task \u003d tasks.getTask(taskNum);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            tasks.markDone(taskNum, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            System.out.println(\"Can, I help you mark this as done liao:\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    + \"\\n  \" + task.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            throw new WrongItemIndexException(CommandType.DONE.toString().toLowerCase(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    tasks.getListLength());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 46
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Command that displays a goodbye message and exits(quits) the bot when executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        System.out.println(\"Ok bye bye! C u again :P\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 19
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Command that finds tasks that contain a given keyword when executed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class FindCommand extends Command{"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /** Keyword to be searched for */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Public constructor. Removes whitespaces of \u003ccode\u003edescription\u003c/code\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * when assigning to class variable, and converts keyword to lower case"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * for simplicity."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param description Keyword that user wants to search for amongst tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public FindCommand(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.description \u003d description."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            replaceAll(\"\\\\s\",\"\")."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            toLowerCase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        List\u003cTask\u003e resultList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d tasks.getListLength(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            Task task \u003d tasks.getTask(i);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            if (task.getTaskName().toLowerCase().contains(this.description)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                resultList.add(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String finalString \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        for (Task task : resultList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            finalString +\u003d \"\\n\" + counter + \".\" + task.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        System.out.println(\"Na, I found this:\" + finalString);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 58
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Command that displays the user\u0027s list of tasks when executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        System.out.println(\"Na, here is your list lah:\" + tasks.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 20
    }
  },
  {
    "path": "src/main/java/duke/command/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.dukeexception.NoCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import duke.dukeexception.NoDescriptionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Static class that parses user commands into executable bot commands represented"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * by \u003ccode\u003eCommand\u003c/code\u003e objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Parse user commands into executable bot commands."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param fullCommand User command (the full line of user input)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @return A bot command to be executed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @throws DukeException If description is missing for \u003ccode\u003eAddCommand\u003c/code\u003e,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *                      \u003ccode\u003eDeleteCommand\u003c/code\u003e or \u003ccode\u003eDoneCommand\u003c/code\u003e,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *                      or if user command does not match any \u003ccode\u003eCommandType\u003c/code\u003e."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String[] commandElements \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        String commandString \u003d commandElements[0];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        CommandType commandType \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        for (CommandType type : CommandType.values()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            if (type.toString().equalsIgnoreCase(commandString)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                commandType \u003d type;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        if (commandType \u003d\u003d CommandType.LIST) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        } else if (commandType \u003d\u003d CommandType.BYE) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        } else if (commandType \u003d\u003d CommandType.DELETE"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                || commandType \u003d\u003d CommandType.DONE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                || commandType \u003d\u003d CommandType.TODO"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                || commandType \u003d\u003d CommandType.DEADLINE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                || commandType \u003d\u003d CommandType.EVENT"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                || commandType \u003d\u003d CommandType.FIND) { // Commands that have a description"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                String description \u003d commandElements[1];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                if (commandType \u003d\u003d CommandType.DELETE) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    return new DeleteCommand(description);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                } else if (commandType \u003d\u003d CommandType.DONE) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    return new DoneCommand(description);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                } else if (commandType \u003d\u003d CommandType.FIND) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    return new FindCommand(description);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                    return new AddCommand(commandType, description);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                throw new NoDescriptionException(commandType.toString().toLowerCase());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            throw new NoCommandException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 62
    }
  },
  {
    "path": "src/main/java/duke/dukeexception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package duke.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Represents exceptions unique to the bot."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Public constructor."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param message Error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return \"Aiyo! \" + super.getMessage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 21
    }
  },
  {
    "path": "src/main/java/duke/dukeexception/NoCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package duke.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Exception thrown when a non-valid user command is inputted."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class NoCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public NoCommandException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(\"I cannot find this command leh. Try sth else?\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return super.getMessage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 16
    }
  },
  {
    "path": "src/main/java/duke/dukeexception/NoDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package duke.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Exception thrown when the description is missing from is missing for the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * \u003ccode\u003eAddCommand\u003c/code\u003e, \u003ccode\u003eDeleteCommand\u003c/code\u003e or \u003ccode\u003eDoneCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * bot commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class NoDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public NoDescriptionException(String commandName) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(\"The description of \" + commandName + \" cannot be empty lah. Try again!\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return super.getMessage();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 18
    }
  },
  {
    "path": "src/main/java/duke/dukeexception/WrongDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package duke.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Exception thrown when date and time is not given in the correct format"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * for \u003ccode\u003eDEADLINE\u003c/code\u003e and \u003ccode\u003eEVENT\u003c/code\u003e user commands from"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * \u003ccode\u003eCommandType\u003c/code\u003e."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class WrongDeadlineException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public WrongDeadlineException(String commandName, String separator) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(\"You type wrong lah!\" +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \"\\nTry \\\"\" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            commandName +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \" {description of task} \" +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            separator +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \" {date and time in this format: dd/MM/yyyy HH:mm}\\\"\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 17
    }
  },
  {
    "path": "src/main/java/duke/dukeexception/WrongItemIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package duke.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Exception thrown when description of \u003ccode\u003eDELETE\u003c/code\u003e or \u003ccode\u003eDONE\u003c/code\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * user commands are not accompanied with a valid task number that is an integer"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * and within the range 1 to the size of the list of tasks (no tasks can be marked"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * or deleted if there are no task in the list)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class WrongItemIndexException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public WrongItemIndexException(String commandName, int listLength) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(\"Cannot find leh. Try typing \\\"\" + commandName + \" {index of list item}\\\".\" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \"\\nYour list only got \" +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            listLength +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            \" things.\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return super.getMessage();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 22
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Represents a task to be completed by a given deadline. Inherits from Task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Adapted from \u003ca href\u003d\"https://nus-cs2103-ay2021s1.github.io/website/schedule/week2/project.html\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " *     this page\u003c/a\u003e ."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /** Represents the date and time at which to complete the task by */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    protected LocalDateTime dateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Public constructor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param taskName Name of the task as given by user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param dateTime LocalDateTime object representing the deadline of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public Deadline(String taskName, LocalDateTime dateTime)  {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Returns the date and time at which to complete the task by."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @return LocalDateTime object representing the deadline of the task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return \"[D]\" + super.toString() + \" by: \" +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            this.dateTime.format(DateTimeFormatter.ofPattern(\"d MMM yyyy, h.m a\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 41
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Represents an event at a particular date and time. Inherits from Task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /** Represents the date and time of the event */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    protected LocalDateTime dateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Public constructor."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param taskName Name of the task as given by user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param dateTime LocalDateTime object representing the date and time of the event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public Event(String taskName, LocalDateTime dateTime)  {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Returns the date and time when the event is held."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @return LocalDateTime object representing the date and time of the event."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return \"[E]\" + super.toString() + \" at: \" +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "            this.dateTime.format(DateTimeFormatter.ofPattern(\"d MMM yyyy, h.m a\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 38
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Represents a task that has a name \u003ccode\u003etaskName\u003c/code\u003e and a status \u003ccode\u003eisDone\u003c/code\u003e."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Adapted from https://nus-cs2103-ay2021s1.github.io/website/schedule/week2/project.html"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /** Name of the task */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    protected final String taskName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /** Status of the task */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Public constructor. A task is \u003cb\u003enot done\u003c/b\u003e by default when first added."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param taskName Name of the task as given by user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public Task(String taskName) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Returns the name of the task given by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @return Name of the task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    protected String getStatusIcon() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return isDone ? \"\\u2713\" : \"\\u2718\"; //return tick or cross symbols"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Returns a boolean value representing whether the task has been"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * completed or not. A true value indicates that the task has been completed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @return Boolean indicating whether task has been done."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Marks a task as having been completed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + taskName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 58
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " * Represents a task to be done. Inherits from Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * Public constructor."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     * @param taskName Name of the task as given by user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public Todo(String taskName) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 21
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void dummyTest(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 13
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertEquals(\"[D][\\u2718] Assignment by: 6 Nov 2020, 11.59 pm\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                new Deadline(\"Assignment\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        LocalDateTime.parse(\"06/11/2020 23:59\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                                DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\")))"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        .toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 20
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertEquals(\"[E][\\u2718] Dance Class at: 3 Sep 2020, 8.30 pm\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                new Event(\"Dance Class\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        LocalDateTime.parse(\"03/09/2020 20:30\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                                DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\")))"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "                        .toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 20
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void testGetTaskName() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertEquals(\"Laundry\", new Task(\"Laundry\").getTaskName());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void isDone_isDoneAssignedTrue_true() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Task testTask \u003d new Task(\"Housework\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        testTask.isDone \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertTrue(testTask.isDone());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void isDone_defaultTask_false() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Task testTask \u003d new Task(\"Housework\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertFalse(testTask.isDone());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void markDone_taskMarkedDone_isDoneVariableIsTrue() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Task testTask \u003d new Task(\"Housework\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        testTask.markDone();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertTrue(testTask.isDone);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void testStringConversionForDoneTask() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        Task testTask \u003d new Task(\"Dishes\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        testTask.markDone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertEquals(\"[\\u2713] Dishes\", testTask.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 40
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "        assertEquals(\"[T][\\u2718] Homework\", new Todo(\"Homework\").toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 13
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "deadline do homework /by no idea :-p"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 14
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 2,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foojingyi"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "foojingyi": 2,
      "-": 37
    }
  }
]
