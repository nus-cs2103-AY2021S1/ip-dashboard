[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"# Duke User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"Welcome to the repo for my Duke chatbot. The User Guide will guide you through on how to set-up and use the Duke chatbot."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"# Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"+ [Getting Started](#getting-started)"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"+ [Features](#features)"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"   + [Adding a Task](#adding-a-task)"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"      + [Todo](#todo)"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"      + [Deadline](#deadline)"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"      + [Event](#event)"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"   + [Showing All Tasks](#showing-all-tasks)"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"   + [Completing A Task](#completing-a-task)"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"   + [Deleting A Task](#deleting-a-task)"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"   + [Filtering Tasks](#filtering-tasks)"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"      + [By Keywords](#by-keywords)"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"      + [By Due Date](#by-due-date)"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"      + [Within A Timeframe](#within-a-timeframe)"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"   + [Tags](#tags)"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"      + [Adding Tags To Tasks](#adding-tags-to-tasks)"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"      + [Removing Tags From Tasks](#removing-tags-from-tasks)"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"   + [Exiting The App](#exiting-the-app)"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"+ [Data Storage](#data-storage)"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      "},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"   "},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"# Getting Started"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"1. Download the latest jar file in the [releases page](https://github.com/Wong-ZZ/ip/releases)."},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"2. Place the jar file in your desired folder."},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"3. Double click on the jar file or run `java -jar duke.jar` in the same directory as the jar file to run the app."},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"# Features"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"## Adding a Task"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"There are 3 different types of tasks that are supported, namely: `Todo`, `Deadline` and `Event`."},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"The following subsections will guide you on how to properly add the three different types of tasks."},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"### Todo"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"Todo tasks only stores the description of the task and does not store any information on when the task should be completed."},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"Syntax: `todo \u003cdescription\u003e`"},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"Example: `todo Add a todo task`"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":"Sample Usage:"},{"lineNumber":49,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":50,"author":{"gitId":"Wong-ZZ"},"content":"![Adding a todo task](docs/readme-img/todo.png)"},{"lineNumber":51,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":52,"author":{"gitId":"Wong-ZZ"},"content":"### Deadline"},{"lineNumber":53,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":54,"author":{"gitId":"Wong-ZZ"},"content":"Deadline tasks stores the description of the task and the deadline of the task."},{"lineNumber":55,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":56,"author":{"gitId":"Wong-ZZ"},"content":"Syntax: `deadline \u003cdescription\u003e /by \u003cYYYY-MM-DD\u003e \u003cHH:mm\u003e`"},{"lineNumber":57,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":58,"author":{"gitId":"Wong-ZZ"},"content":"Example: `deadline Add a deadline task /by 2020-09-17 23:59`"},{"lineNumber":59,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":60,"author":{"gitId":"Wong-ZZ"},"content":"Sample Usage:"},{"lineNumber":61,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":62,"author":{"gitId":"Wong-ZZ"},"content":"![Adding a deadline task](docs/readme-img/deadline.png)"},{"lineNumber":63,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":64,"author":{"gitId":"Wong-ZZ"},"content":"### Event"},{"lineNumber":65,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":66,"author":{"gitId":"Wong-ZZ"},"content":"Event tasks stores the description of the task and the time the event starts at."},{"lineNumber":67,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":68,"author":{"gitId":"Wong-ZZ"},"content":"Syntax: `event \u003cdescription\u003e /at \u003cYYYY-MM-DD\u003e \u003cHH:mm\u003e`"},{"lineNumber":69,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":70,"author":{"gitId":"Wong-ZZ"},"content":"Example: `event Add an event task /at 2020-09-17 23:59`"},{"lineNumber":71,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":72,"author":{"gitId":"Wong-ZZ"},"content":"Sample Usage:"},{"lineNumber":73,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":74,"author":{"gitId":"Wong-ZZ"},"content":"![Adding an event task](docs/readme-img/event.png)"},{"lineNumber":75,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":76,"author":{"gitId":"Wong-ZZ"},"content":"## Showing All Tasks"},{"lineNumber":77,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":78,"author":{"gitId":"Wong-ZZ"},"content":"Displays all the tasks that have previously been added."},{"lineNumber":79,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":80,"author":{"gitId":"Wong-ZZ"},"content":"Syntax: `list`"},{"lineNumber":81,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":82,"author":{"gitId":"Wong-ZZ"},"content":"Sample Usage:"},{"lineNumber":83,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":84,"author":{"gitId":"Wong-ZZ"},"content":"![Showing all tasks](docs/readme-img/list.png)"},{"lineNumber":85,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":86,"author":{"gitId":"Wong-ZZ"},"content":"## Completing A Task"},{"lineNumber":87,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":88,"author":{"gitId":"Wong-ZZ"},"content":"Mark a previously added task as done."},{"lineNumber":89,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":90,"author":{"gitId":"Wong-ZZ"},"content":"Syntax: `done \u003cindex of task\u003e`"},{"lineNumber":91,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":92,"author":{"gitId":"Wong-ZZ"},"content":"Example: `done 2`"},{"lineNumber":93,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":94,"author":{"gitId":"Wong-ZZ"},"content":"Sample Usage:"},{"lineNumber":95,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":96,"author":{"gitId":"Wong-ZZ"},"content":"![Showing all tasks](docs/readme-img/done.png)"},{"lineNumber":97,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":98,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":99,"author":{"gitId":"Wong-ZZ"},"content":"## Deleting A Task"},{"lineNumber":100,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":101,"author":{"gitId":"Wong-ZZ"},"content":"Delete an unwanted task that was added previously."},{"lineNumber":102,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":103,"author":{"gitId":"Wong-ZZ"},"content":"Syntax: `delete \u003cindex of task\u003e`"},{"lineNumber":104,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":105,"author":{"gitId":"Wong-ZZ"},"content":"Example: `delete 1`"},{"lineNumber":106,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":107,"author":{"gitId":"Wong-ZZ"},"content":"Sample Usage:"},{"lineNumber":108,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":109,"author":{"gitId":"Wong-ZZ"},"content":"![Deleting a task](docs/readme-img/delete.png)"},{"lineNumber":110,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":111,"author":{"gitId":"Wong-ZZ"},"content":"## Filtering Tasks"},{"lineNumber":112,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":113,"author":{"gitId":"Wong-ZZ"},"content":"The app provides several methods to filter the tasks."},{"lineNumber":114,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":115,"author":{"gitId":"Wong-ZZ"},"content":"### By Keywords"},{"lineNumber":116,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":117,"author":{"gitId":"Wong-ZZ"},"content":"Filter tasks by keywords in the task\u0027s description."},{"lineNumber":118,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":119,"author":{"gitId":"Wong-ZZ"},"content":"Syntax: `find \u003ckeyword\u003e`"},{"lineNumber":120,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":121,"author":{"gitId":"Wong-ZZ"},"content":"Example `find CS2103T`"},{"lineNumber":122,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":123,"author":{"gitId":"Wong-ZZ"},"content":"Sample Usage:"},{"lineNumber":124,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":125,"author":{"gitId":"Wong-ZZ"},"content":"![Filtering tasks by keyword](docs/readme-img/find.png)"},{"lineNumber":126,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":127,"author":{"gitId":"Wong-ZZ"},"content":"### By Due Date"},{"lineNumber":128,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":129,"author":{"gitId":"Wong-ZZ"},"content":"Filter tasks by their due dates. Todo tasks are excluded since they do not contain any date time information."},{"lineNumber":130,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":131,"author":{"gitId":"Wong-ZZ"},"content":"Syntax: `due \u003cYYYY-MM-DD\u003e`"},{"lineNumber":132,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":133,"author":{"gitId":"Wong-ZZ"},"content":"Example `due 2020-09-16`"},{"lineNumber":134,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":135,"author":{"gitId":"Wong-ZZ"},"content":"Sample Usage:"},{"lineNumber":136,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":137,"author":{"gitId":"Wong-ZZ"},"content":"![Filtering tasks by due date](docs/readme-img/due.png)"},{"lineNumber":138,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":139,"author":{"gitId":"Wong-ZZ"},"content":"### Within A Timeframe"},{"lineNumber":140,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":141,"author":{"gitId":"Wong-ZZ"},"content":"Filter tasks that are due within X days from now. Todo tasks are included by default."},{"lineNumber":142,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":143,"author":{"gitId":"Wong-ZZ"},"content":"Syntax: `remind \u003cnumber of days\u003e`"},{"lineNumber":144,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":145,"author":{"gitId":"Wong-ZZ"},"content":"Example `remind 5`"},{"lineNumber":146,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":147,"author":{"gitId":"Wong-ZZ"},"content":"Sample Usage:"},{"lineNumber":148,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":149,"author":{"gitId":"Wong-ZZ"},"content":"![Filtering tasks by timeframe](docs/readme-img/remind.png)"},{"lineNumber":150,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":151,"author":{"gitId":"Wong-ZZ"},"content":"## Tags"},{"lineNumber":152,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":153,"author":{"gitId":"Wong-ZZ"},"content":"Every task can be tagged in order to store additional information about the task. Unwanted tags can also be removed from the tasks"},{"lineNumber":154,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":155,"author":{"gitId":"Wong-ZZ"},"content":"### Adding Tags To Tasks"},{"lineNumber":156,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":157,"author":{"gitId":"Wong-ZZ"},"content":"Synxtax: `tag \u003cindex of task\u003e \u003ctag1\u003e \u003ctag2\u003e ....`"},{"lineNumber":158,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":159,"author":{"gitId":"Wong-ZZ"},"content":"Example: `tag 1 important exams`"},{"lineNumber":160,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":161,"author":{"gitId":"Wong-ZZ"},"content":"Sample Usage:"},{"lineNumber":162,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":163,"author":{"gitId":"Wong-ZZ"},"content":"![Adding a tag](docs/readme-img/addtag.png)"},{"lineNumber":164,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":165,"author":{"gitId":"Wong-ZZ"},"content":"### Removing Tags From Tasks"},{"lineNumber":166,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":167,"author":{"gitId":"Wong-ZZ"},"content":"Synxtax: `tag -\u003cindex of task\u003e \u003ctag1\u003e \u003ctag2\u003e ....`"},{"lineNumber":168,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":169,"author":{"gitId":"Wong-ZZ"},"content":"Example: `tag -1 SU igiveup`"},{"lineNumber":170,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":171,"author":{"gitId":"Wong-ZZ"},"content":"Note: If the task does not contain the tag to be deleted, the command would just ignore that specific tag."},{"lineNumber":172,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":173,"author":{"gitId":"Wong-ZZ"},"content":"Sample Usage:"},{"lineNumber":174,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":175,"author":{"gitId":"Wong-ZZ"},"content":"![Removing a tag](docs/readme-img/removetag.png)"},{"lineNumber":176,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":177,"author":{"gitId":"Wong-ZZ"},"content":"## Exiting The App"},{"lineNumber":178,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":179,"author":{"gitId":"Wong-ZZ"},"content":"Exit the app through a command."},{"lineNumber":180,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":181,"author":{"gitId":"Wong-ZZ"},"content":"Syntax: `bye`"},{"lineNumber":182,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":183,"author":{"gitId":"Wong-ZZ"},"content":"# Data Storage"},{"lineNumber":184,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":185,"author":{"gitId":"Wong-ZZ"},"content":"The tasks that have been added will be saved in a .txt file. It can be found in `./data/duke.txt` from the folder where the .jar file is at. Each task is saved as a line similar to the [command to add them](#adding-a-task) with some additional information prepended and appended to it. "},{"lineNumber":186,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":187,"author":{"gitId":"Wong-ZZ"},"content":"A `0` or `1` is prepended to the command to signify if the tasks is incomplete/complete respectively."},{"lineNumber":188,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":189,"author":{"gitId":"Wong-ZZ"},"content":"If the task has tags, ` //tags \u003ctag1\u003e \u003ctag2\u003e` will be appened to the command."},{"lineNumber":190,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":191,"author":{"gitId":"Wong-ZZ"},"content":"Examples: "},{"lineNumber":192,"author":{"gitId":"-"},"content":"```"},{"lineNumber":193,"author":{"gitId":"Wong-ZZ"},"content":"0event CS2103T finals /at 2020-12-02 09:00 //tags #important #exams"},{"lineNumber":194,"author":{"gitId":"Wong-ZZ"},"content":"1todo Update readme"},{"lineNumber":195,"author":{"gitId":"Wong-ZZ"},"content":"0deadline Submit assignment /by 2020-09-16 23:59 //tags #graded"},{"lineNumber":196,"author":{"gitId":"-"},"content":"```"},{"lineNumber":197,"author":{"gitId":"Wong-ZZ"},"content":""}],"authorContributionMap":{"Wong-ZZ":191,"-":6}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00276.0.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"    String javaFxVersion \u003d \u002711.0.1\u0027"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":55,"author":{"gitId":"Wong-ZZ"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":17,"-":43}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"# Duke User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"Welcome to the repo for my Duke chatbot. The User Guide will guide you through on how to set-up and use the Duke chatbot."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"# Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"+ [Getting Started](#getting-started)"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"+ [Features](#features)"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"   + [Adding A Task](#adding-a-task)"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"      + [Todo](#todo)"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"      + [Deadline](#deadline)"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"      + [Event](#event)"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"   + [Showing All Tasks](#showing-all-tasks)"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"   + [Completing A Task](#completing-a-task)"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"   + [Deleting A Task](#deleting-a-task)"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"   + [Filtering Tasks](#filtering-tasks)"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"      + [By Keywords](#by-keywords)"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"      + [By Due Date](#by-due-date)"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"      + [Within A Timeframe](#within-a-timeframe)"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"   + [Tags](#tags)"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"      + [Adding Tags To Tasks](#adding-tags-to-tasks)"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"      + [Removing Tags From Tasks](#removing-tags-from-tasks)"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"   + [Exiting The App](#exiting-the-app)"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"+ [Data Storage](#data-storage)"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      "},{"lineNumber":26,"author":{"gitId":"-"},"content":"   "},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"# Getting Started"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"1. Download the latest jar file in the [releases page](https://github.com/Wong-ZZ/ip/releases)."},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"2. Place the jar file in your desired folder."},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"3. Double click on the jar file or run `java -jar duke.jar` in the same directory as the jar file to run the app."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"# Features"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"## Adding a Task"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"There are 3 different types of tasks that are supported, namely: `Todo`, `Deadline` and `Event`."},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"The following subsections will guide you on how to properly add the three different types of tasks."},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"### Todo"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"Todo tasks only stores the description of the task and does not store any information on when the task should be completed."},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"Syntax: `todo \u003cdescription\u003e`"},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"Example: `todo Add a todo task`"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":"Sample Usage:"},{"lineNumber":49,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":50,"author":{"gitId":"Wong-ZZ"},"content":"![Adding a todo task](readme-img/todo.png)"},{"lineNumber":51,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":52,"author":{"gitId":"Wong-ZZ"},"content":"### Deadline"},{"lineNumber":53,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":54,"author":{"gitId":"Wong-ZZ"},"content":"Deadline tasks stores the description of the task and the deadline of the task."},{"lineNumber":55,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":56,"author":{"gitId":"Wong-ZZ"},"content":"Syntax: `deadline \u003cdescription\u003e /by \u003cYYYY-MM-DD\u003e \u003cHH:mm\u003e`"},{"lineNumber":57,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":58,"author":{"gitId":"Wong-ZZ"},"content":"Example: `deadline Add a deadline task /by 2020-09-17 23:59`"},{"lineNumber":59,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":60,"author":{"gitId":"Wong-ZZ"},"content":"Sample Usage:"},{"lineNumber":61,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":62,"author":{"gitId":"Wong-ZZ"},"content":"![Adding a deadline task](readme-img/deadline.png)"},{"lineNumber":63,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":64,"author":{"gitId":"Wong-ZZ"},"content":"### Event"},{"lineNumber":65,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":66,"author":{"gitId":"Wong-ZZ"},"content":"Event tasks stores the description of the task and the time the event starts at."},{"lineNumber":67,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":68,"author":{"gitId":"Wong-ZZ"},"content":"Syntax: `event \u003cdescription\u003e /at \u003cYYYY-MM-DD\u003e \u003cHH:mm\u003e`"},{"lineNumber":69,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":70,"author":{"gitId":"Wong-ZZ"},"content":"Example: `event Add an event task /at 2020-09-17 23:59`"},{"lineNumber":71,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":72,"author":{"gitId":"Wong-ZZ"},"content":"Sample Usage:"},{"lineNumber":73,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":74,"author":{"gitId":"Wong-ZZ"},"content":"![Adding an event task](readme-img/event.png)"},{"lineNumber":75,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":76,"author":{"gitId":"Wong-ZZ"},"content":"## Showing All Tasks"},{"lineNumber":77,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":78,"author":{"gitId":"Wong-ZZ"},"content":"Displays all the tasks that have previously been added."},{"lineNumber":79,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":80,"author":{"gitId":"Wong-ZZ"},"content":"Syntax: `list`"},{"lineNumber":81,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":82,"author":{"gitId":"Wong-ZZ"},"content":"Sample Usage:"},{"lineNumber":83,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":84,"author":{"gitId":"Wong-ZZ"},"content":"![Showing all tasks](readme-img/list.png)"},{"lineNumber":85,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":86,"author":{"gitId":"Wong-ZZ"},"content":"## Completing A Task"},{"lineNumber":87,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":88,"author":{"gitId":"Wong-ZZ"},"content":"Mark a previously added task as done."},{"lineNumber":89,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":90,"author":{"gitId":"Wong-ZZ"},"content":"Syntax: `done \u003cindex of task\u003e`"},{"lineNumber":91,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":92,"author":{"gitId":"Wong-ZZ"},"content":"Example: `done 2`"},{"lineNumber":93,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":94,"author":{"gitId":"Wong-ZZ"},"content":"Sample Usage:"},{"lineNumber":95,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":96,"author":{"gitId":"Wong-ZZ"},"content":"![Showing all tasks](readme-img/done.png)"},{"lineNumber":97,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":98,"author":{"gitId":"Wong-ZZ"},"content":"## Deleting A Task"},{"lineNumber":99,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":100,"author":{"gitId":"Wong-ZZ"},"content":"Delete an unwanted task that was added previously."},{"lineNumber":101,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":102,"author":{"gitId":"Wong-ZZ"},"content":"Syntax: `delete \u003cindex of task\u003e`"},{"lineNumber":103,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":104,"author":{"gitId":"Wong-ZZ"},"content":"Example: `delete 1`"},{"lineNumber":105,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":106,"author":{"gitId":"Wong-ZZ"},"content":"Sample Usage:"},{"lineNumber":107,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":108,"author":{"gitId":"Wong-ZZ"},"content":"![Showing all tasks](readme-img/done.png)"},{"lineNumber":109,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":110,"author":{"gitId":"Wong-ZZ"},"content":"## Filtering Tasks"},{"lineNumber":111,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":112,"author":{"gitId":"Wong-ZZ"},"content":"The app provides several methods to filter the tasks."},{"lineNumber":113,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":114,"author":{"gitId":"Wong-ZZ"},"content":"### By Keywords"},{"lineNumber":115,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":116,"author":{"gitId":"Wong-ZZ"},"content":"Filter tasks by keywords in the task\u0027s description."},{"lineNumber":117,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":118,"author":{"gitId":"Wong-ZZ"},"content":"Syntax: `find \u003ckeyword\u003e`"},{"lineNumber":119,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":120,"author":{"gitId":"Wong-ZZ"},"content":"Example `find CS2103T`"},{"lineNumber":121,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":122,"author":{"gitId":"Wong-ZZ"},"content":"Sample Usage:"},{"lineNumber":123,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":124,"author":{"gitId":"Wong-ZZ"},"content":"![Filtering tasks by keyword](readme-img/find.png)"},{"lineNumber":125,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":126,"author":{"gitId":"Wong-ZZ"},"content":"### By Due Date"},{"lineNumber":127,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":128,"author":{"gitId":"Wong-ZZ"},"content":"Filter tasks by their due dates. Todo tasks are excluded since they do not contain any date time information."},{"lineNumber":129,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":130,"author":{"gitId":"Wong-ZZ"},"content":"Syntax: `due \u003cYYYY-MM-DD\u003e`"},{"lineNumber":131,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":132,"author":{"gitId":"Wong-ZZ"},"content":"Example `due 2020-09-16`"},{"lineNumber":133,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":134,"author":{"gitId":"Wong-ZZ"},"content":"Sample Usage:"},{"lineNumber":135,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":136,"author":{"gitId":"Wong-ZZ"},"content":"![Filtering tasks by due date](readme-img/due.png)"},{"lineNumber":137,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":138,"author":{"gitId":"Wong-ZZ"},"content":"### Within A Timeframe"},{"lineNumber":139,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":140,"author":{"gitId":"Wong-ZZ"},"content":"Filter tasks that are due within X days from now. Todo tasks are included by default."},{"lineNumber":141,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":142,"author":{"gitId":"Wong-ZZ"},"content":"Syntax: `remind \u003cnumber of days\u003e`"},{"lineNumber":143,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":144,"author":{"gitId":"Wong-ZZ"},"content":"Example `remind 5`"},{"lineNumber":145,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":146,"author":{"gitId":"Wong-ZZ"},"content":"Sample Usage:"},{"lineNumber":147,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":148,"author":{"gitId":"Wong-ZZ"},"content":"![Filtering tasks by timeframe](readme-img/remind.png)"},{"lineNumber":149,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":150,"author":{"gitId":"Wong-ZZ"},"content":"## Tags"},{"lineNumber":151,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":152,"author":{"gitId":"Wong-ZZ"},"content":"Every task can be tagged in order to store additional information about the task. Unwanted tags can also be removed from the tasks"},{"lineNumber":153,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":154,"author":{"gitId":"Wong-ZZ"},"content":"### Adding Tags To Tasks"},{"lineNumber":155,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":156,"author":{"gitId":"Wong-ZZ"},"content":"Synxtax: `tag \u003cindex of task\u003e \u003ctag1\u003e \u003ctag2\u003e ....`"},{"lineNumber":157,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":158,"author":{"gitId":"Wong-ZZ"},"content":"Example: `tag 1 important exams`"},{"lineNumber":159,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":160,"author":{"gitId":"Wong-ZZ"},"content":"Sample Usage:"},{"lineNumber":161,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":162,"author":{"gitId":"Wong-ZZ"},"content":"![Adding a tag](readme-img/addtag.png)"},{"lineNumber":163,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":164,"author":{"gitId":"Wong-ZZ"},"content":"### Removing Tags From Tasks"},{"lineNumber":165,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":166,"author":{"gitId":"Wong-ZZ"},"content":"Synxtax: `tag -\u003cindex of task\u003e \u003ctag1\u003e \u003ctag2\u003e ....`"},{"lineNumber":167,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":168,"author":{"gitId":"Wong-ZZ"},"content":"Example: `tag -1 SU igiveup`"},{"lineNumber":169,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":170,"author":{"gitId":"Wong-ZZ"},"content":"Note: If the task does not contain the tag to be deleted, the command would just ignore that specific tag."},{"lineNumber":171,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":172,"author":{"gitId":"Wong-ZZ"},"content":"Sample Usage:"},{"lineNumber":173,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":174,"author":{"gitId":"Wong-ZZ"},"content":"![Removing a tag](readme-img/removetag.png)"},{"lineNumber":175,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":176,"author":{"gitId":"Wong-ZZ"},"content":"## Exiting The App"},{"lineNumber":177,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":178,"author":{"gitId":"Wong-ZZ"},"content":"Exit the app through a command."},{"lineNumber":179,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":180,"author":{"gitId":"Wong-ZZ"},"content":"Syntax: `bye`"},{"lineNumber":181,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":182,"author":{"gitId":"Wong-ZZ"},"content":"# Data Storage"},{"lineNumber":183,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":184,"author":{"gitId":"Wong-ZZ"},"content":"The tasks that have been added will be saved in a .txt file. It can be found in `./data/duke.txt` from the folder where the .jar file is at. Each task is saved as a line similar to the [command to add them](#adding-a-task) with some additional information prepended and appended to it. "},{"lineNumber":185,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":186,"author":{"gitId":"Wong-ZZ"},"content":"A `0` or `1` is prepended to the command to signify if the tasks is incomplete/complete respectively."},{"lineNumber":187,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":188,"author":{"gitId":"Wong-ZZ"},"content":"If the task has tags, `//tags \u003ctag1\u003e \u003ctag2\u003e ...` will be appened to the command."},{"lineNumber":189,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":190,"author":{"gitId":"Wong-ZZ"},"content":"Examples: "},{"lineNumber":191,"author":{"gitId":"Wong-ZZ"},"content":"```"},{"lineNumber":192,"author":{"gitId":"Wong-ZZ"},"content":"0event CS2103T finals /at 2020-12-02 09:00 //tags #important #exams"},{"lineNumber":193,"author":{"gitId":"Wong-ZZ"},"content":"1todo Update readme"},{"lineNumber":194,"author":{"gitId":"Wong-ZZ"},"content":"0deadline Submit assignment /by 2020-09-16 23:59 //tags #graded"},{"lineNumber":195,"author":{"gitId":"Wong-ZZ"},"content":"```"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"Wong-ZZ":186,"-":11}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.Response;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.geometry.Pos;"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.scene.Node;"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.scene.control.Label;"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.scene.image.Image;"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"public class DialogBox extends HBox {"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String ERROR_HEX_COLOR \u003d \"#ff0000\";"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String CLASS_BG_COLOR \u003d \"-fx-background-color: \";"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String FXML_PATH \u003d \"/view/DialogBox.fxml\";"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(FXML_PATH));"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":"    void initialize() {"},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"        double height \u003d 100.0;"},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":"        double width \u003d 100.0;"},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"        displayPicture.setFitWidth(width);"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":"        displayPicture.setFitHeight(height);"},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":"        Circle clip \u003d new Circle(width / 2, height / 2, height / 2);"},{"lineNumber":49,"author":{"gitId":"Wong-ZZ"},"content":"        displayPicture.setClip(clip);"},{"lineNumber":50,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":52,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"Wong-ZZ"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":54,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"Wong-ZZ"},"content":"    private void flip() {"},{"lineNumber":56,"author":{"gitId":"Wong-ZZ"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":57,"author":{"gitId":"Wong-ZZ"},"content":"        Collections.reverse(tmp);"},{"lineNumber":58,"author":{"gitId":"Wong-ZZ"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":59,"author":{"gitId":"Wong-ZZ"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":60,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":62,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"Wong-ZZ"},"content":"     * Creates a dialog box to display the user\u0027s input."},{"lineNumber":64,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"Wong-ZZ"},"content":"     * @param text String text input of user."},{"lineNumber":66,"author":{"gitId":"Wong-ZZ"},"content":"     * @param img Image image of user."},{"lineNumber":67,"author":{"gitId":"Wong-ZZ"},"content":"     * @return DialogBox a dialog box of the user\u0027s input."},{"lineNumber":68,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"Wong-ZZ"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":70,"author":{"gitId":"Wong-ZZ"},"content":"        return new DialogBox(text, img);"},{"lineNumber":71,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":73,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"Wong-ZZ"},"content":"     * Creates a dialog box to display duke\u0027s response."},{"lineNumber":75,"author":{"gitId":"Wong-ZZ"},"content":"     * Changes dialog to red for an error response."},{"lineNumber":76,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"Wong-ZZ"},"content":"     * @param resp Response text response from Duke."},{"lineNumber":78,"author":{"gitId":"Wong-ZZ"},"content":"     * @param img Image image of Duke."},{"lineNumber":79,"author":{"gitId":"Wong-ZZ"},"content":"     * @return DialogBox a dialog box of the Duke\u0027s response."},{"lineNumber":80,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"Wong-ZZ"},"content":"    public static DialogBox getDukeDialog(Response resp, Image img) {"},{"lineNumber":82,"author":{"gitId":"Wong-ZZ"},"content":"        DialogBox db \u003d new DialogBox(resp.getMessage(), img);"},{"lineNumber":83,"author":{"gitId":"Wong-ZZ"},"content":"        if (resp.isError()) {"},{"lineNumber":84,"author":{"gitId":"Wong-ZZ"},"content":"            String dialogStyle \u003d db.dialog.getStyle();"},{"lineNumber":85,"author":{"gitId":"Wong-ZZ"},"content":"            int startIndex \u003d dialogStyle.indexOf(CLASS_BG_COLOR);"},{"lineNumber":86,"author":{"gitId":"Wong-ZZ"},"content":"            int endIndex \u003d dialogStyle.substring(startIndex).indexOf(\";\");"},{"lineNumber":87,"author":{"gitId":"Wong-ZZ"},"content":"            String updatedStyle \u003d dialogStyle.substring(0, startIndex + CLASS_BG_COLOR.length())"},{"lineNumber":88,"author":{"gitId":"Wong-ZZ"},"content":"                    + ERROR_HEX_COLOR + dialogStyle.substring(endIndex);"},{"lineNumber":89,"author":{"gitId":"Wong-ZZ"},"content":"            db.dialog.setStyle(updatedStyle);"},{"lineNumber":90,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"Wong-ZZ"},"content":"        db.flip();"},{"lineNumber":92,"author":{"gitId":"Wong-ZZ"},"content":"        return db;"},{"lineNumber":93,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":94}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import java.nio.file.Paths;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"import duke.command.CommandExecutor;"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"import duke.command.DukeCommandExecutor;"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.DukeException;"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.InvalidSaveFileException;"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.NormalResponse;"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.Response;"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"import duke.storage.DukeStorage;"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"import duke.storage.Storage;"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.TaskArrayList;"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"import duke.ui.Ui;"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"// Main class that initializes the program."},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"public class Duke {"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String START_MSG \u003d \"Hello! I\u0027m Duke.\\nWhat can I do for you?\";"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"    private static final Path DEFAULT_SAVE_PATH \u003d Paths.get(\"data\", \"duke.txt\");"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String ERROR_LOAD_SAVE \u003d \"An error has occurred while loading the save file!\";"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"    private final Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"    private final CommandExecutor exe \u003d new DukeCommandExecutor();"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"    private final Ui ui \u003d new Ui();"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"    private final Path savePath;"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"    private final Storage storage;"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"    private final TaskArrayList taskList;"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"     * Initialises the Duke chatbot with a default save path."},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"     * @throws IOException If an IO error occurs while loading the save file."},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"    public Duke() throws IOException {"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":"        this.savePath \u003d DEFAULT_SAVE_PATH;"},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"        this.storage \u003d new DukeStorage(savePath);"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":"        this.taskList \u003d new TaskArrayList(storage);"},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":"     * Initialises the Duke chatbot with the given save path."},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":"     * @throws IOException If an IO error occurs while loading the save file."},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"Wong-ZZ"},"content":"    public Duke(Path savePath) throws IOException {"},{"lineNumber":50,"author":{"gitId":"Wong-ZZ"},"content":"        this.savePath \u003d savePath;"},{"lineNumber":51,"author":{"gitId":"Wong-ZZ"},"content":"        this.storage \u003d new DukeStorage(savePath);"},{"lineNumber":52,"author":{"gitId":"Wong-ZZ"},"content":"        this.taskList \u003d new TaskArrayList(storage);"},{"lineNumber":53,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":55,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"Wong-ZZ"},"content":"     * Starts the program on the cli."},{"lineNumber":57,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"Wong-ZZ"},"content":"    public void runCli() throws InvalidSaveFileException {"},{"lineNumber":59,"author":{"gitId":"Wong-ZZ"},"content":"        try {"},{"lineNumber":60,"author":{"gitId":"Wong-ZZ"},"content":"            loadSave();"},{"lineNumber":61,"author":{"gitId":"Wong-ZZ"},"content":"        } catch (DukeException e) {"},{"lineNumber":62,"author":{"gitId":"Wong-ZZ"},"content":"            throw new InvalidSaveFileException(ERROR_LOAD_SAVE);"},{"lineNumber":63,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":65,"author":{"gitId":"Wong-ZZ"},"content":"        ui.print(new NormalResponse(START_MSG));"},{"lineNumber":66,"author":{"gitId":"Wong-ZZ"},"content":"        while (true) {"},{"lineNumber":67,"author":{"gitId":"Wong-ZZ"},"content":"            String input \u003d sc.nextLine().trim();"},{"lineNumber":68,"author":{"gitId":"Wong-ZZ"},"content":"            Response msgBody \u003d exe.execute(input, taskList);"},{"lineNumber":69,"author":{"gitId":"Wong-ZZ"},"content":"            ui.print(msgBody);"},{"lineNumber":70,"author":{"gitId":"Wong-ZZ"},"content":"            if (exe.shouldExit()) {"},{"lineNumber":71,"author":{"gitId":"Wong-ZZ"},"content":"                break;"},{"lineNumber":72,"author":{"gitId":"Wong-ZZ"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":76,"author":{"gitId":"Wong-ZZ"},"content":"    protected Response getResponse(String input) {"},{"lineNumber":77,"author":{"gitId":"Wong-ZZ"},"content":"        return exe.execute(input, taskList);"},{"lineNumber":78,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":80,"author":{"gitId":"Wong-ZZ"},"content":"    protected void loadSave() throws DukeException {"},{"lineNumber":81,"author":{"gitId":"Wong-ZZ"},"content":"        List\u003cString\u003e loadedLines \u003d storage.getSavedLines();"},{"lineNumber":82,"author":{"gitId":"Wong-ZZ"},"content":"        for (String line: loadedLines) {"},{"lineNumber":83,"author":{"gitId":"Wong-ZZ"},"content":"            exe.loadSaveString(line, taskList);"},{"lineNumber":84,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":87,"author":{"gitId":"Wong-ZZ"},"content":"    protected boolean shouldExit() {"},{"lineNumber":88,"author":{"gitId":"Wong-ZZ"},"content":"        return exe.shouldExit();"},{"lineNumber":89,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":91,"author":{"gitId":"Wong-ZZ"},"content":"    public static void main(String[] args) throws IOException, InvalidSaveFileException {"},{"lineNumber":92,"author":{"gitId":"Wong-ZZ"},"content":"        new Duke(DEFAULT_SAVE_PATH).runCli();"},{"lineNumber":93,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":94}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"        Application.launch(Main.class);"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":" * A GUI for Duke using FXML."},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":" */"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"public class Main extends Application {"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String FXML_PATH \u003d \"/view/MainWindow.fxml\";"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String ICON_PATH \u003d \"/images/Icon.png\";"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"    private final Duke duke;"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"     * Creates a new Duke instance and loads the save file."},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"     * @throws IOException If an IO error occurs while loading the saved data into Storage."},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"     * @throws DukeException If an error occurs while executing the loaded data."},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"    public Main() throws IOException, DukeException {"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"        duke \u003d new Duke();"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"        duke.loadSave();"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"    public void start(Stage stage) {"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(FXML_PATH));"},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":"            stage.setScene(scene);"},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setExitFunction(stage::close);"},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"            stage.show();"},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":"            stage.getIcons().add(new Image(getClass().getResource(ICON_PATH).toString()));"},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"        } catch (IOException e) {"},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":"            e.printStackTrace();"},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":48}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.NormalResponse;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.Response;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.animation.Interpolator;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.animation.KeyFrame;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.animation.KeyValue;"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.animation.PauseTransition;"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.animation.Timeline;"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.scene.control.Button;"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.scene.image.Image;"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"import javafx.util.Duration;"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":" */"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String START_MSG \u003d \"Duke:\\nHello! I\u0027m Duke.\\nWhat can I do for you?\";"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"    private static final double DELAY_CLOSE \u003d 1.0;"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"    private static final double DELAY_RESPONSE \u003d 0.3;"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"    private static final double DELAY_TRANSITION \u003d 0.2;"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"    private VBox dialogContainer;"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"    private TextField userInput;"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"    private Button sendButton;"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"    private Duke duke;"},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"    private Runnable exitFunction;"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"    private final Image userImage \u003d new Image(getClass().getResource(\"/images/User.png\").toString());"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":"    private final Image dukeImage \u003d new Image(getClass().getResource(\"/images/Duke.png\").toString());"},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"    void initialize() {"},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"        generateStartMsg();"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":49,"author":{"gitId":"Wong-ZZ"},"content":"    private void generateStartMsg() {"},{"lineNumber":50,"author":{"gitId":"Wong-ZZ"},"content":"        addDukeResponse(DialogBox.getDukeDialog(new NormalResponse(START_MSG), dukeImage));"},{"lineNumber":51,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":53,"author":{"gitId":"Wong-ZZ"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":54,"author":{"gitId":"Wong-ZZ"},"content":"        duke \u003d d;"},{"lineNumber":55,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":57,"author":{"gitId":"Wong-ZZ"},"content":"    public void setExitFunction(Runnable exitFunction) {"},{"lineNumber":58,"author":{"gitId":"Wong-ZZ"},"content":"        this.exitFunction \u003d exitFunction;"},{"lineNumber":59,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":61,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"Wong-ZZ"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":63,"author":{"gitId":"Wong-ZZ"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":64,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"Wong-ZZ"},"content":"    @FXML"},{"lineNumber":66,"author":{"gitId":"Wong-ZZ"},"content":"    protected void handleUserInput() {"},{"lineNumber":67,"author":{"gitId":"Wong-ZZ"},"content":"        String input \u003d userInput.getText().trim();"},{"lineNumber":68,"author":{"gitId":"Wong-ZZ"},"content":"        Response response \u003d duke.getResponse(input);"},{"lineNumber":69,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":70,"author":{"gitId":"Wong-ZZ"},"content":"        if (input.equals(\"\")) {"},{"lineNumber":71,"author":{"gitId":"Wong-ZZ"},"content":"            return;"},{"lineNumber":72,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":74,"author":{"gitId":"Wong-ZZ"},"content":"        userInput.clear();"},{"lineNumber":75,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":76,"author":{"gitId":"Wong-ZZ"},"content":"        DialogBox userDialog \u003d DialogBox.getUserDialog(input, userImage);"},{"lineNumber":77,"author":{"gitId":"Wong-ZZ"},"content":"        addUserDialog(userDialog);"},{"lineNumber":78,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":79,"author":{"gitId":"Wong-ZZ"},"content":"        DialogBox dukeResponse \u003d DialogBox.getDukeDialog(response, dukeImage);"},{"lineNumber":80,"author":{"gitId":"Wong-ZZ"},"content":"        addDukeResponse(dukeResponse);"},{"lineNumber":81,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":82,"author":{"gitId":"Wong-ZZ"},"content":"        if (duke.shouldExit()) {"},{"lineNumber":83,"author":{"gitId":"Wong-ZZ"},"content":"            userInput.setDisable(true);"},{"lineNumber":84,"author":{"gitId":"Wong-ZZ"},"content":"            PauseTransition delay \u003d new PauseTransition(Duration.seconds(DELAY_CLOSE));"},{"lineNumber":85,"author":{"gitId":"Wong-ZZ"},"content":"            delay.setOnFinished(event -\u003e exitFunction.run());"},{"lineNumber":86,"author":{"gitId":"Wong-ZZ"},"content":"            delay.play();"},{"lineNumber":87,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":90,"author":{"gitId":"Wong-ZZ"},"content":"    private void addUserDialog(DialogBox userDialog) {"},{"lineNumber":91,"author":{"gitId":"Wong-ZZ"},"content":"        userDialog.translateXProperty().set(-1 * dialogContainer.getWidth());"},{"lineNumber":92,"author":{"gitId":"Wong-ZZ"},"content":"        dialogContainer.getChildren().addAll(userDialog);"},{"lineNumber":93,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":94,"author":{"gitId":"Wong-ZZ"},"content":"        KeyValue keyValue \u003d new KeyValue(userDialog.translateXProperty(), 0, Interpolator.EASE_IN);"},{"lineNumber":95,"author":{"gitId":"Wong-ZZ"},"content":"        KeyFrame keyFrame \u003d new KeyFrame(Duration.seconds(DELAY_TRANSITION), keyValue);"},{"lineNumber":96,"author":{"gitId":"Wong-ZZ"},"content":"        Timeline timeline \u003d new Timeline(keyFrame);"},{"lineNumber":97,"author":{"gitId":"Wong-ZZ"},"content":"        timeline.play();"},{"lineNumber":98,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":100,"author":{"gitId":"Wong-ZZ"},"content":"    private void addDukeResponse(DialogBox dukeResponse) {"},{"lineNumber":101,"author":{"gitId":"Wong-ZZ"},"content":"        PauseTransition delayResponse \u003d new PauseTransition(Duration.seconds(DELAY_RESPONSE));"},{"lineNumber":102,"author":{"gitId":"Wong-ZZ"},"content":"        delayResponse.setOnFinished(event -\u003e {"},{"lineNumber":103,"author":{"gitId":"Wong-ZZ"},"content":"            dukeResponse.translateXProperty().set(1 * dialogContainer.getWidth());"},{"lineNumber":104,"author":{"gitId":"Wong-ZZ"},"content":"            dialogContainer.getChildren().addAll(dukeResponse);"},{"lineNumber":105,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":106,"author":{"gitId":"Wong-ZZ"},"content":"            KeyValue keyValue \u003d new KeyValue(dukeResponse.translateXProperty(), 0, Interpolator.EASE_IN);"},{"lineNumber":107,"author":{"gitId":"Wong-ZZ"},"content":"            KeyFrame keyFrame \u003d new KeyFrame(Duration.seconds(DELAY_TRANSITION), keyValue);"},{"lineNumber":108,"author":{"gitId":"Wong-ZZ"},"content":"            Timeline timeline \u003d new Timeline(keyFrame);"},{"lineNumber":109,"author":{"gitId":"Wong-ZZ"},"content":"            timeline.play();"},{"lineNumber":110,"author":{"gitId":"Wong-ZZ"},"content":"        });"},{"lineNumber":111,"author":{"gitId":"Wong-ZZ"},"content":"        delayResponse.play();"},{"lineNumber":112,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":113,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":114}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"// Abstract parent class for all classes that handle the logic of the chatbot"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"abstract class Command {"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":5}},{"path":"src/main/java/duke/command/CommandExecutor.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.Response;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":" * Interface for any class that will delegate the parsing and the execution of user inputs."},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":" * Contains a shouldExit method which only returns true if the \"bye\" command was issued by the user."},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"public interface CommandExecutor {"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"    public Response execute(String in, TaskList taskList);"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"    public void loadSaveString(String in, TaskList taskList) throws DukeException;"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"    public boolean shouldExit();"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":17}},{"path":"src/main/java/duke/command/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.TaskType;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"// Parses and categorises the user\u0027s command."},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"public class CommandParser {"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String CMD_DEADLINE \u003d \"deadline\";"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String CMD_DELETE \u003d \"delete\";"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String CMD_DONE \u003d \"done\";"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String CMD_DUE \u003d \"due\";"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String CMD_EVENT \u003d \"event\";"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String CMD_EXIT \u003d \"bye\";"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String CMD_FIND \u003d \"find\";"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String CMD_LIST \u003d \"list\";"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String CMD_REMIND \u003d \"remind\";"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String CMD_TAG \u003d \"tag\";"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String CMD_TODO \u003d \"todo\";"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"     * Parses the user\u0027s command and return the type of command issued by the user."},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"     * @param in String command provided by user."},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"     * @return CommandType type of command."},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"    public static CommandType parseCmdWord(String in) {"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"        String[] input \u003d in.split(\" \");"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"        String cmdWord \u003d input[0];"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"        switch (cmdWord) {"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"        case CMD_DELETE:"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"            return CommandType.Delete;"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"        case CMD_DONE:"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"            return CommandType.Done;"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"        case CMD_DUE:"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"            return CommandType.Due;"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"        case CMD_EXIT:"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"            return CommandType.Exit;"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"        case CMD_FIND:"},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"            return CommandType.Find;"},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"        case CMD_LIST:"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":"            return CommandType.List;"},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"        case CMD_REMIND:"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":"            return CommandType.Remind;"},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"        case CMD_TAG:"},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":"            return CommandType.Tag;"},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"        case CMD_DEADLINE:"},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":"            // fallthrough"},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"        case CMD_EVENT:"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":"            // fallthrough"},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":"        case CMD_TODO:"},{"lineNumber":49,"author":{"gitId":"Wong-ZZ"},"content":"            return CommandType.Task;"},{"lineNumber":50,"author":{"gitId":"Wong-ZZ"},"content":"        default:"},{"lineNumber":51,"author":{"gitId":"Wong-ZZ"},"content":"            return CommandType.Invalid;"},{"lineNumber":52,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":55,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"Wong-ZZ"},"content":"     * Parses the user\u0027s \"task\" command and return the type of \"task\" command issued by the user."},{"lineNumber":57,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"Wong-ZZ"},"content":"     * @param in String \"task\" command provided by user."},{"lineNumber":59,"author":{"gitId":"Wong-ZZ"},"content":"     * @return CommandType type of \"task\" command."},{"lineNumber":60,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"Wong-ZZ"},"content":"    public static TaskType parseTaskType(String in) {"},{"lineNumber":62,"author":{"gitId":"Wong-ZZ"},"content":"        String[] input \u003d in.split(\" \");"},{"lineNumber":63,"author":{"gitId":"Wong-ZZ"},"content":"        String task \u003d input[0];"},{"lineNumber":64,"author":{"gitId":"Wong-ZZ"},"content":"        switch (task) {"},{"lineNumber":65,"author":{"gitId":"Wong-ZZ"},"content":"        case \"deadline\":"},{"lineNumber":66,"author":{"gitId":"Wong-ZZ"},"content":"            return TaskType.Deadline;"},{"lineNumber":67,"author":{"gitId":"Wong-ZZ"},"content":"        case \"event\":"},{"lineNumber":68,"author":{"gitId":"Wong-ZZ"},"content":"            return TaskType.Event;"},{"lineNumber":69,"author":{"gitId":"Wong-ZZ"},"content":"        case \"todo\": // todo task"},{"lineNumber":70,"author":{"gitId":"Wong-ZZ"},"content":"            return TaskType.Todo;"},{"lineNumber":71,"author":{"gitId":"Wong-ZZ"},"content":"        default:"},{"lineNumber":72,"author":{"gitId":"Wong-ZZ"},"content":"            return TaskType.Invalid;"},{"lineNumber":73,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":75}},{"path":"src/main/java/duke/command/CommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"// All the different types of command that a user can input, including invalid commands."},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"public enum CommandType {"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"    Delete, Done, Due, Exit, Find, Invalid, List, Remind, Tag, Task"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"}"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":""}],"authorContributionMap":{"Wong-ZZ":7}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.InvalidCommandException;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.NormalResponse;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.Response;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"// Handles all the logic behind any \"delete\" command from the user"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"     * Executes any \"delete\" command issued by the user."},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"     * Removes the task specified by the user from taskList and updates save file after deletion."},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"     * @param in String \"delete\" command issued by user."},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"     * @param taskList TaskList list that contains tasks added by the user."},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"     * @return Response response message to user."},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"     * @throws InvalidCommandException If an invalid index is provided."},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"    public static Response execute(String in, TaskList taskList) throws InvalidCommandException {"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"            int index \u003d Integer.parseInt(in.replaceFirst(\"delete\", \"\").trim());"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"            Task task \u003d taskList.remove(index - 1);"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"            int len \u003d taskList.size();"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"            String response \u003d \"Noted. I\u0027ve removed this task:\\n\""},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"                    + \"  \" + task.toString() + \"\\n\""},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"                    + \"Now you have \" + len + \" task\" + (len \u003d\u003d 1 ? \"\" : \"s\") + \" in the list.\";"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"            return new NormalResponse(response);"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"            throw new InvalidCommandException(\"Please input a valid index.\");"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":33}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.InvalidCommandException;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.NormalResponse;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.Response;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"// Handles all the logic behind any \"done\" command from the user."},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"public class DoneCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String ERROR_INVALID_INDEX \u003d \"Please input a valid index.\";"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String RESPONSE \u003d \"Nice! I\u0027ve marked this task as done\\n  \";"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"     * Executes any \"done\" command issued by the user."},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"     * Marks the task in the taskList specified by the user as done."},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"     * @param in String \"done\" command issued by user."},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"     * @param taskList TaskList list that contains tasks added by the user."},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"     * @return Response response message to user."},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"     * @throws InvalidCommandException If an invalid index is provided."},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"    public static Response execute(String in, TaskList taskList) throws InvalidCommandException {"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"            int index \u003d Integer.parseInt(in.replaceFirst(\"done \", \"\")) - 1;"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"            Task task \u003d taskList.get(index);"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"            task.markAsDone();"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"            taskList.update(index);"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"            String response \u003d RESPONSE + task.toString();"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"            return new NormalResponse(response);"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"            throw new InvalidCommandException(ERROR_INVALID_INDEX);"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":36}},{"path":"src/main/java/duke/command/DueCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import java.util.stream.Stream;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.InvalidCommandException;"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.NormalResponse;"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.Response;"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.Task;"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.TaskList;"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"import duke.util.DukeDateTime;"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"// Handles all the logic behind any \"due\" command from the user."},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"public class DueCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String ERROR_INVALID_FORMAT \u003d \"Please key in a valid date format.\\n\" + \"due *yyyy-mm-dd*\";"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"     * Executes any \"due\" command issued by the user."},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"     * Returns the information of the tasks due on the date specified by the user."},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"     * @param in String \"due\" command issued by user."},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"     * @param taskList TaskList list that contains tasks added by the user."},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"     * @return Response response message to user including tasks due on the specified date."},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"     * @throws InvalidCommandException If an invalid date format is provided."},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"    public static Response execute(String in, TaskList taskList) throws InvalidCommandException {"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"        String dateStr \u003d in.replaceFirst(\"due \", \"\");"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"            LocalDate date \u003d DukeDateTime.parseDate(dateStr);"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"            String formattedDate \u003d DukeDateTime.localDateToFormattedString(date);"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"            ArrayList\u003cString\u003e filteredTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"            int len \u003d taskList.size();"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"            Stream"},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"                    .iterate(1 , i -\u003e i \u003c\u003d len, i -\u003e i + 1)"},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"                    .forEach(i -\u003e {"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":"                        Task task \u003d taskList.get(i - 1);"},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"                        if (task.isDueOn(date)) {"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":"                            String output \u003d i + \".\" + task.toString();"},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"                            filteredTasks.add(output);"},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":"                        }"},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"                    });"},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"            boolean hasTaskToShow \u003d filteredTasks.size() \u003e 0;"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":"            String firstLine \u003d hasTaskToShow"},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":"                    ? \"These are the tasks due on \" + formattedDate + \":\\n\""},{"lineNumber":49,"author":{"gitId":"Wong-ZZ"},"content":"                    : \"There are no tasks due on \" + formattedDate + \"!\";"},{"lineNumber":50,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":51,"author":{"gitId":"Wong-ZZ"},"content":"            String response \u003d firstLine + String.join(\"\\n\", filteredTasks);"},{"lineNumber":52,"author":{"gitId":"Wong-ZZ"},"content":"            return new NormalResponse(response);"},{"lineNumber":53,"author":{"gitId":"Wong-ZZ"},"content":"        } catch (DateTimeParseException | NumberFormatException e) {"},{"lineNumber":54,"author":{"gitId":"Wong-ZZ"},"content":"            throw new InvalidCommandException(ERROR_INVALID_FORMAT);"},{"lineNumber":55,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":57}},{"path":"src/main/java/duke/command/DukeCommandExecutor.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.ErrorResponse;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.Response;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"public class DukeCommandExecutor implements CommandExecutor {"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String ERROR_INVALID_COMMAND \u003d \"I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"    private boolean hasExited \u003d false;"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"     * Processes the command issued by user and passes it on to the relevant Command class for its execution."},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"     * @param in String command issued by user."},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"     * @param taskList TaskList list that contains tasks added by the user."},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"     * @return Response response message to user."},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"    public Response execute(String in, TaskList taskList) {"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"        assert !hasExited : \"Program has already exited\";"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"            CommandType cmdType \u003d CommandParser.parseCmdWord(in);"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"            switch (cmdType) {"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"            case Delete:"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"                return DeleteCommand.execute(in, taskList);"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"            case Done:"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"                return DoneCommand.execute(in, taskList);"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"            case Due:"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"                return DueCommand.execute(in, taskList);"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"            case Exit:"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"                hasExited \u003d true;"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"                return ExitCommand.execute();"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"            case Find:"},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"                return FindCommand.execute(in, taskList);"},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"            case List:"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":"                return ListCommand.execute(taskList);"},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"            case Remind:"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":"                return RemindCommand.execute(in, taskList);"},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"            case Tag:"},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":"                return TagCommand.execute(in, taskList);"},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"            case Task:"},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":"                return TaskCommand.execute(in, taskList);"},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"            default:"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":"                assert cmdType.equals(CommandType.Invalid) : \"CommandType should be Invalid\";"},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":"                return new ErrorResponse(ERROR_INVALID_COMMAND);"},{"lineNumber":49,"author":{"gitId":"Wong-ZZ"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"Wong-ZZ"},"content":"        } catch (DukeException e) {"},{"lineNumber":51,"author":{"gitId":"Wong-ZZ"},"content":"            return new ErrorResponse(e.getMessage());"},{"lineNumber":52,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":55,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"Wong-ZZ"},"content":"     * Returns true if the \"bye\" command has been issued else returns false."},{"lineNumber":57,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"Wong-ZZ"},"content":"     * @return boolean should the program exit."},{"lineNumber":59,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"Wong-ZZ"},"content":"    public boolean shouldExit() {"},{"lineNumber":61,"author":{"gitId":"Wong-ZZ"},"content":"        return hasExited;"},{"lineNumber":62,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":64,"author":{"gitId":"Wong-ZZ"},"content":"    public void loadSaveString(String in, TaskList taskList) throws DukeException {"},{"lineNumber":65,"author":{"gitId":"Wong-ZZ"},"content":"        TaskCommand.loadSavedTasks(in, taskList);"},{"lineNumber":66,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":67}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.NormalResponse;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.Response;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"// Handles all the logic behind any \"exit\" command from the user"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"public class ExitCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String EXIT_MSG \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"     * Executes any \"exit\" command issued by the user."},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"     * Returns an exit message to the users."},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"     * @return Response \"exit\" message to user."},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"    public static Response execute() {"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"        return new NormalResponse(EXIT_MSG);"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":18}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import java.util.stream.Stream;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.NormalResponse;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.Response;"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"// Handles all the logic behind any \"find\" command from the user."},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"public class FindCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String RESPONSE_NO_MATCHES \u003d \"None of the tasks matches the keyword!\";"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String RESPONSE_MATCHES_FOUND \u003d \"Here are the matching tasks in your list:\\n\";"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"     * Executes any \"due\" command issued by the user."},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"     * Returns the information of the tasks containing the keyword specified by the user."},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"     * @param in String \"due\" command issued by user."},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"     * @param taskList TaskList list that contains tasks added by the user."},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"     * @return Response response message to user including tasks containing the keyword."},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"    public static Response execute(String in, TaskList taskList) {"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"        String keyword \u003d in.replaceFirst(\"find \", \"\").trim();"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"        ArrayList\u003cString\u003e msg \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"        int len \u003d taskList.size();"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"        Stream"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"                .iterate(1 , i -\u003e i \u003c\u003d len, i -\u003e i + 1)"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"                .forEach(i -\u003e {"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"                    Task task \u003d taskList.get(i - 1);"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"                    if (task.containsKeyword(keyword)) {"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"                        String output \u003d i + \".\" + task.toString();"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"                        msg.add(output);"},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"                    }"},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"                });"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"        boolean hasMatches \u003d msg.size() \u003e 0;"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":"        String firstLine \u003d hasMatches"},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"                ? RESPONSE_MATCHES_FOUND"},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":"                : RESPONSE_NO_MATCHES;"},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":"        String response \u003d firstLine + String.join(\"\\n\", msg);"},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"        return new NormalResponse(response);"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":48}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import java.util.stream.Stream;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.NormalResponse;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.Response;"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"// Handles all the logic behind any \"list\" command from the user/"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"public class ListCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String RESPONSE_EMPTY_LIST \u003d \"There are no tasks in your list!\";"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String RESPONSE_NON_EMPTY_LIST \u003d \"Here are the tasks in your list:\";"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"     * Executes any \"list\" command issued by the user."},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"     * Iterates the taskList and returns the information of all the tasks in the list."},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"     * @param taskList TaskList list that contains tasks added by the user/"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"     * @return Response information of all the tasks in taskList/"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"    public static Response execute(TaskList taskList) {"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"        int len \u003d taskList.size();"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"        ArrayList\u003cString\u003e msgBody \u003d new ArrayList\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"        boolean isEmpty \u003d len \u003d\u003d 0;"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"        msgBody.add(isEmpty ? RESPONSE_EMPTY_LIST : RESPONSE_NON_EMPTY_LIST);"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"        Stream"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"                .iterate(1 , i -\u003e i \u003c\u003d len, i -\u003e i + 1)"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"                .forEach(i -\u003e {"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"                    Task task \u003d taskList.get(i - 1);"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"                    String line \u003d i + \".\" + task.toString();"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"                    msgBody.add(line);"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"                });"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"        String response \u003d String.join(\"\\n\", msgBody);"},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"        return new NormalResponse(response);"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":40}},{"path":"src/main/java/duke/command/RemindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import java.util.stream.Stream;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.InvalidCommandException;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.NormalResponse;"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.Response;"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.TaskList;"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"// Handles all the logic behind any \"remind\" command from the user."},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"public class RemindCommand {"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String ERROR_INVALID_FORMAT \u003d \"Please input a valid number\";"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"     * Executes any \"due\" command issued by the user."},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"     * Returns the information of the tasks that are due within the time period specified."},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"     * @param in String \"remind\" command issued by user."},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"     * @param taskList TaskList list that contains tasks added by the user."},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"     * @return Response response message to user including tasks that are due within the specified time period."},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"     * @throws InvalidCommandException If an invalid number of days is provided."},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"    public static Response execute(String in, TaskList taskList) throws InvalidCommandException {"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"            int numberDays \u003d Integer.parseInt(in.replaceFirst(\"remind \", \"\"));"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"            if (numberDays \u003c 0) {"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"                throw new NumberFormatException();"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"            }"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"            ArrayList\u003cString\u003e filteredTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"            int len \u003d taskList.size();"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"            Stream"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"                    .iterate(1 , i -\u003e i \u003c\u003d len, i -\u003e i + 1)"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"                    .forEach(i -\u003e {"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"                        Task task \u003d taskList.get(i - 1);"},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"                        if (task.isDueInNDays(numberDays)) {"},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"                            String output \u003d i + \".\" + task.toString();"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":"                            filteredTasks.add(output);"},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"                        }"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":"                    });"},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":"            boolean hasTaskToShow \u003d filteredTasks.size() \u003e 0;"},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"            String firstLine \u003d hasTaskToShow"},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":"                    ? \"These are the tasks that are due within \" + numberDays + \" days:\\n\""},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"                    : \"There are no tasks that are due within \" + numberDays + \" days!\";"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":"            String response \u003d firstLine + String.join(\"\\n\", filteredTasks);"},{"lineNumber":49,"author":{"gitId":"Wong-ZZ"},"content":"            return new NormalResponse(response);"},{"lineNumber":50,"author":{"gitId":"Wong-ZZ"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":51,"author":{"gitId":"Wong-ZZ"},"content":"            throw new InvalidCommandException(ERROR_INVALID_FORMAT);"},{"lineNumber":52,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":54}},{"path":"src/main/java/duke/command/TagCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.InvalidCommandException;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.NormalResponse;"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.Response;"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.TaskList;"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"// Handles all the logic behind any \"done\" command from the user."},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"public class TagCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String ERROR_INVALID_INDEX \u003d \"Please input a valid index.\";"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String ERROR_RESERVED_KEYWORD \u003d Task.TAGS_DELIMITER + \" is a reserved keyword.\";"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String RESPONSE_TAGS_ADDED \u003d \"I have added the tags to the following task:\\n  \";"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String RESPONSE_NO_TAGS_ADDED \u003d \"There are no tags to be added.\";"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String RESPONSE_TAGS_REMOVED \u003d \"These are the tags that were removed:\\n\";"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String RESPONSE_UPDATED_TASK \u003d \"These are the remaining tags for the specified task:\\n  \";"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String RESPONSE_NO_TAGS_REMOVED \u003d \"There are no tags to be removed.\";"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"     * Executes any \"tag\" command issued by the user."},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"     * Adds the tags provided by the user to the task specified by the user."},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"     * @param in String \"tag\" command issued by user."},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"     * @param taskList TaskList list that contains tasks added by the user."},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"     * @return Response response message to user."},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"     * @throws InvalidCommandException If an invalid index is provided."},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"    public static Response execute(String in, TaskList taskList) throws InvalidCommandException {"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"        String[] details \u003d in.replaceFirst(\"tag \", \"\").split(\" \");"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"        String[] tags \u003d Arrays.copyOfRange(details, 1, details.length);"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"        for (String tag : tags) {"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"            if (tag.contains(Task.TAGS_DELIMITER)) {"},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"                throw new InvalidCommandException(ERROR_RESERVED_KEYWORD);"},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"            }"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"            int index \u003d Integer.parseInt(details[0]);"},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":"            String response;"},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"            if (index \u003c 0) {"},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":"                response \u003d removeTagsFromTask(Math.abs(index) - 1, taskList, tags);"},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"            } else {"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":"                response \u003d addTagsToTask(index - 1, taskList, tags);"},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"Wong-ZZ"},"content":"            return new NormalResponse(response);"},{"lineNumber":50,"author":{"gitId":"Wong-ZZ"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":51,"author":{"gitId":"Wong-ZZ"},"content":"            throw new InvalidCommandException(ERROR_INVALID_INDEX);"},{"lineNumber":52,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":55,"author":{"gitId":"Wong-ZZ"},"content":"    private static String addTagsToTask(int index, TaskList taskList, String[] tagsToAdd)"},{"lineNumber":56,"author":{"gitId":"Wong-ZZ"},"content":"            throws InvalidCommandException {"},{"lineNumber":57,"author":{"gitId":"Wong-ZZ"},"content":"        try {"},{"lineNumber":58,"author":{"gitId":"Wong-ZZ"},"content":"            Task task \u003d taskList.get(index);"},{"lineNumber":59,"author":{"gitId":"Wong-ZZ"},"content":"            task.addTags(tagsToAdd);"},{"lineNumber":60,"author":{"gitId":"Wong-ZZ"},"content":"            taskList.update(index);"},{"lineNumber":61,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":62,"author":{"gitId":"Wong-ZZ"},"content":"            boolean hasTagsToAdd \u003d tagsToAdd.length \u003e 0;"},{"lineNumber":63,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":64,"author":{"gitId":"Wong-ZZ"},"content":"            String response \u003d hasTagsToAdd"},{"lineNumber":65,"author":{"gitId":"Wong-ZZ"},"content":"                    ? RESPONSE_TAGS_ADDED + task.toString()"},{"lineNumber":66,"author":{"gitId":"Wong-ZZ"},"content":"                    : RESPONSE_NO_TAGS_ADDED;"},{"lineNumber":67,"author":{"gitId":"Wong-ZZ"},"content":"            return response;"},{"lineNumber":68,"author":{"gitId":"Wong-ZZ"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":69,"author":{"gitId":"Wong-ZZ"},"content":"            throw new InvalidCommandException(ERROR_INVALID_INDEX);"},{"lineNumber":70,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":73,"author":{"gitId":"Wong-ZZ"},"content":"    private static String removeTagsFromTask (int index, TaskList taskList, String[] tagsToRemove)"},{"lineNumber":74,"author":{"gitId":"Wong-ZZ"},"content":"            throws InvalidCommandException {"},{"lineNumber":75,"author":{"gitId":"Wong-ZZ"},"content":"        try {"},{"lineNumber":76,"author":{"gitId":"Wong-ZZ"},"content":"            Task task \u003d taskList.get(index);"},{"lineNumber":77,"author":{"gitId":"Wong-ZZ"},"content":"            List\u003cString\u003e removedTags \u003d task.removeTags(tagsToRemove);"},{"lineNumber":78,"author":{"gitId":"Wong-ZZ"},"content":"            taskList.update(index);"},{"lineNumber":79,"author":{"gitId":"Wong-ZZ"},"content":"            String removedTagsFormatted \u003d String.join(\"\\n\", removedTags) + \"\\n\";"},{"lineNumber":80,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":81,"author":{"gitId":"Wong-ZZ"},"content":"            boolean wasTaskUpdated \u003d removedTags.size() \u003e 0;"},{"lineNumber":82,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":83,"author":{"gitId":"Wong-ZZ"},"content":"            String response \u003d wasTaskUpdated"},{"lineNumber":84,"author":{"gitId":"Wong-ZZ"},"content":"                    ? RESPONSE_TAGS_REMOVED + removedTagsFormatted + RESPONSE_UPDATED_TASK + task.toString()"},{"lineNumber":85,"author":{"gitId":"Wong-ZZ"},"content":"                    : RESPONSE_NO_TAGS_REMOVED;"},{"lineNumber":86,"author":{"gitId":"Wong-ZZ"},"content":"            return response;"},{"lineNumber":87,"author":{"gitId":"Wong-ZZ"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":88,"author":{"gitId":"Wong-ZZ"},"content":"            throw new InvalidCommandException(ERROR_INVALID_INDEX);"},{"lineNumber":89,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":91}},{"path":"src/main/java/duke/command/TaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.InvalidCommandException;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.InvalidTaskException;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.NormalResponse;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.Response;"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.TaskFactory;"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.TaskList;"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.TaskType;"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"// Handles all the logic behind any \"task\" command from the user."},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"public class TaskCommand {"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String INVALID_COMMAND_MSG \u003d \"Something went wrong during the execution of the command. :-(\";"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"     * Executes any \"task\" command issued by the user."},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"     * Adds the task specified by the user to the taskList and updates save file after updating."},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"     * @param in String \"task\" command issued by user."},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"     * @param taskList TaskList list that contains tasks added by the user."},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"     * @return Response response message to user."},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"     * @throws DukeException If the task command provided does not fit the specified format."},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"    public static Response execute(String in, TaskList taskList) throws DukeException {"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"        TaskType taskType \u003d CommandParser.parseTaskType(in);"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"        String taskDetails \u003d in.replaceFirst(taskType.toString().toLowerCase(), \"\").trim();"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"        if (taskType \u003d\u003d TaskType.Invalid) {"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"            throw new InvalidCommandException(INVALID_COMMAND_MSG);"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"        String response \u003d createTask(taskType, taskDetails, taskList, false, true);"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"        return new NormalResponse(response);"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"     * Creates the specific task type based on the taskType parameter and adds it to the taskList."},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"     * Updates save file after updating."},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"     * @param taskType TaskType the task type."},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":"     * @param details String the task details."},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"     * @param taskList TaskList list that contains tasks added by the user."},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":"     * @return String response message to user."},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"     * @throws InvalidTaskException If the task command provided does not fit the specified format."},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"    private static String createTask("},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":"            TaskType taskType, String details, TaskList taskList, boolean isDone, boolean shouldUpdateStorage)"},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":"            throws DukeException {"},{"lineNumber":49,"author":{"gitId":"Wong-ZZ"},"content":"        Task task \u003d TaskFactory.createTask(taskType, details);"},{"lineNumber":50,"author":{"gitId":"Wong-ZZ"},"content":"        taskList.add(task, shouldUpdateStorage);"},{"lineNumber":51,"author":{"gitId":"Wong-ZZ"},"content":"        if (isDone) {"},{"lineNumber":52,"author":{"gitId":"Wong-ZZ"},"content":"            task.markAsDone();"},{"lineNumber":53,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":55,"author":{"gitId":"Wong-ZZ"},"content":"        int len \u003d taskList.size();"},{"lineNumber":56,"author":{"gitId":"Wong-ZZ"},"content":"        boolean hasSingleTask \u003d len \u003d\u003d 1;"},{"lineNumber":57,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":58,"author":{"gitId":"Wong-ZZ"},"content":"        String response \u003d \"Got it. I\u0027ve added this task: \\n\""},{"lineNumber":59,"author":{"gitId":"Wong-ZZ"},"content":"                + \"  \" + task.toString() + \"\\n\""},{"lineNumber":60,"author":{"gitId":"Wong-ZZ"},"content":"                + \"Now you have \" + len + \" task\" + (hasSingleTask ? \"\" : \"s\") + \" in the list.\";"},{"lineNumber":61,"author":{"gitId":"Wong-ZZ"},"content":"        return response;"},{"lineNumber":62,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":64,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"Wong-ZZ"},"content":"     * Parses and loads the save string into the task list."},{"lineNumber":66,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"Wong-ZZ"},"content":"     * @param in String the save string."},{"lineNumber":68,"author":{"gitId":"Wong-ZZ"},"content":"     * @param taskList TaskList list that contains tasks added by the user."},{"lineNumber":69,"author":{"gitId":"Wong-ZZ"},"content":"     * @throws DukeException If save string is invalid."},{"lineNumber":70,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"Wong-ZZ"},"content":"    public static void loadSavedTasks(String in, TaskList taskList) throws DukeException {"},{"lineNumber":72,"author":{"gitId":"Wong-ZZ"},"content":"        boolean isDone \u003d in.charAt(0) \u003d\u003d \u00271\u0027;"},{"lineNumber":73,"author":{"gitId":"Wong-ZZ"},"content":"        String[] details \u003d in.substring(1).split(Task.TAGS_DELIMITER);"},{"lineNumber":74,"author":{"gitId":"Wong-ZZ"},"content":"        String taskCommand \u003d details[0].trim();"},{"lineNumber":75,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":76,"author":{"gitId":"Wong-ZZ"},"content":"        TaskType taskType \u003d CommandParser.parseTaskType(taskCommand);"},{"lineNumber":77,"author":{"gitId":"Wong-ZZ"},"content":"        if (taskType \u003d\u003d TaskType.Invalid) {"},{"lineNumber":78,"author":{"gitId":"Wong-ZZ"},"content":"            throw new InvalidCommandException(INVALID_COMMAND_MSG);"},{"lineNumber":79,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":81,"author":{"gitId":"Wong-ZZ"},"content":"        String taskDetails \u003d taskCommand.replaceFirst(taskType.toString().toLowerCase(), \"\").trim();"},{"lineNumber":82,"author":{"gitId":"Wong-ZZ"},"content":"        createTask(taskType, taskDetails, taskList, isDone, false);"},{"lineNumber":83,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":84,"author":{"gitId":"Wong-ZZ"},"content":"        boolean hasTags \u003d details.length \u003d\u003d 2;"},{"lineNumber":85,"author":{"gitId":"Wong-ZZ"},"content":"        if (hasTags) {"},{"lineNumber":86,"author":{"gitId":"Wong-ZZ"},"content":"            String[] tagsToAdd \u003d details[1]"},{"lineNumber":87,"author":{"gitId":"Wong-ZZ"},"content":"                    .replaceAll(\"#\", \"\")"},{"lineNumber":88,"author":{"gitId":"Wong-ZZ"},"content":"                    .replaceFirst(Task.TAGS_DELIMITER, \"\")"},{"lineNumber":89,"author":{"gitId":"Wong-ZZ"},"content":"                    .trim()"},{"lineNumber":90,"author":{"gitId":"Wong-ZZ"},"content":"                    .split(\" \");"},{"lineNumber":91,"author":{"gitId":"Wong-ZZ"},"content":"            taskList.get(taskList.size() - 1).addTags(tagsToAdd);"},{"lineNumber":92,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":94}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"// Signals any exception that occurs while the program runs."},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"public abstract class DukeException extends Exception {"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"    protected DukeException(String errorMessage) {"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"        super(errorMessage);"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"}"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":""}],"authorContributionMap":{"Wong-ZZ":9}},{"path":"src/main/java/duke/exception/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"// Signals any invalid command issued by the user."},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"public class InvalidCommandException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"    public InvalidCommandException(String errorMessage) {"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"        super(errorMessage);"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":8}},{"path":"src/main/java/duke/exception/InvalidDeadlineException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"public class InvalidDeadlineException extends InvalidTaskException {"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String ERROR_MESSAGE \u003d \"Please input the correct details for the deadline task.\\n\""},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"            + \"deadline *description* /by *yyyy-mm-dd* *HH:mm*\";"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"     * Signals that the deadline task provided by the user is formatted incorrectly."},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"    public InvalidDeadlineException() {"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"        super(ERROR_MESSAGE);"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":13}},{"path":"src/main/java/duke/exception/InvalidEventException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"public class InvalidEventException extends InvalidTaskException {"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String ERROR_MESSAGE \u003d \"Please input the correct details for the event task.\\n\""},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"            + \"event *description* /at *yyyy-mm-dd* *HH:mm*\";"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"     * Signals that the event task provided by the user is formatted incorrectly."},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"    public InvalidEventException() {"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"        super(ERROR_MESSAGE);"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":13}},{"path":"src/main/java/duke/exception/InvalidSaveFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"// Signals an error in the save file."},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"public class InvalidSaveFileException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"    public InvalidSaveFileException(String errMsg) {"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"        super(errMsg);"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":8}},{"path":"src/main/java/duke/exception/InvalidTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"// Signals that the task provided by the user is formatted incorrectly."},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"public abstract class InvalidTaskException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"    public InvalidTaskException(String errorMessage) {"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"        super(errorMessage);"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":8}},{"path":"src/main/java/duke/exception/InvalidTodoException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"public class InvalidTodoException extends InvalidTaskException {"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String ERROR_MESSAGE \u003d \"Please input the correct details for the event task.\\n\""},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"            + \"todo *description*\";"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"     * Signals that the todo task provided by the user is formatted incorrectly."},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"    public InvalidTodoException() {"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"        super(ERROR_MESSAGE);"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":13}},{"path":"src/main/java/duke/response/ErrorResponse.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.response;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"public class ErrorResponse extends Response {"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"    public ErrorResponse(String message) {"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"        super(message, true);"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":7}},{"path":"src/main/java/duke/response/NormalResponse.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.response;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"public class NormalResponse extends Response {"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"    public NormalResponse(String message) {"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"        super(message, false);"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":7}},{"path":"src/main/java/duke/response/Response.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.response;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"// Class that contains the response message for duke"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"public abstract class Response {"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"    private String message;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"    private boolean isError;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"    protected Response(String message, boolean isError) {"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"        this.message \u003d message;"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"        this.isError \u003d isError;"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"        return message;"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"    public boolean isError() {"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"        return isError;"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":20}},{"path":"src/main/java/duke/storage/DukeStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import java.io.FileReader;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"import java.nio.file.Files;"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"// Class that handles the loading and saving of the save file."},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"public class DukeStorage implements Storage {"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String ERROR_CREATE_SAVE \u003d \"An error has occurred when trying to create the save file!\";"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String ERROR_UPDATE_SAVE \u003d \"An error has occurred when updating the save file.\";"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"    private final Path filePath;"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"    private ArrayList\u003cString\u003e saveLines;"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"    private boolean isActive \u003d true;"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"     * Initialises the DukeStorage object."},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"     * Creates the save file in the specified path if it does not exists"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"     * then loads the save file."},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"     * @param filePath Path path to save file."},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"     * @throws IOException If an IO error occurs while creating or loading the save file."},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"    public DukeStorage(Path filePath) throws IOException {"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"            createSaveFile();"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"            loadData();"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"        } catch (IOException e) {"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"            throw new IOException(ERROR_CREATE_SAVE);"},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"    private void createSaveFile() throws IOException {"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":"        int len \u003d filePath.getNameCount();"},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"        Path directoriesToCreate \u003d filePath.subpath(0, len - 1);"},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":"        Files.createDirectories(directoriesToCreate);"},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"        boolean saveFileExists \u003d java.nio.file.Files.exists(filePath);"},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":"        if (!saveFileExists) {"},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"            new File(filePath.toString()).createNewFile();"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":50,"author":{"gitId":"Wong-ZZ"},"content":"    private void updateSaveFile() {"},{"lineNumber":51,"author":{"gitId":"Wong-ZZ"},"content":"        if (!isActive) {"},{"lineNumber":52,"author":{"gitId":"Wong-ZZ"},"content":"            return;"},{"lineNumber":53,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":55,"author":{"gitId":"Wong-ZZ"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"Wong-ZZ"},"content":"            FileWriter myWriter \u003d new FileWriter(filePath.toString());"},{"lineNumber":57,"author":{"gitId":"Wong-ZZ"},"content":"            for (String line: saveLines) {"},{"lineNumber":58,"author":{"gitId":"Wong-ZZ"},"content":"                myWriter.write(line + \"\\n\");"},{"lineNumber":59,"author":{"gitId":"Wong-ZZ"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"Wong-ZZ"},"content":"            myWriter.close();"},{"lineNumber":61,"author":{"gitId":"Wong-ZZ"},"content":"        } catch (IOException e) {"},{"lineNumber":62,"author":{"gitId":"Wong-ZZ"},"content":"            System.out.println(ERROR_UPDATE_SAVE);"},{"lineNumber":63,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":66,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"Wong-ZZ"},"content":"     * Adds the input save string into the storage."},{"lineNumber":68,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"Wong-ZZ"},"content":"     * @param saveString String line to be saved."},{"lineNumber":70,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"Wong-ZZ"},"content":"    public void addLine(String saveString) {"},{"lineNumber":72,"author":{"gitId":"Wong-ZZ"},"content":"        saveLines.add(saveString);"},{"lineNumber":73,"author":{"gitId":"Wong-ZZ"},"content":"        updateSaveFile();"},{"lineNumber":74,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":76,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"Wong-ZZ"},"content":"     * Updates a specific line in the storage with the input string."},{"lineNumber":78,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"Wong-ZZ"},"content":"     * @param index int index of line to update."},{"lineNumber":80,"author":{"gitId":"Wong-ZZ"},"content":"     * @param saveString String the string to update the specific line with."},{"lineNumber":81,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"Wong-ZZ"},"content":"    public void updateLine(int index, String saveString) {"},{"lineNumber":83,"author":{"gitId":"Wong-ZZ"},"content":"        saveLines.set(index, saveString);"},{"lineNumber":84,"author":{"gitId":"Wong-ZZ"},"content":"        updateSaveFile();"},{"lineNumber":85,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":87,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"Wong-ZZ"},"content":"     * Removes a specific line in the storage."},{"lineNumber":89,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"Wong-ZZ"},"content":"     * @param index int index of line to delete."},{"lineNumber":91,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"Wong-ZZ"},"content":"    public void removeLine(int index) {"},{"lineNumber":93,"author":{"gitId":"Wong-ZZ"},"content":"        saveLines.remove(index);"},{"lineNumber":94,"author":{"gitId":"Wong-ZZ"},"content":"        updateSaveFile();"},{"lineNumber":95,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":97,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"Wong-ZZ"},"content":"     * Returns all the lines that are in the storage."},{"lineNumber":99,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"Wong-ZZ"},"content":"     * @return ArrayList\u0026lt;String\u003e all the lines that are in the storage."},{"lineNumber":101,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"Wong-ZZ"},"content":"    public ArrayList\u003cString\u003e getSavedLines() {"},{"lineNumber":103,"author":{"gitId":"Wong-ZZ"},"content":"        return saveLines;"},{"lineNumber":104,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":106,"author":{"gitId":"Wong-ZZ"},"content":"    private void loadData() throws IOException {"},{"lineNumber":107,"author":{"gitId":"Wong-ZZ"},"content":"        // Prevent saving while loading"},{"lineNumber":108,"author":{"gitId":"Wong-ZZ"},"content":"        isActive \u003d false;"},{"lineNumber":109,"author":{"gitId":"Wong-ZZ"},"content":"        BufferedReader in \u003d new BufferedReader(new FileReader(filePath.toString()));"},{"lineNumber":110,"author":{"gitId":"Wong-ZZ"},"content":"        String[] result \u003d in.lines().toArray(String[]::new);"},{"lineNumber":111,"author":{"gitId":"Wong-ZZ"},"content":"        in.close();"},{"lineNumber":112,"author":{"gitId":"Wong-ZZ"},"content":"        isActive \u003d true;"},{"lineNumber":113,"author":{"gitId":"Wong-ZZ"},"content":"        this.saveLines \u003d new ArrayList\u003c\u003e(Arrays.asList(result));"},{"lineNumber":114,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":115}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"public interface Storage {"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"    void addLine(String saveString);"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"    void updateLine(int index, String saveString);"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"    void removeLine(int index);"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"    List\u003cString\u003e getSavedLines();"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":13}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.InvalidDeadlineException;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"import duke.util.DukeDateTime;"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String DEADLINE_SYMBOL \u003d \"[D]\";"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String DEADLINE_NAME \u003d \"deadline \";"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String DEADLINE_KEYWORD \u003d \"/by \";"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"    private final String time12h;"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"    private final LocalDate date;"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"    private Deadline(String description, String time12h, LocalDate date) {"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"        super(description);"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"        this.time12h \u003d time12h;"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"        this.date \u003d date;"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"     * Factory method for creating a deadline task."},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"     * @param details String details of the task."},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"     * @return Deadline the deadline task."},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"     * @throws InvalidDeadlineException If the format of the details is invalid."},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"    protected static Deadline createDeadline(String details) throws InvalidDeadlineException {"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"        boolean hasKeyword \u003d details.contains(DEADLINE_KEYWORD);"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"        if (!hasKeyword) {"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"            throw new InvalidDeadlineException();"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"        String[] info \u003d details.split(DEADLINE_KEYWORD);"},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"        String desc \u003d info[0];"},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"        String[] dateTime \u003d info[1].trim().split(\" \");"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":"        if (dateTime.length \u003c 2) {"},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"            throw new InvalidDeadlineException();"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":"            LocalDate date \u003d DukeDateTime.parseDate(dateTime[0]);"},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"            String time12h \u003d DukeDateTime.to12HTimeFormat(dateTime[1]);"},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":"            return new Deadline(desc, time12h, date);"},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"        } catch (DateTimeParseException | NumberFormatException e) {"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":"            throw new InvalidDeadlineException();"},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":51,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"Wong-ZZ"},"content":"    public boolean isDueOn(LocalDate date) {"},{"lineNumber":53,"author":{"gitId":"Wong-ZZ"},"content":"        return this.date.equals(date);"},{"lineNumber":54,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":56,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"Wong-ZZ"},"content":"    public String toSaveString() {"},{"lineNumber":58,"author":{"gitId":"Wong-ZZ"},"content":"        String date \u003d DukeDateTime.localDateToString(this.date);"},{"lineNumber":59,"author":{"gitId":"Wong-ZZ"},"content":"        String time \u003d DukeDateTime.to24HTimeFormat(time12h);"},{"lineNumber":60,"author":{"gitId":"Wong-ZZ"},"content":"        String deadlineCommand \u003d (isDone ? 1 : 0) + DEADLINE_NAME + description + DEADLINE_KEYWORD + date + \" \" + time;"},{"lineNumber":61,"author":{"gitId":"Wong-ZZ"},"content":"        return deadlineCommand + \" \" + getTagsSaveString();"},{"lineNumber":62,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":64,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"Wong-ZZ"},"content":"    public boolean isDueInNDays(int n) {"},{"lineNumber":66,"author":{"gitId":"Wong-ZZ"},"content":"        assert n \u003e\u003d 0 : \"isDueInNDays should receive a non-negative input\";"},{"lineNumber":67,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":68,"author":{"gitId":"Wong-ZZ"},"content":"        return DukeDateTime.isWithinNDays(date, n);"},{"lineNumber":69,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":71,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"Wong-ZZ"},"content":"    public String toString() {"},{"lineNumber":73,"author":{"gitId":"Wong-ZZ"},"content":"        String formattedDate \u003d DukeDateTime.localDateToFormattedString(date);"},{"lineNumber":74,"author":{"gitId":"Wong-ZZ"},"content":"        String tags \u003d stringifyTags();"},{"lineNumber":75,"author":{"gitId":"Wong-ZZ"},"content":"        String displayTags \u003d tags.equals(\"\")"},{"lineNumber":76,"author":{"gitId":"Wong-ZZ"},"content":"                ? \"\""},{"lineNumber":77,"author":{"gitId":"Wong-ZZ"},"content":"                : \" Tags: \" + tags;"},{"lineNumber":78,"author":{"gitId":"Wong-ZZ"},"content":"        return DEADLINE_SYMBOL + super.toString() + \"(by: \" + formattedDate + \" \" + time12h + \")\" + displayTags;"},{"lineNumber":79,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":80}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.InvalidEventException;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"import duke.util.DukeDateTime;"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String EVENT_SYMBOL \u003d \"[E]\";"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String EVENT_NAME \u003d \"event \";"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String EVENT_KEYWORD \u003d \"/at \";"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"    private final String time12h;"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"    private final LocalDate date;"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"    private Event(String description, String time12h, LocalDate date) {"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"        super(description);"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"        this.time12h \u003d time12h;"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"        this.date \u003d date;"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"     * Factory method for creating an event task."},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"     * @param details String details of the task."},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"     * @return Event the event task."},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"     * @throws InvalidEventException If the format of the details is invalid."},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"    protected static Event createEvent(String details) throws InvalidEventException {"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"        boolean hasKeyword \u003d details.contains(EVENT_KEYWORD);"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"        if (!hasKeyword) {"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"            throw new InvalidEventException();"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"        String[] info \u003d details.split(EVENT_KEYWORD);"},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"        String desc \u003d info[0];"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":"        String[] dateTime \u003d info[1].trim().split(\" \");"},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":"            LocalDate date \u003d DukeDateTime.parseDate(dateTime[0]);"},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"            String time12h \u003d DukeDateTime.to12HTimeFormat(dateTime[1]);"},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":"            return new Event(desc, time12h, date);"},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"        } catch (DateTimeParseException | NumberFormatException e) {"},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":"            throw new InvalidEventException();"},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":49,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"Wong-ZZ"},"content":"    public boolean isDueOn(LocalDate date) {"},{"lineNumber":51,"author":{"gitId":"Wong-ZZ"},"content":"        return this.date.equals(date);"},{"lineNumber":52,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":54,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"Wong-ZZ"},"content":"    public String toSaveString() {"},{"lineNumber":56,"author":{"gitId":"Wong-ZZ"},"content":"        String date \u003d DukeDateTime.localDateToString(this.date);"},{"lineNumber":57,"author":{"gitId":"Wong-ZZ"},"content":"        String time \u003d DukeDateTime.to24HTimeFormat(time12h);"},{"lineNumber":58,"author":{"gitId":"Wong-ZZ"},"content":"        String eventCommand \u003d (isDone ? 1 : 0) + EVENT_NAME + description + EVENT_KEYWORD + date + \" \" + time;"},{"lineNumber":59,"author":{"gitId":"Wong-ZZ"},"content":"        return eventCommand + \" \" + getTagsSaveString();"},{"lineNumber":60,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":62,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"Wong-ZZ"},"content":"    public boolean isDueInNDays(int n) {"},{"lineNumber":64,"author":{"gitId":"Wong-ZZ"},"content":"        assert n \u003e\u003d 0 : \"isDueInNDays should receive a non-negative input\";"},{"lineNumber":65,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":66,"author":{"gitId":"Wong-ZZ"},"content":"        return DukeDateTime.isWithinNDays(date, n);"},{"lineNumber":67,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":69,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"Wong-ZZ"},"content":"    public String toString() {"},{"lineNumber":71,"author":{"gitId":"Wong-ZZ"},"content":"        String formattedDate \u003d DukeDateTime.localDateToFormattedString(date);"},{"lineNumber":72,"author":{"gitId":"Wong-ZZ"},"content":"        String tags \u003d stringifyTags();"},{"lineNumber":73,"author":{"gitId":"Wong-ZZ"},"content":"        String displayTags \u003d tags.equals(\"\")"},{"lineNumber":74,"author":{"gitId":"Wong-ZZ"},"content":"                ? \"\""},{"lineNumber":75,"author":{"gitId":"Wong-ZZ"},"content":"                : \" Tags: \" + tags;"},{"lineNumber":76,"author":{"gitId":"Wong-ZZ"},"content":"        return EVENT_SYMBOL + super.toString() + \"(at: \" + formattedDate + \" \" + time12h + \")\" + displayTags;"},{"lineNumber":77,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":78}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"// Parent class for all types of tasks that can be created by the user."},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"public abstract class Task {"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"    public static final String TAGS_DELIMITER \u003d \"//tags\";"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String SYMBOL_DONE \u003d \"O\";"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String SYMBOL_NOT_DONE \u003d \"X\";"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"    protected String description;"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"    protected boolean isDone \u003d false;"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"    protected ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"    public Task(String description) {"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"        this.description \u003d description;"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"     * Marks the task as done."},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"    public void markAsDone() {"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"        this.isDone \u003d true;"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"     * Returns an icon that represents the task status."},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"     * @return String x if not done and o if done."},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"    public String getStatusIcon() {"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"        return isDone ? SYMBOL_DONE : SYMBOL_NOT_DONE;"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"    public boolean containsKeyword(String keyword) {"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":"        return description.toLowerCase().contains(keyword.toLowerCase());"},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":"     * Tags the task with the all the input tags."},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":"     * @param tagsToAdd String[] tags to be added."},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":"    public void addTags(String[] tagsToAdd) {"},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":"        if (tagsToAdd.length \u003d\u003d 0) {"},{"lineNumber":49,"author":{"gitId":"Wong-ZZ"},"content":"            return;"},{"lineNumber":50,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":52,"author":{"gitId":"Wong-ZZ"},"content":"        tags.addAll(Arrays.asList(tagsToAdd));"},{"lineNumber":53,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":55,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"Wong-ZZ"},"content":"     * Removes all the input tags from the task."},{"lineNumber":57,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"Wong-ZZ"},"content":"     * @param tagsToRemove String[] tags to be removed."},{"lineNumber":59,"author":{"gitId":"Wong-ZZ"},"content":"     * @return List\u0026lt;String\u003e list of tags that were removed."},{"lineNumber":60,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"Wong-ZZ"},"content":"    public List\u003cString\u003e removeTags(String[] tagsToRemove) {"},{"lineNumber":62,"author":{"gitId":"Wong-ZZ"},"content":"        ArrayList\u003cString\u003e removedTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":63,"author":{"gitId":"Wong-ZZ"},"content":"        for (String tag : tagsToRemove) {"},{"lineNumber":64,"author":{"gitId":"Wong-ZZ"},"content":"            if (tags.remove(tag)) {"},{"lineNumber":65,"author":{"gitId":"Wong-ZZ"},"content":"                removedTags.add(tag);"},{"lineNumber":66,"author":{"gitId":"Wong-ZZ"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"Wong-ZZ"},"content":"        return removedTags;"},{"lineNumber":69,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":71,"author":{"gitId":"Wong-ZZ"},"content":"    protected String stringifyTags() {"},{"lineNumber":72,"author":{"gitId":"Wong-ZZ"},"content":"        return String.join(\" \", tags.stream().map(tag -\u003e \"#\" + tag).toArray(String[]::new));"},{"lineNumber":73,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":75,"author":{"gitId":"Wong-ZZ"},"content":"    protected String getTagsSaveString() {"},{"lineNumber":76,"author":{"gitId":"Wong-ZZ"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":77,"author":{"gitId":"Wong-ZZ"},"content":"            return \"\";"},{"lineNumber":78,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"Wong-ZZ"},"content":"        return TAGS_DELIMITER + \" \" + stringifyTags();"},{"lineNumber":80,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":82,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":83,"author":{"gitId":"Wong-ZZ"},"content":"    public String toString() {"},{"lineNumber":84,"author":{"gitId":"Wong-ZZ"},"content":"        return \"[\" + getStatusIcon() + \"]\" + \" \" + description;"},{"lineNumber":85,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":87,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"Wong-ZZ"},"content":"     * Returns true or false based on whether the task is due on the date provided."},{"lineNumber":89,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"Wong-ZZ"},"content":"     * @param date LocalDate the date to check."},{"lineNumber":91,"author":{"gitId":"Wong-ZZ"},"content":"     * @return boolean Whether the task is due on the specified date."},{"lineNumber":92,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"Wong-ZZ"},"content":"    public abstract boolean isDueOn(LocalDate date);"},{"lineNumber":94,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":95,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"Wong-ZZ"},"content":"     * Converts the task into a string format that will be stored in the save file."},{"lineNumber":97,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":98,"author":{"gitId":"Wong-ZZ"},"content":"     * @return String storage information of task."},{"lineNumber":99,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"Wong-ZZ"},"content":"    public abstract String toSaveString();"},{"lineNumber":101,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":102,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"Wong-ZZ"},"content":"     * Returns true if the task is due in n number of days else return false."},{"lineNumber":104,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":105,"author":{"gitId":"Wong-ZZ"},"content":"     * @param n int time period in days."},{"lineNumber":106,"author":{"gitId":"Wong-ZZ"},"content":"     * @return boolean Whether the task is due in the specified period."},{"lineNumber":107,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"Wong-ZZ"},"content":"    public abstract boolean isDueInNDays(int n);"},{"lineNumber":109,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":109}},{"path":"src/main/java/duke/task/TaskArrayList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"// An implementation of the TaskList interface using an ArrayList"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"public class TaskArrayList implements TaskList {"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"    private final ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"    private final Storage store;"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"    public TaskArrayList(Storage store) {"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"        this.store \u003d store;"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"    public void add(Task t, boolean shouldUpdateStorage) {"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"        tasks.add(t);"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"        if (shouldUpdateStorage) {"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"            store.addLine(t.toSaveString());"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"    public Task get(int i) {"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"        return tasks.get(i);"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"    public Task remove(int i) {"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"        store.removeLine(i);"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"        return tasks.remove(i);"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"    public void update(int i) {"},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"        store.updateLine(i, tasks.get(i).toSaveString());"},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":"    public int size() {"},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"        return tasks.size();"},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":44}},{"path":"src/main/java/duke/task/TaskFactory.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.InvalidCommandException;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.InvalidTaskException;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"// Deals with the creation of the different types of tasks."},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"public class TaskFactory {"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String ERROR_INVALID_COMMAND \u003d \"Something went wrong during the creation of the task. :-(\";"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"     * Calls the factory method of each type of tasks based on the task type specified."},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"     * @param type TaskType type of task to create."},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"     * @param details String details of the task."},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"     * @return Task the specified type of task along with the details."},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"     * @throws InvalidTaskException If the details provided have an invalid format."},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"    public static Task createTask(TaskType type, String details) throws DukeException {"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"        switch (type) {"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"        case Todo:"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"            return Todo.createTodo(details);"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"        case Deadline:"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"            return Deadline.createDeadline(details);"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"        case Event:"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"            return Event.createEvent(details);"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"        default:"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"            assert type.equals(TaskType.Invalid) : \"TaskType should be Invalid\";"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"            throw new InvalidCommandException(ERROR_INVALID_COMMAND);"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":32}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"// Interface for any list-like data structure for storing a list of Tasks"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"public interface TaskList {"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"     * Adds the provided task to the task list."},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"     * @param t Task task to add."},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"     * @param shouldUpdateStorage whether the new task should be saved."},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"    void add(Task t, boolean shouldUpdateStorage);"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"     * Returns the task at the specified index."},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"     * @param i int index of task to fetch."},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"     * @return Task task at specified index."},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"    Task get(int i);"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"     * Removes the task at the specified index."},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"     * @param i int index of task."},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"     * @return Task task that was removed."},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"    Task remove(int i);"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"     * Returns the number of tasks in the list."},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"     * @return int number of tasks in list."},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"    int size();"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"     * Triggers the Storage object to update a specific line."},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":"     * @param index int index of the task to update."},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":"    void update(int index);"},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":42}},{"path":"src/main/java/duke/task/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"// All the different types of tasks that a user can create, including invalid tasks."},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"public enum TaskType {"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"    Event, Todo, Deadline, Invalid;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":6}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.InvalidTodoException;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"public class Todo extends Task {"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String TODO_ICON \u003d \"[T]\";"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String TODO_NAME \u003d \"todo \";"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"    private Todo(String desc) {"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"        super(desc);"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"     * Factory method for creating a todo task."},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"     * @param details String details of the task."},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"     * @return Todo the todo task."},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"     * @throws InvalidTodoException If the format of the details is invalid."},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"    protected static Todo createTodo(String details) throws InvalidTodoException {"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"        if (details.equals(\"\")) {"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"            throw new InvalidTodoException();"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"        return new Todo(details);"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"    public String toSaveString() {"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"        String todoCommand \u003d (isDone ? 1 : 0) + TODO_NAME + description;"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"        return todoCommand + \" \" + getTagsSaveString();"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"    public boolean isDueOn(LocalDate date) {"},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"        return false;"},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":"    public boolean isDueInNDays(int n) {"},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"        assert n \u003e\u003d 0 : \"isDueWithinNDays should receive a non-negative input\";"},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":"        return true;"},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":"    public String toString() {"},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":"        String tags \u003d stringifyTags();"},{"lineNumber":49,"author":{"gitId":"Wong-ZZ"},"content":"        String displayTags \u003d tags.equals(\"\")"},{"lineNumber":50,"author":{"gitId":"Wong-ZZ"},"content":"                ? \"\""},{"lineNumber":51,"author":{"gitId":"Wong-ZZ"},"content":"                : \" Tags: \" + tags;"},{"lineNumber":52,"author":{"gitId":"Wong-ZZ"},"content":"        return TODO_ICON + super.toString() + displayTags;"},{"lineNumber":53,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":54}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.Response;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"// Class that handle the printing and formatting of the program\u0027s response message."},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"public class Ui {"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String DIVIDER \u003d \"____________________________________________________________\";"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String ERROR_HEADER \u003d \"___________________________ERROR!___________________________\";"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"     * Prints a formatted response message to the user."},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"     * @param resp Response response message to show the user."},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"    public void print(Response resp) {"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"        String message \u003d resp.getMessage();"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"        if (resp.isError()) {"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"            System.out.print(ERROR_HEADER + \"\\n\" + message + \"\\n\" + DIVIDER + \"\\n\");"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"        } else {"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"            System.out.print(DIVIDER + \"\\n\" + message + \"\\n\" + DIVIDER + \"\\n\");"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":23}},{"path":"src/main/java/duke/util/DukeDateTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"// Class that deals with any parsing or conversion of date and time."},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"public class DukeDateTime {"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String FORMAT_24H \u003d \"HH:mm\";"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String FORMAT_12H \u003d \"hh:mm a\";"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"     * Parses a formatted date string (YYYY-MM-DD) and returns the LocalDate equivalent of the date."},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"     * @param date String formatted date string."},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"     * @return LocalDate LocalDate object of the provided date."},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"    public static LocalDate parseDate(String date) {"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"        return LocalDate.parse(date);"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"     * Converts the provided LocalDate object into a formatted string(MMM d yyyy)."},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"     * @param date LocalDate the date to convert into a formatted string."},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"     * @return String formatted string of the provided date."},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"    public static String localDateToFormattedString(LocalDate date) {"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"        return date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"     * Converts the provided LocalDate object into a string(YYYY-MM-DD)."},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"     * @param date LocalDate the date to convert into a string."},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"     * @return String string representation of the provided date."},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":"    public static String localDateToString(LocalDate date) {"},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"        int day \u003d date.getDayOfMonth();"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":"        String dayStr \u003d (day \u003c 10) ? \"0\" + day : Integer.toString(day);"},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"        int month \u003d date.getMonthValue();"},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":"        String monthStr \u003d (month \u003c 10) ? \"0\" + month : Integer.toString(month);"},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"        int year \u003d date.getYear();"},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"        return year + \"-\" + monthStr + \"-\" + dayStr;"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":49,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"Wong-ZZ"},"content":"     * Converts a 24-hr time format(HH:mm) into a 12-hr time format(hh:mm a)."},{"lineNumber":51,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"Wong-ZZ"},"content":"     * @param time String 24-hr time format(HH:mm)."},{"lineNumber":53,"author":{"gitId":"Wong-ZZ"},"content":"     * @return String 12-hr time format(hh:mm a)."},{"lineNumber":54,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"Wong-ZZ"},"content":"    public static String to12HTimeFormat(String time) {"},{"lineNumber":56,"author":{"gitId":"Wong-ZZ"},"content":"        return LocalTime"},{"lineNumber":57,"author":{"gitId":"Wong-ZZ"},"content":"                .parse(time, DateTimeFormatter.ofPattern(FORMAT_24H))"},{"lineNumber":58,"author":{"gitId":"Wong-ZZ"},"content":"                .format(DateTimeFormatter.ofPattern(FORMAT_12H));"},{"lineNumber":59,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":61,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"Wong-ZZ"},"content":"     * Converts a 24-hr time format(HH:mm) into a 12-hr time format(hh:mm a)."},{"lineNumber":63,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"Wong-ZZ"},"content":"     * @param time String 12-hr time format(hh:mm a)."},{"lineNumber":65,"author":{"gitId":"Wong-ZZ"},"content":"     * @return String 24-hr time format(HH:mm)."},{"lineNumber":66,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"Wong-ZZ"},"content":"    public static String to24HTimeFormat(String time) {"},{"lineNumber":68,"author":{"gitId":"Wong-ZZ"},"content":"        return LocalTime"},{"lineNumber":69,"author":{"gitId":"Wong-ZZ"},"content":"                .parse(time, DateTimeFormatter.ofPattern(FORMAT_12H))"},{"lineNumber":70,"author":{"gitId":"Wong-ZZ"},"content":"                .format(DateTimeFormatter.ofPattern(FORMAT_24H));"},{"lineNumber":71,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":73,"author":{"gitId":"Wong-ZZ"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"Wong-ZZ"},"content":"     * Returns true if the date given is before (current date + n days) and the date given falls after"},{"lineNumber":75,"author":{"gitId":"Wong-ZZ"},"content":"     * the current date. Also returns true if the date given is equal to current date."},{"lineNumber":76,"author":{"gitId":"Wong-ZZ"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"Wong-ZZ"},"content":"     * @param date LocalDate the input date to be used as the frame of reference."},{"lineNumber":78,"author":{"gitId":"Wong-ZZ"},"content":"     * @param n int time period in days."},{"lineNumber":79,"author":{"gitId":"Wong-ZZ"},"content":"     * @return boolean Whether the task is due in the specified period."},{"lineNumber":80,"author":{"gitId":"Wong-ZZ"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"Wong-ZZ"},"content":"    public static boolean isWithinNDays(LocalDate date, int n) {"},{"lineNumber":82,"author":{"gitId":"Wong-ZZ"},"content":"        assert n \u003e\u003d 0 : \"isWithinNDays should receive a non-negative input\";"},{"lineNumber":83,"author":{"gitId":"Wong-ZZ"},"content":"        LocalDate now \u003d LocalDate.now();"},{"lineNumber":84,"author":{"gitId":"Wong-ZZ"},"content":"        LocalDate nDaysLater \u003d now.plusDays(n);"},{"lineNumber":85,"author":{"gitId":"Wong-ZZ"},"content":"        boolean isNow \u003d date.equals(now);"},{"lineNumber":86,"author":{"gitId":"Wong-ZZ"},"content":"        boolean isDueWithin \u003d date.isBefore(nDaysLater) || date.equals(nDaysLater);"},{"lineNumber":87,"author":{"gitId":"Wong-ZZ"},"content":"        boolean isActive \u003d date.isAfter(now);"},{"lineNumber":88,"author":{"gitId":"Wong-ZZ"},"content":"        boolean isDue \u003d isNow || (isDueWithin \u0026\u0026 isActive);"},{"lineNumber":89,"author":{"gitId":"Wong-ZZ"},"content":"        return isDue;"},{"lineNumber":90,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":91}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"\u003c?import javafx.scene.Cursor?\u003e"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" fillHeight\u003d\"false\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" spacing\u003d\"10.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"    \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-background-color: #424242; -fx-background-radius: 10; -fx-line-spacing: 3;\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"         \u003copaqueInsets\u003e"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"            \u003cInsets left\u003d\"1000.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"         \u003c/opaqueInsets\u003e"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"         \u003cpadding\u003e"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"         \u003c/padding\u003e"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"            \u003cInsets /\u003e"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"         \u003c/HBox.margin\u003e"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"         \u003cfont\u003e"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"            \u003cFont name\u003d\"Segoe UI\" size\u003d\"14.0\" /\u003e"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"         \u003c/font\u003e\u003c/Label\u003e"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"70.0\" fitWidth\u003d\"70.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"    \u003c/children\u003e"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"    \u003cpadding\u003e"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"    \u003c/padding\u003e"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"   \u003copaqueInsets\u003e"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"      \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"   \u003c/opaqueInsets\u003e"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"   \u003ccursor\u003e"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"      \u003cCursor fx:constant\u003d\"DEFAULT\" /\u003e"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"   \u003c/cursor\u003e"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Wong-ZZ":36}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"\u003c?import javafx.scene.Cursor?\u003e"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"750.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"    \u003cchildren\u003e"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"708.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\" prefWidth\u003d\"524.0\" style\u003d\"-fx-background-color: #626262; -fx-text-fill: #FFFFFF;\" AnchorPane.bottomAnchor\u003d\"0.0\"\u003e"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"         \u003cfont\u003e"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"            \u003cFont name\u003d\"Trebuchet MS\" size\u003d\"12.0\" /\u003e"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"         \u003c/font\u003e\u003c/TextField\u003e"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"        \u003cButton fx:id\u003d\"sendButton\" focusTraversable\u003d\"false\" layoutX\u003d\"524.0\" layoutY\u003d\"708.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: #1976D2;\" text\u003d\"Send\" textFill\u003d\"WHITE\"\u003e"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"         \u003cfont\u003e"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"            \u003cFont name\u003d\"Segoe UI Black\" size\u003d\"16.0\" /\u003e"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"         \u003c/font\u003e\u003c/Button\u003e"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" focusTraversable\u003d\"false\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"708.0\" prefWidth\u003d\"600.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"            \u003ccontent\u003e"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"710.0\" prefWidth\u003d\"585.0\" style\u003d\"-fx-background-color: #212121;\"\u003e"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"               \u003ccursor\u003e"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"                  \u003cCursor fx:constant\u003d\"DEFAULT\" /\u003e"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"               \u003c/cursor\u003e\u003c/VBox\u003e"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"            \u003c/content\u003e"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"         \u003copaqueInsets\u003e"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"            \u003cInsets /\u003e"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"         \u003c/opaqueInsets\u003e"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"    \u003c/children\u003e"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"Wong-ZZ":34}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import java.io.BufferedReader;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import java.io.ByteArrayInputStream;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"import java.io.FileInputStream;"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"import java.io.FileReader;"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"import java.io.FileWriter;"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"import java.io.IOException;"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"import java.io.InputStream;"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"import java.io.PrintStream;"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"import java.nio.charset.StandardCharsets;"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"import java.nio.file.Files;"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"import java.nio.file.Path;"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"import java.nio.file.Paths;"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"import java.util.Arrays;"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"import java.util.stream.Stream;"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.InvalidSaveFileException;"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"public class DukeTest {"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"    private static final Path TEST_SAVE_PATH \u003d Paths.get(\"temp-data\", \"duke.txt\");"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"    private static final ByteArrayOutputStream OUT_CONTENT \u003d new ByteArrayOutputStream();"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"    private static final PrintStream ORIGINAL_OUT \u003d System.out;"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"    private static final InputStream SYSIN_BACKUP \u003d System.in;"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"    private static String testFilesDir \u003d Paths.get(\"\").toString();"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"    static {"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"        Path currentDir \u003d Paths.get(\"\").toAbsolutePath();"},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"        int len \u003d currentDir.getNameCount();"},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"        int index \u003d -1;"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":"        for (int i \u003d 0; i \u003c len; i++) {"},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"            if (currentDir.getName(i).toString().equals(\"ip\")) {"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":"                index \u003d i;"},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"                break;"},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":"        Path rootDir \u003d currentDir;"},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"        for (int i \u003d 0; i \u003c len - index - 1; i++) {"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":"            rootDir \u003d rootDir.getParent();"},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"Wong-ZZ"},"content":"        try {"},{"lineNumber":50,"author":{"gitId":"Wong-ZZ"},"content":"            Path[] testDir \u003d"},{"lineNumber":51,"author":{"gitId":"Wong-ZZ"},"content":"                    Files"},{"lineNumber":52,"author":{"gitId":"Wong-ZZ"},"content":"                            .walk(rootDir, 20)"},{"lineNumber":53,"author":{"gitId":"Wong-ZZ"},"content":"                            .filter(p -\u003e p.endsWith(\"duke-test\"))"},{"lineNumber":54,"author":{"gitId":"Wong-ZZ"},"content":"                            .toArray(Path[]::new);"},{"lineNumber":55,"author":{"gitId":"Wong-ZZ"},"content":"            testFilesDir \u003d testDir[0].toString();"},{"lineNumber":56,"author":{"gitId":"Wong-ZZ"},"content":"        } catch (IOException e) {"},{"lineNumber":57,"author":{"gitId":"Wong-ZZ"},"content":"            e.printStackTrace();"},{"lineNumber":58,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":61,"author":{"gitId":"Wong-ZZ"},"content":"    // recursive function to delete directory that stores the save file"},{"lineNumber":62,"author":{"gitId":"Wong-ZZ"},"content":"    private static void deleteDirectory(File directoryToBeDeleted) {"},{"lineNumber":63,"author":{"gitId":"Wong-ZZ"},"content":"        File[] allContents \u003d directoryToBeDeleted.listFiles();"},{"lineNumber":64,"author":{"gitId":"Wong-ZZ"},"content":"        if (allContents !\u003d null) {"},{"lineNumber":65,"author":{"gitId":"Wong-ZZ"},"content":"            for (File file : allContents) {"},{"lineNumber":66,"author":{"gitId":"Wong-ZZ"},"content":"                deleteDirectory(file);"},{"lineNumber":67,"author":{"gitId":"Wong-ZZ"},"content":"            }"},{"lineNumber":68,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"Wong-ZZ"},"content":"        directoryToBeDeleted.delete();"},{"lineNumber":70,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":72,"author":{"gitId":"Wong-ZZ"},"content":"    private static void clearPath() {"},{"lineNumber":73,"author":{"gitId":"Wong-ZZ"},"content":"        Path topDir \u003d TEST_SAVE_PATH.subpath(0, 1);"},{"lineNumber":74,"author":{"gitId":"Wong-ZZ"},"content":"        if (!java.nio.file.Files.exists(topDir)) {"},{"lineNumber":75,"author":{"gitId":"Wong-ZZ"},"content":"            return;"},{"lineNumber":76,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"Wong-ZZ"},"content":"        File toDelete \u003d new File(String.valueOf(topDir));"},{"lineNumber":78,"author":{"gitId":"Wong-ZZ"},"content":"        deleteDirectory(toDelete);"},{"lineNumber":79,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":81,"author":{"gitId":"Wong-ZZ"},"content":"    @BeforeAll"},{"lineNumber":82,"author":{"gitId":"Wong-ZZ"},"content":"    static void setUpStreams() throws IOException {"},{"lineNumber":83,"author":{"gitId":"Wong-ZZ"},"content":"        clearPath();"},{"lineNumber":84,"author":{"gitId":"Wong-ZZ"},"content":"        System.setOut(new PrintStream(OUT_CONTENT));"},{"lineNumber":85,"author":{"gitId":"Wong-ZZ"},"content":"        Path currentDir \u003d Paths.get(\"\").toAbsolutePath();"},{"lineNumber":86,"author":{"gitId":"Wong-ZZ"},"content":"        int len \u003d currentDir.getNameCount();"},{"lineNumber":87,"author":{"gitId":"Wong-ZZ"},"content":"        int index \u003d -1;"},{"lineNumber":88,"author":{"gitId":"Wong-ZZ"},"content":"        for (int i \u003d 0; i \u003c len; i++) {"},{"lineNumber":89,"author":{"gitId":"Wong-ZZ"},"content":"            if (currentDir.getName(i).toString().equals(\"ip\")) {"},{"lineNumber":90,"author":{"gitId":"Wong-ZZ"},"content":"                index \u003d i;"},{"lineNumber":91,"author":{"gitId":"Wong-ZZ"},"content":"                break;"},{"lineNumber":92,"author":{"gitId":"Wong-ZZ"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"Wong-ZZ"},"content":"        String[] pathToRootDir \u003d new String[len - index - 1];"},{"lineNumber":95,"author":{"gitId":"Wong-ZZ"},"content":"        Arrays.fill(pathToRootDir, \"..\");"},{"lineNumber":96,"author":{"gitId":"Wong-ZZ"},"content":"        Path rootDir \u003d Paths.get(String.join(File.separator, pathToRootDir));"},{"lineNumber":97,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":98,"author":{"gitId":"Wong-ZZ"},"content":"        String inputFilePath \u003d \"\";"},{"lineNumber":99,"author":{"gitId":"Wong-ZZ"},"content":"        try {"},{"lineNumber":100,"author":{"gitId":"Wong-ZZ"},"content":"            Path[] testDir \u003d"},{"lineNumber":101,"author":{"gitId":"Wong-ZZ"},"content":"                    Files"},{"lineNumber":102,"author":{"gitId":"Wong-ZZ"},"content":"                            .walk(rootDir, 20)"},{"lineNumber":103,"author":{"gitId":"Wong-ZZ"},"content":"                            .filter(p -\u003e p.endsWith(\"duke_test_input.txt\"))"},{"lineNumber":104,"author":{"gitId":"Wong-ZZ"},"content":"                            .toArray(Path[]::new);"},{"lineNumber":105,"author":{"gitId":"Wong-ZZ"},"content":"            inputFilePath \u003d testDir[0].toString();"},{"lineNumber":106,"author":{"gitId":"Wong-ZZ"},"content":"        } catch (IOException e) {"},{"lineNumber":107,"author":{"gitId":"Wong-ZZ"},"content":"            e.printStackTrace();"},{"lineNumber":108,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"Wong-ZZ"},"content":"        BufferedReader reader \u003d new BufferedReader(new FileReader(inputFilePath));"},{"lineNumber":110,"author":{"gitId":"Wong-ZZ"},"content":"        String[] input \u003d reader.lines().toArray(String[]::new);"},{"lineNumber":111,"author":{"gitId":"Wong-ZZ"},"content":"        reader.close();"},{"lineNumber":112,"author":{"gitId":"Wong-ZZ"},"content":"        ByteArrayInputStream inputStream \u003d new ByteArrayInputStream(String.join(\"\\n\", input).getBytes());"},{"lineNumber":113,"author":{"gitId":"Wong-ZZ"},"content":"        System.setIn(inputStream);"},{"lineNumber":114,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":116,"author":{"gitId":"Wong-ZZ"},"content":"    @AfterEach"},{"lineNumber":117,"author":{"gitId":"Wong-ZZ"},"content":"    public void restoreStreams() {"},{"lineNumber":118,"author":{"gitId":"Wong-ZZ"},"content":"        System.setOut(ORIGINAL_OUT);"},{"lineNumber":119,"author":{"gitId":"Wong-ZZ"},"content":"        clearPath();"},{"lineNumber":120,"author":{"gitId":"Wong-ZZ"},"content":"        System.setIn(SYSIN_BACKUP);"},{"lineNumber":121,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":123,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":124,"author":{"gitId":"Wong-ZZ"},"content":"    public void testInputs() throws IOException, InvalidSaveFileException {"},{"lineNumber":125,"author":{"gitId":"Wong-ZZ"},"content":"        Duke duke \u003d new Duke(TEST_SAVE_PATH);"},{"lineNumber":126,"author":{"gitId":"Wong-ZZ"},"content":"        duke.runCli();"},{"lineNumber":127,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":128,"author":{"gitId":"Wong-ZZ"},"content":"        Path currentDir \u003d Paths.get(\"\").toAbsolutePath();"},{"lineNumber":129,"author":{"gitId":"Wong-ZZ"},"content":"        int len \u003d currentDir.getNameCount();"},{"lineNumber":130,"author":{"gitId":"Wong-ZZ"},"content":"        int index \u003d -1;"},{"lineNumber":131,"author":{"gitId":"Wong-ZZ"},"content":"        for (int i \u003d 0; i \u003c len; i++) {"},{"lineNumber":132,"author":{"gitId":"Wong-ZZ"},"content":"            if (currentDir.getName(i).toString().equals(\"ip\")) {"},{"lineNumber":133,"author":{"gitId":"Wong-ZZ"},"content":"                index \u003d i;"},{"lineNumber":134,"author":{"gitId":"Wong-ZZ"},"content":"                break;"},{"lineNumber":135,"author":{"gitId":"Wong-ZZ"},"content":"            }"},{"lineNumber":136,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"Wong-ZZ"},"content":"        String[] pathToRootDir \u003d new String[len - index - 1];"},{"lineNumber":138,"author":{"gitId":"Wong-ZZ"},"content":"        Arrays.fill(pathToRootDir, \"..\");"},{"lineNumber":139,"author":{"gitId":"Wong-ZZ"},"content":"        Path rootDir \u003d Paths.get(String.join(File.separator, pathToRootDir));"},{"lineNumber":140,"author":{"gitId":"Wong-ZZ"},"content":"        String pathToExpected \u003d"},{"lineNumber":141,"author":{"gitId":"Wong-ZZ"},"content":"                Files"},{"lineNumber":142,"author":{"gitId":"Wong-ZZ"},"content":"                        .walk(rootDir, 20)"},{"lineNumber":143,"author":{"gitId":"Wong-ZZ"},"content":"                        .filter(p -\u003e p.endsWith(\"DUKE_TEST_EXPECTED.txt\"))"},{"lineNumber":144,"author":{"gitId":"Wong-ZZ"},"content":"                        .toArray(Path[]::new)[0]"},{"lineNumber":145,"author":{"gitId":"Wong-ZZ"},"content":"                        .toString();"},{"lineNumber":146,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":147,"author":{"gitId":"Wong-ZZ"},"content":"        File file \u003d new File(pathToExpected);"},{"lineNumber":148,"author":{"gitId":"Wong-ZZ"},"content":"        FileInputStream fis \u003d new FileInputStream(file);"},{"lineNumber":149,"author":{"gitId":"Wong-ZZ"},"content":"        byte[] data \u003d fis.readAllBytes();"},{"lineNumber":150,"author":{"gitId":"Wong-ZZ"},"content":"        fis.close();"},{"lineNumber":151,"author":{"gitId":"Wong-ZZ"},"content":"        Stream\u003cString\u003e expectedOutput \u003d Arrays.stream("},{"lineNumber":152,"author":{"gitId":"Wong-ZZ"},"content":"                new String(data, StandardCharsets.UTF_8).split(\"[\\r\\n]{1,2}\")"},{"lineNumber":153,"author":{"gitId":"Wong-ZZ"},"content":"        );"},{"lineNumber":154,"author":{"gitId":"Wong-ZZ"},"content":"        String[] expectedOutputLines \u003d expectedOutput.toArray(String[]::new);"},{"lineNumber":155,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":156,"author":{"gitId":"Wong-ZZ"},"content":"        String actualOutput \u003d OUT_CONTENT.toString();"},{"lineNumber":157,"author":{"gitId":"Wong-ZZ"},"content":"        String[] actualOutputLines \u003d actualOutput.split(\"[\\r\\n]{1,2}\");"},{"lineNumber":158,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":159,"author":{"gitId":"Wong-ZZ"},"content":"        String pathToActual \u003d"},{"lineNumber":160,"author":{"gitId":"Wong-ZZ"},"content":"                Files"},{"lineNumber":161,"author":{"gitId":"Wong-ZZ"},"content":"                        .walk(rootDir, 20)"},{"lineNumber":162,"author":{"gitId":"Wong-ZZ"},"content":"                        .filter(p -\u003e p.endsWith(\"DUKE_TEST_ACTUAL.txt\"))"},{"lineNumber":163,"author":{"gitId":"Wong-ZZ"},"content":"                        .toArray(Path[]::new)[0]"},{"lineNumber":164,"author":{"gitId":"Wong-ZZ"},"content":"                        .toString();"},{"lineNumber":165,"author":{"gitId":"Wong-ZZ"},"content":"        FileWriter myWriter \u003d new FileWriter(pathToActual);"},{"lineNumber":166,"author":{"gitId":"Wong-ZZ"},"content":"        myWriter.write(actualOutput);"},{"lineNumber":167,"author":{"gitId":"Wong-ZZ"},"content":"        myWriter.close();"},{"lineNumber":168,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(expectedOutputLines.length, actualOutputLines.length);"},{"lineNumber":169,"author":{"gitId":"Wong-ZZ"},"content":"        Stream"},{"lineNumber":170,"author":{"gitId":"Wong-ZZ"},"content":"                .iterate(0, i -\u003e i \u003c expectedOutputLines.length, i -\u003e i + 1)"},{"lineNumber":171,"author":{"gitId":"Wong-ZZ"},"content":"                .forEach(i -\u003e {"},{"lineNumber":172,"author":{"gitId":"Wong-ZZ"},"content":"                    assertEquals(expectedOutputLines[i], actualOutputLines[i]);"},{"lineNumber":173,"author":{"gitId":"Wong-ZZ"},"content":"                });"},{"lineNumber":174,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":175}},{"path":"src/test/java/duke/command/CommandParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.TaskType;"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"public class CommandParserTest {"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"    public void parseCmdWord() {"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"        CommandType exit \u003d CommandParser.parseCmdWord(\"bye\");"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(CommandType.Exit, exit);"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"        CommandType list \u003d CommandParser.parseCmdWord(\"list\");"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(CommandType.List, list);"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"        CommandType done \u003d CommandParser.parseCmdWord(\"done 3\");"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(CommandType.Done, done);"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"        CommandType delete \u003d CommandParser.parseCmdWord(\"delete 1\");"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(CommandType.Delete, delete);"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"        CommandType due \u003d CommandParser.parseCmdWord(\"due 2020-08-09\");"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(CommandType.Due, due);"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"        CommandType deadline \u003d CommandParser.parseCmdWord(\"deadline lorem ipsum\");"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(CommandType.Task, deadline);"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"        CommandType event \u003d CommandParser.parseCmdWord(\"event lorem ipsum\");"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(CommandType.Task, event);"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"        CommandType todo \u003d CommandParser.parseCmdWord(\"todo lorem ipsum\");"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(CommandType.Task, todo);"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"        CommandType invalid \u003d CommandParser.parseCmdWord(\"something\");"},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(CommandType.Invalid, invalid);"},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":"    public void parseTaskType() {"},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"        TaskType deadline \u003d CommandParser.parseTaskType(\"deadline lorem ipsum\");"},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(TaskType.Deadline, deadline);"},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":"        TaskType event \u003d CommandParser.parseTaskType(\"event lorem ipsum\");"},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(TaskType.Event, event);"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":"        TaskType todo \u003d CommandParser.parseTaskType(\"todo lorem ipsum\");"},{"lineNumber":49,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(TaskType.Todo, todo);"},{"lineNumber":50,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":51,"author":{"gitId":"Wong-ZZ"},"content":"        TaskType invalid \u003d CommandParser.parseTaskType(\"something\");"},{"lineNumber":52,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(TaskType.Invalid, invalid);"},{"lineNumber":53,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":54}},{"path":"src/test/java/duke/command/DeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.InvalidCommandException;"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.Response;"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"import duke.stub.task.DeadlineStub;"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"import duke.stub.task.TaskListStub;"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.TaskList;"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"public class DeleteCommandTest {"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"    public void execute() throws InvalidCommandException {"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"        TaskList taskListStub \u003d new TaskListStub();"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"        int len \u003d taskListStub.size();"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"        Response response \u003d DeleteCommand.execute(\"delete 1\", taskListStub);"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"        String expected \u003d"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"                \"Noted. I\u0027ve removed this task:\\n\""},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"                + \"  \" + new DeadlineStub() + \"\\n\""},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"                + \"Now you have \" + len + \" task\" + (len \u003d\u003d 1 ? \"\" : \"s\") + \" in the list.\";"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(expected, response.getMessage());"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":25}},{"path":"src/test/java/duke/command/DoneCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.InvalidCommandException;"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.Response;"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"import duke.stub.task.TaskListStub;"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"import duke.stub.task.TodoStub;"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.TaskList;"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"public class DoneCommandTest {"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"    public void execute() throws InvalidCommandException {"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"        TaskList taskListStub \u003d new TaskListStub();"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"        Response response \u003d DoneCommand.execute(\"done 3\", taskListStub);"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"        TodoStub todoStub \u003d new TodoStub();"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"        todoStub.markAsDone();"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"        String expected \u003d \"Nice! I\u0027ve marked this task as done\\n  \" + todoStub.toString();"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(expected, response.getMessage());"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":23}},{"path":"src/test/java/duke/command/DukeCommandExecutorTestEmpty.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"// Methods are tested by the Duke test"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"public class DukeCommandExecutorTestEmpty {"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":6}},{"path":"src/test/java/duke/command/ExitCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.Response;"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"public class ExitCommandTest {"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"    public void execute() {"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"        Response response \u003d ExitCommand.execute();"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"        String expected \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(expected, response.getMessage());"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":16}},{"path":"src/test/java/duke/command/FindCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.Response;"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"import duke.stub.task.TaskListStub;"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"public class FindCommandTest {"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"    public void execute() {"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"        TaskList taskListStub \u003d new TaskListStub();"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"        Response response \u003d FindCommand.execute(\"find event stub\", taskListStub);"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"        String expected \u003d"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"                \"Here are the matching tasks in your list:\\n\""},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"                + \"8.[X] event this is an event stub\";"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(expected, response.getMessage());"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":21}},{"path":"src/test/java/duke/command/ListCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.Response;"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"import duke.stub.task.TaskListStub;"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"public class ListCommandTest {"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"    public void execute() {"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"        TaskList taskListStub \u003d new TaskListStub();"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"        Response response \u003d ListCommand.execute(taskListStub);"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"        String[] expected \u003d new String[]{"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"            \"Here are the tasks in your list:\","},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"            \"1.This todo stub was not marked as done\","},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"            \"2.This todo stub was not marked as done\","},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"            \"3.This todo stub was not marked as done\","},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"            \"4.This todo stub was not marked as done\","},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"            \"5.This todo stub was not marked as done\","},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"            \"6.This todo stub was not marked as done\","},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"            \"7.This todo stub was not marked as done\","},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"            \"8.[X] event this is an event stub\","},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"            \"9.This todo stub was not marked as done\","},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"            \"10.This deadline stub was not marked as done\""},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"        };"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(String.join(\"\\n\", expected), response.getMessage());"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":31}},{"path":"src/test/java/duke/command/RemindCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.InvalidCommandException;"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.Response;"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"import duke.stub.task.TaskListStub;"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.TaskList;"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"public class RemindCommandTest {"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"    public void execute_validIndex_success() throws InvalidCommandException {"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"        TaskList taskListStub \u003d new TaskListStub();"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"        Response response \u003d RemindCommand.execute(\"remind 5\", taskListStub);"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"        String expected \u003d \"These are the tasks that are due within 5 days:\\n\""},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"                + \"8.[X] event this is an event stub\";"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(expected, response.getMessage());"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"    public void execute_invalidIndex_exceptionThrown() {"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"        TaskList taskListStub \u003d new TaskListStub();"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"        assertThrows(InvalidCommandException.class, () -\u003e {"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"            RemindCommand.execute(\"remind -10\", taskListStub);"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"        });"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":31}},{"path":"src/test/java/duke/command/TagCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.InvalidCommandException;"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.Response;"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"import duke.stub.task.TaskListStub;"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"import duke.stub.task.TaskStub;"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.TaskList;"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"public class TagCommandTest {"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"    public void execute() throws InvalidCommandException {"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"        TaskList taskListStub \u003d new TaskListStub();"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"        taskListStub.add(new TaskStub(\"abc\"), false);"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"        Response response \u003d TagCommand.execute(\"tag 10 tag1 tag2 tag3\", taskListStub);"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"        String expected \u003d \"I have added the tags to the following task:\\n\" + \"  [X] abc\";"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(expected, response.getMessage());"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"    public void execute_invalidIndex_exceptionThrown() {"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"        TaskList taskListStub \u003d new TaskListStub();"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"        assertThrows(InvalidCommandException.class, () -\u003e {"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"            TagCommand.execute(\"tag 10a tag1 tag2 tag3\", taskListStub);"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"        });"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":32}},{"path":"src/test/java/duke/command/TaskCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.DukeException;"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.Response;"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"import duke.stub.task.TaskListStub;"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.Task;"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.TaskList;"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"public class TaskCommandTest {"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"    public void execute() throws DukeException {"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"        TaskList taskListStub \u003d new TaskListStub();"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"        Response response \u003d TaskCommand.execute(\"deadline this is a test /by 2017-11-29 13:00\", taskListStub);"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"        String[] expected \u003d new String[]{"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"            \"Got it. I\u0027ve added this task: \","},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"            \"  [D][X] this is a test (by: Nov 29 2017 01:00 PM)\","},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"            \"Now you have 10 tasks in the list.\""},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"        };"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(String.join(\"\\n\", expected), response.getMessage());"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"    public void loadSavedTasks() throws DukeException {"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"        TaskListStub taskListStub \u003d new TaskListStub();"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"        TaskCommand.loadSavedTasks(\"1todo This is a loadSavedTasks test\", taskListStub);"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"        Task addedTask \u003d taskListStub.getLastAddedTask();"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"        String expectedToString \u003d \"[T][O] This is a loadSavedTasks test\";"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(expectedToString, addedTask.toString());"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":34}},{"path":"src/test/java/duke/storage/DukeStorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import java.io.BufferedReader;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"import java.io.FileReader;"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"import java.io.FileWriter;"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"import java.nio.file.Files;"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"import java.nio.file.Path;"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"import java.nio.file.Paths;"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"public class DukeStorageTest {"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"    private static final Path TEST_FILE_PATH \u003d Paths.get(\"test\", \"data\", \"duke.txt\");"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"    // recursive function to delete directory that stores the save file"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"    private void deleteDirectory(File directoryToBeDeleted) {"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"        File[] allContents \u003d directoryToBeDeleted.listFiles();"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"        if (allContents !\u003d null) {"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"            for (File file : allContents) {"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"                deleteDirectory(file);"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"            }"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"        directoryToBeDeleted.delete();"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"    private void writeLines(String[] lines) throws IOException {"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"        FileWriter myWriter \u003d new FileWriter(TEST_FILE_PATH.toString());"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"        for (String line: lines) {"},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"            myWriter.write(line + \"\\n\");"},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":"        myWriter.close();"},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"    private void createSaveFile() throws IOException {"},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":"        int len \u003d TEST_FILE_PATH.getNameCount();"},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"        Path directoriesToCreate \u003d TEST_FILE_PATH.subpath(0, len - 1);"},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":"        Files.createDirectories(directoriesToCreate);"},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"        if (!java.nio.file.Files.exists(TEST_FILE_PATH)) {"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":"            new File(TEST_FILE_PATH.toString()).createNewFile();"},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":51,"author":{"gitId":"Wong-ZZ"},"content":"    private void clearPath() {"},{"lineNumber":52,"author":{"gitId":"Wong-ZZ"},"content":"        Path topDir \u003d TEST_FILE_PATH.subpath(0, 1);"},{"lineNumber":53,"author":{"gitId":"Wong-ZZ"},"content":"        if (!java.nio.file.Files.exists(topDir)) {"},{"lineNumber":54,"author":{"gitId":"Wong-ZZ"},"content":"            return;"},{"lineNumber":55,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"Wong-ZZ"},"content":"        File toDelete \u003d new File(String.valueOf(topDir));"},{"lineNumber":57,"author":{"gitId":"Wong-ZZ"},"content":"        deleteDirectory(toDelete);"},{"lineNumber":58,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":60,"author":{"gitId":"Wong-ZZ"},"content":"    @BeforeEach"},{"lineNumber":61,"author":{"gitId":"Wong-ZZ"},"content":"    @AfterEach"},{"lineNumber":62,"author":{"gitId":"Wong-ZZ"},"content":"    public void removeSaveFile() {"},{"lineNumber":63,"author":{"gitId":"Wong-ZZ"},"content":"        clearPath();"},{"lineNumber":64,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":66,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"Wong-ZZ"},"content":"    public void getSavedLines_saveFileNotExist_success() throws IOException {"},{"lineNumber":68,"author":{"gitId":"Wong-ZZ"},"content":"        Storage store \u003d new DukeStorage(TEST_FILE_PATH);"},{"lineNumber":69,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":70,"author":{"gitId":"Wong-ZZ"},"content":"        List\u003cString\u003e savedLines \u003d store.getSavedLines();"},{"lineNumber":71,"author":{"gitId":"Wong-ZZ"},"content":"        int len \u003d savedLines.size();"},{"lineNumber":72,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(0, len);"},{"lineNumber":73,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":75,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"Wong-ZZ"},"content":"    public void getSavedLines_saveFileExistNotEmpty_success() throws IOException {"},{"lineNumber":77,"author":{"gitId":"Wong-ZZ"},"content":"        createSaveFile();"},{"lineNumber":78,"author":{"gitId":"Wong-ZZ"},"content":"        String[] initialLines \u003d new String[3];"},{"lineNumber":79,"author":{"gitId":"Wong-ZZ"},"content":"        initialLines[0] \u003d \"This is test line number 1.\";"},{"lineNumber":80,"author":{"gitId":"Wong-ZZ"},"content":"        initialLines[1] \u003d \"This is test line number 2!\";"},{"lineNumber":81,"author":{"gitId":"Wong-ZZ"},"content":"        initialLines[2] \u003d \"This is test line number 3?\";"},{"lineNumber":82,"author":{"gitId":"Wong-ZZ"},"content":"        writeLines(initialLines);"},{"lineNumber":83,"author":{"gitId":"Wong-ZZ"},"content":"        Storage store \u003d new DukeStorage(TEST_FILE_PATH);"},{"lineNumber":84,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":85,"author":{"gitId":"Wong-ZZ"},"content":"        List\u003cString\u003e savedLines \u003d store.getSavedLines();"},{"lineNumber":86,"author":{"gitId":"Wong-ZZ"},"content":"        int len \u003d savedLines.size();"},{"lineNumber":87,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(initialLines.length, len);"},{"lineNumber":88,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":89,"author":{"gitId":"Wong-ZZ"},"content":"        for (int i \u003d 0; i \u003c len; i++) {"},{"lineNumber":90,"author":{"gitId":"Wong-ZZ"},"content":"            assertEquals(initialLines[i], savedLines.get(i));"},{"lineNumber":91,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":94,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"Wong-ZZ"},"content":"    public void getSavedLines_saveFileExistEmpty_success() throws IOException {"},{"lineNumber":96,"author":{"gitId":"Wong-ZZ"},"content":"        createSaveFile();"},{"lineNumber":97,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":98,"author":{"gitId":"Wong-ZZ"},"content":"        Storage store \u003d new DukeStorage(TEST_FILE_PATH);"},{"lineNumber":99,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":100,"author":{"gitId":"Wong-ZZ"},"content":"        List\u003cString\u003e savedLines \u003d store.getSavedLines();"},{"lineNumber":101,"author":{"gitId":"Wong-ZZ"},"content":"        int len \u003d savedLines.size();"},{"lineNumber":102,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(0, len);"},{"lineNumber":103,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":105,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"Wong-ZZ"},"content":"    public void addLine_newLinesSaved() throws IOException {"},{"lineNumber":107,"author":{"gitId":"Wong-ZZ"},"content":"        createSaveFile();"},{"lineNumber":108,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":109,"author":{"gitId":"Wong-ZZ"},"content":"        Storage store \u003d new DukeStorage(TEST_FILE_PATH);"},{"lineNumber":110,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":111,"author":{"gitId":"Wong-ZZ"},"content":"        String[] addedLines \u003d new String[3];"},{"lineNumber":112,"author":{"gitId":"Wong-ZZ"},"content":"        addedLines[0] \u003d \"This is test line number 1.\";"},{"lineNumber":113,"author":{"gitId":"Wong-ZZ"},"content":"        addedLines[1] \u003d \"This is test line number 2!\";"},{"lineNumber":114,"author":{"gitId":"Wong-ZZ"},"content":"        addedLines[2] \u003d \"This is test line number 3?\";"},{"lineNumber":115,"author":{"gitId":"Wong-ZZ"},"content":"        Arrays"},{"lineNumber":116,"author":{"gitId":"Wong-ZZ"},"content":"                .stream(addedLines)"},{"lineNumber":117,"author":{"gitId":"Wong-ZZ"},"content":"                .forEach(store::addLine);"},{"lineNumber":118,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":119,"author":{"gitId":"Wong-ZZ"},"content":"        BufferedReader in \u003d new BufferedReader(new FileReader(TEST_FILE_PATH.toString()));"},{"lineNumber":120,"author":{"gitId":"Wong-ZZ"},"content":"        String[] actual \u003d in.lines().toArray(String[]::new);"},{"lineNumber":121,"author":{"gitId":"Wong-ZZ"},"content":"        in.close();"},{"lineNumber":122,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":123,"author":{"gitId":"Wong-ZZ"},"content":"        int len \u003d actual.length;"},{"lineNumber":124,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(addedLines.length, len);"},{"lineNumber":125,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":126,"author":{"gitId":"Wong-ZZ"},"content":"        for (int i \u003d 0; i \u003c len; i++) {"},{"lineNumber":127,"author":{"gitId":"Wong-ZZ"},"content":"            assertEquals(addedLines[i], actual[i]);"},{"lineNumber":128,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":131,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":132,"author":{"gitId":"Wong-ZZ"},"content":"    public void updateLine_updatesSaveFile() throws IOException {"},{"lineNumber":133,"author":{"gitId":"Wong-ZZ"},"content":"        createSaveFile();"},{"lineNumber":134,"author":{"gitId":"Wong-ZZ"},"content":"        String[] lines \u003d new String[3];"},{"lineNumber":135,"author":{"gitId":"Wong-ZZ"},"content":"        lines[0] \u003d \"This is test line number 1.\";"},{"lineNumber":136,"author":{"gitId":"Wong-ZZ"},"content":"        lines[1] \u003d \"This is test line number 2!\";"},{"lineNumber":137,"author":{"gitId":"Wong-ZZ"},"content":"        lines[2] \u003d \"This is test line number 3?\";"},{"lineNumber":138,"author":{"gitId":"Wong-ZZ"},"content":"        writeLines(lines);"},{"lineNumber":139,"author":{"gitId":"Wong-ZZ"},"content":"        Storage store \u003d new DukeStorage(TEST_FILE_PATH);"},{"lineNumber":140,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":141,"author":{"gitId":"Wong-ZZ"},"content":"        lines[1] \u003d \"Line number 2 has been updated!\";"},{"lineNumber":142,"author":{"gitId":"Wong-ZZ"},"content":"        store.updateLine(1, lines[1]);"},{"lineNumber":143,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":144,"author":{"gitId":"Wong-ZZ"},"content":"        BufferedReader in \u003d new BufferedReader(new FileReader(TEST_FILE_PATH.toString()));"},{"lineNumber":145,"author":{"gitId":"Wong-ZZ"},"content":"        String[] actual \u003d in.lines().toArray(String[]::new);"},{"lineNumber":146,"author":{"gitId":"Wong-ZZ"},"content":"        in.close();"},{"lineNumber":147,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":148,"author":{"gitId":"Wong-ZZ"},"content":"        int len \u003d actual.length;"},{"lineNumber":149,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(lines.length, len);"},{"lineNumber":150,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":151,"author":{"gitId":"Wong-ZZ"},"content":"        for (int i \u003d 0; i \u003c len; i++) {"},{"lineNumber":152,"author":{"gitId":"Wong-ZZ"},"content":"            assertEquals(lines[i], actual[i]);"},{"lineNumber":153,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":156,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":157,"author":{"gitId":"Wong-ZZ"},"content":"    public void removeLine_removesLinesFromSaveFile() throws IOException {"},{"lineNumber":158,"author":{"gitId":"Wong-ZZ"},"content":"        createSaveFile();"},{"lineNumber":159,"author":{"gitId":"Wong-ZZ"},"content":"        String[] lines \u003d new String[3];"},{"lineNumber":160,"author":{"gitId":"Wong-ZZ"},"content":"        lines[0] \u003d \"This is test line number 1.\";"},{"lineNumber":161,"author":{"gitId":"Wong-ZZ"},"content":"        lines[1] \u003d \"This is test line number 2!\";"},{"lineNumber":162,"author":{"gitId":"Wong-ZZ"},"content":"        lines[2] \u003d \"This is test line number 3?\";"},{"lineNumber":163,"author":{"gitId":"Wong-ZZ"},"content":"        writeLines(lines);"},{"lineNumber":164,"author":{"gitId":"Wong-ZZ"},"content":"        Storage store \u003d new DukeStorage(TEST_FILE_PATH);"},{"lineNumber":165,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":166,"author":{"gitId":"Wong-ZZ"},"content":"        store.removeLine(0);"},{"lineNumber":167,"author":{"gitId":"Wong-ZZ"},"content":"        store.removeLine(0);"},{"lineNumber":168,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":169,"author":{"gitId":"Wong-ZZ"},"content":"        BufferedReader in \u003d new BufferedReader(new FileReader(TEST_FILE_PATH.toString()));"},{"lineNumber":170,"author":{"gitId":"Wong-ZZ"},"content":"        String[] actual \u003d in.lines().toArray(String[]::new);"},{"lineNumber":171,"author":{"gitId":"Wong-ZZ"},"content":"        in.close();"},{"lineNumber":172,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":173,"author":{"gitId":"Wong-ZZ"},"content":"        String[] expected \u003d Arrays.copyOfRange(lines, 2, 3);"},{"lineNumber":174,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":175,"author":{"gitId":"Wong-ZZ"},"content":"        int len \u003d actual.length;"},{"lineNumber":176,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(expected.length, len);"},{"lineNumber":177,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":178,"author":{"gitId":"Wong-ZZ"},"content":"        for (int i \u003d 0; i \u003c len; i++) {"},{"lineNumber":179,"author":{"gitId":"Wong-ZZ"},"content":"            assertEquals(expected[i], actual[i]);"},{"lineNumber":180,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":181,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":182}},{"path":"src/test/java/duke/stub/command/CommandExecutorStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.stub.command;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import duke.command.CommandExecutor;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.NormalResponse;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.Response;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"public class CommandExecutorStub implements CommandExecutor {"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"    public Response execute(String in, TaskList taskList) {"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"        return new NormalResponse(\"\");"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"    public boolean shouldExit() {"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"        return false;"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"    public void loadSaveString(String in, TaskList taskList) throws DukeException {"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":24}},{"path":"src/test/java/duke/stub/storage/StorageStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.stub.storage;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"public class StorageStub implements Storage {"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"    public void addLine(String saveString) {"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"    public void removeLine(int index) {"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"    public void updateLine(int index, String saveString) {"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"    public List\u003cString\u003e getSavedLines() {"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"        return new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":28}},{"path":"src/test/java/duke/stub/task/DeadlineStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.stub.task;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import duke.util.DukeDateTime;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"public class DeadlineStub extends Task {"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"    public DeadlineStub() {"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"        super(\"\");"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"    public String toSaveString() {"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"        return (isDone ? \"1\" : \"0\") + \"deadline this is a deadline stub /by 2000-01-01 12:00\";"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"    public boolean isDueOn(LocalDate date) {"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"        LocalDate stubDate \u003d DukeDateTime.parseDate(\"2000-01-01\");"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"        return date.equals(stubDate);"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"        return \"This deadline stub was \" + (isDone ? \"\" : \"not\") + \" marked as done\";"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"    public boolean isDueInNDays(int n) {"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"        return false;"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":33}},{"path":"src/test/java/duke/stub/task/EventStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.stub.task;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import duke.util.DukeDateTime;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"public class EventStub extends Task {"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"    public EventStub() {"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"        super(\"event this is an event stub\");"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"    public String toSaveString() {"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"        return (isDone ? \"1\" : \"0\") + \"event this is an event stub /at 2000-01-01 12:00\";"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"    public boolean isDueOn(LocalDate date) {"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"        LocalDate stubDate \u003d DukeDateTime.parseDate(\"2000-01-01\");"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"        return date.equals(stubDate);"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"    public boolean isDueInNDays(int n) {"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"        return true;"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":28}},{"path":"src/test/java/duke/stub/task/TaskListStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.stub.task;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"public class TaskListStub implements TaskList {"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"    protected Task lastAddedTask \u003d new DeadlineStub();"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"    public void add(Task t, boolean shouldUpdateStorage) {"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"        this.lastAddedTask \u003d t;"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"    public Task get(int i) {"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"        if (i \u003d\u003d 7) {"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"            return new EventStub();"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"        } else if (i \u003d\u003d 9) {"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"            return lastAddedTask;"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"        } else {"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"            return new TodoStub();"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"    public Task getLastAddedTask() {"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"        return lastAddedTask;"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"    public Task remove(int i) {"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"        return new DeadlineStub();"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"    public int size() {"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"        return 10;"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"    public void update(int i) {"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":38}},{"path":"src/test/java/duke/stub/task/TaskStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.stub.task;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"public class TaskStub extends Task {"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"    public TaskStub(String description) {"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"        super(description);"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"    public String toSaveString() {"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"        return \"\";"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"    public boolean isDueOn(LocalDate date) {"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"        return false;"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"    public boolean isDueInNDays(int n) {"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"        return false;"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":26}},{"path":"src/test/java/duke/stub/task/TodoStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.stub.task;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"public class TodoStub extends Task {"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"    public TodoStub() {"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"        super(\"\");"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"    public String toSaveString() {"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"        return (isDone ? \"1\" : \"0\") + \"todo this is a todo stub\";"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"    public boolean isDueOn(LocalDate date) {"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"        return false;"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"        return \"This todo stub was \" + (isDone ? \"\" : \"not\") + \" marked as done\";"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"    public boolean isDueInNDays(int n) {"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"        return false;"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":31}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.InvalidDeadlineException;"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"import duke.util.DukeDateTime;"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"public class DeadlineTest {"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String SYMBOL_DONE \u003d \"O\";"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String SYMBOL_NOT_DONE \u003d \"X\";"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"    public void toSaveString() throws InvalidDeadlineException {"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"        String description \u003d \"This is a test on toSaveString. /by 2020-03-20 12:00\";"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"        Deadline deadline \u003d Deadline.createDeadline(description);"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"        deadline.addTags(new String[]{\"deadline1\", \"deadline2\", \"deadline3\"});"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"        String saveString \u003d deadline.toSaveString();"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"        String expected \u003d \"0deadline \" + description + \" \""},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"                + Task.TAGS_DELIMITER + \" \" + \"#deadline1 #deadline2 #deadline3\";"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(expected, saveString);"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"    public void createDeadLine_invalidFormat_exceptionThrown() {"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"        assertThrows(InvalidDeadlineException.class, () -\u003e {"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"            String description \u003d \"This is an invalid format. /by 2018/09/21 15:00\";"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"            Deadline.createDeadline(description);"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"        });"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":"    public void isDueOn() throws InvalidDeadlineException {"},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"        String description \u003d \"This is a test on isDueOn. /by 2018-09-21 15:00\";"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":"        Deadline deadline \u003d Deadline.createDeadline(description);"},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"        LocalDate date1 \u003d DukeDateTime.parseDate(\"2018-09-21\");"},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":"        LocalDate date2 \u003d DukeDateTime.parseDate(\"2019-09-21\");"},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"        assertTrue(deadline.isDueOn(date1));"},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":"        assertFalse(deadline.isDueOn(date2));"},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"Wong-ZZ"},"content":"    public void toStringTest() throws InvalidDeadlineException {"},{"lineNumber":50,"author":{"gitId":"Wong-ZZ"},"content":"        String description \u003d \"This is a test on toString. /by 2022-02-03 08:00\";"},{"lineNumber":51,"author":{"gitId":"Wong-ZZ"},"content":"        Deadline deadline \u003d Deadline.createDeadline(description);"},{"lineNumber":52,"author":{"gitId":"Wong-ZZ"},"content":"        String expected1 \u003d \"[D][\" + SYMBOL_NOT_DONE + \"] This is a test on toString. (by: Feb 3 2022 08:00 AM)\";"},{"lineNumber":53,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(expected1, deadline.toString());"},{"lineNumber":54,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":55,"author":{"gitId":"Wong-ZZ"},"content":"        deadline.markAsDone();"},{"lineNumber":56,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":57,"author":{"gitId":"Wong-ZZ"},"content":"        String expected2 \u003d \"[D][\" + SYMBOL_DONE + \"] This is a test on toString. (by: Feb 3 2022 08:00 AM)\";"},{"lineNumber":58,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(expected2, deadline.toString());"},{"lineNumber":59,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":61,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"Wong-ZZ"},"content":"    public void isDueInNDays() throws InvalidDeadlineException {"},{"lineNumber":63,"author":{"gitId":"Wong-ZZ"},"content":"        String description \u003d \"This is a test on isDueInNDays /by 2021-09-08 08:00\";"},{"lineNumber":64,"author":{"gitId":"Wong-ZZ"},"content":"        Deadline deadline \u003d Deadline.createDeadline(description);"},{"lineNumber":65,"author":{"gitId":"Wong-ZZ"},"content":"        assertTrue(deadline.isDueInNDays(365));"},{"lineNumber":66,"author":{"gitId":"Wong-ZZ"},"content":"        assertFalse(deadline.isDueInNDays(5));"},{"lineNumber":67,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":68}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.InvalidEventException;"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"import duke.util.DukeDateTime;"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"public class EventTest {"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String SYMBOL_DONE \u003d \"O\";"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String SYMBOL_NOT_DONE \u003d \"X\";"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"    public void toSaveString() throws InvalidEventException {"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"        String description \u003d \"This is a test on toSaveString. /at 2020-03-20 12:00\";"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"        Event event \u003d Event.createEvent(description);"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"        event.addTags(new String[]{\"event1\", \"event2\", \"event3\"});"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"        String saveString \u003d event.toSaveString();"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"        String expected \u003d \"0event \" + description + \" \""},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"                + Task.TAGS_DELIMITER + \" \" + \"#event1 #event2 #event3\";"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(expected, saveString);"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"    public void createEvent_invalidFormat_exceptionThrown() {"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"        assertThrows(InvalidEventException.class, () -\u003e {"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"            String description \u003d \"This is an invalid format. /at 2018/09/21 15:00\";"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"            Event.createEvent(description);"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"        });"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":"    public void isDueOn() throws InvalidEventException {"},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"        String description \u003d \"This is a test on isDueOn. /at 2018-09-21 15:00\";"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":"        Event event \u003d Event.createEvent(description);"},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"        LocalDate date1 \u003d DukeDateTime.parseDate(\"2018-09-21\");"},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":"        LocalDate date2 \u003d DukeDateTime.parseDate(\"2019-09-21\");"},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"        assertTrue(event.isDueOn(date1));"},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":"        assertFalse(event.isDueOn(date2));"},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"Wong-ZZ"},"content":"    public void toStringTest() throws InvalidEventException {"},{"lineNumber":50,"author":{"gitId":"Wong-ZZ"},"content":"        String description \u003d \"This is a test on toString. /at 2022-02-03 08:00\";"},{"lineNumber":51,"author":{"gitId":"Wong-ZZ"},"content":"        Event event \u003d Event.createEvent(description);"},{"lineNumber":52,"author":{"gitId":"Wong-ZZ"},"content":"        String expected1 \u003d \"[E][\" + SYMBOL_NOT_DONE + \"] This is a test on toString. (at: Feb 3 2022 08:00 AM)\";"},{"lineNumber":53,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(expected1, event.toString());"},{"lineNumber":54,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":55,"author":{"gitId":"Wong-ZZ"},"content":"        event.markAsDone();"},{"lineNumber":56,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":57,"author":{"gitId":"Wong-ZZ"},"content":"        String expected2 \u003d \"[E][\" + SYMBOL_DONE + \"] This is a test on toString. (at: Feb 3 2022 08:00 AM)\";"},{"lineNumber":58,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(expected2, event.toString());"},{"lineNumber":59,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":61,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"Wong-ZZ"},"content":"    public void isDueInNDays() throws InvalidEventException {"},{"lineNumber":63,"author":{"gitId":"Wong-ZZ"},"content":"        String description \u003d \"This is a test on isDueInNDays. /at 2021-09-08 08:00\";"},{"lineNumber":64,"author":{"gitId":"Wong-ZZ"},"content":"        Event event \u003d Event.createEvent(description);"},{"lineNumber":65,"author":{"gitId":"Wong-ZZ"},"content":"        assertTrue(event.isDueInNDays(365));"},{"lineNumber":66,"author":{"gitId":"Wong-ZZ"},"content":"        assertFalse(event.isDueInNDays(5));"},{"lineNumber":67,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":68}},{"path":"src/test/java/duke/task/TaskArrayListTestEmpty.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"public class TaskArrayListTestEmpty {"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":4}},{"path":"src/test/java/duke/task/TaskFactoryTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.DukeException;"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.InvalidCommandException;"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.InvalidDeadlineException;"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.InvalidEventException;"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.InvalidTodoException;"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"public class TaskFactoryTest {"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"    public void createTask_createValidTodo_success() throws DukeException {"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"        TaskFactory.createTask(TaskType.Todo, \"This is a test.\");"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"    public void createTask_createInvalidTodo_exceptionThrown() {"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"        assertThrows(InvalidTodoException.class, () -\u003e {"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"            TaskFactory.createTask(TaskType.Todo, \"\");"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"        });"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"    public void createEvent_createValidEvent_success() throws DukeException {"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"        TaskFactory.createTask(TaskType.Event, \"This is a test /at 2020-02-05 13:00\");"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"    public void createEvent_createInvalidEvent_exceptionThrown() {"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"        assertThrows(InvalidEventException.class, () -\u003e {"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"            TaskFactory.createTask(TaskType.Event, \"This is a test /at 2020/02/05 13:00\");"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"        });"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":"    public void createDeadline_createValidDeadline_success() throws DukeException {"},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"        TaskFactory.createTask(TaskType.Deadline, \"This is a test /by 2020-02-05 13:00\");"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"    public void createEvent_createInvalidDeadline_exceptionThrown() {"},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":"        assertThrows(InvalidDeadlineException.class, () -\u003e {"},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"            TaskFactory.createTask(TaskType.Deadline, \"This is a test /at 2020-02-05 13:00\");"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":"        });"},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":50,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"Wong-ZZ"},"content":"    public void createEvent_invalidTaskType_exceptionThrown() {"},{"lineNumber":52,"author":{"gitId":"Wong-ZZ"},"content":"        assertThrows(InvalidCommandException.class, () -\u003e {"},{"lineNumber":53,"author":{"gitId":"Wong-ZZ"},"content":"            TaskFactory.createTask(TaskType.Invalid, \"This is a test\");"},{"lineNumber":54,"author":{"gitId":"Wong-ZZ"},"content":"        });"},{"lineNumber":55,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":56}},{"path":"src/test/java/duke/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"import duke.stub.task.TaskStub;"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"public class TaskTest {"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String SYMBOL_DONE \u003d \"O\";"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String SYMBOL_NOT_DONE \u003d \"X\";"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"    private final Task task \u003d new TaskStub(\"This is a test\");"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"    @BeforeEach"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"    public void markAsUndone() {"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"        task.isDone \u003d false;"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"    public void getStatusIcon() {"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(SYMBOL_NOT_DONE, task.getStatusIcon());"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"        task.markAsDone();"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(SYMBOL_DONE, task.getStatusIcon());"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"    public void containsKeyword() {"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"        assertTrue(task.containsKeyword(\"test\"));"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"        assertTrue(task.containsKeyword(\"ThIs Is\"));"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"        assertFalse(task.containsKeyword(\"test.\"));"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":"    public void toStringTest() {"},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"        String expected1 \u003d \"[\" + SYMBOL_NOT_DONE + \"] This is a test\";"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(expected1, task.toString());"},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":"        task.markAsDone();"},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":"        String expected2 \u003d \"[\" + SYMBOL_DONE + \"] This is a test\";"},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(expected2, task.toString());"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":48}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"import duke.exception.InvalidTodoException;"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"import duke.util.DukeDateTime;"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"public class TodoTest {"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String SYMBOL_DONE \u003d \"O\";"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String SYMBOL_NOT_DONE \u003d \"X\";"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"    public void toSaveString() throws InvalidTodoException {"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"        String description \u003d \"This is a test on toSaveString.\";"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"        Todo todo \u003d Todo.createTodo(description);"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"        todo.addTags(new String[]{\"todo1\", \"todo2\", \"todo3\"});"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"        String saveString \u003d todo.toSaveString();"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"        String expected \u003d \"0todo \" + description + \" \""},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"                + Task.TAGS_DELIMITER + \" \" + \"#todo1 #todo2 #todo3\";"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(expected, saveString);"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"    public void createTodo_invalidFormat_exceptionThrown() {"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"        assertThrows(InvalidTodoException.class, () -\u003e {"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"            String description \u003d \"\";"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"            Todo.createTodo(description);"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"        });"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":"    public void isDueOn() throws InvalidTodoException {"},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"        String description \u003d \"This is a test on isDueOn.\";"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":"        Todo todo \u003d Todo.createTodo(description);"},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"        LocalDate date1 \u003d DukeDateTime.parseDate(\"2018-09-21\");"},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":"        assertFalse(todo.isDueOn(date1));"},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":"    public void toStringTest() throws InvalidTodoException {"},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":"        String description \u003d \"This is a test on toString.\";"},{"lineNumber":49,"author":{"gitId":"Wong-ZZ"},"content":"        Todo todo \u003d Todo.createTodo(description);"},{"lineNumber":50,"author":{"gitId":"Wong-ZZ"},"content":"        String expected1 \u003d \"[T][\" + SYMBOL_NOT_DONE + \"] This is a test on toString.\";"},{"lineNumber":51,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(expected1, todo.toString());"},{"lineNumber":52,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":53,"author":{"gitId":"Wong-ZZ"},"content":"        todo.markAsDone();"},{"lineNumber":54,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":55,"author":{"gitId":"Wong-ZZ"},"content":"        String expected2 \u003d \"[T][\" + SYMBOL_DONE + \"] This is a test on toString.\";"},{"lineNumber":56,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(expected2, todo.toString());"},{"lineNumber":57,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":59,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"Wong-ZZ"},"content":"    public void isDueInNDays() throws InvalidTodoException {"},{"lineNumber":61,"author":{"gitId":"Wong-ZZ"},"content":"        String description \u003d \"This is a test on isDueInNDays.\";"},{"lineNumber":62,"author":{"gitId":"Wong-ZZ"},"content":"        Todo todo \u003d Todo.createTodo(description);"},{"lineNumber":63,"author":{"gitId":"Wong-ZZ"},"content":"        assertTrue(todo.isDueInNDays(5));"},{"lineNumber":64,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":65}},{"path":"src/test/java/duke/ui/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import java.io.PrintStream;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.ErrorResponse;"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"import duke.response.NormalResponse;"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"public class UiTest {"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String DIVIDER \u003d \"____________________________________________________________\";"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"    private static final String ERROR_HEADER \u003d \"___________________________ERROR!___________________________\";"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"    private final PrintStream originalOut \u003d System.out;"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"    @BeforeEach"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"    public void setUpStreams() {"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"        System.setOut(new PrintStream(outContent));"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"    @AfterEach"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"    public void restoreStreams() {"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"        System.setOut(originalOut);"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"    public void print() {"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"        String msgBody \u003d \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\";"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"        new Ui().print(new NormalResponse(msgBody));"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"        String errorMsgBody \u003d \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\";"},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"        new Ui().print(new ErrorResponse(errorMsgBody));"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals("},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"                DIVIDER + \"\\n\" + msgBody + \"\\n\" + DIVIDER + \"\\n\""},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":"                        + ERROR_HEADER + \"\\n\" + msgBody + \"\\n\" + DIVIDER + \"\\n\","},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"                outContent.toString()"},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":"        );"},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":45}},{"path":"src/test/java/duke/util/DukeDateTimeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"public class DukeDateTimeTest {"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"    public void parseDate_validFormat_success() {"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"        String date1 \u003d \"2012-12-21\";"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"        LocalDate expected1 \u003d LocalDate.parse(date1);"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(expected1, DukeDateTime.parseDate(date1));"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"        String date2 \u003d \"2020-08-25\";"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"        LocalDate expected2 \u003d LocalDate.parse(date2);"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(expected2, DukeDateTime.parseDate(date2));"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"    public void parseDate_invalidFormat_exceptionThrown() {"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e {"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"            String date1 \u003d \"2012/12/21\";"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"            LocalDate.parse(date1);"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"        });"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"    public void localDateToString() {"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"        String date1 \u003d \"2000-05-12\";"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"        LocalDate localDate1 \u003d LocalDate.parse(date1);"},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(date1, DukeDateTime.localDateToString(localDate1));"},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":"        String date2 \u003d \"2024-01-24\";"},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"        LocalDate localDate2 \u003d LocalDate.parse(date2);"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(date2, DukeDateTime.localDateToString(localDate2));"},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":"    public void to12HTimeFormat_validFormat_success() {"},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"        String time1 \u003d \"23:59\";"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(\"11:59 PM\", DukeDateTime.to12HTimeFormat(time1));"},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":49,"author":{"gitId":"Wong-ZZ"},"content":"        String time2 \u003d \"08:20\";"},{"lineNumber":50,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(\"08:20 AM\", DukeDateTime.to12HTimeFormat(time2));"},{"lineNumber":51,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":53,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"Wong-ZZ"},"content":"    public void to12HTimeFormat_invalidFormat_exceptionThrown() {"},{"lineNumber":55,"author":{"gitId":"Wong-ZZ"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e {"},{"lineNumber":56,"author":{"gitId":"Wong-ZZ"},"content":"            String time1 \u003d \"2359\";"},{"lineNumber":57,"author":{"gitId":"Wong-ZZ"},"content":"            DukeDateTime.to12HTimeFormat(time1);"},{"lineNumber":58,"author":{"gitId":"Wong-ZZ"},"content":"        });"},{"lineNumber":59,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":61,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"Wong-ZZ"},"content":"    public void to24HTimeFormat_validFormat_success() {"},{"lineNumber":63,"author":{"gitId":"Wong-ZZ"},"content":"        String time1 \u003d \"10:45 PM\";"},{"lineNumber":64,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(\"22:45\", DukeDateTime.to24HTimeFormat(time1));"},{"lineNumber":65,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":66,"author":{"gitId":"Wong-ZZ"},"content":"        String time2 \u003d \"05:33 AM\";"},{"lineNumber":67,"author":{"gitId":"Wong-ZZ"},"content":"        assertEquals(\"05:33\", DukeDateTime.to24HTimeFormat(time2));"},{"lineNumber":68,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":70,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"Wong-ZZ"},"content":"    public void to24HTimeFormat_invalidFormat_exceptionThrown() {"},{"lineNumber":72,"author":{"gitId":"Wong-ZZ"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e {"},{"lineNumber":73,"author":{"gitId":"Wong-ZZ"},"content":"            String time1 \u003d \"01:00\";"},{"lineNumber":74,"author":{"gitId":"Wong-ZZ"},"content":"            DukeDateTime.to24HTimeFormat(time1);"},{"lineNumber":75,"author":{"gitId":"Wong-ZZ"},"content":"        });"},{"lineNumber":76,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":78,"author":{"gitId":"Wong-ZZ"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"Wong-ZZ"},"content":"    public void isWithinNDays() {"},{"lineNumber":80,"author":{"gitId":"Wong-ZZ"},"content":"        assertTrue(DukeDateTime.isWithinNDays(LocalDate.now(), 0));"},{"lineNumber":81,"author":{"gitId":"Wong-ZZ"},"content":"        assertTrue(DukeDateTime.isWithinNDays(LocalDate.now().plusDays(5), 5));"},{"lineNumber":82,"author":{"gitId":"Wong-ZZ"},"content":"        assertFalse(DukeDateTime.isWithinNDays(LocalDate.now().minusDays(1), 5));"},{"lineNumber":83,"author":{"gitId":"Wong-ZZ"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"Wong-ZZ"},"content":"}"}],"authorContributionMap":{"Wong-ZZ":84}},{"path":"src/test/resources/duke-test/DUKE_TEST_ACTUAL.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":"Hello! I\u0027m Duke."},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"What can I do for you?"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"There are no tasks in your list!"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"Got it. I\u0027ve added this task: "},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"  [T][X] wake up"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"Now you have 1 task in the list."},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"Got it. I\u0027ve added this task: "},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"  [D][X] brush teeth (by: Aug 25 2020 10:00 AM)"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"Now you have 2 tasks in the list."},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"___________________________ERROR!___________________________"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"Please input the correct details for the event task."},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"todo *description*"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"Got it. I\u0027ve added this task: "},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"  [E][X] online lecture (at: Aug 25 2020 12:00 PM)"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"Now you have 3 tasks in the list."},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"These are the tasks that are due within 7 days:"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"1.[T][X] wake up"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"___________________________ERROR!___________________________"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"Please input the correct details for the event task."},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"event *description* /at *yyyy-mm-dd* *HH:mm*"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"Got it. I\u0027ve added this task: "},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"  [D][X] submit assignment (by: Aug 29 2020 05:00 PM)"},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"Now you have 4 tasks in the list."},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"___________________________ERROR!___________________________"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":"Please input the correct details for the deadline task."},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"deadline *description* /by *yyyy-mm-dd* *HH:mm*"},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":"Got it. I\u0027ve added this task: "},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"  [T][X] take a nap"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":"Now you have 5 tasks in the list."},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":49,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":50,"author":{"gitId":"Wong-ZZ"},"content":"Here are the tasks in your list:"},{"lineNumber":51,"author":{"gitId":"Wong-ZZ"},"content":"1.[T][X] wake up"},{"lineNumber":52,"author":{"gitId":"Wong-ZZ"},"content":"2.[D][X] brush teeth (by: Aug 25 2020 10:00 AM)"},{"lineNumber":53,"author":{"gitId":"Wong-ZZ"},"content":"3.[E][X] online lecture (at: Aug 25 2020 12:00 PM)"},{"lineNumber":54,"author":{"gitId":"Wong-ZZ"},"content":"4.[D][X] submit assignment (by: Aug 29 2020 05:00 PM)"},{"lineNumber":55,"author":{"gitId":"Wong-ZZ"},"content":"5.[T][X] take a nap"},{"lineNumber":56,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":57,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":58,"author":{"gitId":"Wong-ZZ"},"content":"None of the tasks matches the keyword!"},{"lineNumber":59,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":60,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":61,"author":{"gitId":"Wong-ZZ"},"content":"Here are the matching tasks in your list:"},{"lineNumber":62,"author":{"gitId":"Wong-ZZ"},"content":"3.[E][X] online lecture (at: Aug 25 2020 12:00 PM)"},{"lineNumber":63,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":64,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":65,"author":{"gitId":"Wong-ZZ"},"content":"These are the tasks due on Aug 25 2020:"},{"lineNumber":66,"author":{"gitId":"Wong-ZZ"},"content":"2.[D][X] brush teeth (by: Aug 25 2020 10:00 AM)"},{"lineNumber":67,"author":{"gitId":"Wong-ZZ"},"content":"3.[E][X] online lecture (at: Aug 25 2020 12:00 PM)"},{"lineNumber":68,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":69,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":70,"author":{"gitId":"Wong-ZZ"},"content":"Noted. I\u0027ve removed this task:"},{"lineNumber":71,"author":{"gitId":"Wong-ZZ"},"content":"  [T][X] wake up"},{"lineNumber":72,"author":{"gitId":"Wong-ZZ"},"content":"Now you have 4 tasks in the list."},{"lineNumber":73,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":74,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":75,"author":{"gitId":"Wong-ZZ"},"content":"Got it. I\u0027ve added this task: "},{"lineNumber":76,"author":{"gitId":"Wong-ZZ"},"content":"  [E][X] go for a run (at: Aug 25 2020 08:00 PM)"},{"lineNumber":77,"author":{"gitId":"Wong-ZZ"},"content":"Now you have 5 tasks in the list."},{"lineNumber":78,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":79,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":80,"author":{"gitId":"Wong-ZZ"},"content":"Got it. I\u0027ve added this task: "},{"lineNumber":81,"author":{"gitId":"Wong-ZZ"},"content":"  [E][X] end of semester (at: Dec 6 2020 08:00 PM)"},{"lineNumber":82,"author":{"gitId":"Wong-ZZ"},"content":"Now you have 6 tasks in the list."},{"lineNumber":83,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":84,"author":{"gitId":"Wong-ZZ"},"content":"___________________________ERROR!___________________________"},{"lineNumber":85,"author":{"gitId":"Wong-ZZ"},"content":"Please input a valid index."},{"lineNumber":86,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":87,"author":{"gitId":"Wong-ZZ"},"content":"___________________________ERROR!___________________________"},{"lineNumber":88,"author":{"gitId":"Wong-ZZ"},"content":"Please input a valid index."},{"lineNumber":89,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":90,"author":{"gitId":"Wong-ZZ"},"content":"___________________________ERROR!___________________________"},{"lineNumber":91,"author":{"gitId":"Wong-ZZ"},"content":"Please key in a valid date format."},{"lineNumber":92,"author":{"gitId":"Wong-ZZ"},"content":"due *yyyy-mm-dd*"},{"lineNumber":93,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":94,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":95,"author":{"gitId":"Wong-ZZ"},"content":"Got it. I\u0027ve added this task: "},{"lineNumber":96,"author":{"gitId":"Wong-ZZ"},"content":"  [T][X] eat lunch"},{"lineNumber":97,"author":{"gitId":"Wong-ZZ"},"content":"Now you have 7 tasks in the list."},{"lineNumber":98,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":99,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":100,"author":{"gitId":"Wong-ZZ"},"content":"Got it. I\u0027ve added this task: "},{"lineNumber":101,"author":{"gitId":"Wong-ZZ"},"content":"  [D][X] apply for internship (by: Dec 4 2020 11:59 PM)"},{"lineNumber":102,"author":{"gitId":"Wong-ZZ"},"content":"Now you have 8 tasks in the list."},{"lineNumber":103,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":104,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":105,"author":{"gitId":"Wong-ZZ"},"content":"I have added the tags to the following task:"},{"lineNumber":106,"author":{"gitId":"Wong-ZZ"},"content":"  [D][X] apply for internship (by: Dec 4 2020 11:59 PM) Tags: #lazy #freeload #SU"},{"lineNumber":107,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":108,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":109,"author":{"gitId":"Wong-ZZ"},"content":"Here are the tasks in your list:"},{"lineNumber":110,"author":{"gitId":"Wong-ZZ"},"content":"1.[D][X] brush teeth (by: Aug 25 2020 10:00 AM)"},{"lineNumber":111,"author":{"gitId":"Wong-ZZ"},"content":"2.[E][X] online lecture (at: Aug 25 2020 12:00 PM)"},{"lineNumber":112,"author":{"gitId":"Wong-ZZ"},"content":"3.[D][X] submit assignment (by: Aug 29 2020 05:00 PM)"},{"lineNumber":113,"author":{"gitId":"Wong-ZZ"},"content":"4.[T][X] take a nap"},{"lineNumber":114,"author":{"gitId":"Wong-ZZ"},"content":"5.[E][X] go for a run (at: Aug 25 2020 08:00 PM)"},{"lineNumber":115,"author":{"gitId":"Wong-ZZ"},"content":"6.[E][X] end of semester (at: Dec 6 2020 08:00 PM)"},{"lineNumber":116,"author":{"gitId":"Wong-ZZ"},"content":"7.[T][X] eat lunch"},{"lineNumber":117,"author":{"gitId":"Wong-ZZ"},"content":"8.[D][X] apply for internship (by: Dec 4 2020 11:59 PM) Tags: #lazy #freeload #SU"},{"lineNumber":118,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":119,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":120,"author":{"gitId":"Wong-ZZ"},"content":"These are the tags that were removed:"},{"lineNumber":121,"author":{"gitId":"Wong-ZZ"},"content":"freeload"},{"lineNumber":122,"author":{"gitId":"Wong-ZZ"},"content":"These are the remaining tags for the specified task:"},{"lineNumber":123,"author":{"gitId":"Wong-ZZ"},"content":"  [D][X] apply for internship (by: Dec 4 2020 11:59 PM) Tags: #lazy #SU"},{"lineNumber":124,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":125,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":126,"author":{"gitId":"Wong-ZZ"},"content":"Here are the tasks in your list:"},{"lineNumber":127,"author":{"gitId":"Wong-ZZ"},"content":"1.[D][X] brush teeth (by: Aug 25 2020 10:00 AM)"},{"lineNumber":128,"author":{"gitId":"Wong-ZZ"},"content":"2.[E][X] online lecture (at: Aug 25 2020 12:00 PM)"},{"lineNumber":129,"author":{"gitId":"Wong-ZZ"},"content":"3.[D][X] submit assignment (by: Aug 29 2020 05:00 PM)"},{"lineNumber":130,"author":{"gitId":"Wong-ZZ"},"content":"4.[T][X] take a nap"},{"lineNumber":131,"author":{"gitId":"Wong-ZZ"},"content":"5.[E][X] go for a run (at: Aug 25 2020 08:00 PM)"},{"lineNumber":132,"author":{"gitId":"Wong-ZZ"},"content":"6.[E][X] end of semester (at: Dec 6 2020 08:00 PM)"},{"lineNumber":133,"author":{"gitId":"Wong-ZZ"},"content":"7.[T][X] eat lunch"},{"lineNumber":134,"author":{"gitId":"Wong-ZZ"},"content":"8.[D][X] apply for internship (by: Dec 4 2020 11:59 PM) Tags: #lazy #SU"},{"lineNumber":135,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":136,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":137,"author":{"gitId":"Wong-ZZ"},"content":"Got it. I\u0027ve added this task: "},{"lineNumber":138,"author":{"gitId":"Wong-ZZ"},"content":"  [E][X] project meeting (at: Aug 30 2020 08:00 PM)"},{"lineNumber":139,"author":{"gitId":"Wong-ZZ"},"content":"Now you have 9 tasks in the list."},{"lineNumber":140,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":141,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":142,"author":{"gitId":"Wong-ZZ"},"content":"These are the tasks that are due within 150 days:"},{"lineNumber":143,"author":{"gitId":"Wong-ZZ"},"content":"4.[T][X] take a nap"},{"lineNumber":144,"author":{"gitId":"Wong-ZZ"},"content":"6.[E][X] end of semester (at: Dec 6 2020 08:00 PM)"},{"lineNumber":145,"author":{"gitId":"Wong-ZZ"},"content":"7.[T][X] eat lunch"},{"lineNumber":146,"author":{"gitId":"Wong-ZZ"},"content":"8.[D][X] apply for internship (by: Dec 4 2020 11:59 PM) Tags: #lazy #SU"},{"lineNumber":147,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":148,"author":{"gitId":"Wong-ZZ"},"content":"___________________________ERROR!___________________________"},{"lineNumber":149,"author":{"gitId":"Wong-ZZ"},"content":"Please input a valid number"},{"lineNumber":150,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":151,"author":{"gitId":"Wong-ZZ"},"content":"___________________________ERROR!___________________________"},{"lineNumber":152,"author":{"gitId":"Wong-ZZ"},"content":"Please input a valid number"},{"lineNumber":153,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":154,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":155,"author":{"gitId":"Wong-ZZ"},"content":"Here are the tasks in your list:"},{"lineNumber":156,"author":{"gitId":"Wong-ZZ"},"content":"1.[D][X] brush teeth (by: Aug 25 2020 10:00 AM)"},{"lineNumber":157,"author":{"gitId":"Wong-ZZ"},"content":"2.[E][X] online lecture (at: Aug 25 2020 12:00 PM)"},{"lineNumber":158,"author":{"gitId":"Wong-ZZ"},"content":"3.[D][X] submit assignment (by: Aug 29 2020 05:00 PM)"},{"lineNumber":159,"author":{"gitId":"Wong-ZZ"},"content":"4.[T][X] take a nap"},{"lineNumber":160,"author":{"gitId":"Wong-ZZ"},"content":"5.[E][X] go for a run (at: Aug 25 2020 08:00 PM)"},{"lineNumber":161,"author":{"gitId":"Wong-ZZ"},"content":"6.[E][X] end of semester (at: Dec 6 2020 08:00 PM)"},{"lineNumber":162,"author":{"gitId":"Wong-ZZ"},"content":"7.[T][X] eat lunch"},{"lineNumber":163,"author":{"gitId":"Wong-ZZ"},"content":"8.[D][X] apply for internship (by: Dec 4 2020 11:59 PM) Tags: #lazy #SU"},{"lineNumber":164,"author":{"gitId":"Wong-ZZ"},"content":"9.[E][X] project meeting (at: Aug 30 2020 08:00 PM)"},{"lineNumber":165,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":166,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":167,"author":{"gitId":"Wong-ZZ"},"content":"Here are the matching tasks in your list:"},{"lineNumber":168,"author":{"gitId":"Wong-ZZ"},"content":"5.[E][X] go for a run (at: Aug 25 2020 08:00 PM)"},{"lineNumber":169,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":170,"author":{"gitId":"Wong-ZZ"},"content":"___________________________ERROR!___________________________"},{"lineNumber":171,"author":{"gitId":"Wong-ZZ"},"content":"I\u0027m sorry, but I don\u0027t know what that means :-("},{"lineNumber":172,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":173,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":174,"author":{"gitId":"Wong-ZZ"},"content":"Nice! I\u0027ve marked this task as done"},{"lineNumber":175,"author":{"gitId":"Wong-ZZ"},"content":"  [D][O] submit assignment (by: Aug 29 2020 05:00 PM)"},{"lineNumber":176,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":177,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":178,"author":{"gitId":"Wong-ZZ"},"content":"Nice! I\u0027ve marked this task as done"},{"lineNumber":179,"author":{"gitId":"Wong-ZZ"},"content":"  [E][O] online lecture (at: Aug 25 2020 12:00 PM)"},{"lineNumber":180,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":181,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":182,"author":{"gitId":"Wong-ZZ"},"content":"There are no tasks due on Aug 9 2018!"},{"lineNumber":183,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":184,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":185,"author":{"gitId":"Wong-ZZ"},"content":"Noted. I\u0027ve removed this task:"},{"lineNumber":186,"author":{"gitId":"Wong-ZZ"},"content":"  [E][O] online lecture (at: Aug 25 2020 12:00 PM)"},{"lineNumber":187,"author":{"gitId":"Wong-ZZ"},"content":"Now you have 8 tasks in the list."},{"lineNumber":188,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":189,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":190,"author":{"gitId":"Wong-ZZ"},"content":"Here are the tasks in your list:"},{"lineNumber":191,"author":{"gitId":"Wong-ZZ"},"content":"1.[D][X] brush teeth (by: Aug 25 2020 10:00 AM)"},{"lineNumber":192,"author":{"gitId":"Wong-ZZ"},"content":"2.[D][O] submit assignment (by: Aug 29 2020 05:00 PM)"},{"lineNumber":193,"author":{"gitId":"Wong-ZZ"},"content":"3.[T][X] take a nap"},{"lineNumber":194,"author":{"gitId":"Wong-ZZ"},"content":"4.[E][X] go for a run (at: Aug 25 2020 08:00 PM)"},{"lineNumber":195,"author":{"gitId":"Wong-ZZ"},"content":"5.[E][X] end of semester (at: Dec 6 2020 08:00 PM)"},{"lineNumber":196,"author":{"gitId":"Wong-ZZ"},"content":"6.[T][X] eat lunch"},{"lineNumber":197,"author":{"gitId":"Wong-ZZ"},"content":"7.[D][X] apply for internship (by: Dec 4 2020 11:59 PM) Tags: #lazy #SU"},{"lineNumber":198,"author":{"gitId":"Wong-ZZ"},"content":"8.[E][X] project meeting (at: Aug 30 2020 08:00 PM)"},{"lineNumber":199,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":200,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":201,"author":{"gitId":"Wong-ZZ"},"content":"Bye. Hope to see you again soon!"},{"lineNumber":202,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"}],"authorContributionMap":{"Wong-ZZ":202}},{"path":"src/test/resources/duke-test/DUKE_TEST_EXPECTED.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":"Hello! I\u0027m Duke."},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"What can I do for you?"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"There are no tasks in your list!"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"Got it. I\u0027ve added this task: "},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"  [T][X] wake up"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"Now you have 1 task in the list."},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"Got it. I\u0027ve added this task: "},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"  [D][X] brush teeth (by: Aug 25 2020 10:00 AM)"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"Now you have 2 tasks in the list."},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"___________________________ERROR!___________________________"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"Please input the correct details for the event task."},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"todo *description*"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"Got it. I\u0027ve added this task: "},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"  [E][X] online lecture (at: Aug 25 2020 12:00 PM)"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"Now you have 3 tasks in the list."},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"These are the tasks that are due within 7 days:"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"1.[T][X] wake up"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"___________________________ERROR!___________________________"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"Please input the correct details for the event task."},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"event *description* /at *yyyy-mm-dd* *HH:mm*"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"Got it. I\u0027ve added this task: "},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"  [D][X] submit assignment (by: Aug 29 2020 05:00 PM)"},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"Now you have 4 tasks in the list."},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":40,"author":{"gitId":"Wong-ZZ"},"content":"___________________________ERROR!___________________________"},{"lineNumber":41,"author":{"gitId":"Wong-ZZ"},"content":"Please input the correct details for the deadline task."},{"lineNumber":42,"author":{"gitId":"Wong-ZZ"},"content":"deadline *description* /by *yyyy-mm-dd* *HH:mm*"},{"lineNumber":43,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":44,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":45,"author":{"gitId":"Wong-ZZ"},"content":"Got it. I\u0027ve added this task: "},{"lineNumber":46,"author":{"gitId":"Wong-ZZ"},"content":"  [T][X] take a nap"},{"lineNumber":47,"author":{"gitId":"Wong-ZZ"},"content":"Now you have 5 tasks in the list."},{"lineNumber":48,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":49,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":50,"author":{"gitId":"Wong-ZZ"},"content":"Here are the tasks in your list:"},{"lineNumber":51,"author":{"gitId":"Wong-ZZ"},"content":"1.[T][X] wake up"},{"lineNumber":52,"author":{"gitId":"Wong-ZZ"},"content":"2.[D][X] brush teeth (by: Aug 25 2020 10:00 AM)"},{"lineNumber":53,"author":{"gitId":"Wong-ZZ"},"content":"3.[E][X] online lecture (at: Aug 25 2020 12:00 PM)"},{"lineNumber":54,"author":{"gitId":"Wong-ZZ"},"content":"4.[D][X] submit assignment (by: Aug 29 2020 05:00 PM)"},{"lineNumber":55,"author":{"gitId":"Wong-ZZ"},"content":"5.[T][X] take a nap"},{"lineNumber":56,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":57,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":58,"author":{"gitId":"Wong-ZZ"},"content":"None of the tasks matches the keyword!"},{"lineNumber":59,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":60,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":61,"author":{"gitId":"Wong-ZZ"},"content":"Here are the matching tasks in your list:"},{"lineNumber":62,"author":{"gitId":"Wong-ZZ"},"content":"3.[E][X] online lecture (at: Aug 25 2020 12:00 PM)"},{"lineNumber":63,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":64,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":65,"author":{"gitId":"Wong-ZZ"},"content":"These are the tasks due on Aug 25 2020:"},{"lineNumber":66,"author":{"gitId":"Wong-ZZ"},"content":"2.[D][X] brush teeth (by: Aug 25 2020 10:00 AM)"},{"lineNumber":67,"author":{"gitId":"Wong-ZZ"},"content":"3.[E][X] online lecture (at: Aug 25 2020 12:00 PM)"},{"lineNumber":68,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":69,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":70,"author":{"gitId":"Wong-ZZ"},"content":"Noted. I\u0027ve removed this task:"},{"lineNumber":71,"author":{"gitId":"Wong-ZZ"},"content":"  [T][X] wake up"},{"lineNumber":72,"author":{"gitId":"Wong-ZZ"},"content":"Now you have 4 tasks in the list."},{"lineNumber":73,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":74,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":75,"author":{"gitId":"Wong-ZZ"},"content":"Got it. I\u0027ve added this task: "},{"lineNumber":76,"author":{"gitId":"Wong-ZZ"},"content":"  [E][X] go for a run (at: Aug 25 2020 08:00 PM)"},{"lineNumber":77,"author":{"gitId":"Wong-ZZ"},"content":"Now you have 5 tasks in the list."},{"lineNumber":78,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":79,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":80,"author":{"gitId":"Wong-ZZ"},"content":"Got it. I\u0027ve added this task: "},{"lineNumber":81,"author":{"gitId":"Wong-ZZ"},"content":"  [E][X] end of semester (at: Dec 6 2020 08:00 PM)"},{"lineNumber":82,"author":{"gitId":"Wong-ZZ"},"content":"Now you have 6 tasks in the list."},{"lineNumber":83,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":84,"author":{"gitId":"Wong-ZZ"},"content":"___________________________ERROR!___________________________"},{"lineNumber":85,"author":{"gitId":"Wong-ZZ"},"content":"Please input a valid index."},{"lineNumber":86,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":87,"author":{"gitId":"Wong-ZZ"},"content":"___________________________ERROR!___________________________"},{"lineNumber":88,"author":{"gitId":"Wong-ZZ"},"content":"Please input a valid index."},{"lineNumber":89,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":90,"author":{"gitId":"Wong-ZZ"},"content":"___________________________ERROR!___________________________"},{"lineNumber":91,"author":{"gitId":"Wong-ZZ"},"content":"Please key in a valid date format."},{"lineNumber":92,"author":{"gitId":"Wong-ZZ"},"content":"due *yyyy-mm-dd*"},{"lineNumber":93,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":94,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":95,"author":{"gitId":"Wong-ZZ"},"content":"Got it. I\u0027ve added this task: "},{"lineNumber":96,"author":{"gitId":"Wong-ZZ"},"content":"  [T][X] eat lunch"},{"lineNumber":97,"author":{"gitId":"Wong-ZZ"},"content":"Now you have 7 tasks in the list."},{"lineNumber":98,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":99,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":100,"author":{"gitId":"Wong-ZZ"},"content":"Got it. I\u0027ve added this task: "},{"lineNumber":101,"author":{"gitId":"Wong-ZZ"},"content":"  [D][X] apply for internship (by: Dec 4 2020 11:59 PM)"},{"lineNumber":102,"author":{"gitId":"Wong-ZZ"},"content":"Now you have 8 tasks in the list."},{"lineNumber":103,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":104,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":105,"author":{"gitId":"Wong-ZZ"},"content":"I have added the tags to the following task:"},{"lineNumber":106,"author":{"gitId":"Wong-ZZ"},"content":"  [D][X] apply for internship (by: Dec 4 2020 11:59 PM) Tags: #lazy #freeload #SU"},{"lineNumber":107,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":108,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":109,"author":{"gitId":"Wong-ZZ"},"content":"Here are the tasks in your list:"},{"lineNumber":110,"author":{"gitId":"Wong-ZZ"},"content":"1.[D][X] brush teeth (by: Aug 25 2020 10:00 AM)"},{"lineNumber":111,"author":{"gitId":"Wong-ZZ"},"content":"2.[E][X] online lecture (at: Aug 25 2020 12:00 PM)"},{"lineNumber":112,"author":{"gitId":"Wong-ZZ"},"content":"3.[D][X] submit assignment (by: Aug 29 2020 05:00 PM)"},{"lineNumber":113,"author":{"gitId":"Wong-ZZ"},"content":"4.[T][X] take a nap"},{"lineNumber":114,"author":{"gitId":"Wong-ZZ"},"content":"5.[E][X] go for a run (at: Aug 25 2020 08:00 PM)"},{"lineNumber":115,"author":{"gitId":"Wong-ZZ"},"content":"6.[E][X] end of semester (at: Dec 6 2020 08:00 PM)"},{"lineNumber":116,"author":{"gitId":"Wong-ZZ"},"content":"7.[T][X] eat lunch"},{"lineNumber":117,"author":{"gitId":"Wong-ZZ"},"content":"8.[D][X] apply for internship (by: Dec 4 2020 11:59 PM) Tags: #lazy #freeload #SU"},{"lineNumber":118,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":119,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":120,"author":{"gitId":"Wong-ZZ"},"content":"These are the tags that were removed:"},{"lineNumber":121,"author":{"gitId":"Wong-ZZ"},"content":"freeload"},{"lineNumber":122,"author":{"gitId":"Wong-ZZ"},"content":"These are the remaining tags for the specified task:"},{"lineNumber":123,"author":{"gitId":"Wong-ZZ"},"content":"  [D][X] apply for internship (by: Dec 4 2020 11:59 PM) Tags: #lazy #SU"},{"lineNumber":124,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":125,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":126,"author":{"gitId":"Wong-ZZ"},"content":"Here are the tasks in your list:"},{"lineNumber":127,"author":{"gitId":"Wong-ZZ"},"content":"1.[D][X] brush teeth (by: Aug 25 2020 10:00 AM)"},{"lineNumber":128,"author":{"gitId":"Wong-ZZ"},"content":"2.[E][X] online lecture (at: Aug 25 2020 12:00 PM)"},{"lineNumber":129,"author":{"gitId":"Wong-ZZ"},"content":"3.[D][X] submit assignment (by: Aug 29 2020 05:00 PM)"},{"lineNumber":130,"author":{"gitId":"Wong-ZZ"},"content":"4.[T][X] take a nap"},{"lineNumber":131,"author":{"gitId":"Wong-ZZ"},"content":"5.[E][X] go for a run (at: Aug 25 2020 08:00 PM)"},{"lineNumber":132,"author":{"gitId":"Wong-ZZ"},"content":"6.[E][X] end of semester (at: Dec 6 2020 08:00 PM)"},{"lineNumber":133,"author":{"gitId":"Wong-ZZ"},"content":"7.[T][X] eat lunch"},{"lineNumber":134,"author":{"gitId":"Wong-ZZ"},"content":"8.[D][X] apply for internship (by: Dec 4 2020 11:59 PM) Tags: #lazy #SU"},{"lineNumber":135,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":136,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":137,"author":{"gitId":"Wong-ZZ"},"content":"Got it. I\u0027ve added this task: "},{"lineNumber":138,"author":{"gitId":"Wong-ZZ"},"content":"  [E][X] project meeting (at: Aug 30 2020 08:00 PM)"},{"lineNumber":139,"author":{"gitId":"Wong-ZZ"},"content":"Now you have 9 tasks in the list."},{"lineNumber":140,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":141,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":142,"author":{"gitId":"Wong-ZZ"},"content":"These are the tasks that are due within 150 days:"},{"lineNumber":143,"author":{"gitId":"Wong-ZZ"},"content":"4.[T][X] take a nap"},{"lineNumber":144,"author":{"gitId":"Wong-ZZ"},"content":"6.[E][X] end of semester (at: Dec 6 2020 08:00 PM)"},{"lineNumber":145,"author":{"gitId":"Wong-ZZ"},"content":"7.[T][X] eat lunch"},{"lineNumber":146,"author":{"gitId":"Wong-ZZ"},"content":"8.[D][X] apply for internship (by: Dec 4 2020 11:59 PM) Tags: #lazy #SU"},{"lineNumber":147,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":148,"author":{"gitId":"Wong-ZZ"},"content":"___________________________ERROR!___________________________"},{"lineNumber":149,"author":{"gitId":"Wong-ZZ"},"content":"Please input a valid number"},{"lineNumber":150,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":151,"author":{"gitId":"Wong-ZZ"},"content":"___________________________ERROR!___________________________"},{"lineNumber":152,"author":{"gitId":"Wong-ZZ"},"content":"Please input a valid number"},{"lineNumber":153,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":154,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":155,"author":{"gitId":"Wong-ZZ"},"content":"Here are the tasks in your list:"},{"lineNumber":156,"author":{"gitId":"Wong-ZZ"},"content":"1.[D][X] brush teeth (by: Aug 25 2020 10:00 AM)"},{"lineNumber":157,"author":{"gitId":"Wong-ZZ"},"content":"2.[E][X] online lecture (at: Aug 25 2020 12:00 PM)"},{"lineNumber":158,"author":{"gitId":"Wong-ZZ"},"content":"3.[D][X] submit assignment (by: Aug 29 2020 05:00 PM)"},{"lineNumber":159,"author":{"gitId":"Wong-ZZ"},"content":"4.[T][X] take a nap"},{"lineNumber":160,"author":{"gitId":"Wong-ZZ"},"content":"5.[E][X] go for a run (at: Aug 25 2020 08:00 PM)"},{"lineNumber":161,"author":{"gitId":"Wong-ZZ"},"content":"6.[E][X] end of semester (at: Dec 6 2020 08:00 PM)"},{"lineNumber":162,"author":{"gitId":"Wong-ZZ"},"content":"7.[T][X] eat lunch"},{"lineNumber":163,"author":{"gitId":"Wong-ZZ"},"content":"8.[D][X] apply for internship (by: Dec 4 2020 11:59 PM) Tags: #lazy #SU"},{"lineNumber":164,"author":{"gitId":"Wong-ZZ"},"content":"9.[E][X] project meeting (at: Aug 30 2020 08:00 PM)"},{"lineNumber":165,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":166,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":167,"author":{"gitId":"Wong-ZZ"},"content":"Here are the matching tasks in your list:"},{"lineNumber":168,"author":{"gitId":"Wong-ZZ"},"content":"5.[E][X] go for a run (at: Aug 25 2020 08:00 PM)"},{"lineNumber":169,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":170,"author":{"gitId":"Wong-ZZ"},"content":"___________________________ERROR!___________________________"},{"lineNumber":171,"author":{"gitId":"Wong-ZZ"},"content":"I\u0027m sorry, but I don\u0027t know what that means :-("},{"lineNumber":172,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":173,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":174,"author":{"gitId":"Wong-ZZ"},"content":"Nice! I\u0027ve marked this task as done"},{"lineNumber":175,"author":{"gitId":"Wong-ZZ"},"content":"  [D][O] submit assignment (by: Aug 29 2020 05:00 PM)"},{"lineNumber":176,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":177,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":178,"author":{"gitId":"Wong-ZZ"},"content":"Nice! I\u0027ve marked this task as done"},{"lineNumber":179,"author":{"gitId":"Wong-ZZ"},"content":"  [E][O] online lecture (at: Aug 25 2020 12:00 PM)"},{"lineNumber":180,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":181,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":182,"author":{"gitId":"Wong-ZZ"},"content":"There are no tasks due on Aug 9 2018!"},{"lineNumber":183,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":184,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":185,"author":{"gitId":"Wong-ZZ"},"content":"Noted. I\u0027ve removed this task:"},{"lineNumber":186,"author":{"gitId":"Wong-ZZ"},"content":"  [E][O] online lecture (at: Aug 25 2020 12:00 PM)"},{"lineNumber":187,"author":{"gitId":"Wong-ZZ"},"content":"Now you have 8 tasks in the list."},{"lineNumber":188,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":189,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":190,"author":{"gitId":"Wong-ZZ"},"content":"Here are the tasks in your list:"},{"lineNumber":191,"author":{"gitId":"Wong-ZZ"},"content":"1.[D][X] brush teeth (by: Aug 25 2020 10:00 AM)"},{"lineNumber":192,"author":{"gitId":"Wong-ZZ"},"content":"2.[D][O] submit assignment (by: Aug 29 2020 05:00 PM)"},{"lineNumber":193,"author":{"gitId":"Wong-ZZ"},"content":"3.[T][X] take a nap"},{"lineNumber":194,"author":{"gitId":"Wong-ZZ"},"content":"4.[E][X] go for a run (at: Aug 25 2020 08:00 PM)"},{"lineNumber":195,"author":{"gitId":"Wong-ZZ"},"content":"5.[E][X] end of semester (at: Dec 6 2020 08:00 PM)"},{"lineNumber":196,"author":{"gitId":"Wong-ZZ"},"content":"6.[T][X] eat lunch"},{"lineNumber":197,"author":{"gitId":"Wong-ZZ"},"content":"7.[D][X] apply for internship (by: Dec 4 2020 11:59 PM) Tags: #lazy #SU"},{"lineNumber":198,"author":{"gitId":"Wong-ZZ"},"content":"8.[E][X] project meeting (at: Aug 30 2020 08:00 PM)"},{"lineNumber":199,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":200,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"},{"lineNumber":201,"author":{"gitId":"Wong-ZZ"},"content":"Bye. Hope to see you again soon!"},{"lineNumber":202,"author":{"gitId":"Wong-ZZ"},"content":"____________________________________________________________"}],"authorContributionMap":{"Wong-ZZ":202}},{"path":"src/test/resources/duke-test/duke_test_input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"list"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":"todo wake up"},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"deadline brush teeth /by 2020-08-25 10:00"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"todo"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"event online lecture /at 2020-08-25 12:00"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"remind 7"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"event some event without event time"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"deadline submit assignment /by 2020-08-29 17:00"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"deadline invalid date time format /by 2020-30-29 1700"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"todo take a nap"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"list"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"find"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"find lecture"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"due 2020-08-25"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"delete 1"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"event go for a run /at 2020-08-25 20:00"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"event end of semester /at 2020-12-06 20:00"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"delete abc"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"delete 10"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"due invalid date"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"todo eat lunch"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"deadline apply for internship /by 2020-12-04 23:59"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"tag 8 lazy freeload SU"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"list"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"tag -8 freeload"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"list"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"event project meeting /at 2020-08-30 20:00"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"remind 150"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"remind abc"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"remind -5"},{"lineNumber":31,"author":{"gitId":"Wong-ZZ"},"content":"list"},{"lineNumber":32,"author":{"gitId":"Wong-ZZ"},"content":"find run"},{"lineNumber":33,"author":{"gitId":"Wong-ZZ"},"content":"some invalid command"},{"lineNumber":34,"author":{"gitId":"Wong-ZZ"},"content":"done 3"},{"lineNumber":35,"author":{"gitId":"Wong-ZZ"},"content":"done 2"},{"lineNumber":36,"author":{"gitId":"Wong-ZZ"},"content":"due 2018-08-09"},{"lineNumber":37,"author":{"gitId":"Wong-ZZ"},"content":"delete 2"},{"lineNumber":38,"author":{"gitId":"Wong-ZZ"},"content":"list"},{"lineNumber":39,"author":{"gitId":"Wong-ZZ"},"content":"bye"}],"authorContributionMap":{"Wong-ZZ":39}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Wong-ZZ"},"content":"list"},{"lineNumber":2,"author":{"gitId":"Wong-ZZ"},"content":"todo wake up"},{"lineNumber":3,"author":{"gitId":"Wong-ZZ"},"content":"deadline brush teeth /by 2020-08-25 10:00"},{"lineNumber":4,"author":{"gitId":"Wong-ZZ"},"content":"todo"},{"lineNumber":5,"author":{"gitId":"Wong-ZZ"},"content":"event online lecture /at 2020-08-25 12:00"},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"event some event without event time"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"deadline submit assignment /by 2020-08-29 17:00"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"deadline invalid date time format /by 2020-30-29 1700"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":"todo take a nap"},{"lineNumber":10,"author":{"gitId":"Wong-ZZ"},"content":"list"},{"lineNumber":11,"author":{"gitId":"Wong-ZZ"},"content":"find"},{"lineNumber":12,"author":{"gitId":"Wong-ZZ"},"content":"find lecture"},{"lineNumber":13,"author":{"gitId":"Wong-ZZ"},"content":"due 2020-08-25"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"delete 1"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"event go for a run /at 2020-08-25 20:00"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"delete abc"},{"lineNumber":17,"author":{"gitId":"Wong-ZZ"},"content":"delete 10"},{"lineNumber":18,"author":{"gitId":"Wong-ZZ"},"content":"due invalid date"},{"lineNumber":19,"author":{"gitId":"Wong-ZZ"},"content":"todo eat lunch"},{"lineNumber":20,"author":{"gitId":"Wong-ZZ"},"content":"event project meeting /at 2020-08-30 20:00"},{"lineNumber":21,"author":{"gitId":"Wong-ZZ"},"content":"list"},{"lineNumber":22,"author":{"gitId":"Wong-ZZ"},"content":"find run"},{"lineNumber":23,"author":{"gitId":"Wong-ZZ"},"content":"some invalid command"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"done 3"},{"lineNumber":25,"author":{"gitId":"Wong-ZZ"},"content":"done 2"},{"lineNumber":26,"author":{"gitId":"Wong-ZZ"},"content":"due 2018-08-09"},{"lineNumber":27,"author":{"gitId":"Wong-ZZ"},"content":"delete 2"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":"list"},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"bye"}],"authorContributionMap":{"Wong-ZZ":29}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"Wong-ZZ"},"content":"REM delete any exisiting save file"},{"lineNumber":7,"author":{"gitId":"Wong-ZZ"},"content":"if exist data\\duke.txt del data\\duke.txt"},{"lineNumber":8,"author":{"gitId":"Wong-ZZ"},"content":"if exist data rmdir data"},{"lineNumber":9,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":11,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":14,"author":{"gitId":"Wong-ZZ"},"content":"dir /s /B ..\\src\\main\\java\\*.java \u003e sources.txt"},{"lineNumber":15,"author":{"gitId":"Wong-ZZ"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin @sources.txt"},{"lineNumber":16,"author":{"gitId":"Wong-ZZ"},"content":"del sources.txt"},{"lineNumber":17,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":")"},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"Wong-ZZ"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":27,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":28,"author":{"gitId":"Wong-ZZ"},"content":""},{"lineNumber":29,"author":{"gitId":"Wong-ZZ"},"content":"del data\\duke.txt"},{"lineNumber":30,"author":{"gitId":"Wong-ZZ"},"content":"rmdir data"}],"authorContributionMap":{"Wong-ZZ":11,"-":19}}]
