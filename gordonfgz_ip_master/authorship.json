[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gordonfgz": 14
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    protected String lines \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    protected String greeting \u003d \"____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            \"Hello! I\u0027m Duke\\n\" +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            \"What can I do for you?\\n\" +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            \"____________________________________________________________\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    protected ArrayList\u003cTask\u003e TaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    private void start() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        System.out.println(greeting);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    private void end() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        System.out.println(lines);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        System.out.println(lines);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    private void provideList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        System.out.println(lines);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        for (Task task : this.TaskList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            String stringedIndex \u003d Integer.toString(this.TaskList.indexOf(task) + 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            String outputLine \u003d stringedIndex + \". \" + task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            System.out.println(outputLine);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        System.out.println(lines);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    private void markAsDone(String input) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        String stringIndex \u003d input.substring(5, input.length());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        int index \u003d Integer.parseInt(stringIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        Task chosen \u003d this.TaskList.get(index - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        chosen.finish();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        System.out.println(lines);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        System.out.println(chosen);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        System.out.println(lines);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    private void delete(String input) throws EmptyListException, InvalidListIndexException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        String stringIndex \u003d input.substring(7, input.length());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        int index \u003d Integer.parseInt(stringIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        if (this.TaskList.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            throw new EmptyListException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        } else if (index \u003e 0 \u0026\u0026 index \u003c\u003d this.TaskList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            Task chosen \u003d this.TaskList.get(index - 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            this.TaskList.remove(chosen);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            System.out.println(lines);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            System.out.println(\" Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            System.out.println(chosen);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            System.out.println(\" Now you have \" + Integer.toString(this.TaskList.size()) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            System.out.println(lines);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            throw new InvalidListIndexException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    private void addTaskToTasklist(Task task) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        System.out.println(lines);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        System.out.println(\" Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        this.TaskList.add(task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        System.out.println(\"  \" + task);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        int listCount \u003d this.TaskList.size();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        System.out.println(\" Now you have \" + Integer.toString(listCount) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        System.out.println(lines);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    private void createAndAddTodo(String input) throws EmptyDescriptionException, WrongFormatException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        if (input.length() \u003c 5 || input.substring(5).replaceAll(\"\\\\s\", \"\").equals(\"\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            throw new EmptyDescriptionException(\"todo\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        } else if (!Character.toString(input.charAt(4)).equals(\" \")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            throw new WrongFormatException(\"todo\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            Task task \u003d new Todo(input.substring(5, input.length()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            this.addTaskToTasklist(task);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    private void createAndAddDeadline(String input) throws EmptyDescriptionException, WrongFormatException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        if (input.length() \u003c 8 || input.substring(8).replaceAll(\"\\\\s\", \"\").equals(\"\") || !input.substring(9).equals(\"/\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            throw new EmptyDescriptionException(\"deadline\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        } else if (input.contains(\"/by\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                \u0026\u0026 Character.toString(input.charAt(8)).equals(\" \")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                \u0026\u0026 Character.toString(input.charAt(input.indexOf(\"/\") + 3)).equals(\" \")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                \u0026\u0026 Character.toString(input.charAt(input.indexOf(\"/\") - 1)).equals(\" \")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            String desc \u003d input.substring(9, input.indexOf(\"/\") - 1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            String by \u003d input.substring(input.indexOf(\"/\") + 4, input.length());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            Task task \u003d new Deadline(desc, by);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            this.addTaskToTasklist(task);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            throw new WrongFormatException(\"deadline\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    private void createAndAddEvent(String input) throws EmptyDescriptionException, WrongFormatException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        if (input.length() \u003c 5 || input.substring(5).replaceAll(\"\\\\s\", \"\").equals(\"\") || !input.substring(6).equals(\"/\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            throw new EmptyDescriptionException(\"event\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        } else if (input.contains(\"/at\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                \u0026\u0026 Character.toString(input.charAt(5)).equals(\" \")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                \u0026\u0026 Character.toString(input.charAt(input.indexOf(\"/\") + 3)).equals(\" \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                \u0026\u0026 Character.toString(input.charAt(input.indexOf(\"/\") - 1)).equals(\" \")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            String desc \u003d input.substring(6, input.indexOf(\"/\") - 1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            String at \u003d input.substring(input.indexOf(\"/\") + 4, input.length());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            Task task \u003d new Event(desc, at);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            this.addTaskToTasklist(task);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            throw new WrongFormatException(\"event\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    private void newTaskEntry(String input) throws EmptyDescriptionException, WrongFormatException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        if (input.contains(\"todo\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            this.createAndAddTodo(input);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        } else if (input.contains(\"deadline\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            this.createAndAddDeadline(input);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        } else if (input.contains(\"event\")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            this.createAndAddEvent(input);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    private void processInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            this.provideList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        } else if (input.contains(\"done\")) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            this.markAsDone(input);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        } else if (input.contains(\"todo\") || input.contains(\"deadline\") || input.contains(\"event\")) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            this.newTaskEntry(input);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        } else if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            this.end();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        } else if (input.contains(\"delete\")) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            this.delete(input);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            throw new InputNotRecognisedException();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    public static void main(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        duke.start();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                duke.processInput(input);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                System.out.println(e.toString());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gordonfgz": 158,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gordonfgz": 3
    }
  },
  {
    "path": "src/main/java/EmptyDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "public class EmptyDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    public EmptyDescriptionException(String type) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        return \"____________________________________________________________\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                + \" ☹ OOPS!!! The description of a \" + type + \" cannot be empty.\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                + \"____________________________________________________________\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gordonfgz": 15
    }
  },
  {
    "path": "src/main/java/EmptyListException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "public class EmptyListException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        return \"____________________________________________________________\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                + \" ☹ OOPS!!! Your list is currently empty!\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                + \"____________________________________________________________\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gordonfgz": 9
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gordonfgz": 14
    }
  },
  {
    "path": "src/main/java/InputNotRecognisedException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "public class InputNotRecognisedException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        return \"____________________________________________________________\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                + \" ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                + \"____________________________________________________________\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gordonfgz": 10
    }
  },
  {
    "path": "src/main/java/InvalidListIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "public class InvalidListIndexException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        return \"____________________________________________________________\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                + \" ☹ OOPS!!! The index you\u0027ve chosen is invalid\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                + \"____________________________________________________________\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gordonfgz": 9
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    protected void finish() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gordonfgz": 21
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gordonfgz": 12
    }
  },
  {
    "path": "src/main/java/WrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "public class WrongFormatException extends DukeException{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    public WrongFormatException(String type) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        if (type.equals(\"todo\")) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            return \"____________________________________________________________\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                    + \" ☹ OOPS!!! Proper input format required! Proper format: todo{space}{description}\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                    + \"____________________________________________________________\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        } else if (type.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            return \"____________________________________________________________\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                    + \" ☹ OOPS!!! Proper input format required! Proper format: deadline{space}{description}{space}/by{space}{due-date} .\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                    + \"____________________________________________________________\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        } else if (type.equals(\"event\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            return \"____________________________________________________________\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                    + \" ☹ OOPS!!! Proper input format required! Proper format: deadline{space}{description}{space}/at{space}{time-slot}.\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "                    + \"____________________________________________________________\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "            return \"No such Task type\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gordonfgz": 32
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "gordonfgz": 5
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gordonfgz"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "gordonfgz": 1,
      "-": 20
    }
  }
]
