[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.8\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    version \u003d \"11\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    modules \u003d [\u0027javafx.controls\u0027 , \u0027javafx.fxml\u0027]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    archiveBaseName \u003d \"DukeTaskManager\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 23,
      "-": 44
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "DukeTaskManager is a simple, easy-to-use task managing application that might aid your scheduling of daily "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "tasks, deadline and on-coming events. "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "This application has both **Command Line Interface (CLI)** and **Graphical User Interface (GUI)** which is optimised"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "users who prefer typing than clicking and navigating with their mouse."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "Furthermore, this app features [Pepe the frog](https://en.wikipedia.org/wiki/Pepe_the_Frog), so for those who are obsessed with such memes can "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "have some fun using this app."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "![img](Ui.png)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "##Table of Contents"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "* **Getting Started**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "* **Key Features**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    * **Adding and deleting a task**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    * **Find a task**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    * **Mark as done**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    * **Delete tasks**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    * **Reminder**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "* **Commands Summary**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "* **FAQ**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "##Getting Started"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "To use DukeTaskManager, you can do the following to \"install\"."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "1. Install **Java 11** on your computer."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "2. Download Latest DukeTaskManager release [here](https://github.com/YuunoKun/ip/releases)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "3. Double click the **DukeTaskManager.jar** to start. "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "##Key Features"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "####Adding and deleting a task "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "There are quite a couple ways to add a task such as:**`todo`** **`deadline`** **`event`**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "![img](./images/feature_add.png)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "To add a todo task:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "todo DESCRIPTION"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "e.g. todo homework for CS2100"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "```"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "To add a deadline task:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "```"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "deadline DESCRIPTION /by DATETIME"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "e.g. deadline homework for CS2100 /by 9/9/2020 2359"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "```"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "To add a event task:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "```"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "event DESCRIPTION /at DATETIME"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "e.g. event party /at 1/1/2021 0000"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "Do take note that `DESCRIPTION` can be a sentence with spaces between words, and there must be a "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "whitespace before and after `/at` or `/by`. Also, `DATETIME` must be in the form of `dd/MM/yyyy hhmm`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ", i.e. `1/1/2020 1800`. The given date must be in the future or the date will be invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "If you want to delete a certain task, you can use the command  **`delete`**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "![img](./images/feature_delete.png)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "delete TASKINDEX"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "e.g. delete 1"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "```"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "If you want to delete all the tasks stored, use **`clearall`**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "```"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "clearall"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "```"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "####Find a task"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "Find a task by using command such as **`find`** and **`date`**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "Command `find` is designed to find tasks by matching the description of the tasks while command `date` focus"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "on finding tasks by their date and time."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "![img](./images/feature_find.png)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "Find tasks with certain keyword:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "```"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "find KEYWORD"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "e.g. find homework"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "```"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "![img](./images/feature_date.png)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "date DATE"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "e.g. date 10/12/2020"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "```"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "####Mark as done"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "![img](./images/feature_done.png)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "To mark task as done:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "```"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "done TASKINDEX"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "Note that you might want to check the correct index of the task before "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "marking a task as done, as there isn\u0027t a way to mark a task as undone yet."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "####Reminder"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "If you have a deadline or event that within 2 days, a reminder will be sent when you start DukeTaskManager."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "![img](./images/feature_reminder.png)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "##Commands Summary"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "Command | Format"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "------- | --------"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "`todo` | `todo DESCRIPTION` "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "`deadline` | `deadline DESCRIPTION /by DATETIME`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "`event` | `event DESCRIPTION /at DATETIME`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "`list` | `list`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "`done` | `done TASKINDEX`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "`find` | `find KEYWORD`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "`date` | `date DATE`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "`delete` | `delete TASKINDEX`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "`clearall` | `clearall`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "`bye` | `bye`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 133,
      "-": 10
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.scene.layout.Border;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.scene.layout.BorderStroke;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.scene.layout.BorderWidths;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private DialogBox(Label l) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        dialog \u003d l;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        dialog.setWrapText(true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.getChildren().addAll(dialog);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ObservableList\u003cNode\u003e child \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        FXCollections.reverse(child);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.getChildren().setAll(child);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static DialogBox getUserDialog(Label l) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        DialogBox dialogBox \u003d new DialogBox(l);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        dialogBox.setBackground(new Background(new BackgroundFill(Paint.valueOf(\"#ffffff\"), null, null)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        dialogBox.setBorder(new Border(new BorderStroke(Paint.valueOf(\"pink\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                null, null, BorderWidths.DEFAULT)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return dialogBox;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        DialogBox dialogBox \u003d new DialogBox(l.getText(), iv.getImage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        dialogBox.flip();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return dialogBox;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 74
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.awt.AWTException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.awt.SystemTray;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeStorageException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * A class for duke."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Contains the main method to run duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Empty constructor for duke."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Provides a path by default."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        storage \u003d new Storage(\"./data/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (SystemTray.isSupported()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                Notification.notifyTime(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                System.err.println(\"System tray not supported!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (DukeStorageException | AWTException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Public constructor of duke."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Requires a file path of String type to"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * initiate storage for loading local saved tasks, if a"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * saved list is not found, it will automatically create a new"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * empty list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param filePath A file path of the task list file"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (DukeStorageException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Parse and process the input command, then"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * retrieve the result from ui."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public ResultInfo getResponse(String input) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ui.setStringBuilder(new StringBuilder());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            Command command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            command.execute(tasks, storage, ui);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return new ResultInfo(true, command.isExit(), ui.getStringBuilder().toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return new ResultInfo(false, false, e.getMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns welcome message"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @return Returns welcome message"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String getWelcome() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return ui.getWelcome();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 84,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/DukeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * An enumeration of different types of existing commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * for duke."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public enum DukeCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    LIST(\"list\", 100), DATE(\"date\", 101), FIND(\"find\", 102), CLEARALL(\"clearall\", 102),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    TODO(\"todo\", 200), DEADLINE(\"deadline\", 201), EVENT(\"event\", 201),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    DONE(\"done\", 300), DELETE(\"delete\", 301),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    BYE(\"bye\", 400);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private DukeCommand(String command, int index) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setCommand(String command) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setIndex(int index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 39
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private static Stage stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            Main.stage \u003d stage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            stage.setTitle(\"Duke Task Manager\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().loadInitMessage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static Stage getStage() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return stage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 41
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Image dukeSadge \u003d new Image(this.getClass().getResourceAsStream(\"/img/peepoSad.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Image dukeHappy \u003d new Image(this.getClass().getResourceAsStream(\"/img/peepoHappy.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Image dukeNotes \u003d new Image(this.getClass().getResourceAsStream(\"/img/peepoNotes.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Initialise."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setDuke(Duke duke) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void loadInitMessage() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                new Label(duke.getWelcome()), new ImageView(dukeHappy))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ResultInfo resultInfo \u003d duke.getResponse(userInput.getText());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (resultInfo.isExit()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            //Main.getStage().close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ImageView img \u003d new ImageView(resultInfo.isSuccess() ? dukeNotes : dukeSadge);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            Label dukeText \u003d new Label(resultInfo.getResponse());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    DialogBox.getUserDialog(userText),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    DialogBox.getDukeDialog(dukeText, img)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            );"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 70
    }
  },
  {
    "path": "src/main/java/duke/Notification.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.awt.AWTException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.awt.Image;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.awt.SystemTray;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.awt.Toolkit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.awt.TrayIcon;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class Notification {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Notify the user of incoming deadlines."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param taskList Tasklist loaded"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @throws AWTException If fails to add."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static void notifyTime(TaskList taskList) throws AWTException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //Obtain only one instance of the SystemTray object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        SystemTray tray \u003d SystemTray.getSystemTray();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Image image \u003d Toolkit.getDefaultToolkit().createImage(Notification.class.getResource(\"/img/peepoHappy.png\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        TrayIcon trayIcon \u003d new TrayIcon(image, \"Duke\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //Let the system resize the image if needed"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        trayIcon.setImageAutoSize(true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        //Set tooltip text for the tray icon"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        trayIcon.setToolTip(\"Duke Alert\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        tray.add(trayIcon);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        List\u003cTask\u003e list \u003d taskList.getList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        boolean isNotifiable \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for (Task task: list) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (task.isComing(2)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                isNotifiable \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                stringBuilder.append(task.getNotification()).append(\"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (isNotifiable) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            trayIcon.displayMessage(\"Duke tasks incoming\", \"Incoming tasks: \\n\" + stringBuilder.toString(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    TrayIcon.MessageType.INFO);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        tray.remove(trayIcon);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 50
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * A parser to read the command lines detected and"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * determine which type of command it is refering to."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Parse the input command and returns the command object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * if the command is valid."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * It will take the first part of the command line and search through"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * an enumeration of commands to check if such command exists, if it does,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * it will create command object according to the command type and store the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * original command in it."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * If such command does not exists, DukeParseException will be thrown and caught, then"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * an \u0027invalid command\u0027 message will be send though the ui to alert the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param inputCommand Detected command line of string type"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @return The command detected with input command stored in it"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @throws DukeParseException If invalid command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static Command parse(String inputCommand) throws DukeParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (inputCommand \u003d\u003d null || inputCommand.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeParseException(\"Empty command!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String commandName \u003d inputCommand.split(\" \")[0];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        boolean isCommand \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            String className \u003d \"duke.command.\" + Character.toUpperCase(commandName.charAt(0))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    + commandName.substring(1) + \"Command\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            for (DukeCommand comm: DukeCommand.values()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                if (commandName.equals(comm.getCommand())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    command \u003d (Command) Class.forName(className).getConstructor(String.class)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                            .newInstance(inputCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    isCommand \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeParseException(\"Unable to load command.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (isCommand) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeParseException(\"Command \u0027\" + commandName + \"\u0027 not found!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 59
    }
  },
  {
    "path": "src/main/java/duke/ResultInfo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * A class to encapsulate response information"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * before returning to handler."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class ResultInfo {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private boolean isSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private String response;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * A public constructor for resultinfo"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param isSuccess Whether the command is executed successfully"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param isExit Whether the command is recognised as exit command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param response Response message"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public ResultInfo(boolean isSuccess, boolean isExit, String response) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.isSuccess \u003d isSuccess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.response \u003d response;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isSuccess() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return isSuccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setSuccess(boolean success) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        isSuccess \u003d success;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setExit(boolean exit) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        isExit \u003d exit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String getResponse() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setResponse(String response) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.response \u003d response;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 48
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeStorageException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.util.SerializeUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * A storage class to handle the loading and save of the tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final String path;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final String filename \u003d \"saved.duke\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Public constructor of storage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * It requires a path of the saving directory to"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * save/load tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param path Path of saving directory"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Storage(String path) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Load the tasks from local disk."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Using the path provided, try to load the tasks and"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * deserialize it to TaskList object, if it does not exist, a new arraylist"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * will be created."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @return A list of tasks"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @throws DukeStorageException If fails to find or deserialize the list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeStorageException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            File file \u003d new File(this.path + this.filename);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (file.exists()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                FileInputStream fis \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                list \u003d (ArrayList\u003cTask\u003e) SerializeUtil.deserialize(fis.readAllBytes());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeStorageException(\"Failed to load saved list.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Saves the current list of tasks on local disk."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * The list of tasks will be saved in the directory according to"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * the path given."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param tasks TaskList to be stored"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @throws DukeStorageException If fails to create file or serialize the tasklist object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void save(TaskList tasks) throws DukeStorageException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            File tempFile \u003d new File(path);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (!tempFile.exists()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                tempFile.mkdirs();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            File file \u003d new File(this.path + this.filename);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            FileOutputStream fos \u003d new FileOutputStream(file);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            byte[] serializedData \u003d SerializeUtil.serialize(tasks.getList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            fos.write(serializedData);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeStorageException(\"Failed to save changes.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Deletes the save file for duke tasks."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void deleteStorage() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        File file \u003d new File(this.path + this.filename);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 100
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * A tasklist to store a list of tasks"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private List\u003cTask\u003e list \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public TaskList() {}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public TaskList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public List\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 28
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * An ui to send message to user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private StringBuilder stringBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Public getter of the welcome message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @return A welcoming message"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String getWelcome() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return \"Hello! I\u0027m duke.Duke\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns a loading error message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @return loading error message"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String showLoadingError() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return \"Failed to load\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void printMessage(String msg) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.stringBuilder.append(msg).append(\"\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public StringBuilder getStringBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return stringBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setStringBuilder(StringBuilder stringBuilder) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.stringBuilder \u003d stringBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 37
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public ByeCommand(String inputCommand) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute(TaskList list, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ui.printMessage(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 21
    }
  },
  {
    "path": "src/main/java/duke/command/ClearallCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeCommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class ClearallCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public ClearallCommand(String inputCommand) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute(TaskList list, Storage storage, Ui ui) throws DukeCommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"clearall\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (!pattern.matcher(getInputCommand()).matches()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeCommandException(\"\\u2639 OOPS!!! Wrong \u0027clearall\u0027 command format!\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            storage.deleteStorage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            list.setList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ui.printMessage(\"Alright. All tasks are removed!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 32
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeStorageException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * A class to store commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Can be extended to implement different type of commands"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * and their specific ways of operating by overriding the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * execute method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final String inputCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * A public constructor for a command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Requires an input command in the form of \u003ccode\u003e[commandType] [arguments if any]\u003c/code\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param inputCommand A command line of String type"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Command(String inputCommand) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.inputCommand \u003d inputCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Executes the command in field : inputCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Execute the stored command line according to its command type."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * The current list of tasks will be retrieved from list and outputs will"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * be printed using ui provided, then the changes made will be stored via storage"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * if necessary."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param list A TaskList of tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param storage storage used to handle load/save requests"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param ui the ui used to interact with user"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @throws DukeCommandException  If the command received has incorrect format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @throws DukeStorageException  If fails to save changes made to the list of tasks"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public abstract void execute(TaskList list, Storage storage, Ui ui) throws DukeCommandException,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            DukeStorageException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Return true if the current command is an exit command. i.e. \u0027bye\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @return Whether the command is an exit command"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String getInputCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return inputCommand;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 56
    }
  },
  {
    "path": "src/main/java/duke/command/DateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeCommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class DateCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public DateCommand(String inputCommand) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute(TaskList list, Storage storage, Ui ui) throws DukeCommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"date [0-9]{1,2}/[0-9]{1,2}/[0-9]{4,4}\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (!pattern.matcher(getInputCommand()).matches()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeCommandException(\"\\u2639 OOPS!!! Wrong \u0027date\u0027 command format!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            String[] parseArray \u003d getInputCommand().split(\" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            String[] dateSegments \u003d parseArray[1].split(\"/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            for (int i \u003d 0; i \u003c 2; i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                if (dateSegments[i].length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    dateSegments[i] \u003d \"0\" + dateSegments[i];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            parseArray[1] \u003d dateSegments[0] + \"/\" + dateSegments[1] + \"/\" + dateSegments[2];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            String dateString \u003d parseArray[1];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(dateString, DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            int taskIndexCounter \u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            for (Task task: list.getList()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    LocalDateTime deadlineTime \u003d deadline.getBy();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    if (date.getYear() \u003d\u003d deadlineTime.getYear() \u0026\u0026 date.getDayOfYear() \u003d\u003d deadlineTime.getDayOfYear()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                        stringBuilder.append(taskIndexCounter).append(\".\").append(task).append(\"\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                        taskIndexCounter++;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                if (task instanceof Event) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    LocalDateTime eventTime \u003d event.getAt();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    if (date.getYear() \u003d\u003d eventTime.getYear() \u0026\u0026 date.getDayOfYear() \u003d\u003d eventTime.getDayOfYear()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                        stringBuilder.append(taskIndexCounter).append(\".\").append(task).append(\"\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                        taskIndexCounter++;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (stringBuilder.length() \u003e 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                ui.printMessage(\"Here are the tasks of date \" + date + \":\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                ui.printMessage(stringBuilder.toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                ui.printMessage(\"No matching task found!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 74
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeCommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeStorageException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public DeadlineCommand(String inputCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute(TaskList list, Storage storage, Ui ui) throws DukeCommandException, DukeStorageException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Pattern pattern \u003d Pattern.compile("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                \"deadline ([a-zA-z0-9_-]+)((?: [a-zA-z0-9_-]+)*) /by [0-9]{1,2}/[0-9]{1,2}/[0-9]{4,4} [0-9]{4,4}\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (!pattern.matcher(getInputCommand()).matches()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeCommandException(\"\\u2639 OOPS!!! Wrong \u0027deadline\u0027 command format!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            String[] parseArray \u003d getInputCommand().substring(9).split(\" /by \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            String[] dateSegments \u003d parseArray[1].split(\"/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            for (int i \u003d 0; i \u003c 2; i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                if (dateSegments[i].length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    dateSegments[i] \u003d \"0\" + dateSegments[i];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            parseArray[1] \u003d dateSegments[0] + \"/\" + dateSegments[1] + \"/\" + dateSegments[2];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            Deadline deadline;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                if (LocalDateTime.parse(parseArray[1], DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                        .isBefore(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    throw new DukeCommandException(\"That date has already passed!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                deadline \u003d new Deadline(parseArray[0], LocalDateTime.parse("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                  parseArray[1], DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\")));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                throw new DukeCommandException(\"Invalid date!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            list.getList().add(deadline);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ui.printMessage(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ui.printMessage(deadline.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ui.printMessage(\"Now you have \" + list.getList().size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            storage.save(list);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 64
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeStorageException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public DeleteCommand(String inputCommand) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute(TaskList list, Storage storage, Ui ui) throws DukeCommandException, DukeStorageException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"delete [1-9][0-9]{0,}\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (!pattern.matcher(getInputCommand()).matches()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeCommandException(\"\\u2639 OOPS!!! Wrong \u0027delete\u0027 command format!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            int index \u003d Integer.parseInt(\"\" + getInputCommand().charAt(7)) - 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (list.getList().size() \u003e index \u0026\u0026 index \u003e\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                Task taskToPrint \u003d list.getList().get(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                list.getList().remove(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                ui.printMessage(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                ui.printMessage(taskToPrint.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                storage.save(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                throw new DukeCommandException(\"\\u2639 OOPS!!! There isn\u0027t a task with that index!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 42
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeStorageException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public DoneCommand(String inputCommand) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute(TaskList list, Storage storage, Ui ui) throws DukeCommandException, DukeStorageException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"done [1-9][0-9]{0,}\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (!pattern.matcher(getInputCommand()).matches()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeCommandException(\"\\u2639 OOPS!!! Wrong \u0027done\u0027 command format!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            int index \u003d Integer.parseInt(\"\" + getInputCommand().charAt(5)) - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (list.getList().size() \u003e\u003d index \u0026\u0026 index \u003e\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                Task taskToPrint \u003d list.getList().get(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                taskToPrint.markAsDone();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                ui.printMessage(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                ui.printMessage(taskToPrint.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                storage.save(list);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 41
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeCommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeStorageException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public EventCommand(String inputCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute(TaskList list, Storage storage, Ui ui) throws DukeCommandException, DukeStorageException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Pattern pattern \u003d Pattern.compile("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                \"event ([a-zA-z0-9_-]+)((?: [a-zA-z0-9_-]+)*) /at [0-9]{1,2}/[0-9]{1,2}/[0-9]{4,4} [0-9]{4,4}\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (!pattern.matcher(getInputCommand()).matches()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeCommandException(\"\\u2639 OOPS!!! Wrong \u0027event\u0027 command format!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            String[] parseArray \u003d getInputCommand().substring(6).split(\" /at \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            String[] dateSegments \u003d parseArray[1].split(\"/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            for (int i \u003d 0; i \u003c 2; i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                if (dateSegments[i].length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    dateSegments[i] \u003d \"0\" + dateSegments[i];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            parseArray[1] \u003d dateSegments[0] + \"/\" + dateSegments[1] + \"/\" + dateSegments[2];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            Event event;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                if (LocalDateTime.parse(parseArray[1], DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                        .isBefore(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    throw new DukeCommandException(\"That date has already passed!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                event \u003d new Event(parseArray[0], LocalDateTime.parse("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                  parseArray[1], DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\")));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                throw new DukeCommandException(\"Invalid date!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            list.getList().add(event);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ui.printMessage(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ui.printMessage(event.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ui.printMessage(\"Now you have \" + list.getList().size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            storage.save(list);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 64
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeStorageException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public FindCommand(String inputCommand) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute(TaskList list, Storage storage, Ui ui) throws DukeCommandException, DukeStorageException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"find ([a-zA-z0-9_-]+)((?: [a-zA-z0-9_-]+)*)\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (!pattern.matcher(getInputCommand()).matches()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeCommandException(\"\\u2639 OOPS!!! Wrong \u0027find\u0027 command format!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            String matchingString \u003d getInputCommand().substring(5);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if (list.getList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                ui.printMessage(\"There is nothing in match!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                int taskIndexCounter \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                for (Task task: list.getList()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    if (task.getDescription().contains(matchingString)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                        stringBuilder.append(taskIndexCounter).append(\".\").append(task).append(\"\\n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                        taskIndexCounter++;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                if (stringBuilder.length() \u003e 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    ui.printMessage(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    ui.printMessage(stringBuilder.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    ui.printMessage(\"No matching task found!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 51
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public ListCommand(String inputCommand) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute(TaskList list, Storage storage, Ui ui) throws DukeCommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (this.getInputCommand().split(\" \").length !\u003d 1) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeCommandException(\"\\u2639 OOPS!!! Wrong \u0027list\u0027 command parameters!\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (list.getList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ui.printMessage(\"There is nothing in the list!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ui.printMessage(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            int taskIndexCounter \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            for (Task task: list.getList()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                ui.printMessage(\"\" + taskIndexCounter + \".\" + task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                taskIndexCounter++;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 37
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeStorageException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public TodoCommand(String inputCommand) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute(TaskList list, Storage storage, Ui ui) throws DukeCommandException, DukeStorageException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"todo ([a-zA-z0-9_-]+)((?: [a-zA-z0-9_-]+)*)\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if (!pattern.matcher(getInputCommand()).matches()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeCommandException(\"\\u2639 OOPS!!! Wrong \u0027todo\u0027 command format!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            Todo todo \u003d new Todo(getInputCommand().substring(5));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            list.getList().add(todo);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ui.printMessage(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ui.printMessage(todo.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ui.printMessage(\"Now you have \" + list.getList().size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            storage.save(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 39
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * An indication of command line errors due to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * command line format issues and empty lists."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class DukeCommandException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public DukeCommandException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Exception specially designed for duke"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    DukeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * An indication of parsing errors due to invalid"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * date/time string format."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class DukeParseException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public DukeParseException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeStorageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * An indication of file handling error and IO error."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class DukeStorageException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public DukeStorageException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 10
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * A class for task of deadline type."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**A format date/time object to store the deadline of an event */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Public constructor for a deadline task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Requires an description and a time of the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * deadline of LocalDateTime form."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param description Describes the deadline task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param by Date/time of the deadline task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public LocalDateTime getBy() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setBy(LocalDateTime by) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String getNotification() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return this.description + \"@\" + by.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy hh:mma\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isComing(int days) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return by.minusDays(days).isBefore(LocalDateTime.now());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                + by.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy hh:mma\")) + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 50
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * A class for task of event type."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**A format date/time object to store the time of an event */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Public constructor for a event task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Requires an description and a time of the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * event of LocalDateTime form."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param description Describes the event task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param at Date/time of the event task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Event(String description, LocalDateTime at) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public LocalDateTime getAt() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setAt(LocalDateTime at) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String getNotification() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return this.description + \"@\" + at.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy hh:mma\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isComing(int days) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return at.minusDays(days).isBefore(LocalDateTime.now());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy hh:mma\")) + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 49
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * A class for different types of class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class Task implements Serializable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Public constructor for a task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * It takes a description as argument as all valid tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * should have a description. The task is set to be undone"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * by default."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param description A string describing the task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns the status icon"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @return Status icon in unicode"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Marks this task as done"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * by setting the isDone flag to true."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns true if deadline of this task is approaching"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @return If the deadline is approaching"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isComing(int days) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns the standard format for notifications."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @return Notification string"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String getNotification() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 78
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * A class for task of todo type."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 16
    }
  },
  {
    "path": "src/main/java/duke/util/SerializeUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * A utility class designed to serialize/deserialize obects"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * that are serializable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class SerializeUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Serialize an object in to byte array via streams."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param object Obect to be serialized"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @return serialized object in the form of byte array"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static byte[] serialize(Object object) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ObjectOutputStream oos \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ByteArrayOutputStream baos \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        byte[] bytes \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            baos \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            oos \u003d new ObjectOutputStream(baos);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            oos.writeObject(object);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            bytes \u003d baos.toByteArray();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            System.err.println(\"Failed to serialize \" + e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return bytes;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Deserialize byte array into an object via streams."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param bytes An byte array to be deserialized"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @return Object of deserialized byte array"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @throws IOException If stream fails to read"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @throws ClassNotFoundException If class not found"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static Object deserialize(byte[] bytes) throws IOException, ClassNotFoundException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ByteArrayInputStream bais \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ObjectInputStream ois \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            bais \u003d new ByteArrayInputStream(bytes);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ois \u003d new ObjectInputStream(bais);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            System.err.println(\"Failed to deserialize \" + e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return ois.readObject();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 57
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" spacing\u003d\"4.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "   \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "      \u003cInsets bottom\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "   \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 19
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"451.0\" prefWidth\u003d\"640.0\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"410.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"25.0\" prefWidth\u003d\"640.0\" AnchorPane.bottomAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"427.0\" prefWidth\u003d\"640.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"423.0\" prefWidth\u003d\"640.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 17
    }
  },
  {
    "path": "src/test/java/duke/command/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeCommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeStorageException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private String path \u003d java.nio.file.Paths.get(\"src\", \"test\").toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void test1() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Storage storage \u003d new Storage(path);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Command command \u003d new DeadlineCommand(\"deadline homework 3am\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String message \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            command.execute(taskList, storage, ui);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (DukeStorageException | DukeCommandException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(\"\\u2639 OOPS!!! Wrong \u0027deadline\u0027 command format!\", message);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void test2() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Storage storage \u003d new Storage(path);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Command command \u003d new DeadlineCommand(\"deadline\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String message \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            command.execute(taskList, storage, ui);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (DukeStorageException | DukeCommandException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(\"\\u2639 OOPS!!! Wrong \u0027deadline\u0027 command format!\", message);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void test3() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Storage storage \u003d new Storage(path);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Command command \u003d new DeadlineCommand(\"deadline homework /at 12/12/2020 1234\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String message \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            command.execute(taskList, storage, ui);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (DukeStorageException | DukeCommandException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(\"\\u2639 OOPS!!! Wrong \u0027deadline\u0027 command format!\", message);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void test4() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Storage storage \u003d new Storage(path);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Command command \u003d new DeadlineCommand(\"deadline homework /by 12/12/2020 1234\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String message \u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            command.execute(taskList, storage, ui);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (DukeStorageException | DukeCommandException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(null, message);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 88
    }
  },
  {
    "path": "src/test/java/duke/command/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeCommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeStorageException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private String path \u003d java.nio.file.Paths.get(\"src\", \"test\").toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void test1() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Storage storage \u003d new Storage(path);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Command command \u003d new EventCommand(\"event\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String message \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            command.execute(taskList, storage, ui);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (DukeStorageException | DukeCommandException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(\"\\u2639 OOPS!!! Wrong \u0027event\u0027 command format!\", message);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void test2() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Storage storage \u003d new Storage(path);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Command command \u003d new EventCommand(\"event party\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String message \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            command.execute(taskList, storage, ui);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (DukeStorageException | DukeCommandException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(\"\\u2639 OOPS!!! Wrong \u0027event\u0027 command format!\", message);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void test3() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Storage storage \u003d new Storage(path);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Command command \u003d new EventCommand(\"event party /by 12/12/2020 1234\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String message \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            command.execute(taskList, storage, ui);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (DukeStorageException | DukeCommandException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(\"\\u2639 OOPS!!! Wrong \u0027event\u0027 command format!\", message);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void test4() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Storage storage \u003d new Storage(path);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Command command \u003d new EventCommand(\"event party /at 12/12/2020 1234\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String message \u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            command.execute(taskList, storage, ui);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (DukeStorageException | DukeCommandException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(null, message);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 88
    }
  },
  {
    "path": "src/test/java/duke/command/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeCommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeStorageException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private String path \u003d java.nio.file.Paths.get(\"src\", \"test\").toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void test1() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Storage storage \u003d new Storage(path);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Command command \u003d new TodoCommand(\"todo\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String message \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            command.execute(taskList, storage, ui);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (DukeStorageException | DukeCommandException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(\"\\u2639 OOPS!!! Wrong \u0027todo\u0027 command format!\", message);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void test2() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Storage storage \u003d new Storage(path);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Command command \u003d new TodoCommand(\"todo homework\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String message \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            command.execute(taskList, storage, ui);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (DukeStorageException | DukeCommandException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(null, message);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 52
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "todo aaa"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "deadline bbb /by 12/12/2020 1000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "deadline bbb /by 13/12/2020 1200"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "event ccc /at 12/12/2020 1600"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "event ddd /at 13/13/2020 1700"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "event eee /at 13/12/2020 2359"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "date 12/12/2020"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 13
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\exception\\*.java ..\\src\\main\\java\\duke\\util\\*.java ..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\duke\\command\\*.java ..\\src\\main\\java\\duke\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "java -classpath ..\\bin\\duke\\ Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 4,
      "-": 19
    }
  }
]
