[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "test {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 20,
      "-": 44
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Class representing the Duke chatbot."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private final TaskList tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Initialises a new {@code Duke} chatbot."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            tasks.loadFromStorage(storage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Function that takes in the user\u0027s input, processes and then executes it. It then sends a message back"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * to the user, based on the command given."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @return Message after the command has been processed and executed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        assert input !\u003d null : \"Input is null\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return ui.getNextMessage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 50,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Main class to launch the {@link Duke} bot."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 13
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 32
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.parser.DateTimeParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.util.DateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Class representing an add task command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private final CommandType taskType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private final String[] taskContent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a new {@code AddCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param taskType Type of the task to be created."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param taskContent Contents of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public AddCommand(CommandType taskType, String[] taskContent) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.taskContent \u003d taskContent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Executes the command and creates the respective tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param tasks {@link TaskList} containing list of tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param ui {@link Ui} object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param storage {@link Storage} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @throws DukeException If the tasks fails to create."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        assertArgumentsValid(tasks, ui, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        case TODO: {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            task \u003d new ToDo(taskContent[0]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        case DEADLINE: {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            DateTime dateTime \u003d DateTimeParser.parse(taskContent[1].trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            task \u003d new Deadline(taskContent[0].trim(), dateTime);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        case EVENT: {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            DateTime dateTime \u003d DateTimeParser.parse(taskContent[1].trim());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            task \u003d new Event(taskContent[0].trim(), dateTime);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            throw new DukeException(\"Failed to create event.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        storage.saveData(tasks);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        StringBuilder message \u003d new StringBuilder(\"Alright! I\u0027ve added this task:\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        message.append(task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        message.append(\"\\nNow you have \").append(tasks.size()).append(\" task(s) in your list.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        ui.botOutput(message);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 70
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Wrapper class for all types of Command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param ui Ui object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @throws DukeException If the is a problem with the command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Method to assert that the arguments supplied to a command execution are valid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param ui Ui object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void assertArgumentsValid(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        assert tasks !\u003d null : \"tasks is null\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        assert ui !\u003d null : \"ui is null\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        assert storage !\u003d null : \"storage is null\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Checks whether the command is an exit command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @return Whether the command is an exit command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 41
    }
  },
  {
    "path": "src/main/java/duke/command/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Enum class to encapsulate the different types of commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    TODO, DEADLINE, EVENT, LIST, DONE, DELETE, FIND, BYE, INVALID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khoodehui": 9
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Class representing a delete task command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private final int taskIdx;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a new {@code DeleteCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param taskIdx Index of the task to be deleted."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public DeleteCommand(int taskIdx) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.taskIdx \u003d taskIdx;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Deletes the task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param tasks {@link TaskList} containing list of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param ui {@link Ui} object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param storage {@link Storage} object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @throws DukeException If the TaskList is empty, or if the provided index is not associated with a task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        assertArgumentsValid(tasks, ui, storage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            throw new DukeException(\"Your list is empty!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (taskIdx \u003e tasks.size() || taskIdx \u003c\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            throw new DukeException(\"No task with this ID!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        Task task \u003d tasks.getTask(taskIdx);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        tasks.deleteTask(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        storage.saveData(tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        ui.botOutput(\"Noted. I\u0027ve removed this task:\\n\" + task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 48
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Class representing a command to mark a task as done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private final int taskIdx;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a new {@code DoneCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param taskIdx Index of the task to mark as done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public DoneCommand(int taskIdx) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.taskIdx \u003d taskIdx;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Marks a task as done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param tasks {@link TaskList} containing list of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param ui {@link Ui} object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param storage {@link Storage} object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @throws DukeException If the TaskList is empty, of it the provided index is not associated with a task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        assertArgumentsValid(tasks, ui, storage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            throw new DukeException(\"Your list is empty!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (taskIdx \u003e tasks.size() || taskIdx \u003c\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            throw new DukeException(\"No task with this ID!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        Task task \u003d tasks.getTask(taskIdx);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        tasks.markAsDone(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        storage.saveData(tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        ui.botOutput(\"Nice! I\u0027ve marked this task as done:\\n\" + task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 48
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Class representing an exit command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Initiates the termination of the bot."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param tasks {@link TaskList} containing list of tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param ui {@link Ui} object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param storage {@link Storage} object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        assertArgumentsValid(tasks, ui, storage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        ui.sayBye();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 27
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Class representing a find command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a new {@code FindCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param keyword Keyword for the search."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Searches and lists tasks with description containing the keyword."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param tasks {@link TaskList} containing list of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param ui {@link Ui} object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param storage {@link Storage} object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        assertArgumentsValid(tasks, ui, storage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        ui.botOutput(tasks.listTasksWithKeyword(keyword));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 33
    }
  },
  {
    "path": "src/main/java/duke/command/InvalidCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Class representing an invalid command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Throws an exception that is to be caught by the bot."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param ui Ui object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @throws DukeException To signify an invalid command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        throw new DukeException(\"Sorry I don\u0027t know what this means!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 23
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Class representing a command to list out the current tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Lists out the current tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param tasks {@link TaskList} containing list of tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param ui {@link Ui} object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param storage {@link Storage} object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        assertArgumentsValid(tasks, ui, storage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        ui.botOutput(tasks.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 22
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Exception that is thrown by the bot when encountered with invalid actions from the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a new {@code DukeException} instance."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param message Error message to be shown to the user"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 15
    }
  },
  {
    "path": "src/main/java/duke/parser/DateTimeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.util.DateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Class that parses datetime input from the user and returns a {@link DateTime}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private static final String[] ACCEPTED_DATE_FORMATS \u003d {\"yyyy/M/d\", \"d/M/yyyy\", \"yyyy/MMM/d\", \"d/MMM/yyyy\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        \"yyyy-M-d\", \"d-M-yyyy\", \"yyyy-MMM-d\", \"d-MMM-yyyy\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private static final String[] ACCEPTED_TIME_FORMATS \u003d {\"HH[:]mm\", \"h:mma\", \"h.mma\", \"ha\"};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Parses datetime input from the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param input Datetime input from the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @return Parsed {@link DateTime}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @throws DukeException If the input datetime is of an invalid format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static DateTime parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String[] dateTimeArgs \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        assert dateTimeArgs.length \u003e 0 : \"Datetime input cannot be empty\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        LocalDate date \u003d parseDate(dateTimeArgs[0]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (dateTimeArgs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return new DateTime(input, date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        LocalTime time \u003d parseTime(dateTimeArgs[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return new DateTime(input, date, time);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private static LocalDate parseDate(String dateInput) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        for (String format : ACCEPTED_DATE_FORMATS) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(format);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                return LocalDate.parse(dateInput, dateFormatter);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                //Test other formats"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        //If no matching format can be found"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        throw new DukeException(\"Invalid date or time format provided!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private static LocalTime parseTime(String timeInput) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        for (String format : ACCEPTED_TIME_FORMATS) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(format);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                return LocalTime.parse(timeInput, timeFormatter);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                //Test other formats"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        //If no matching format can be found"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        throw new DukeException(\"Invalid date or time format provided!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 65
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.command.InvalidCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Class that parses user\u0027s input and checks for argument correctness before"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * converting the input into executable commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Parses user\u0027s input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param inputCommand Input command from the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @return An executable command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @throws DukeException If command provided is invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static Command parse(String inputCommand) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        assert inputCommand !\u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String[] inputArr \u003d inputCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String commandArg \u003d inputArr.length \u003d\u003d 2 ? inputArr[1] : null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        CommandType op;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            op \u003d CommandType.valueOf(inputArr[0].toUpperCase()); // type of operation"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            op \u003d CommandType.INVALID;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        switch (op) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return parseAddCommand(op, commandArg);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return parseDoneCommand(commandArg);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return parseDeleteCommand(commandArg);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return parseFindCommand(commandArg);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        case INVALID:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return new InvalidCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private static AddCommand parseAddCommand(CommandType taskType, String taskDetail) throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (taskDetail \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            throw new DukeException(\"You have to tell me what\u0027s your task!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        switch(taskType) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            String[] todoContents \u003d {taskDetail};"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return new AddCommand(taskType, todoContents);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            String[] deadlineContents \u003d taskDetail.split(\" /by \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            if (deadlineContents.length \u003c 2) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                throw new DukeException(\"You need to tell me when this task is due!\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return new AddCommand(taskType, deadlineContents);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            String[] eventContents \u003d taskDetail.split( \" /at \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            if (eventContents.length \u003c 2) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                throw new DukeException(\"You need to tell me when this event is happening!\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return new AddCommand(taskType, eventContents);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            throw new DukeException(\"Unknown task type.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private static DoneCommand parseDoneCommand(String commandArg) throws DukeException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        int taskIdx;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            taskIdx \u003d Integer.parseInt(commandArg.trim());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            throw new DukeException(\"Sorry I\u0027m not sure what task do you want me to mark as done!\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return new DoneCommand(taskIdx);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private static DeleteCommand parseDeleteCommand(String commandArg) throws DukeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        int taskIdx;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            taskIdx \u003d Integer.parseInt(commandArg.trim());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            throw new DukeException(\"Sorry I\u0027m not sure what task do you want me to delete!\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return new DeleteCommand(taskIdx);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private static FindCommand parseFindCommand(String commandArg) throws DukeException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (commandArg \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            throw new DukeException(\"You have to tell me what to search for!\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return new FindCommand(commandArg);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 112
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.parser.DateTimeParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Utility class to read and write data from and to the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private final File dataDirectory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private final File dataFile;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private final String dataFilePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Initialises a new {@code Storage} object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String dataDirectoryPath \u003d Paths.get(\"data\").toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        dataDirectory \u003d new File(dataDirectoryPath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        dataFilePath \u003d Paths.get(\"data\", \"duke.txt\").toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        dataFile \u003d new File(dataFilePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Populates a {@link TaskList} with data saved in the hard disk. If the data directory or file does not exist,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * it will be created."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param taskList List to be populated."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @throws DukeException If the data fails to load."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void loadData(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        dataDirectory.mkdirs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        boolean toLoadFromDataFile;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            toLoadFromDataFile \u003d !dataFile.createNewFile();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            toLoadFromDataFile \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (toLoadFromDataFile) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                BufferedReader br \u003d new BufferedReader(new FileReader(dataFilePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                String line;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    String[] taskData \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    String taskType \u003d taskData[0];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    Task task;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    switch (taskType) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    case \"T\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        task \u003d new ToDo(Boolean.parseBoolean(taskData[1]), taskData[2]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    case \"D\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        task \u003d new Deadline(Boolean.parseBoolean(taskData[1]), taskData[2],"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                            DateTimeParser.parse(taskData[3]));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    case \"E\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        task \u003d new Event(Boolean.parseBoolean(taskData[1]), taskData[2],"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                            DateTimeParser.parse(taskData[3]));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        throw new DukeException(\"Invalid argument detected in data file\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    taskList.addTask(task);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            } catch (IOException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Saves the contents of a {@link TaskList} to the data saved in the hard disk."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param tasks List to be saved."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @throws DukeException If the data fails to save."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void saveData(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            FileWriter writer \u003d new FileWriter(dataFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            writer.write(tasks.serializeList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            throw new DukeException(\"Failed to write to data file.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 100
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.util.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Class representing a deadline."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a brand new {@code Deadline}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param description Description of the deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param by Time that the deadline is due by."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public Deadline(String description, DateTime by) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.dateTime \u003d by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.taskType \u003d \"D\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a {@code Deadline} from existing data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param isDone Deadline completion status."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param description Description of the deadline."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param by Time that the deadline is due by."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public Deadline(boolean isDone, String description, DateTime by) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this(description, by);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            this.markDone();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return String.format(\"[D]%s (by: %s)\", super.toString(), getDateTime());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 39
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.util.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Class representing an event."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a brand new {@code Event}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param description Description of the event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param at Time that the event is happening at."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public Event(String description, DateTime at) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.dateTime \u003d at;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.taskType \u003d \"E\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Create an {@code Event} from existing data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param isDone Event completion status."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param description Description of the event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param at Time that the event is happening at."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public Event(boolean isDone, String description, DateTime at) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this(description, at);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            this.markDone();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return String.format(\"[E]%s (at: %s)\", super.toString(), getDateTime());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 39
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.util.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Wrapper class for all types of tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private static final String TICK_SYMBOL \u003d \"\\u2713\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private static final String CROSS_SYMBOL \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    protected String taskType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    protected DateTime dateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a brand new {@code Task}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return (isDone ? TICK_SYMBOL : CROSS_SYMBOL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public DateTime getDateTime() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return this.dateTime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), getDescription());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 56
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Class the holds the tasks provided by the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private final ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a brand new {@code TaskList}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a {@code TaskList} from existing data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param storage {@link Storage} object that will load the data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @throws DukeException If the data fails to load."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void loadFromStorage(Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        storage.loadData(this);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void deleteTask(Task task) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        tasks.remove(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void markAsDone(Task task) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        task.markDone();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public Task getTask(int taskIdx) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return tasks.get(taskIdx - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Finds and list tasks with description containing the keyword."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param keyword Keyword for the search."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @return Tasks containing the keyword."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String listTasksWithKeyword(String keyword) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        assert keyword !\u003d null : \"Search keyword is null\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        int taskIdx \u003d 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            if (task.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                output.append(String.format(\"%d. %s\\n\", taskIdx, task));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            taskIdx++;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        output.deleteCharAt(output.length() - 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Serializes the {@code TaskList} into a format that can be stored."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @return Serialized data of the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String serializeList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        StringBuilder data \u003d new StringBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            String taskType \u003d task.getTaskType();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            String serializedTask;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            if (taskType.equals(\"T\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                serializedTask \u003d String.format(\"%s|%s|%s\\n\", task.getTaskType(), task.isDone(), task.getDescription());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                serializedTask \u003d String.format(\"%s|%s|%s|%s\\n\", task.getTaskType(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        task.isDone(), task.getDescription(), task.getDateTime().getOriginalInput());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            data.append(serializedTask);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return data.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return \"No tasks added yet!\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            output.append(String.format(\"%d. %s\\n\", i + 1, tasks.get(i)));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        output.deleteCharAt(output.length() - 1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 113
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Class representing a todo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a brand new {@code ToDo}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param description Description of the todo."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.taskType \u003d \"T\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a {@code ToDo} from existing data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param isDone Todo completion status."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param description Description of the todo."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public ToDo(boolean isDone, String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            this.markDone();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return String.format(\"[T]%s\", super.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 32
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 61
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Controller for {@code MainWindow}. Provides the layout for the other controls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                DialogBox.getDukeDialog(Ui.getGreetingMessage(), dukeImage)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (response.equals(\"Come back soon!! I\u0027m always bored...\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            PauseTransition delay \u003d new PauseTransition(Duration.millis(750));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            delay.setOnFinished((event) -\u003e System.exit(0));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            delay.play();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 64
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Utility class that handles interactions with the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private String nextMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "  "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Show a greeting message to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static String getGreetingMessage() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String logo \u003d \",--.                           ,--. \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                + \"|  |-.  ,---. ,--.--. ,---.  ,-|  | \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                + \"| .-. \u0027| .-. ||  .--\u0027| .-. :\u0027 .-. | \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                + \"| `-\u0027 |\u0027 \u0027-\u0027 \u0027|  |   \\\\   --.\\\\ `-\u0027 | \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                + \" `---\u0027  `---\u0027 `--\u0027    `----\u0027 `---\u0027  \\n\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return \"Hi I\u0027m\\n\" + logo + \"Please give me something to do.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Shows a farewell message to the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void sayBye() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        botOutput(\"Come back soon!! I\u0027m always bored...\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Shows an error message from a {@link DukeException} to the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param e Exception containing the error message."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void showError(DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        botOutput(e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void botOutput(String message) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.nextMessage \u003d message;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void botOutput(StringBuilder message) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        botOutput(message.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String getNextMessage() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return this.nextMessage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 49
    }
  },
  {
    "path": "src/main/java/duke/util/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Class to hold datetime information."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private String originalInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a new {@code DateTime} that only contains a date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param originalInput Original datetime input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param date Parsed date."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public DateTime(String originalInput, LocalDate date) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.originalInput \u003d originalInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a new {@code DateTime} that contains both a date and time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param originalInput Original datetime input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param date Parsed date."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param time Parsed time."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public DateTime(String originalInput, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this(originalInput, date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String getOriginalInput() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return originalInput;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String output \u003d date.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (time !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            output +\u003d \", \" + time.format(DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 51
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 19
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.command.InvalidCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void parseDone_noArguments_exceptionThrown() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        DukeException e \u003d assertThrows(DukeException.class, () -\u003e Parser.parse(\"done\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String expectedMessage \u003d \"Invalid arguments provided!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        assertEquals(e.getMessage(), expectedMessage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void parseDelete_noArguments_exceptionThrown() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        DukeException e \u003d assertThrows(DukeException.class, () -\u003e Parser.parse(\"delete\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String expectedMessage \u003d \"Invalid arguments provided!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        assertEquals(e.getMessage(), expectedMessage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void parseBye_validCommand_isExit() throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        Command c \u003d Parser.parse(\"bye\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        assertTrue(c.isExit());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void parseUnknownCommand_invalidCommand() throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        Command c \u003d Parser.parse(\"nvieovne\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        assertTrue(c instanceof InvalidCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 40
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 7
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 2,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 1,
      "-": 36
    }
  }
]
