[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "# Hisoka User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "![GitHub Logo](./docs/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Hisoka is a task manager that allows you to add, delete, list, find and update tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Tasks are categorised into 3 different types: todos, deadlines and events."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "### Commands"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "#### 1. `todo DESCRIPTION` - Add todo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Add a todo to the task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "`todo homework`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003cpre\u003e\u003ccode\u003eGot it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    [T][✘] homework"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Now you have 1 task in the list!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c/code\u003e\u003c/pre\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "#### 2. `deadline DESCRIPTION /by YYYY-MM-DD hh:mm` - Add deadline"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Add a deadline to the task list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "hh:mm field is optional."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "`deadline homework /by 2020-09-14 20:00`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003cpre\u003e\u003ccode\u003eGot it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    [D][✘] homework (by: Sep 14 2020 08:00 PM)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Now you have 2 tasks in the list!"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c/code\u003e\u003c/pre\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "#### 3. `event DESCRIPTION /at YYYY-MM-DD hh:mm-hh:mm` - Add event"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Add an event to the task list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "hh:mm fields are optional."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": "`event meeting /at 2020-09-14 20:00-21:00`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003cpre\u003e\u003ccode\u003eGot it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    [E][✘] meeting (at: Sep 14 2020 08:00 PM-09:00 PM)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Now you have 3 tasks in the list!"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c/code\u003e\u003c/pre\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": "#### 4. `list YYYY-MM-DD` - List tasks"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": "List tasks on a specified date, if a date was specified by the user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Otherwise, list all tasks in the task list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": "YYYY-MM-DD field is optional."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003cpre\u003e\u003ccode\u003eHere are the tasks in your list:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    1.[T][✘] homework"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    2.[D][✘] homework (by: Sep 14 2020 08:00 PM)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    3.[E][✘] meeting (at: Sep 14 2020 08:00 PM-09:00 PM)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c/code\u003e\u003c/pre\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timjkong"
        },
        "content": "`list 2020-09-14`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003cpre\u003e\u003ccode\u003eHere are your tasks on Sep 14 2020:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    1.[D][✘] homework (by: Sep 14 2020 08:00 PM)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    2.[E][✘] meeting (at: Sep 14 2020 08:00 PM-09:00 PM)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c/code\u003e\u003c/pre\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timjkong"
        },
        "content": "#### 5. `delete TASKINDEX` - Delete task"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Delete task at specified index in the task list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "timjkong"
        },
        "content": "`delete 2`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003cpre\u003e\u003ccode\u003eNoted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    [D][✘] homework (by: Sep 14 2020 08:00 PM)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c/code\u003e\u003c/pre\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "timjkong"
        },
        "content": "#### 6. `done TASKINDEX` - Set task to done"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Set task at specified index in the task list to done."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "timjkong"
        },
        "content": "`done 2`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003cpre\u003e\u003ccode\u003eNice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    [E][✓] meeting (at: Sep 14 2020 08:00 PM-09:00 PM)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c/code\u003e\u003c/pre\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "timjkong"
        },
        "content": "#### 7. `update desc TASKINDEX DESCRIPTION` - Update task description"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Update description of task at specified index."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "timjkong"
        },
        "content": "`update desc 1 math homework`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003cpre\u003e\u003ccode\u003eGot it. I\u0027ve updated task 1 to:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    [T][✘] math homework"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c/code\u003e\u003c/pre\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "timjkong"
        },
        "content": "#### 8. `update date TASKINDEX YYYY-MM-DD` - Update task date"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Update date of task at specified index."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "timjkong"
        },
        "content": "`update date 2 2020-09-15`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003cpre\u003e\u003ccode\u003eGot it. I\u0027ve updated task 1 to:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    [E][✓] meeting (at: Sep 15 2020 08:00 PM-09:00 PM)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c/code\u003e\u003c/pre\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "timjkong"
        },
        "content": "#### 9. `update time TASKINDEX hh:mm-hh:mm` - Update task time"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Update time of task at specified index."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "timjkong"
        },
        "content": "2nd hh:mm field is optional."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "timjkong"
        },
        "content": "`update time 2 22:00-23:00`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003cpre\u003e\u003ccode\u003eGot it. I\u0027ve updated task 1 to:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    [E][✓] meeting (at: Sep 15 2020 10:00 PM-11:00 PM)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c/code\u003e\u003c/pre\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "timjkong"
        },
        "content": "#### 10. `find KEYWORD` - List tasks containing specified keyword"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "timjkong"
        },
        "content": "List tasks containing specified keyword. (non case sensitive matching)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "timjkong"
        },
        "content": "`find homework`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003cpre\u003e\u003ccode\u003eHere are your tasks containing homework:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    [T][✘] math homework"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c/code\u003e\u003c/pre\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "timjkong"
        },
        "content": "#### 11. `bye` - Close application"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Send goodbye message and close application."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "timjkong"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "timjkong"
        },
        "content": "`Goodbye! Hope to see you again soon :-)`"
      }
    ],
    "authorContributionMap": {
      "timjkong": 192
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 16,
      "-": 45
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "T ~/~ 0 ~/~ Homework"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": "D ~/~ 0 ~/~ CS2103 Project ~/~ 2020-09-18 ~/~ 23:59"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "E ~/~ 0 ~/~ Birthday party ~/~ 2020-12-30 ~/~ 20:00"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "D ~/~ 0 ~/~ Electricity bills ~/~ 2020-09-30"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "E ~/~ 1 ~/~ New Years\u0027 Dinner ~/~ 2021-12-31 ~/~ 20:00 ~/~ 22:00"
      }
    ],
    "authorContributionMap": {
      "timjkong": 5
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "# Hisoka User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "![GitHub Logo](Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Hisoka is a task manager that allows you to add, delete, list, find and update tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Tasks are categorised into 3 different types: todos, deadlines and events."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "### Commands"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "#### 1. `todo DESCRIPTION` - Add todo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Add a todo to the task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "`todo homework`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003cpre\u003e\u003ccode\u003eGot it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    [T][✘] homework"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Now you have 1 task in the list!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c/code\u003e\u003c/pre\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "#### 2. `deadline DESCRIPTION /by YYYY-MM-DD hh:mm` - Add deadline"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Add a deadline to the task list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "hh:mm field is optional."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "`deadline homework /by 2020-09-14 20:00`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003cpre\u003e\u003ccode\u003eGot it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    [D][✘] homework (by: Sep 14 2020 08:00 PM)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Now you have 2 tasks in the list!"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c/code\u003e\u003c/pre\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "#### 3. `event DESCRIPTION /at YYYY-MM-DD hh:mm-hh:mm` - Add event"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Add an event to the task list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "hh:mm fields are optional."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": "`event meeting /at 2020-09-14 20:00-21:00`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003cpre\u003e\u003ccode\u003eGot it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    [E][✘] meeting (at: Sep 14 2020 08:00 PM-09:00 PM)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Now you have 3 tasks in the list!"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c/code\u003e\u003c/pre\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": "#### 4. `list YYYY-MM-DD` - List tasks"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": "List tasks on a specified date, if a date was specified by the user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Otherwise, list all tasks in the task list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": "YYYY-MM-DD field is optional."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003cpre\u003e\u003ccode\u003eHere are the tasks in your list:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    1.[T][✘] homework"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    2.[D][✘] homework (by: Sep 14 2020 08:00 PM)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    3.[E][✘] meeting (at: Sep 14 2020 08:00 PM-09:00 PM)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c/code\u003e\u003c/pre\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timjkong"
        },
        "content": "`list 2020-09-14`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003cpre\u003e\u003ccode\u003eHere are your tasks on Sep 14 2020:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    1.[D][✘] homework (by: Sep 14 2020 08:00 PM)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    2.[E][✘] meeting (at: Sep 14 2020 08:00 PM-09:00 PM)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c/code\u003e\u003c/pre\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timjkong"
        },
        "content": "#### 5. `delete TASKINDEX` - Delete task"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Delete task at specified index in the task list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "timjkong"
        },
        "content": "`delete 2`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003cpre\u003e\u003ccode\u003eNoted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    [D][✘] homework (by: Sep 14 2020 08:00 PM)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c/code\u003e\u003c/pre\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "timjkong"
        },
        "content": "#### 6. `done TASKINDEX` - Set task to done"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Set task at specified index in the task list to done."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "timjkong"
        },
        "content": "`done 2`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003cpre\u003e\u003ccode\u003eNice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    [E][✓] meeting (at: Sep 14 2020 08:00 PM-09:00 PM)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c/code\u003e\u003c/pre\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "timjkong"
        },
        "content": "#### 7. `update desc TASKINDEX DESCRIPTION` - Update task description"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Update description of task at specified index."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "timjkong"
        },
        "content": "`update desc 1 math homework`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003cpre\u003e\u003ccode\u003eGot it. I\u0027ve updated task 1 to:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    [T][✘] math homework"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c/code\u003e\u003c/pre\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "timjkong"
        },
        "content": "#### 8. `update date TASKINDEX YYYY-MM-DD` - Update task date"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Update date of task at specified index."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "timjkong"
        },
        "content": "`update date 2 2020-09-15`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003cpre\u003e\u003ccode\u003eGot it. I\u0027ve updated task 1 to:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    [E][✓] meeting (at: Sep 15 2020 08:00 PM-09:00 PM)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c/code\u003e\u003c/pre\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "timjkong"
        },
        "content": "#### 9. `update time TASKINDEX hh:mm-hh:mm` - Update task time"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Update time of task at specified index."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "timjkong"
        },
        "content": "2nd hh:mm field is optional."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "timjkong"
        },
        "content": "`update time 2 22:00-23:00`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003cpre\u003e\u003ccode\u003eGot it. I\u0027ve updated task 1 to:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    [E][✓] meeting (at: Sep 15 2020 10:00 PM-11:00 PM)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c/code\u003e\u003c/pre\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "timjkong"
        },
        "content": "#### 10. `find KEYWORD` - List tasks containing specified keyword"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "timjkong"
        },
        "content": "List tasks containing specified keyword. (non case sensitive matching)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "timjkong"
        },
        "content": "`find homework`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003cpre\u003e\u003ccode\u003eHere are your tasks containing homework:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    [T][✘] math homework"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c/code\u003e\u003c/pre\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "timjkong"
        },
        "content": "#### 11. `bye` - Close application"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Send goodbye message and close application."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "timjkong"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "timjkong"
        },
        "content": "`Goodbye! Hope to see you again soon :-)`"
      }
    ],
    "authorContributionMap": {
      "timjkong": 177,
      "-": 15
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/** The main class of the app. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private static final String PATH \u003d \"./data/duke.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /** Constructs a Duke object associated with a file path. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            this.storage \u003d new Storage(PATH);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            this.taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            ui.saveErrorMessage(\"Error\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            ui.saveErrorMessage(\"Error loading disk\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Parses user input and executes the command returned by the parser."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param input The input from the user as a String."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void handleUserInput(String input) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            Command command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            command.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            ui.saveErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            ui.saveErrorMessage(\"Sorry, something went wrong\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public String getResponse() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return ui.getMessage();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public boolean isError() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        boolean isError \u003d ui.getIsError();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        ui.resetIsError();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return isError;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 56,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.gui.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/** A launcher class to workaround classpath issues. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 12
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/** This class represents the command of adding a task. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Constructs a AddCommand object with a task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param task The Task the user wants to add."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Adds the task to taskList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Prints the task that has just been added."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Adds the ask to storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param taskList The TaskList to add the task to."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param ui The Ui that saves messages to be sent to the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param storage The Storage to add the task to."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        taskList.add(this.task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        ui.saveAddMessage(this.task, taskList.size());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        storage.add(this.task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 38
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/** This class represents the command to terminate the program. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /** Exits the program. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        ui.saveByeMessage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 15
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/** This abstract class is a generic class which all other command classes inherit from. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Performs the necessary actions associated with the command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param taskList The TaskList object to make changes to or to get tasks from."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param ui The Ui that saves messages to be sent to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param storage The Storage object to make changes to or to get tasks from."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 21
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/** This class represents the command of deleting a task. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private int i;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Constructs a DeleteCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param i The index of the Task to be deleted in the TaskList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public DeleteCommand(int i) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.i \u003d i;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Deletes the task at index i from the TaskList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Prints the deleted task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Refreshes the storage to reflect the changes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param taskList The TaskList to delete the task from."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param ui The Ui that saves messages to be sent to the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param storage The Storage to delete the task from."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws IOException, DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (i \u003e taskList.size()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new DukeException(\"You only have \" + taskList.size() + \" tasks!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        ui.saveDeleteMessage(taskList.delete(i));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        storage.refresh(taskList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 40
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * This class represents the command of marking a task as done"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private int i;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Constructs a DoneCommand object associated with an int i"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param i The index of the Task to be marked as done in the TaskList"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public DoneCommand(int i) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.i \u003d i;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Prints the mark as done message to the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Refreshes the storage to reflect the changes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param taskList The TaskList to get the task to be marked as done from."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param ui The Ui that saves messages to be sent to the user.."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param storage The Storage to save the changes."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws IOException, DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (i \u003e taskList.size()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new DukeException(\"You only have \" + taskList.size() + \" tasks!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        ui.saveDoneMessage(taskList.setDone(i));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        storage.refresh(taskList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 41
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/** This class represents the find command. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /** The keyword used to filter the TaskList. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Saves the find message to the Ui."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param taskList The TaskList from which tasks will be filtered from."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param ui The Ui that saves messages to be sent to the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param storage The Storage object to make changes to."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        ui.saveFindMessage(taskList, this.keyword);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 28
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/** This class represents the command of listing the users\u0027 tasks. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Constructs a ListCommand object without a date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.date \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Constructs a ListCommand object associated with a date."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param date The date filter of the ListCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public ListCommand(LocalDate date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Saves the list message to the Ui."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param taskList The TaskList to get the tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param ui The Ui that prints the list to the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param storage The Storage associated with the Command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        ui.saveListMessage(taskList, date);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 39
    }
  },
  {
    "path": "src/main/java/duke/command/UpdateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/** This class represents a user command to update a task. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public UpdateCommand(int taskIndex, String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public UpdateCommand(int taskIndex, LocalDate date) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public UpdateCommand(int taskIndex, LocalTime startTime) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public UpdateCommand(int taskIndex, LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Updates the task at index taskIndex in the given taskList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param taskList The TaskList object to make changes to or to get tasks from."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param ui The Ui that saves messages to be sent to the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param storage The Storage object to make changes to or to get tasks from."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @throws DukeException if user tries to update date or time of a ToDo object or endTime of a Deadline object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @throws IOException if error occurs while refreshing the storage"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (taskIndex \u003e taskList.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new DukeException(\"You only have \" + taskList.size() + \" tasks!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Task taskToUpdate \u003d taskList.get(this.taskIndex - 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (this.date \u003d\u003d null \u0026\u0026 this.startTime \u003d\u003d null \u0026\u0026 this.description !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            taskToUpdate.updateDescription(this.description);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } else if (this.startTime \u003d\u003d null \u0026\u0026 this.date !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            taskToUpdate.updateDate(this.date);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } else if (this.startTime !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            if (this.endTime !\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                taskToUpdate.updateTime(this.startTime, this.endTime);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                taskToUpdate.updateTime(this.startTime);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        ui.saveUpdateMessage(taskToUpdate, taskIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        storage.refresh(taskList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 71
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/** This class represents all exceptions that the user may encounter while using the app. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 8
    }
  },
  {
    "path": "src/main/java/duke/gui/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.gui.controllers.MainWindow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/** A GUI for Duke using FXML. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            stage.setTitle(\"Hisoka\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 33
    }
  },
  {
    "path": "src/main/java/duke/gui/controllers/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package duke.gui.controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static void fillErrorBackground(DialogBox db) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        BackgroundFill backFill \u003d new BackgroundFill("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                Color.web(\"#e8612c\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                new CornerRadii(20),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                new Insets(5, 5, 5, 5)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        );"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Background background \u003d new Background(backFill);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        db.setBackground(background);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img, boolean isError) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (!isError) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            BackgroundFill backFill \u003d new BackgroundFill("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    Color.web(\"#78c8d6\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    new CornerRadii(20),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    new Insets(5, 5, 5, 5)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            );"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            Background background \u003d new Background(backFill);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            db.setBackground(background);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            fillErrorBackground(db);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img, boolean isError) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (!isError) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            BackgroundFill backFill \u003d new BackgroundFill("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    Color.web(\"#72d493\"),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    new CornerRadii(20),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    new Insets(5, 5, 5, 5)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            );"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            Background background \u003d new Background(backFill);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            db.setBackground(background);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            fillErrorBackground(db);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 99
    }
  },
  {
    "path": "src/main/java/duke/gui/controllers/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package duke.gui.controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.jpg\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/duke.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private static String WELCOME_MESSAGE \u003d \"Hello! I am Duke, what can I do for you? :-)\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                DialogBox.getDukeDialog(WELCOME_MESSAGE, dukeImage, false)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        duke.handleUserInput(input);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        String response \u003d duke.getResponse();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        boolean isError \u003d duke.isError();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                DialogBox.getUserDialog(input, userImage, isError),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage, isError)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        );"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            new Thread(() -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    Thread.sleep(2000);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    System.exit(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            }).start();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 72
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/** This class deals with making sense of user commands. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param command The command input from the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @return The Command to be executed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @throws DukeException when the user input command cannot be parsed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static Command parse(String command) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } else if (command.startsWith(\"list\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return parseListCommand(command);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } else if (command.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            int findCommandBreak \u003d 5;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            String keyword \u003d command.substring(findCommandBreak);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return new FindCommand(keyword);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } else if (command.startsWith(\"done \")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            int doneCommandBreak \u003d 5;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            int i \u003d Integer.valueOf(command.substring(doneCommandBreak));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return new DoneCommand(i);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } else if (command.startsWith(\"delete \")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            int deleteCommandBreak \u003d 7;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            int i \u003d Integer.valueOf(command.substring(deleteCommandBreak));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return new DeleteCommand(i);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } else if (command.startsWith(\"todo \")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            int todoCommandBreak \u003d 5;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            ToDo todo \u003d new ToDo(command.substring(todoCommandBreak));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return new AddCommand(todo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } else if (command.startsWith(\"deadline \")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return parseDeadlineCommand(command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } else if (command.startsWith(\"event \")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return parseEventCommand(command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } else if (command.startsWith(\"update time\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return parseUpdateTimeCommand(command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } else if (command.startsWith(\"update date\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return parseUpdateDateCommand(command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } else if (command.startsWith(\"update desc\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return parseUpdateDescCommand(command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new DukeException(\"Sorry I don\u0027t understand!\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static UpdateCommand parseUpdateTimeCommand(String command) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        String[] commandSplits \u003d command.split(\" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        int taskToUpdate \u003d Integer.valueOf(commandSplits[2]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        String timeString \u003d commandSplits[3];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        String[] timeSplits \u003d timeString.split(\"-\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (timeSplits.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            LocalTime startTime \u003d LocalTime.parse(timeSplits[0]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            LocalTime endTime \u003d LocalTime.parse(timeSplits[1]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return new UpdateCommand(taskToUpdate, startTime, endTime);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            LocalTime time \u003d LocalTime.parse(timeString);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return new UpdateCommand(taskToUpdate, time);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static UpdateCommand parseUpdateDateCommand(String command) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        String[] splits \u003d command.split(\" \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        int taskToUpdate \u003d Integer.valueOf(splits[2]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        String dateString \u003d splits[3];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return new UpdateCommand(taskToUpdate, date);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static UpdateCommand parseUpdateDescCommand(String command) throws DukeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        int i \u003d 12;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        while(Character.isDigit(command.charAt(i))) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            sb.append(command.charAt(i));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        int taskToUpdate \u003d Integer.valueOf(sb.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (command.charAt(i) !\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new DukeException(\"Invalid input: please leave a space\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        String desc \u003d command.substring(i + 1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return new UpdateCommand(taskToUpdate, desc);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param command User command that starts with list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @return The ListCommand to be executed."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @throws DukeException The user input command cannot be parsed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static ListCommand parseListCommand(String command) throws DukeException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        String[] splits \u003d command.split(\" \");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } else if (splits[0].equals(\"list\") \u0026\u0026 splits.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(splits[1]);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return new ListCommand(date);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new DukeException(\"Sorry I don\u0027t understand\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param command User input command that starts with deadline."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @return The AddCommand to be executed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @throws DukeException The user input command cannot be parsed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static AddCommand parseDeadlineCommand(String command) throws DukeException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        int indexOfBy \u003d command.indexOf(\" /by \");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (indexOfBy \u003e\u003d 9) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            int indexOfTitle \u003d 9;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            int indexOfDeadline \u003d indexOfBy + 5;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            String desc \u003d command.substring(indexOfTitle, indexOfBy);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            String by \u003d command.substring(indexOfDeadline);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            String[] dateAndTime \u003d by.split(\" \");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            String dateString \u003d dateAndTime[0];"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            Deadline deadline \u003d null;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            if (dateAndTime.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                String timeString \u003d dateAndTime[1];"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                LocalTime time \u003d LocalTime.parse(timeString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                deadline \u003d new Deadline(desc, date, time);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                deadline \u003d new Deadline(desc, date);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return new AddCommand(deadline);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new DukeException(\"Invalid deadline input\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param command User input command that starts with event."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @return The AddCommand to be executed."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @throws DukeException The user input command cannot be parsed."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public static AddCommand parseEventCommand(String command) throws DukeException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        int indexOfAt \u003d command.indexOf(\" /at \");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            if (indexOfAt \u003c 9) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                throw new DukeException(\"Invalid event input\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            int indexOfTitle \u003d 6;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            int indexOfDate \u003d indexOfAt + 5;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            String desc \u003d command.substring(indexOfTitle, indexOfAt);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            String at \u003d command.substring(indexOfDate);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            String[] dateAndTime \u003d at.split(\" \");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            String dateString \u003d dateAndTime[0];"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            Event event \u003d null;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            if (dateAndTime.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                String timeRangeString \u003d dateAndTime[1];"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                String[] startAndEndTime \u003d timeRangeString.split(\"-\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                String startTimeString \u003d startAndEndTime[0];"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                LocalTime startTime \u003d LocalTime.parse(startTimeString);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                if (startAndEndTime.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    String endTimeString \u003d startAndEndTime[1];"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    event \u003d new Event(desc, date, startTime, LocalTime.parse(endTimeString));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    event \u003d new Event(desc, date, startTime);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                event \u003d new Event(desc, date);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return new AddCommand(event);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new DukeException(\"Invalid event input\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 189
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/** This class deals with loading tasks from the file and saving tasks in the file */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private BufferedWriter writer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Constructs a Storage object with a path as the given path and a BufferedWriter object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * that writes to the file located at the given path."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param path The path of the storage file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public Storage(String path) throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        File file \u003d new File(path);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (!Files.exists(Paths.get(\"./data\"))) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            new File(\"./data\").mkdir();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        file.createNewFile();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.writer \u003d new BufferedWriter(new FileWriter(path, true));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Loads the tasks from the file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @return A List containing the saved tasks."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @throws DukeException An exception while loading tasks from the file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public List\u003cTask\u003e load() throws IOException, DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new FileReader(path));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        String task \u003d br.readLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        while(task !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            if (!task.equals(\"\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                String delimiter \u003d \" ~/~ \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                String[] splits \u003d task.split(delimiter);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                Task t \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                String taskType \u003d splits[0];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                switch (taskType) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    String todo \u003d splits[2];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    t \u003d new ToDo(todo);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    String description \u003d splits[2];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    String dateString \u003d splits[3];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    LocalDate date \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    if (splits.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                        t \u003d new Deadline(description, date);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    } else if (splits.length \u003d\u003d 5) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                        String timeString \u003d splits[4];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                        LocalTime time \u003d LocalTime.parse(timeString);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                        t \u003d new Deadline(description, date, time);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    description \u003d splits[2];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    dateString \u003d splits[3];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    date \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    if (splits.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                        t \u003d new Event(description, date);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    } else if (splits.length \u003e\u003d 5) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                        String startTimeString \u003d splits[4];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                        LocalTime startTime \u003d LocalTime.parse(startTimeString);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                        if (splits.length \u003d\u003d 5) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                            t \u003d new Event(description, date, startTime);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                        } else if (splits.length \u003d\u003d 6) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                            String endTimeString \u003d splits[5];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                            LocalTime endTime \u003d LocalTime.parse(endTimeString);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                            t \u003d new Event(description, date, startTime, endTime);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    throw new DukeException(\"Please check the hard disk for any errors\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                String isDone \u003d splits[1];"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                if (isDone.equals(\"1\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    t.markAsDone();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                list.add(t);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            task \u003d br.readLine();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Saves task to the file."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param task The task to be saved."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void add(Task task) throws IOException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        writer.write(task.txtFileFormat());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        writer.newLine();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        writer.flush();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Refreshes the storage to reflect all tasks in the TaskList."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param taskList The TaskList that the storage will save tasks from."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void refresh(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.writer \u003d new BufferedWriter(new FileWriter(this.path));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        for (Task t : taskList.getList()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            writer.write(t.txtFileFormat());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            writer.newLine();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.writer.flush();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.writer \u003d new BufferedWriter(new FileWriter(this.path, true));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 145
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * This class represents the list of tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * It has operations to add/delete tasks in the list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private List\u003cTask\u003e list;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /** Constructs an empty TaskList. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Constructs a TaskList from the given list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param list The List to be associated with the TaskList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public TaskList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public Task get(int i) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return this.list.get(i);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public List\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return this.list;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return this.list.isEmpty();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Marks the i-th task (index i - 1) as done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param i The index (starting from 1) of the task to be marked as done in the TaskList."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @return The task marked as done."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public Task setDone(int i) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.list.get(i - 1).markAsDone();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return this.list.get(i - 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Adds a task to the TaskList."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param task The task to be added."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.list.add(task);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Deletes the i-th task (index i - 1) from the TaskList."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param i The index (starting from 1) of the task to be deleted."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @return The deleted task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public Task delete(int i) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return this.list.remove(i - 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @return The number of tasks in the TaskList."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return this.list.size();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timjkong"
        },
        "content": " }"
      }
    ],
    "authorContributionMap": {
      "timjkong": 78
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/** This class represents a Deadline. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    protected LocalTime time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Constructs a Deadline object associated with a description and a date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param date The date of the deadline."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public Deadline(String description, LocalDate date) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Constructs a Deadline object associated with a description, a date and a time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param date The date of the deadline."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param time The time of the deadline."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public Deadline(String description, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assert this.date !\u003d null : \"date parameter of Deadline object cannot be null\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @return A String representing the Deadline object, to be used when saving deadlines to the storage file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public String txtFileFormat() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return \"D\" + DELIMITER + super.txtFileFormat() + DELIMITER + this.date.toString()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                + (this.time !\u003d null ? DELIMITER + this.time.toString() : \"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @return A String representing the Deadline object, to be used when printing the Deadline."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                + (time !\u003d null ? \" \" + time.format(DateTimeFormatter.ofPattern(\"hh:mm a\")) : \"\") + \")\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void updateDate(LocalDate date) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void updateTime(LocalTime time) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void updateTime(LocalTime startTime, LocalTime endTime) throws DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new DukeException(\"Deadlines don\u0027t have end times!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 73
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/** This class represents an event. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    protected LocalTime startTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    protected LocalTime endTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Constructs an Event object associated with a description and a date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param date The date of the event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public Event(String description, LocalDate date) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Constructs an Event object associated with a description, a date and a start time."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param date The date of the event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param startTime The time that the event starts."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public Event(String description, LocalDate date, LocalTime startTime) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Constructs an Event object associated with a description, a date, a start time and a end time."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param date The date of the event."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param startTime The time that the event starts."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param endTime The time that the event ends."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public Event(String description, LocalDate date, LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assert this.date !\u003d null : \"date parameter of Event object cannot be null\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @return A String representing the Event object, to be used when saving events to the storage file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public String txtFileFormat() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return \"E\" + DELIMITER + super.txtFileFormat() + DELIMITER + this.date.toString()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                + (startTime !\u003d null ? DELIMITER + startTime.toString() : \"\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                + (endTime !\u003d null ? DELIMITER + endTime.toString() : \"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @return A String representing the Event object, to be used when printing the Event."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                + (startTime !\u003d null ? \" \" + startTime.format(DateTimeFormatter.ofPattern(\"hh:mm a\")) : \"\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                + (endTime !\u003d null ? \"-\" + endTime.format(DateTimeFormatter.ofPattern(\"hh:mm a\")) : \"\") + \")\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void updateDate(LocalDate date) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void updateTime(LocalTime time) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.startTime \u003d time;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.endTime \u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void updateTime(LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 92
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/** A generic class from which all task-related classes will inherit from. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    protected final static String DELIMITER \u003d \" ~/~ \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Constructs a task associated with a description."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @return A tick if the task has been marked as done and a cross otherwise."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Marks a task as done."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void updateDescription(String description) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @return A String representing the Task object, to be used when saving tasks to the storage file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public String txtFileFormat() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return (this.isDone ? 1 : 0) + \" ~/~ \" + this.description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @return A String representing the Task object, to be used when printing the Task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public abstract void updateDate(LocalDate date) throws DukeException;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public abstract void updateTime(LocalTime time) throws DukeException;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public abstract void updateTime(LocalTime startTime, LocalTime endTime) throws DukeException;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public abstract LocalDate getDate();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 67
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/** This class represents a todo. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @return A String representing the ToDo object, to be used when saving todos to the storage file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public String txtFileFormat() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return \"T\" + DELIMITER + super.txtFileFormat();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @return A String representing the ToDo object, to be used when printing the ToDo."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void updateDate(LocalDate date) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new DukeException(\"Todos don\u0027t have dates!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void updateTime(LocalTime time) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new DukeException(\"Todos don\u0027t have times!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void updateTime(LocalTime startTime, LocalTime endTime) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        throw new DukeException(\"Todos don\u0027t have times!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 49
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/** This class deals with messages sent to the user. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /** The message to be sent to the user through the GUI. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private boolean isError;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void saveByeMessage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.message \u003d \"Goodbye! Hope to see you again soon :-)\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Saves all tasks on the specified date to the message."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * If no date is specified, saves all tasks to the message."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param taskList The TaskList containing all tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param date The date used to filter tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void saveListMessage(TaskList taskList, LocalDate date) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            this.message \u003d \"You have no tasks in the list!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            sb.append(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            for (Task t : taskList.getList()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                sb.append(\"\\t\" + i + \".\" + t + \"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            String dateString \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            for (Task t : taskList.getList()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                if (t.getDate() !\u003d null \u0026\u0026 t.getDate().equals(date)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    sb.append(\"\\t\" + i + \".\" + t + \"\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            if (sb.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                this.message \u003d \"You have no tasks on \" + dateString;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            sb.insert(0, \"Here are your tasks on \" + dateString + \":\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.message \u003d sb.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Saves all tasks containing the keyword to the message."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Keyword matching is not case sensitive."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param taskList The TaskList containing all tasks."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param keyword The keyword filter."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void saveFindMessage(TaskList taskList, String keyword) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        String lowerCaseKeyword \u003d keyword.toLowerCase();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        for (Task t : taskList.getList()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            if (t.getDescription().toLowerCase().indexOf(lowerCaseKeyword) !\u003d -1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                sb.append(\"\\t\" + i + \".\" + t + \"\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (sb.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            this.message \u003d \"You have no tasks containing \" + keyword;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        sb.insert(0, \"Here are your tasks containing \" + keyword + \"\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.message \u003d sb.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Saves the done message with the task that has just been marked as done."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param task The task marked as done."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void saveDoneMessage(Task task) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assert task !\u003d null : \"task cannot be null\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.message \u003d \"Nice! I\u0027ve marked this task as done:\\n\\t\" + task;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Saves the delete message with the task that has just been deleted."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param task The deleted task."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void saveDeleteMessage(Task task) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assert task !\u003d null : \"task cannot be null\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.message \u003d \"Noted. I\u0027ve removed this task:\\n\\t\" + task;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Saves the add message with the task that has just been added."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param task The added task."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param size The size of the TaskList."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void saveAddMessage(Task task, int size) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assert task !\u003d null : \"task cannot be null\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.message \u003d \"Got it. I\u0027ve added this task:\\n\\t\" + task + \"\\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                + \"Now you have \" + size + \" tasks in the list\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void saveUpdateMessage(Task task, int taskIndex) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.message \u003d \"Got it. I\u0027ve updated task \" + taskIndex + \" to:\\n\\t\" + task;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Saves error messages."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * @param error The error message."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void saveErrorMessage(String error) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.message \u003d error;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.isError \u003d true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public boolean getIsError() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return this.isError;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void resetIsError() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.isError \u003d false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 147
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "timjkong": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"501.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.controllers.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"500.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"424.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"500.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"500.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timjkong"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "timjkong": 19
    }
  },
  {
    "path": "src/test/java/duke/tasklist/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setDoneTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        taskList.add(new ToDo(\"todo1\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        taskList.add(new ToDo(\"todo2\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        taskList.add(new ToDo(\"todo3\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertEquals(\"[T][\\u2713] todo3\", taskList.setDone(3).toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 17
    }
  },
  {
    "path": "src/test/java/duke/tasks/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void txtFileFormatTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"deadlinetest\", LocalDate.parse(\"2020-08-26\"), LocalTime.parse(\"18:00\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertEquals(\"D ~/~ 0 ~/~ deadlinetest ~/~ 2020-08-26 ~/~ 18:00\", deadline.txtFileFormat());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 15
    }
  },
  {
    "path": "src/test/java/duke/tasks/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void txtFileFormatTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Event event \u003d new Event(\"eventtest\", LocalDate.parse(\"2020-12-25\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                LocalTime.parse(\"18:00\"), LocalTime.parse(\"22:00\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        assertEquals(\"E ~/~ 0 ~/~ eventtest ~/~ 2020-12-25 ~/~ 18:00 ~/~ 22:00\", event.txtFileFormat());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 17
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "todo study for CS2105"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": "deadline submit homework /by 17 August 5pm"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "event watch movie /at 17 August 8pm-10pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "timjkong": 11
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "timjkong": 3,
      "-": 37
    }
  }
]
