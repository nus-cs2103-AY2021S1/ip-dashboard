[
  {
    "path": "CONTRIBUTORS.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Contributors"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Homepage"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---|:---:|:---:|:---:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "![](https://avatars1.githubusercontent.com/u/44816346?s\u003d460\u0026v\u003d4) | Yap Jie Xiang | [Github](https://github.com/akgrenSoar) | [Homepage](https://github.com/akgrenSoar)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "# I would like to join this list. How can I help the project"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "For more information, please refer to our [contributor\u0027s guide](https://oss-generic.github.io/process/)."
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 1,
      "-": 7
    }
  },
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "# Main project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/Main.java` file, right-click it, and choose `Run Main.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    mainClassName \u003d \"duke.Main\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 2,
      "-": 44
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.cmd.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 11,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/cmd/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.cmd;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " * Command line application for Duke (Command line UI)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private static final String LOGO \u003d \"\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            + \" ____        _        \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private static final String GREETING \u003d \"Hello! I\u0027m Duke\\nWhat can i do for you?\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private static final String ENDING_GREETING \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private final List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private final Scanner scanner;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * Main execution point for Duke commandline"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * Deals with main logic and IO"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        System.out.println(\"Hello from\\n\" + LOGO);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        System.out.println(GREETING);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            // Prompt for input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            if (input.isBlank()) continue;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            // Parse command"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            Command command \u003d Parser.parse(taskList, input);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            // Received exit command"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            if (command instanceof ExitCommand) break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            // Execute command"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        System.out.println(ENDING_GREETING);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 62
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " * Add a task to taskList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "public class AddCommand implements ReversibleCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private final List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public AddCommand(List\u003cTask\u003e taskList, Task task) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * Add task to end of list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        System.out.println(\"\\t+ Add: \" + task.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * Remove task from list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public void reverse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.taskList.remove(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        System.out.println(\"\\t- Undo Add: \" + task.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 38
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " * Command interface implements execute() method"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void execute();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 10
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " * Remove task from taskList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "public class DeleteCommand implements ReversibleCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private final List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public DeleteCommand(List\u003cTask\u003e taskList, Task task) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * Remove task from list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.taskList.remove(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        System.out.println(\"\\t- Delete: \" + task.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * Add task to end of list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public void reverse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        System.out.println(\"\\t+ Undo Delete: \" + task.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 38
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " * Mark task as done"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "public class DoneCommand implements ReversibleCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public DoneCommand(Task task) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * Mark task as completed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        task.setCompleted(true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        System.out.println(\"\\t# Done: \" + task.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * Mark task as incomplete"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public void reverse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        task.setCompleted(false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        System.out.println(\"\\t# Undo Done: \" + task.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 34
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " * A command signally the end of program"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * Exit program"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        // Exit program"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 17
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " * List all tasks which containing searchString"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private final List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private final String searchString;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public FindCommand(List\u003cTask\u003e taskList, String searchString) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.searchString \u003d searchString;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * List all tasks containing searchString"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        // Search matching tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        AtomicInteger index \u003d new AtomicInteger(0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.taskList.stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                .filter(task -\u003e task.getDescription().contains(searchString))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                .forEach(task -\u003e System.out.println(index.incrementAndGet() + \". \" + task.toString()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        System.out.println(\"Number of tasks found: \" + index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 37
    }
  },
  {
    "path": "src/main/java/duke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.parser.CommandFactory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " * List all available Commands"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "public class HelpCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * List all available Commands"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        System.out.println(\"Command list:\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Arrays.stream(CommandFactory.values())"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                .map((p) -\u003e \" \" + p.toString().toLowerCase())"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                .forEach(System.out::print);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 24
    }
  },
  {
    "path": "src/main/java/duke/command/InvalidCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " * Prints a notice to System.out"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "public class InvalidCommand implements Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public InvalidCommand() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.message \u003d \"Unrecognised Command!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public InvalidCommand(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * Prints a notice to System.out"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        System.out.println(this.message);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 26
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " * List all items in taskList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private final List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public ListCommand(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * List all items in taskList"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            System.out.println(\"List is empty!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        AtomicInteger index \u003d new AtomicInteger(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        taskList.stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                .map((task) -\u003e index.incrementAndGet() + \". \" + task.toString())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                .forEach(System.out::println);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 37
    }
  },
  {
    "path": "src/main/java/duke/command/LoadCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " * Load taskList from file"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " * The file should be in a defined csv format"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "public class LoadCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private final List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public LoadCommand(List\u003cTask\u003e taskList, String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * Load taskList from file"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * The file should be in a defined csv format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            Storage.load(taskList, filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            System.out.println(\"Load: \" + taskList.size() + \" entries\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            System.out.println(\"Error: File not found\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 37
    }
  },
  {
    "path": "src/main/java/duke/command/ReversibleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " * ReversibleCommand interface implements execute() and reverse() methods"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "public interface ReversibleCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void reverse();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 10
    }
  },
  {
    "path": "src/main/java/duke/command/SaveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " * Save taskList to file"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " * The tasks will be saved in a defined csv format"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "public class SaveCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private final List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public SaveCommand(List\u003cTask\u003e taskList, String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * Save taskList to file"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * The tasks will be saved in a defined csv format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            Storage.save(taskList, filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            System.out.println(\"Save: \" + taskList.size() + \" entries\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            System.out.println(\"Error: Could not save to file. Ensure directory exists and file is not in use\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 37
    }
  },
  {
    "path": "src/main/java/duke/parser/CommandFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.command.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.command.InvalidCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.command.LoadCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.command.SaveCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.util.DukeDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " * Enumeration of available commands"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " * Contains generate() method to create command from parameters"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "public enum CommandFactory {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    HELP {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        public Command generate(List\u003cTask\u003e taskList, String commandParam) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    },"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    BYE {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        public Command generate(List\u003cTask\u003e taskList, String commandParam) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    },"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    LIST {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        public Command generate(List\u003cTask\u003e taskList, String commandParam) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            return new ListCommand(taskList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    },"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    DONE {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        public Command generate(List\u003cTask\u003e taskList, String commandParam) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                int index \u003d Integer.parseInt(commandParam.trim()) - 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                Task task \u003d taskList.get(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                return new DoneCommand(task);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                return new InvalidCommand(\"Format: done {index}\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                return new InvalidCommand(\"Index Error: done {index}\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    },"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    DELETE {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        public Command generate(List\u003cTask\u003e taskList, String commandParam) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                int index \u003d Integer.parseInt(commandParam.trim()) - 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                Task task \u003d taskList.get(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                return new DeleteCommand(taskList, task);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                return new InvalidCommand(\"Format: delete {index}\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                return new InvalidCommand(\"Index Error: delete {index}\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    },"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    TODO {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        public Command generate(List\u003cTask\u003e taskList, String commandParam) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            if (commandParam.isBlank()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                return new InvalidCommand(\"Format: todo {description}\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            Task task \u003d new ToDo(commandParam.trim());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            return new AddCommand(taskList, task);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    },"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    DEADLINE {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        public Command generate(List\u003cTask\u003e taskList, String commandParam) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            Pattern pattern \u003d Pattern.compile(\"^(.+)/by(.+)$\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            Matcher matcher \u003d pattern.matcher(commandParam);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            if (!matcher.matches() || matcher.group(1).isBlank() || matcher.group(2).isBlank()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                return new InvalidCommand(\"Format: deadline {description} /by {ddMMyyyy HHmm}\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                Task task \u003d new Deadline("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                        matcher.group(1).trim(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                        new DukeDateTime(matcher.group(2).trim())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                );"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                return new AddCommand(taskList, task);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                return new InvalidCommand(\"DateTime Error: deadline {description} /by {ddMMyyyy HHmm}\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    },"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    EVENT {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        public Command generate(List\u003cTask\u003e taskList, String commandParam) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            Pattern pattern \u003d Pattern.compile(\"^(.+)/from(.+)/till(.+)$\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            Matcher matcher \u003d pattern.matcher(commandParam);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            if (!matcher.matches()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                    || matcher.group(1).isBlank()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                    || matcher.group(2).isBlank()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                    || matcher.group(3).isBlank()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                return new InvalidCommand(\"Format: event {description} /from {ddMMyyyy HHmm} /till {ddMMyyyy HHmm}\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                Task task \u003d new Event("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                        matcher.group(1).trim(),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                        new DukeDateTime(matcher.group(2).trim()),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                        new DukeDateTime(matcher.group(3).trim()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                return new AddCommand(taskList, task);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                return new InvalidCommand(\"DateTime Error: \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                        + \"event {description} /from {ddMMyyyy HHmm} /till {ddMMyyyy HHmm}\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    },"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    SAVE {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        public Command generate(List\u003cTask\u003e taskList, String commandParam) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            if (commandParam.isBlank()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                return new InvalidCommand(\"Format: save {filepath}\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            return new SaveCommand(taskList, commandParam.trim());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    },"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    LOAD {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        public Command generate(List\u003cTask\u003e taskList, String commandParam) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            if (commandParam.isBlank()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                return new InvalidCommand(\"Format: load {filepath}\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            return new LoadCommand(taskList, commandParam.trim());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    },"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    FIND {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        public Command generate(List\u003cTask\u003e taskList, String commandParam) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            if (commandParam.isBlank()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                return new InvalidCommand(\"Format: find {keyword}\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            return new FindCommand(taskList, commandParam.trim());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    };"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * Generate the Command by providing command parameters (if required)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * @param taskList The taskList which Command will execute on"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * @param commandParam Command parameters needed to construct the Command (As required)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * @return A Command which executes on the taskList"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public abstract Command generate(List\u003cTask\u003e taskList, String commandParam);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 182
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.command.InvalidCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " * Parse user input for Duke application"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * Parse user input into an executable command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * The resulting command, when executed, may perform modifications to taskList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * @param taskList The taskList which the Duke Command will execute on"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * @param input The raw user input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * @return The corresponding Command, or InvalidCommand if input cannot be parsed"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public static Command parse(List\u003cTask\u003e taskList, String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        // Match the input pattern"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        // matcher.group(1) is used to identify the command type"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        // matcher.group(2) is used to extract command parameters"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"^\\\\s*(\\\\S+)\\\\s*(.*)$\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        // No input received"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        if (!matcher.matches()) return new InvalidCommand(\"Empty input!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        // Find and generate the matching duke.command"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        String firstWord \u003d matcher.group(1).toUpperCase();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        return Arrays.stream(CommandFactory.values()) // parser is an enum of all valid commands"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                .filter(commandFactory -\u003e commandFactory.toString().equals(firstWord))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                .map(commandFactory -\u003e commandFactory.generate(taskList, matcher.group(2)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                .orElse(new InvalidCommand());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 44
    }
  },
  {
    "path": "src/main/java/duke/storage/CsvToTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.util.DukeDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " * Recover the Task from a csv representation"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "public enum CsvToTask {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    TODO {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        public Task parse(String csv) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            // Parse input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            Scanner scanner \u003d new Scanner(csv);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            scanner.useDelimiter(\",\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            scanner.next(); // Discard first match"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            // Construct task from csv"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            return new ToDo("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                    Boolean.parseBoolean(scanner.next()),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                    scanner.next()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            );"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    },"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    DEADLINE {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        public Task parse(String csv) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            // Parse input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            Scanner scanner \u003d new Scanner(csv);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            scanner.useDelimiter(\",\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            scanner.next(); // Discard first match"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            // Construct deadline from csv"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            return new Deadline("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                    Boolean.parseBoolean(scanner.next()),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                    scanner.next(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                    new DukeDateTime(scanner.next())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    },"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    EVENT {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        public Task parse(String csv) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            // Parse input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            Scanner scanner \u003d new Scanner(csv);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            scanner.useDelimiter(\",\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            scanner.next(); // Discard first match"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            // Construct task from csv"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            return new Event("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                    Boolean.parseBoolean(scanner.next()),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                    scanner.next(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                    new DukeDateTime(scanner.next()),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                    new DukeDateTime(scanner.next())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            );"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    };"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * Factory method to obtain a Task from its csv representation"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * @param csv The csv representation of a task"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * @return The task represented by the csv"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * @throws Exception If the csv cannot be parsed"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public abstract Task parse(String csv) throws Exception;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 75
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * Save and overwrite the taskList into specified filePath"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * @param taskList The list of tasks to be saved"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * @param filePath The location of file to be overwritten"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * @throws IOException If the named file exists but is a directory"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * rather than a regular file, does not exist but cannot be created,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * cannot be opened for any other reason, or an IO error occurs while writing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public static void save(List\u003cTask\u003e taskList, String filePath) throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        // Open file for write/overwrite (throws IOException)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            fileWriter.write(task.toCsv() + \"\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        // Close file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        fileWriter.flush();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * Load and overwrite the taskList from specified filePath"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * @param taskList The taskList to be overwritten"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * @param filePath The filePath to load the Tasks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * @throws FileNotFoundException If filePath cannot be opened"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public static void load(List\u003cTask\u003e taskList, String filePath) throws FileNotFoundException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        // Empty current list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        taskList.clear();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        // Attempt to open file for reading (throws FileNotFoundException)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Supplier\u003cString\u003e nextLine \u003d () -\u003e scanner.hasNext() ? scanner.nextLine() : null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        // Process each line as stream"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Stream.generate(nextLine)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                .takeWhile(Objects::nonNull)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                .filter(Predicate.not(String::isBlank))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                .map(String::trim)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                .map(line -\u003e { // Convert Csv to Task"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                        String taskType \u003d line.substring(0, line.indexOf(\u0027,\u0027));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                        return CsvToTask.valueOf(taskType).parse(line);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                    } catch (Exception e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                        System.err.println(\"Corrupt entry: \" + line); // Todo: logger"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                        return null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                })"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                .filter(Objects::nonNull)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                .forEach(taskList::add);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 72
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.util.DukeDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.storage.CsvToTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " * A Task with a deadline"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private DukeDateTime deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public Deadline(String description, DukeDateTime deadline) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public Deadline(boolean isCompleted, String description, DukeDateTime deadline) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        super(isCompleted, description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public DukeDateTime getDeadline() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        return this.deadline;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public void setDeadline(DukeDateTime deadline) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public String toCsv() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        return CsvToTask.DEADLINE + \",\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                + this.isCompleted() + \",\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                + this.getDescription() + \",\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                + this.getDeadline();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        return \"[D]\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                + \"[\" + this.isCompletedSymbol() + \"]\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                + \" \" + this.getDescription()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                + \" (by: \" + deadline.pretty() + \")\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        if (this \u003d\u003d obj) return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        if (!(obj instanceof Deadline)) return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        if (!super.equals(obj)) return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Deadline deadline1 \u003d (Deadline) obj;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        return getDeadline().equals(deadline1.getDeadline());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        return Objects.hash(super.hashCode(), getDeadline());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 62
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.util.DukeDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.storage.CsvToTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " * A Task with a startTime, and an endTime"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private DukeDateTime start;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private DukeDateTime end;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public Event(String description, DukeDateTime start, DukeDateTime end) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public Event(boolean isCompleted, String description, DukeDateTime start, DukeDateTime end) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        super(isCompleted, description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public DukeDateTime getStart() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        return this.start;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public void setStart(DukeDateTime eventStart) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.start \u003d eventStart;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public DukeDateTime getEnd() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        return this.end;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public void setEnd(DukeDateTime eventEnd) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.end \u003d eventEnd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public String toCsv() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        return CsvToTask.EVENT + \",\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                + this.isCompleted() + \",\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                + this.getDescription() + \",\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                + this.getStart() + \",\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                + this.getEnd();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        return \"[E]\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                + \"[\" + this.isCompletedSymbol() + \"]\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                + \" \" + this.getDescription()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                + \" (from: \" + start.pretty()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                + \" till: \" + end.pretty() + \")\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        if (this \u003d\u003d obj) return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        if (!(obj instanceof Event)) return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        if (!super.equals(obj)) return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Event event \u003d (Event) obj;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        return start.equals(event.start) \u0026\u0026"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                end.equals(event.end);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        return Objects.hash(super.hashCode(), start, end);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 76
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " * A task is a is an item that has a description and can be marked as completed"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private static final String SYMBOL_DONE \u003d \"✓\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private static final String SYMBOL_UNDONE \u003d \"✗\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private boolean isCompleted;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.isCompleted \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public Task(boolean isCompleted, String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public String isCompletedSymbol() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        return this.isCompleted ? SYMBOL_DONE : SYMBOL_UNDONE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        return this.isCompleted;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public void setCompleted(boolean completed) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.isCompleted \u003d completed;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public abstract String toCsv();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        if (this \u003d\u003d obj) return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        if (!(obj instanceof Task)) return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Task task \u003d (Task) obj;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        return isCompleted() \u003d\u003d task.isCompleted() \u0026\u0026"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                getDescription().equals(task.getDescription());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        return Objects.hash(isCompleted(), getDescription());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 61
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.storage.CsvToTask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " * A Task with no defined datetime"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public ToDo(boolean isCompleted, String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        super(isCompleted, description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public String toCsv() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        return CsvToTask.TODO + \",\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                + this.isCompleted() + \",\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                + this.getDescription();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        return \"[T]\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                + \"[\" + this.isCompletedSymbol() + \"]\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                + \" \" + this.getDescription();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 32
    }
  },
  {
    "path": "src/main/java/duke/util/DukeDateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " * DukeDateTime provides methods to convert String to LocalDateTime and vice versa"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " * Predefined formats:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " *  - DukeDateTime.DEFAULT (\"ddMMyyyy HHmm\")"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " *  - DukeDateTime.PRETTY (\"dd MMM yyyy KK:mma\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "public class DukeDateTime {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public static final DateTimeFormatter DEFAULT \u003d DateTimeFormatter.ofPattern(\"ddMMyyyy HHmm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public static final DateTimeFormatter PRETTY \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy KK:mma\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private final LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * Construct a DukeDateTime based on current time"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public DukeDateTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.localDateTime \u003d DukeDateTime.trim(LocalDateTime.now());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * Construct a DukeDateTime based on given String"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * @param dateTime A String in DukeDateTime.DEFAULT format (\"ddMMyyyy HHmm\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public DukeDateTime(String dateTime) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        this.localDateTime \u003d LocalDateTime.parse(dateTime, DukeDateTime.DEFAULT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * Removes unused attributes, leaving only the day, month, year, hour, and minute"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * @param localDateTime The LocalDateTime to be trimmed"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * @return A LocalDateTime with only day, month, year, hour and minute attributes"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private static LocalDateTime trim(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        return LocalDateTime.parse(localDateTime.format(DukeDateTime.DEFAULT), DukeDateTime.DEFAULT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * Convert a LocalDateTime into a String (Suitable for displaying)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * The String will be converted to DukeDateTime.PRETTY format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * (i.e. dd MMM yyyy KK:mma)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * (e.g. 18 May 2020 08:20pm)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * @return The String representation in DukeDateTime.PRETTY format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public String pretty() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        return localDateTime.format(DukeDateTime.PRETTY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * Convert a LocalDateTime into a String"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * The String will be converted to DukeDateTime.DEFAULT format"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * (i.e. ddMMyyyy HHmm)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * (e.g. 22082020 1800)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     * @return The String representation in DukeDateTime.DEFAULT format"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        return localDateTime.format(DukeDateTime.DEFAULT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        if (this \u003d\u003d o) return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        if (!(o instanceof DukeDateTime)) return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        DukeDateTime that \u003d (DukeDateTime) o;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        return localDateTime.equals(that.localDateTime);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        return Objects.hash(localDateTime);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 81
    }
  },
  {
    "path": "src/test/java/duke/command/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.util.DukeDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void executeAndUndo() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        DukeDateTime dateTime \u003d new DukeDateTime();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e(5);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Task task1 \u003d new ToDo(\"Todo 1\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Task task2 \u003d new Deadline(\"Deadline 1\", dateTime);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Task task3 \u003d new Event(\"Event 1\", dateTime, dateTime);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        ReversibleCommand c1 \u003d new AddCommand(taskList, task1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        ReversibleCommand c2 \u003d new AddCommand(taskList, task2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        ReversibleCommand c3 \u003d new AddCommand(taskList, task3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        c1.execute();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        c2.execute();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        c3.execute();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertEquals(3, taskList.size());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertEquals(task1, taskList.get(0));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertEquals(task2, taskList.get(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertEquals(task3, taskList.get(2));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        c3.reverse();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        c2.reverse();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        c1.reverse();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertEquals(0, taskList.size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 46
    }
  },
  {
    "path": "src/test/java/duke/command/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.util.DukeDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void executeAndUndo() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        DukeDateTime dateTime \u003d new DukeDateTime();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e(5);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Task task1 \u003d new ToDo(\"Todo 1\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Task task2 \u003d new Deadline(\"Deadline 1\", dateTime);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Task task3 \u003d new Event(\"Event 1\", dateTime, dateTime);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        taskList.add(task1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        taskList.add(task2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        taskList.add(task3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        // Pre-test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertEquals(3, taskList.size());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        ReversibleCommand c1 \u003d new DeleteCommand(taskList, task1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        ReversibleCommand c2 \u003d new DeleteCommand(taskList, task2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        ReversibleCommand c3 \u003d new DeleteCommand(taskList, task3);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        // Actual test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        c1.execute();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        c2.execute();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        c3.execute();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertEquals(0, taskList.size());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        c1.reverse();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        c2.reverse();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        c3.reverse();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertEquals(3, taskList.size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 51
    }
  },
  {
    "path": "src/test/java/duke/command/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.util.DukeDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "class DoneCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void executeAndUndo() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        DukeDateTime dateTime \u003d new DukeDateTime();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e(5);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Task task1 \u003d new ToDo(\"Todo 1\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Task task2 \u003d new Deadline(\"Deadline 1\", dateTime);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Task task3 \u003d new Event(\"Event 1\", dateTime, dateTime);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        taskList.add(task1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        taskList.add(task2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        taskList.add(task3);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        // Pre-test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertEquals(3, taskList.size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertFalse(taskList.get(0).isCompleted());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertFalse(taskList.get(1).isCompleted());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertFalse(taskList.get(2).isCompleted());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        // Actual test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        ReversibleCommand c1 \u003d new DoneCommand(task1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        ReversibleCommand c2 \u003d new DoneCommand(task2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        ReversibleCommand c3 \u003d new DoneCommand(task3);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        c1.execute();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        c2.execute();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        c3.execute();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(taskList.get(0).isCompleted());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(taskList.get(1).isCompleted());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(taskList.get(2).isCompleted());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        c1.reverse();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        c2.reverse();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        c3.reverse();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertFalse(taskList.get(0).isCompleted());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertFalse(taskList.get(1).isCompleted());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertFalse(taskList.get(2).isCompleted());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 61
    }
  },
  {
    "path": "src/test/java/duke/command/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "class FindCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private final List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e(1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void testExecute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        // Attempt to match"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        taskList.add(new ToDo(\"Eat some chips\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        new FindCommand(taskList, \"t some c\").execute();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertEquals(\"Here are the matching tasks in your list:\\r\\n\" +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                \"1. [T][✗] Eat some chips\\r\\n\" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                \"Number of tasks found: 1\\r\\n\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "                outContent.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 34
    }
  },
  {
    "path": "src/test/java/duke/command/HelpCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "class HelpCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void testExecute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        // Ensure something (anything) is printed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        new HelpCommand().execute();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertNotEquals(\"\", outContent.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 24
    }
  },
  {
    "path": "src/test/java/duke/command/InvalidCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "class InvalidCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void testExecute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        // Ensure something (anything) is printed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        new InvalidCommand(\"testing 123,./\").execute();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertEquals(\"testing 123,./\\r\\n\", outContent.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 25
    }
  },
  {
    "path": "src/test/java/duke/command/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private final List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e(1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void testExecute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        // Ensure something (anything) is printed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        taskList.add(new ToDo(\"Eat some chips\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        new ListCommand(taskList).execute();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertNotEquals(\"\", outContent.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 32
    }
  },
  {
    "path": "src/test/java/duke/command/SaveAndLoadCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.util.DukeDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "public class SaveAndLoadCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void testSaveAndLoad() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        // Save taskList to file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        List\u003cTask\u003e originalTaskList \u003d new ArrayList\u003c\u003e(3);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Task task1 \u003d new ToDo(\"task1\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Task task2 \u003d new Deadline(\"task2\", new DukeDateTime());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Task task3 \u003d new Event(\"task3\", new DukeDateTime(), new DukeDateTime());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        originalTaskList.add(task1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        originalTaskList.add(task2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        originalTaskList.add(task3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        new SaveCommand(originalTaskList, \"save.txt\").execute();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        // Load taskList from file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        List\u003cTask\u003e recoveredTaskList \u003d new ArrayList\u003c\u003e(3);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        new LoadCommand(recoveredTaskList, \"save.txt\").execute();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        // Check loaded taskList is similar to original"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertEquals(originalTaskList, recoveredTaskList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertEquals(task1, recoveredTaskList.get(0));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertEquals(task2, recoveredTaskList.get(1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertEquals(task3, recoveredTaskList.get(2));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 43
    }
  },
  {
    "path": "src/test/java/duke/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.command.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.command.InvalidCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.command.LoadCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.command.SaveCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e(5);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private Task dummy \u003d new ToDo(\"Dummy Task\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        taskList.add(dummy);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void parseAddCommand_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        input \u003d \"todo light\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof AddCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        input \u003d \"todo light a candle\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof AddCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        input \u003d \"deadline light a candle /by 02022020 1800\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof AddCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        input \u003d \"event light a candle /from 02022020 0900 /till 02022020 1800\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof AddCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void parseAddCommand_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        input \u003d \"todo\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        input \u003d \"deadline\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        input \u003d \"deadline hello\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        input \u003d \"event\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        input \u003d \"event greeting\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void parseDeleteCommand_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        String input \u003d \"delete 1\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof DeleteCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void parseDeleteCommand_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        input \u003d \"delete\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        input \u003d \"delete nothing\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        input \u003d \"delete 5\"; // Index out of range"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        input \u003d \"delete 100\"; // Index out of range"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void parseDoneCommand_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        String input \u003d \"done 1\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof DoneCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void parseDoneCommand_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        input \u003d \"done\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        input \u003d \"done nothing\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        input \u003d \"done 5\"; // Index out of range"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        input \u003d \"done 100\"; // Index out of range"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void parseExitCommand_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        String input \u003d \"bye\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof ExitCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void parseFindCommand_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        input \u003d \"find Dummy\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof FindCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        input \u003d \"find nonexistant\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof FindCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        input \u003d \"find 1231\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof FindCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void parseHelpCommand_success() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        String input \u003d \"help\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof HelpCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void parseInvalidCommand_success() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        input \u003d \"\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        input \u003d \"invalid\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        input \u003d \"invalid two\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void parseListCommand_success() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        String input \u003d \"list\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof ListCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void parseLoadCommand_success() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        String input \u003d \"load save.txt\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof LoadCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void parseLoadCommand_failure() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        String input \u003d \"load\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void parseSaveCommand_success() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        String input \u003d \"save save.txt\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof SaveCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void parseSaveCommand_failure() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        String input \u003d \"save\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertTrue(Parser.parse(taskList, input) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 186
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.storage.CsvToTask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.util.DukeDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private String string1 \u003d \"Test case 1\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private DukeDateTime time1 \u003d new DukeDateTime(LocalDateTime.now().minusHours(1).format(DukeDateTime.DEFAULT));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private String string2 \u003d \"Test case 2\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private DukeDateTime time2 \u003d new DukeDateTime();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void getDeadline() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Deadline testCase \u003d new Deadline(string1, time1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertEquals(time1, testCase.getDeadline());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void hashCode_equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Deadline case1 \u003d new Deadline(string1, time1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Deadline case2 \u003d new Deadline(string1, time1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertEquals(case1.hashCode(), case2.hashCode());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void hashCode_notEquals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Deadline case1 \u003d new Deadline(string1, time1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Deadline case2 \u003d new Deadline(string2, time1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertNotEquals(case1.hashCode(), case2.hashCode());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        case1 \u003d new Deadline(string1, time1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        case2 \u003d new Deadline(string1, time2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertNotEquals(case1.hashCode(), case2.hashCode());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void toCsv_fromCsv() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            Task task1 \u003d new Deadline(string1, time1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            Task task2 \u003d CsvToTask.DEADLINE.parse(task1.toCsv());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            assertEquals(task1.hashCode(), task2.hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            // Failed to convert csv to Deadline"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 56
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.storage.CsvToTask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.util.DukeDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private String string1 \u003d \"Test case 1\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private DukeDateTime time1 \u003d new DukeDateTime(LocalDateTime.now().minusHours(1).format(DukeDateTime.DEFAULT));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private String string2 \u003d \"Test case 2\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    private DukeDateTime time2 \u003d new DukeDateTime();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void getStart() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Event testCase \u003d new Event(string1, time1, time2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertEquals (time1, testCase.getStart());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void getEnd() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Event testCase \u003d new Event(string1, time1, time2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertEquals (time2, testCase.getEnd());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void hashCode_equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Event case1 \u003d new Event(string1, time1, time2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Event case2 \u003d new Event(string1, time1, time2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertEquals (case1.hashCode(), case2.hashCode());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void hashCode_notEquals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Event case1 \u003d new Event(true, string1, time1, time2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Event case2 \u003d new Event(false, string1, time1, time2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertNotEquals(case1.hashCode(), case2.hashCode());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        case1 \u003d new Event(true, string1, time1, time2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        case2 \u003d new Event(true, string2, time1, time2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertNotEquals(case1.hashCode(), case2.hashCode());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        case1 \u003d new Event(true, string1, time1, time2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        case2 \u003d new Event(true, string1, time2, time2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertNotEquals(case1.hashCode(), case2.hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        case1 \u003d new Event(true, string1, time1, time1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        case2 \u003d new Event(true, string1, time1, time2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertNotEquals(case1.hashCode(), case2.hashCode());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void toCsv_fromCsv() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            Task task1 \u003d new Event(string1, time1, time2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            Task task2 \u003d CsvToTask.EVENT.parse(task1.toCsv());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            assertEquals(task1.hashCode(), task2.hashCode());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            // Failed to convert csv to Event"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 72
    }
  },
  {
    "path": "src/test/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import duke.storage.CsvToTask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "class ToDoTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void hashCode_equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Task case1 \u003d new ToDo(\"test\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Task case2 \u003d new ToDo(\"test\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertEquals(case1.hashCode(), case2.hashCode());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void hashCode_notEquals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Task case1 \u003d new ToDo(true, \"test\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        Task case2 \u003d new ToDo(false, \"test\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertNotEquals(case1.hashCode(), case2.hashCode());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        case1 \u003d new ToDo(true, \"test case1\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        case2 \u003d new ToDo(true, \"test case2\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertNotEquals(case1.hashCode(), case2.hashCode());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void toCsv_fromCsv() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            Task task1 \u003d new ToDo(\"test\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            Task task2 \u003d CsvToTask.TODO.parse(task1.toCsv());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            assertEquals(task1.hashCode(), task2.hashCode());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            // Failed to convert csv to todo"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 43
    }
  },
  {
    "path": "src/test/java/duke/util/DukeDateTimeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "class DukeDateTimeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void constructor_invalidFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            new DukeDateTime(\"20200101 1800\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        fail();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void constructor_emptyString_failure() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            new DukeDateTime(\"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        fail();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        String input \u003d \"02022020 1800\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "        assertEquals(input, new DukeDateTime(input).toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 40
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "hello"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "done"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "delete"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "todo"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "event"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "done me too"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "delete me too"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "deadline nope"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "deadline wrong/athaha"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "event nope"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "event wrong/bywahaha"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "todo readbook"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "deadline return book /by 06062020 2359"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "event project meeting /from 06082020 1400 /till 06082020 1600"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "deadline drink coffee/by07062020 2359"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "event drink tea/from07082020 1600/till07082020 1800"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "done 8"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "delete 0"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "delete 8"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "list"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "todo say goodbye"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "help"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "save save.txt"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "delete 6"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "load save.txt"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "find"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "find lkaksdjfl"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "find 12342341234"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "find book"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "find ts cl"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 53
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\Main.java ..\\src\\main\\java\\duke\\cmd\\*.java ..\\src\\main\\java\\duke\\command\\*.java ..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\duke\\storage\\*.java ..\\src\\main\\java\\duke\\util\\*.java ..\\src\\main\\java\\duke\\parser\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "java -classpath ..\\bin Main \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 2,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akgrenSoar"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java ../src/main/java/cmd/*.java ../src/main/java/command/*.java ../src/main/java/misc/*.java ../src/main/java/task/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "akgrenSoar": 1,
      "-": 37
    }
  }
]
