[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Ebolaeater"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":5,"author":{"gitId":"Ebolaeater"},"content":"### Dynamic operations"},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":"Ability to add, delete, update as well as find tasks"},{"lineNumber":7,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":8,"author":{"gitId":"Ebolaeater"},"content":"## Usage"},{"lineNumber":9,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":10,"author":{"gitId":"Ebolaeater"},"content":"### `LIST` - LISTS ALL TASKS"},{"lineNumber":11,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":12,"author":{"gitId":"Ebolaeater"},"content":"Lists all the tasks inputted by the user."},{"lineNumber":13,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":14,"author":{"gitId":"Ebolaeater"},"content":"Example of usage: "},{"lineNumber":15,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":16,"author":{"gitId":"Ebolaeater"},"content":"`list`"},{"lineNumber":17,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":18,"author":{"gitId":"Ebolaeater"},"content":"Expected outcome:"},{"lineNumber":19,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":20,"author":{"gitId":"Ebolaeater"},"content":"`1. [T][Not Done] help me out`"},{"lineNumber":21,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":22,"author":{"gitId":"Ebolaeater"},"content":"`2. [D][Donezo] buy groceries (by: Jul 20 2020, 3:00pm)`"},{"lineNumber":23,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":24,"author":{"gitId":"Ebolaeater"},"content":"`3. [E][Not Done] party hard (at: Jul 20 2020, 3:00pm)` "},{"lineNumber":25,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":26,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":27,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":28,"author":{"gitId":"Ebolaeater"},"content":"### `DONE [INT]` - MARKS A TASK AS DONE"},{"lineNumber":29,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":30,"author":{"gitId":"Ebolaeater"},"content":"Marks a task as done based on the number provided by the user"},{"lineNumber":31,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":32,"author":{"gitId":"Ebolaeater"},"content":"Example of usage:"},{"lineNumber":33,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":34,"author":{"gitId":"Ebolaeater"},"content":"`done 1`"},{"lineNumber":35,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":36,"author":{"gitId":"Ebolaeater"},"content":"Expected outcome:"},{"lineNumber":37,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":38,"author":{"gitId":"Ebolaeater"},"content":"`Nice! I\u0027ve marked this task as done: "},{"lineNumber":39,"author":{"gitId":"Ebolaeater"},"content":"[D][Donezo]update todos (by: 23/02/2020 21:22).`"},{"lineNumber":40,"author":{"gitId":"Ebolaeater"},"content":"` Now you have 7 tasks in the list` "},{"lineNumber":41,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":42,"author":{"gitId":"Ebolaeater"},"content":"### `DELETE [INT]` - DELETES A TASK FROM THE LIST"},{"lineNumber":43,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":44,"author":{"gitId":"Ebolaeater"},"content":"Deletes the task found at the number provided by the user"},{"lineNumber":45,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":46,"author":{"gitId":"Ebolaeater"},"content":"Example of usage:"},{"lineNumber":47,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":48,"author":{"gitId":"Ebolaeater"},"content":"`delete 1`"},{"lineNumber":49,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":50,"author":{"gitId":"Ebolaeater"},"content":"Expected outcome:"},{"lineNumber":51,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":52,"author":{"gitId":"Ebolaeater"},"content":"`The event has been removed as per your request:`"},{"lineNumber":53,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":54,"author":{"gitId":"Ebolaeater"},"content":"`[D][Donezo]update todos (by: 23/02/2020 21:22).`"},{"lineNumber":55,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":56,"author":{"gitId":"Ebolaeater"},"content":"`Now you have 6 tasks to the list`"},{"lineNumber":57,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":58,"author":{"gitId":"Ebolaeater"},"content":"### `DEADLINE [STRING] /BY DD-MM-YYYY HH:MM `- CREATE A DEADLINE TASK"},{"lineNumber":59,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":60,"author":{"gitId":"Ebolaeater"},"content":"Creates and adds a deadline task at the given date and time"},{"lineNumber":61,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":62,"author":{"gitId":"Ebolaeater"},"content":"Example of usage:"},{"lineNumber":63,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":64,"author":{"gitId":"Ebolaeater"},"content":"`deadline get out in front /by  22/02/2020 23:45`"},{"lineNumber":65,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":66,"author":{"gitId":"Ebolaeater"},"content":"Expected outcome:"},{"lineNumber":67,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":68,"author":{"gitId":"Ebolaeater"},"content":"`[D][Not Done] get out in front (by: 22/02/2020 23:45) has been added to the list. You have 7 tasks left to do.`"},{"lineNumber":69,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":70,"author":{"gitId":"Ebolaeater"},"content":"### `EVENT [STRING] /AT DD-MM-YYYY HH:MM `- CREATE AN EVENT TASK"},{"lineNumber":71,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":72,"author":{"gitId":"Ebolaeater"},"content":"Creates and adds an event task at the given date and time"},{"lineNumber":73,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":74,"author":{"gitId":"Ebolaeater"},"content":"Example of usage:"},{"lineNumber":75,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":76,"author":{"gitId":"Ebolaeater"},"content":"`event get out in front /at  22/02/2020 23:45`"},{"lineNumber":77,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":78,"author":{"gitId":"Ebolaeater"},"content":"Expected outcome:"},{"lineNumber":79,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":80,"author":{"gitId":"Ebolaeater"},"content":"`[E][Not Done] get out in front (at: 22/02/2020 23:45) has been added to the list. You have 8 tasks left to do` "},{"lineNumber":81,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":82,"author":{"gitId":"Ebolaeater"},"content":"### `TODO [STRING]`- CREATE A TODO TASK"},{"lineNumber":83,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":84,"author":{"gitId":"Ebolaeater"},"content":"Creates and adds a todo task with given description"},{"lineNumber":85,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":86,"author":{"gitId":"Ebolaeater"},"content":"Example of usage:"},{"lineNumber":87,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":88,"author":{"gitId":"Ebolaeater"},"content":"`todo get groceries`"},{"lineNumber":89,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":90,"author":{"gitId":"Ebolaeater"},"content":"Expected outcome:"},{"lineNumber":91,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":92,"author":{"gitId":"Ebolaeater"},"content":"`[T][Not Done] get groceries has been added to the list. You have 9 tasks left to do`"},{"lineNumber":93,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":94,"author":{"gitId":"Ebolaeater"},"content":"### `FIND[STRING] `- FIND TASKS BASED ON KEYWORD"},{"lineNumber":95,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":96,"author":{"gitId":"Ebolaeater"},"content":"Finds and displays all the tasks which contain an user-inputted keyword"},{"lineNumber":97,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":98,"author":{"gitId":"Ebolaeater"},"content":"Example of usage:"},{"lineNumber":99,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":100,"author":{"gitId":"Ebolaeater"},"content":"`find portfolio`"},{"lineNumber":101,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":102,"author":{"gitId":"Ebolaeater"},"content":"Expected outcome:"},{"lineNumber":103,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":104,"author":{"gitId":"Ebolaeater"},"content":"`[D][Not Done] portfolio now (by: 23/02/2020 12:12) contain portolio`"},{"lineNumber":105,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":106,"author":{"gitId":"Ebolaeater"},"content":"### `UPDATE [INT][STRING] `- UPDATE TASKS"},{"lineNumber":107,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":108,"author":{"gitId":"Ebolaeater"},"content":"Updates task at the integer provided by the within the user input"},{"lineNumber":109,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":110,"author":{"gitId":"Ebolaeater"},"content":"Example of usage:"},{"lineNumber":111,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":112,"author":{"gitId":"Ebolaeater"},"content":"`update 2 date 24/2/2020 23:23`"},{"lineNumber":113,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":114,"author":{"gitId":"Ebolaeater"},"content":"Expected outcome:"},{"lineNumber":115,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":116,"author":{"gitId":"Ebolaeater"},"content":"`[E][Donezo] portfolio now (at: 23/02/2020 12:12) has been updated to`"},{"lineNumber":117,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":118,"author":{"gitId":"Ebolaeater"},"content":"`[E][Donezo] portfolio now (at: 24/02/2020 23:23)`"},{"lineNumber":119,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":120,"author":{"gitId":"Ebolaeater"},"content":" `"},{"lineNumber":121,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":122,"author":{"gitId":"Ebolaeater"},"content":"### `NUMBER`- NUMBER OF TASKS IN THE LIST"},{"lineNumber":123,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":124,"author":{"gitId":"Ebolaeater"},"content":"Displays the number of tasks in the list"},{"lineNumber":125,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":126,"author":{"gitId":"Ebolaeater"},"content":"Example of usage:"},{"lineNumber":127,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":128,"author":{"gitId":"Ebolaeater"},"content":"`number`"},{"lineNumber":129,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":130,"author":{"gitId":"Ebolaeater"},"content":"Expected outcome:"},{"lineNumber":131,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":132,"author":{"gitId":"Ebolaeater"},"content":"`Number of tasks to do is 7`"}],"authorContributionMap":{"Ebolaeater":132}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"Ebolaeater"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":14,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":15,"author":{"gitId":"Ebolaeater"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"Ebolaeater"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"Ebolaeater"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"Ebolaeater"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"Ebolaeater"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"Ebolaeater"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"Ebolaeater"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"Ebolaeater"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"Ebolaeater"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"Ebolaeater"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"Ebolaeater"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"Ebolaeater"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":46,"author":{"gitId":"Ebolaeater"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":55,"author":{"gitId":"Ebolaeater"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Ebolaeater":16,"-":44}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"Ebolaeater"},"content":"### Dynamic operations"},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":"Ability to add, delete, update as well as find tasks"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"Ebolaeater"},"content":"### `LIST` - LISTS ALL TASKS"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"Ebolaeater"},"content":"Lists all the tasks inputted by the user."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"Ebolaeater"},"content":"`list`"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"Ebolaeater"},"content":"`1. [T][Not Done] help me out`"},{"lineNumber":21,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":22,"author":{"gitId":"Ebolaeater"},"content":"`2. [D][Donezo] buy groceries (by: Jul 20 2020, 3:00pm)`"},{"lineNumber":23,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":24,"author":{"gitId":"Ebolaeater"},"content":"`3. [E][Not Done] party hard (at: Jul 20 2020, 3:00pm)` "},{"lineNumber":25,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":26,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":27,"author":{"gitId":"Ebolaeater"},"content":"### `DONE [INT]` - MARKS A TASK AS DONE"},{"lineNumber":28,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":29,"author":{"gitId":"Ebolaeater"},"content":"Marks a task as done based on the number provided by the user"},{"lineNumber":30,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":31,"author":{"gitId":"Ebolaeater"},"content":"Example of usage:"},{"lineNumber":32,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":33,"author":{"gitId":"Ebolaeater"},"content":"`done 1`"},{"lineNumber":34,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":35,"author":{"gitId":"Ebolaeater"},"content":"Expected outcome:"},{"lineNumber":36,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":37,"author":{"gitId":"Ebolaeater"},"content":"`Nice! I\u0027ve marked this task as done: "},{"lineNumber":38,"author":{"gitId":"Ebolaeater"},"content":"[D][Donezo]update todos (by: 23/02/2020 21:22)."},{"lineNumber":39,"author":{"gitId":"Ebolaeater"},"content":"Now you have 7 tasks in the list` "},{"lineNumber":40,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":41,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":42,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":43,"author":{"gitId":"Ebolaeater"},"content":"### `DELETE [INT]` - DELETE A TASK FROM THE LIST"},{"lineNumber":44,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":45,"author":{"gitId":"Ebolaeater"},"content":"Deletes the task found at the number provided by the user"},{"lineNumber":46,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":47,"author":{"gitId":"Ebolaeater"},"content":"Example of usage:"},{"lineNumber":48,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":49,"author":{"gitId":"Ebolaeater"},"content":"`delete 1`"},{"lineNumber":50,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":51,"author":{"gitId":"Ebolaeater"},"content":"Expected outcome:"},{"lineNumber":52,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":53,"author":{"gitId":"Ebolaeater"},"content":"`The event has been removed as per your request:"},{"lineNumber":54,"author":{"gitId":"Ebolaeater"},"content":"[D][Donezo]update todos (by: 23/02/2020 21:22)."},{"lineNumber":55,"author":{"gitId":"Ebolaeater"},"content":"Now you have 6 tasks to the list`"},{"lineNumber":56,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":57,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":58,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":59,"author":{"gitId":"Ebolaeater"},"content":"### `DEADLINE [STRING] /BY DD-MM-YYYY HH:MM `- CREATE A DEADLINE TASK"},{"lineNumber":60,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":61,"author":{"gitId":"Ebolaeater"},"content":"Creates and adds a deadline task at the given date and time"},{"lineNumber":62,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":63,"author":{"gitId":"Ebolaeater"},"content":"Example of usage:"},{"lineNumber":64,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":65,"author":{"gitId":"Ebolaeater"},"content":"`deadline get out in front /by  22/02/2020 23:45`"},{"lineNumber":66,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":67,"author":{"gitId":"Ebolaeater"},"content":"Expected outcome:"},{"lineNumber":68,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":69,"author":{"gitId":"Ebolaeater"},"content":"`[D][Not Done] get out in front (by: 22/02/2020 23:45) has been added to the list. "},{"lineNumber":70,"author":{"gitId":"Ebolaeater"},"content":"You have 7 tasks left to do.`"},{"lineNumber":71,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":72,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":73,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":74,"author":{"gitId":"Ebolaeater"},"content":"### `EVENT [STRING] /AT DD-MM-YYYY HH:MM `- CREATE AN EVENT TASK"},{"lineNumber":75,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":76,"author":{"gitId":"Ebolaeater"},"content":"Creates and adds an event task at the given date and time"},{"lineNumber":77,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":78,"author":{"gitId":"Ebolaeater"},"content":"Example of usage:"},{"lineNumber":79,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":80,"author":{"gitId":"Ebolaeater"},"content":"`event get out in front /at  22/02/2020 23:45`"},{"lineNumber":81,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":82,"author":{"gitId":"Ebolaeater"},"content":"Expected outcome:"},{"lineNumber":83,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":84,"author":{"gitId":"Ebolaeater"},"content":"`[E][Not Done] get out in front (at: 22/02/2020 23:45) has been added to the list. "},{"lineNumber":85,"author":{"gitId":"Ebolaeater"},"content":"You have 8 tasks left to do` "},{"lineNumber":86,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":87,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":88,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":89,"author":{"gitId":"Ebolaeater"},"content":"### `TODO [STRING]`- CREATE A TODO TASK"},{"lineNumber":90,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":91,"author":{"gitId":"Ebolaeater"},"content":"Creates and adds a todo task with given description"},{"lineNumber":92,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":93,"author":{"gitId":"Ebolaeater"},"content":"Example of usage:"},{"lineNumber":94,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":95,"author":{"gitId":"Ebolaeater"},"content":"`todo get groceries`"},{"lineNumber":96,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":97,"author":{"gitId":"Ebolaeater"},"content":"Expected outcome:"},{"lineNumber":98,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":99,"author":{"gitId":"Ebolaeater"},"content":"`[T][Not Done] get groceries has been added to the list. "},{"lineNumber":100,"author":{"gitId":"Ebolaeater"},"content":"You have 9 tasks left to do`"},{"lineNumber":101,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":102,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":103,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":104,"author":{"gitId":"Ebolaeater"},"content":"### `FIND[STRING] `- FIND TASKS BASED ON KEYWORD"},{"lineNumber":105,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":106,"author":{"gitId":"Ebolaeater"},"content":"Finds and displays all the tasks which contain an user-inputted keyword"},{"lineNumber":107,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":108,"author":{"gitId":"Ebolaeater"},"content":"Example of usage:"},{"lineNumber":109,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":110,"author":{"gitId":"Ebolaeater"},"content":"`find portfolio`"},{"lineNumber":111,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":112,"author":{"gitId":"Ebolaeater"},"content":"Expected outcome:"},{"lineNumber":113,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":114,"author":{"gitId":"Ebolaeater"},"content":"`[D][Not Done] portfolio now (by: 23/02/2020 12:12) contain portolio`"},{"lineNumber":115,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":116,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":117,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":118,"author":{"gitId":"Ebolaeater"},"content":"### `UPDATE [INT][STRING] `- UPDATE TASKS"},{"lineNumber":119,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":120,"author":{"gitId":"Ebolaeater"},"content":"Updates task at the integer provided by the within the user input"},{"lineNumber":121,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":122,"author":{"gitId":"Ebolaeater"},"content":"Example of usage:"},{"lineNumber":123,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":124,"author":{"gitId":"Ebolaeater"},"content":"`update 2 date 24/2/2020 23:23`"},{"lineNumber":125,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":126,"author":{"gitId":"Ebolaeater"},"content":"Expected outcome:"},{"lineNumber":127,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":128,"author":{"gitId":"Ebolaeater"},"content":"`[E][Donezo] portfolio now (at: 23/02/2020 12:12) has been updated to"},{"lineNumber":129,"author":{"gitId":"Ebolaeater"},"content":"[E][Donezo] portfolio now (at: 24/02/2020 23:23)`"},{"lineNumber":130,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":131,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":132,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":133,"author":{"gitId":"Ebolaeater"},"content":"### `NUMBER`- NUMBER OF TASKS IN THE LIST"},{"lineNumber":134,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":135,"author":{"gitId":"Ebolaeater"},"content":"Displays the number of tasks in the list"},{"lineNumber":136,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":137,"author":{"gitId":"Ebolaeater"},"content":"Example of usage:"},{"lineNumber":138,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":139,"author":{"gitId":"Ebolaeater"},"content":"`number`"},{"lineNumber":140,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":141,"author":{"gitId":"Ebolaeater"},"content":"Expected outcome:"},{"lineNumber":142,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":143,"author":{"gitId":"Ebolaeater"},"content":"`Number of tasks to do is 7`"}],"authorContributionMap":{"Ebolaeater":129,"-":14}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ebolaeater"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"Ebolaeater"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":4,"author":{"gitId":"Ebolaeater"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"Ebolaeater"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"Ebolaeater"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"Ebolaeater"},"content":"import javafx.geometry.Insets;"},{"lineNumber":9,"author":{"gitId":"Ebolaeater"},"content":"import javafx.geometry.Pos;"},{"lineNumber":10,"author":{"gitId":"Ebolaeater"},"content":"import javafx.scene.Node;"},{"lineNumber":11,"author":{"gitId":"Ebolaeater"},"content":"import javafx.scene.control.Label;"},{"lineNumber":12,"author":{"gitId":"Ebolaeater"},"content":"import javafx.scene.image.Image;"},{"lineNumber":13,"author":{"gitId":"Ebolaeater"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":14,"author":{"gitId":"Ebolaeater"},"content":"import javafx.scene.layout.Background;"},{"lineNumber":15,"author":{"gitId":"Ebolaeater"},"content":"import javafx.scene.layout.BackgroundFill;"},{"lineNumber":16,"author":{"gitId":"Ebolaeater"},"content":"import javafx.scene.layout.CornerRadii;"},{"lineNumber":17,"author":{"gitId":"Ebolaeater"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":18,"author":{"gitId":"Ebolaeater"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":19,"author":{"gitId":"Ebolaeater"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"Ebolaeater"},"content":" * An example of a custom control using FXML."},{"lineNumber":21,"author":{"gitId":"Ebolaeater"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":22,"author":{"gitId":"Ebolaeater"},"content":" * containing text from the speaker."},{"lineNumber":23,"author":{"gitId":"Ebolaeater"},"content":" */"},{"lineNumber":24,"author":{"gitId":"Ebolaeater"},"content":"public class DialogBox extends HBox {"},{"lineNumber":25,"author":{"gitId":"Ebolaeater"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"Ebolaeater"},"content":"    private Label dialog;"},{"lineNumber":27,"author":{"gitId":"Ebolaeater"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"Ebolaeater"},"content":"    private ImageView displayPicture;"},{"lineNumber":29,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":30,"author":{"gitId":"Ebolaeater"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":31,"author":{"gitId":"Ebolaeater"},"content":"        assert !text.equals(\"\") \u0026\u0026 img !\u003d null : \"A null label or image was provided\";"},{"lineNumber":32,"author":{"gitId":"Ebolaeater"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"Ebolaeater"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":34,"author":{"gitId":"Ebolaeater"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":35,"author":{"gitId":"Ebolaeater"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":36,"author":{"gitId":"Ebolaeater"},"content":"            fxmlLoader.load();"},{"lineNumber":37,"author":{"gitId":"Ebolaeater"},"content":"        } catch (IOException e) {"},{"lineNumber":38,"author":{"gitId":"Ebolaeater"},"content":"            e.printStackTrace();"},{"lineNumber":39,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":41,"author":{"gitId":"Ebolaeater"},"content":"        dialog.setText(text);"},{"lineNumber":42,"author":{"gitId":"Ebolaeater"},"content":"        displayPicture.setImage(img);"},{"lineNumber":43,"author":{"gitId":"Ebolaeater"},"content":"        Color color \u003d Color.LIGHTBLUE;"},{"lineNumber":44,"author":{"gitId":"Ebolaeater"},"content":"        this.setBackground(new Background("},{"lineNumber":45,"author":{"gitId":"Ebolaeater"},"content":"                new BackgroundFill(color, new CornerRadii(10),"},{"lineNumber":46,"author":{"gitId":"Ebolaeater"},"content":"                        new Insets(5,5,5,5))));"},{"lineNumber":47,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":49,"author":{"gitId":"Ebolaeater"},"content":"    public static DialogBox getErrorBox(String text, Image img){"},{"lineNumber":50,"author":{"gitId":"Ebolaeater"},"content":"        DialogBox dialog \u003d getDukeDialog(new Label(text), img);"},{"lineNumber":51,"author":{"gitId":"Ebolaeater"},"content":"        dialog.getChildren().get(1).setStyle(\"-fx-background-color: #E4572E\");"},{"lineNumber":52,"author":{"gitId":"Ebolaeater"},"content":"        return dialog;"},{"lineNumber":53,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":55,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"Ebolaeater"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":57,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"Ebolaeater"},"content":"    private void flip() {"},{"lineNumber":59,"author":{"gitId":"Ebolaeater"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":60,"author":{"gitId":"Ebolaeater"},"content":"        Collections.reverse(tmp);"},{"lineNumber":61,"author":{"gitId":"Ebolaeater"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":62,"author":{"gitId":"Ebolaeater"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":63,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":65,"author":{"gitId":"Ebolaeater"},"content":"    public static DialogBox getUserDialog(Label text, Image img) {"},{"lineNumber":66,"author":{"gitId":"Ebolaeater"},"content":"        assert text !\u003d null \u0026\u0026 img !\u003d null : \"A null label or image was provided\";"},{"lineNumber":67,"author":{"gitId":"Ebolaeater"},"content":"        DialogBox dialog \u003d new DialogBox(text.getText(), img);"},{"lineNumber":68,"author":{"gitId":"Ebolaeater"},"content":"        dialog.getChildren().get(0).setStyle(\"-fx-background-color: #0066ff\");"},{"lineNumber":69,"author":{"gitId":"Ebolaeater"},"content":"        dialog.applyCss();"},{"lineNumber":70,"author":{"gitId":"Ebolaeater"},"content":"        return dialog;"},{"lineNumber":71,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":73,"author":{"gitId":"Ebolaeater"},"content":"    public static DialogBox getDukeDialog(Label text, Image img) {"},{"lineNumber":74,"author":{"gitId":"Ebolaeater"},"content":"        assert text !\u003d null \u0026\u0026 img !\u003d null : \"A null label or image was provided\";"},{"lineNumber":75,"author":{"gitId":"Ebolaeater"},"content":"        DialogBox db \u003d new DialogBox(text.getText(), img);"},{"lineNumber":76,"author":{"gitId":"Ebolaeater"},"content":"        db.getChildren().get(0).setStyle(\"-fx-background-color : #66ff66\");"},{"lineNumber":77,"author":{"gitId":"Ebolaeater"},"content":"        db.applyCss();"},{"lineNumber":78,"author":{"gitId":"Ebolaeater"},"content":"        db.flip();"},{"lineNumber":79,"author":{"gitId":"Ebolaeater"},"content":"        return db;"},{"lineNumber":80,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"Ebolaeater"},"content":"}"}],"authorContributionMap":{"Ebolaeater":81}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ebolaeater"},"content":"import javafx.scene.control.Label;"},{"lineNumber":2,"author":{"gitId":"Ebolaeater"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":"import javafx.scene.image.Image;"},{"lineNumber":4,"author":{"gitId":"Ebolaeater"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":5,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":7,"author":{"gitId":"Ebolaeater"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Ebolaeater"},"content":" * Initializes the chatbot and starts up the UI to take in user input"},{"lineNumber":9,"author":{"gitId":"Ebolaeater"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":11,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Ebolaeater"},"content":"     * ui refers to the User Interface object which will be used to accept user input"},{"lineNumber":13,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"Ebolaeater"},"content":"    private UI ui;"},{"lineNumber":15,"author":{"gitId":"Ebolaeater"},"content":"    private VBox dialogContainer;"},{"lineNumber":16,"author":{"gitId":"Ebolaeater"},"content":"    private TextField userInput;"},{"lineNumber":17,"author":{"gitId":"Ebolaeater"},"content":"    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":18,"author":{"gitId":"Ebolaeater"},"content":"    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":19,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":20,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":21,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Ebolaeater"},"content":"     * Uses the filepath to intiialize the storage and hence, the UI object"},{"lineNumber":23,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"Ebolaeater"},"content":"     * @param filePath"},{"lineNumber":25,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Ebolaeater"},"content":"    public Duke(String filePath) {"},{"lineNumber":27,"author":{"gitId":"Ebolaeater"},"content":"        assert filePath.length() !\u003d 0 : \"An empty filepath was provided\";"},{"lineNumber":28,"author":{"gitId":"Ebolaeater"},"content":"        Storage storage \u003d new Storage(filePath);"},{"lineNumber":29,"author":{"gitId":"Ebolaeater"},"content":"        this.ui \u003d new UI(storage);"},{"lineNumber":30,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":32,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Ebolaeater"},"content":"     * Default constructor"},{"lineNumber":34,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Ebolaeater"},"content":"    public Duke() {"},{"lineNumber":36,"author":{"gitId":"Ebolaeater"},"content":"        Storage storage \u003d new Storage(\"Data/duke.txt\");"},{"lineNumber":37,"author":{"gitId":"Ebolaeater"},"content":"        this.ui \u003d new UI(storage);"},{"lineNumber":38,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":40,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"Ebolaeater"},"content":"     * Iteration 1:"},{"lineNumber":42,"author":{"gitId":"Ebolaeater"},"content":"     * Creates a label with the specified text and adds it to the dialog container."},{"lineNumber":43,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"Ebolaeater"},"content":"     * @param text String containing text to add"},{"lineNumber":45,"author":{"gitId":"Ebolaeater"},"content":"     * @return a label with the specified text that has word wrap enabled."},{"lineNumber":46,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Ebolaeater"},"content":"    private Label getDialogLabel(String text) {"},{"lineNumber":48,"author":{"gitId":"Ebolaeater"},"content":"        Label textToAdd \u003d new Label(text);"},{"lineNumber":49,"author":{"gitId":"Ebolaeater"},"content":"        textToAdd.setWrapText(true);"},{"lineNumber":50,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":51,"author":{"gitId":"Ebolaeater"},"content":"        return textToAdd;"},{"lineNumber":52,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":54,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"Ebolaeater"},"content":"     * Iteration 2:"},{"lineNumber":56,"author":{"gitId":"Ebolaeater"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":57,"author":{"gitId":"Ebolaeater"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":58,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"Ebolaeater"},"content":"    private void handleUserInput() {"},{"lineNumber":60,"author":{"gitId":"Ebolaeater"},"content":"        Label userText \u003d new Label(userInput.getText());"},{"lineNumber":61,"author":{"gitId":"Ebolaeater"},"content":"        Label dukeText \u003d new Label(getResponse(userInput.getText()));"},{"lineNumber":62,"author":{"gitId":"Ebolaeater"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":63,"author":{"gitId":"Ebolaeater"},"content":"                DialogBox.getUserDialog(userText, user),"},{"lineNumber":64,"author":{"gitId":"Ebolaeater"},"content":"                DialogBox.getDukeDialog(dukeText, duke)"},{"lineNumber":65,"author":{"gitId":"Ebolaeater"},"content":"        );"},{"lineNumber":66,"author":{"gitId":"Ebolaeater"},"content":"        userInput.clear();"},{"lineNumber":67,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":69,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"Ebolaeater"},"content":"     * You should have your own function to generate a response to user input."},{"lineNumber":71,"author":{"gitId":"Ebolaeater"},"content":"     * Replace this stub with your completed method."},{"lineNumber":72,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"Ebolaeater"},"content":"    public String getResponse(String input) {"},{"lineNumber":74,"author":{"gitId":"Ebolaeater"},"content":"        return ui.getResponse(input);"},{"lineNumber":75,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":77,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":79,"author":{"gitId":"Ebolaeater"},"content":"        new Duke();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Ebolaeater":77,"-":4}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ebolaeater"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":"public class Launcher {"},{"lineNumber":4,"author":{"gitId":"Ebolaeater"},"content":"    public static void main(String[] args) {"},{"lineNumber":5,"author":{"gitId":"Ebolaeater"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"Ebolaeater"},"content":"}"}],"authorContributionMap":{"Ebolaeater":7}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ebolaeater"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"Ebolaeater"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"Ebolaeater"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"Ebolaeater"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":9,"author":{"gitId":"Ebolaeater"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Ebolaeater"},"content":" * A GUI for Duke using FXML."},{"lineNumber":11,"author":{"gitId":"Ebolaeater"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Ebolaeater"},"content":"public class Main extends Application {"},{"lineNumber":13,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":14,"author":{"gitId":"Ebolaeater"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":15,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":16,"author":{"gitId":"Ebolaeater"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"Ebolaeater"},"content":"    public void start(Stage stage) {"},{"lineNumber":18,"author":{"gitId":"Ebolaeater"},"content":"        assert stage !\u003d null : \"A null stage object was passed in\";"},{"lineNumber":19,"author":{"gitId":"Ebolaeater"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"Ebolaeater"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":21,"author":{"gitId":"Ebolaeater"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":22,"author":{"gitId":"Ebolaeater"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":23,"author":{"gitId":"Ebolaeater"},"content":"            stage.setScene(scene);"},{"lineNumber":24,"author":{"gitId":"Ebolaeater"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":25,"author":{"gitId":"Ebolaeater"},"content":"            stage.show();"},{"lineNumber":26,"author":{"gitId":"Ebolaeater"},"content":"        } catch (IOException e) {"},{"lineNumber":27,"author":{"gitId":"Ebolaeater"},"content":"            e.printStackTrace();"},{"lineNumber":28,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Ebolaeater"},"content":"}"}],"authorContributionMap":{"Ebolaeater":30}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ebolaeater"},"content":"import javafx.fxml.FXML;"},{"lineNumber":2,"author":{"gitId":"Ebolaeater"},"content":"import javafx.scene.control.Button;"},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":"import javafx.scene.control.Label;"},{"lineNumber":4,"author":{"gitId":"Ebolaeater"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":5,"author":{"gitId":"Ebolaeater"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":"import javafx.scene.image.Image;"},{"lineNumber":7,"author":{"gitId":"Ebolaeater"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":8,"author":{"gitId":"Ebolaeater"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":9,"author":{"gitId":"Ebolaeater"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Ebolaeater"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":11,"author":{"gitId":"Ebolaeater"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Ebolaeater"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":13,"author":{"gitId":"Ebolaeater"},"content":"    @FXML"},{"lineNumber":14,"author":{"gitId":"Ebolaeater"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":15,"author":{"gitId":"Ebolaeater"},"content":"    @FXML"},{"lineNumber":16,"author":{"gitId":"Ebolaeater"},"content":"    private VBox dialogContainer;"},{"lineNumber":17,"author":{"gitId":"Ebolaeater"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"Ebolaeater"},"content":"    private TextField userInput;"},{"lineNumber":19,"author":{"gitId":"Ebolaeater"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"Ebolaeater"},"content":"    private Button sendButton;"},{"lineNumber":21,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":22,"author":{"gitId":"Ebolaeater"},"content":"    private Duke duke;"},{"lineNumber":23,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":24,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":25,"author":{"gitId":"Ebolaeater"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":26,"author":{"gitId":"Ebolaeater"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":27,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":28,"author":{"gitId":"Ebolaeater"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"Ebolaeater"},"content":"    public void initialize() {"},{"lineNumber":30,"author":{"gitId":"Ebolaeater"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":31,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":33,"author":{"gitId":"Ebolaeater"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":34,"author":{"gitId":"Ebolaeater"},"content":"        duke \u003d d;"},{"lineNumber":35,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":37,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Ebolaeater"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":39,"author":{"gitId":"Ebolaeater"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":40,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Ebolaeater"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"Ebolaeater"},"content":"    private void handleUserInput() {"},{"lineNumber":43,"author":{"gitId":"Ebolaeater"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":44,"author":{"gitId":"Ebolaeater"},"content":"        Label label \u003d new Label(input);"},{"lineNumber":45,"author":{"gitId":"Ebolaeater"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":46,"author":{"gitId":"Ebolaeater"},"content":"        if (response.contains(\"Error!\")){"},{"lineNumber":47,"author":{"gitId":"Ebolaeater"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":48,"author":{"gitId":"Ebolaeater"},"content":"                    DialogBox.getUserDialog(new Label(input), userImage),"},{"lineNumber":49,"author":{"gitId":"Ebolaeater"},"content":"                    DialogBox.getErrorBox(response, dukeImage));"},{"lineNumber":50,"author":{"gitId":"Ebolaeater"},"content":"        } else {"},{"lineNumber":51,"author":{"gitId":"Ebolaeater"},"content":"            Label label2 \u003d new Label(response);"},{"lineNumber":52,"author":{"gitId":"Ebolaeater"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":53,"author":{"gitId":"Ebolaeater"},"content":"                    DialogBox.getUserDialog(label, userImage),"},{"lineNumber":54,"author":{"gitId":"Ebolaeater"},"content":"                    DialogBox.getDukeDialog(label2, dukeImage)"},{"lineNumber":55,"author":{"gitId":"Ebolaeater"},"content":"            );"},{"lineNumber":56,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"Ebolaeater"},"content":"        userInput.clear();"},{"lineNumber":58,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":59,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Ebolaeater"},"content":"}"}],"authorContributionMap":{"Ebolaeater":60}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ebolaeater"},"content":"import java.time.LocalDateTime;"},{"lineNumber":2,"author":{"gitId":"Ebolaeater"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"Ebolaeater"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"Ebolaeater"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":7,"author":{"gitId":"Ebolaeater"},"content":"import exceptions.EmptyTodoException;"},{"lineNumber":8,"author":{"gitId":"Ebolaeater"},"content":"import exceptions.InvalidDateException;"},{"lineNumber":9,"author":{"gitId":"Ebolaeater"},"content":"import exceptions.InvalidDeadlineException;"},{"lineNumber":10,"author":{"gitId":"Ebolaeater"},"content":"import exceptions.InvalidEventException;"},{"lineNumber":11,"author":{"gitId":"Ebolaeater"},"content":"import exceptions.InvalidNumberException;"},{"lineNumber":12,"author":{"gitId":"Ebolaeater"},"content":"import exceptions.InvalidTaskException;"},{"lineNumber":13,"author":{"gitId":"Ebolaeater"},"content":"import exceptions.UnknownCommandException;"},{"lineNumber":14,"author":{"gitId":"Ebolaeater"},"content":"import tasks.Deadline;"},{"lineNumber":15,"author":{"gitId":"Ebolaeater"},"content":"import tasks.Event;"},{"lineNumber":16,"author":{"gitId":"Ebolaeater"},"content":"import tasks.Task;"},{"lineNumber":17,"author":{"gitId":"Ebolaeater"},"content":"import tasks.ToDos;"},{"lineNumber":18,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":19,"author":{"gitId":"Ebolaeater"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"Ebolaeater"},"content":" * class consisting of static methods which are used to make sense of the user commands"},{"lineNumber":21,"author":{"gitId":"Ebolaeater"},"content":" */"},{"lineNumber":22,"author":{"gitId":"Ebolaeater"},"content":"public class Parser {"},{"lineNumber":23,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Ebolaeater"},"content":"     * Parse the user input and get the right response"},{"lineNumber":25,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"Ebolaeater"},"content":"     * @param input String inputted by the user"},{"lineNumber":27,"author":{"gitId":"Ebolaeater"},"content":"     * @param list A TaskList containing all the tasks inputted by the user"},{"lineNumber":28,"author":{"gitId":"Ebolaeater"},"content":"     * @return String containing the response from duke"},{"lineNumber":29,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Ebolaeater"},"content":"    public static String getResponse(String input, TaskList list) {"},{"lineNumber":31,"author":{"gitId":"Ebolaeater"},"content":"        input \u003d input.trim();"},{"lineNumber":32,"author":{"gitId":"Ebolaeater"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"Ebolaeater"},"content":"            validity(input);"},{"lineNumber":34,"author":{"gitId":"Ebolaeater"},"content":"        } catch (UnknownCommandException ex) {"},{"lineNumber":35,"author":{"gitId":"Ebolaeater"},"content":"            return \"Error! Unknown command\";"},{"lineNumber":36,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"Ebolaeater"},"content":"        String[] inputs \u003d input.split(\" \");"},{"lineNumber":38,"author":{"gitId":"Ebolaeater"},"content":"        assert inputs.length !\u003d 0 : \"Input cannot be empty\";"},{"lineNumber":39,"author":{"gitId":"Ebolaeater"},"content":"        String str;"},{"lineNumber":40,"author":{"gitId":"Ebolaeater"},"content":"        switch(inputs[0]) {"},{"lineNumber":41,"author":{"gitId":"Ebolaeater"},"content":"        case \"todo\":"},{"lineNumber":42,"author":{"gitId":"Ebolaeater"},"content":"            try {"},{"lineNumber":43,"author":{"gitId":"Ebolaeater"},"content":"                str \u003d getTodo(input, list);"},{"lineNumber":44,"author":{"gitId":"Ebolaeater"},"content":"            } catch (EmptyTodoException ex) {"},{"lineNumber":45,"author":{"gitId":"Ebolaeater"},"content":"                return \"Error! Empty todo provided\";"},{"lineNumber":46,"author":{"gitId":"Ebolaeater"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"Ebolaeater"},"content":"            break;"},{"lineNumber":48,"author":{"gitId":"Ebolaeater"},"content":"        case \"event\":"},{"lineNumber":49,"author":{"gitId":"Ebolaeater"},"content":"            try {"},{"lineNumber":50,"author":{"gitId":"Ebolaeater"},"content":"                str \u003d getEventTest(input, list);"},{"lineNumber":51,"author":{"gitId":"Ebolaeater"},"content":"            } catch (InvalidEventException e) {"},{"lineNumber":52,"author":{"gitId":"Ebolaeater"},"content":"                return \"Error! Invalid event provided\";"},{"lineNumber":53,"author":{"gitId":"Ebolaeater"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"Ebolaeater"},"content":"            break;"},{"lineNumber":55,"author":{"gitId":"Ebolaeater"},"content":"        case \"deadline\":"},{"lineNumber":56,"author":{"gitId":"Ebolaeater"},"content":"            try {"},{"lineNumber":57,"author":{"gitId":"Ebolaeater"},"content":"                str \u003d getDeadline(input, list);"},{"lineNumber":58,"author":{"gitId":"Ebolaeater"},"content":"            } catch (InvalidDeadlineException e) {"},{"lineNumber":59,"author":{"gitId":"Ebolaeater"},"content":"                return \"Error! Invalid deadline given\";"},{"lineNumber":60,"author":{"gitId":"Ebolaeater"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"Ebolaeater"},"content":"            break;"},{"lineNumber":62,"author":{"gitId":"Ebolaeater"},"content":"        case \"delete\":"},{"lineNumber":63,"author":{"gitId":"Ebolaeater"},"content":"            if (inputs.length !\u003d 2) {"},{"lineNumber":64,"author":{"gitId":"Ebolaeater"},"content":"                str \u003d \"Error! Incorrect format provided\";"},{"lineNumber":65,"author":{"gitId":"Ebolaeater"},"content":"            } else {"},{"lineNumber":66,"author":{"gitId":"Ebolaeater"},"content":"                str \u003d delete(inputs[1], list);"},{"lineNumber":67,"author":{"gitId":"Ebolaeater"},"content":"            }"},{"lineNumber":68,"author":{"gitId":"Ebolaeater"},"content":"            break;"},{"lineNumber":69,"author":{"gitId":"Ebolaeater"},"content":"        case \"find\":"},{"lineNumber":70,"author":{"gitId":"Ebolaeater"},"content":"            try {"},{"lineNumber":71,"author":{"gitId":"Ebolaeater"},"content":"                str \u003d find(input, list);"},{"lineNumber":72,"author":{"gitId":"Ebolaeater"},"content":"            } catch (InvalidNumberException e) {"},{"lineNumber":73,"author":{"gitId":"Ebolaeater"},"content":"                return \"Error! No searches found\";"},{"lineNumber":74,"author":{"gitId":"Ebolaeater"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"Ebolaeater"},"content":"            break;"},{"lineNumber":76,"author":{"gitId":"Ebolaeater"},"content":"        case \"list\":"},{"lineNumber":77,"author":{"gitId":"Ebolaeater"},"content":"            str \u003d list.toString();"},{"lineNumber":78,"author":{"gitId":"Ebolaeater"},"content":"            break;"},{"lineNumber":79,"author":{"gitId":"Ebolaeater"},"content":"        case \"bye\":"},{"lineNumber":80,"author":{"gitId":"Ebolaeater"},"content":"            str \u003d \"Bye!! Hope to see you soon\";"},{"lineNumber":81,"author":{"gitId":"Ebolaeater"},"content":"            break;"},{"lineNumber":82,"author":{"gitId":"Ebolaeater"},"content":"        case \"number\":"},{"lineNumber":83,"author":{"gitId":"Ebolaeater"},"content":"            str \u003d \"Number of tasks to do is \" + list.getSize();"},{"lineNumber":84,"author":{"gitId":"Ebolaeater"},"content":"            break;"},{"lineNumber":85,"author":{"gitId":"Ebolaeater"},"content":"        case \"update\":"},{"lineNumber":86,"author":{"gitId":"Ebolaeater"},"content":"            try {"},{"lineNumber":87,"author":{"gitId":"Ebolaeater"},"content":"                str \u003d changeTask(input, list);"},{"lineNumber":88,"author":{"gitId":"Ebolaeater"},"content":"            } catch (InvalidTaskException ex) {"},{"lineNumber":89,"author":{"gitId":"Ebolaeater"},"content":"                return \"Error! Invalid task provided\";"},{"lineNumber":90,"author":{"gitId":"Ebolaeater"},"content":"            }"},{"lineNumber":91,"author":{"gitId":"Ebolaeater"},"content":"            break;"},{"lineNumber":92,"author":{"gitId":"Ebolaeater"},"content":"        default:"},{"lineNumber":93,"author":{"gitId":"Ebolaeater"},"content":"            if (inputs.length !\u003d 2) {"},{"lineNumber":94,"author":{"gitId":"Ebolaeater"},"content":"                return \"Error! Invalid number of arguments\";"},{"lineNumber":95,"author":{"gitId":"Ebolaeater"},"content":"            }"},{"lineNumber":96,"author":{"gitId":"Ebolaeater"},"content":"            str \u003d update(inputs[1], list);"},{"lineNumber":97,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"Ebolaeater"},"content":"        Storage.save(list);"},{"lineNumber":99,"author":{"gitId":"Ebolaeater"},"content":"        return str;"},{"lineNumber":100,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":102,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"Ebolaeater"},"content":"     * @param request"},{"lineNumber":105,"author":{"gitId":"Ebolaeater"},"content":"     * @param list"},{"lineNumber":106,"author":{"gitId":"Ebolaeater"},"content":"     * @return"},{"lineNumber":107,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"Ebolaeater"},"content":"    public static String changeTask(String request, TaskList list) throws InvalidTaskException {"},{"lineNumber":109,"author":{"gitId":"Ebolaeater"},"content":"        assert !request.equals(\"\") : \"An empty string is not allowed\";"},{"lineNumber":110,"author":{"gitId":"Ebolaeater"},"content":"        String[] requests \u003d request.split(\" \");"},{"lineNumber":111,"author":{"gitId":"Ebolaeater"},"content":"        if (requests.length \u003c 4) {"},{"lineNumber":112,"author":{"gitId":"Ebolaeater"},"content":"            throw new InvalidTaskException();"},{"lineNumber":113,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"Ebolaeater"},"content":"        int index \u003d 0;"},{"lineNumber":115,"author":{"gitId":"Ebolaeater"},"content":"        try {"},{"lineNumber":116,"author":{"gitId":"Ebolaeater"},"content":"            index \u003d Integer.parseInt(requests[1]);"},{"lineNumber":117,"author":{"gitId":"Ebolaeater"},"content":"            isNumeric(index, list);"},{"lineNumber":118,"author":{"gitId":"Ebolaeater"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":119,"author":{"gitId":"Ebolaeater"},"content":"            return \"Error! You have not provided a valid number\";"},{"lineNumber":120,"author":{"gitId":"Ebolaeater"},"content":"        } catch (InvalidNumberException e) {"},{"lineNumber":121,"author":{"gitId":"Ebolaeater"},"content":"            return \"Error! The number provided was greater or lesser than the number of items in the list\";"},{"lineNumber":122,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"Ebolaeater"},"content":"        Task task \u003d list.get(index);"},{"lineNumber":124,"author":{"gitId":"Ebolaeater"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":125,"author":{"gitId":"Ebolaeater"},"content":"        for (int i \u003d 3; i \u003c requests.length; i++) {"},{"lineNumber":126,"author":{"gitId":"Ebolaeater"},"content":"            sb.append(requests[i]);"},{"lineNumber":127,"author":{"gitId":"Ebolaeater"},"content":"            sb.append(\" \");"},{"lineNumber":128,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"Ebolaeater"},"content":"        String updatedString \u003d task + \" has been updated to \";"},{"lineNumber":130,"author":{"gitId":"Ebolaeater"},"content":"        String newWork \u003d sb.toString();"},{"lineNumber":131,"author":{"gitId":"Ebolaeater"},"content":"        if (requests[2].equals(\"date\") \u0026\u0026 task.istodo()) {"},{"lineNumber":132,"author":{"gitId":"Ebolaeater"},"content":"            return \"Not possible to change the date of a todo\";"},{"lineNumber":133,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"Ebolaeater"},"content":"        if (requests[2].equals(\"date\")) {"},{"lineNumber":135,"author":{"gitId":"Ebolaeater"},"content":"            try {"},{"lineNumber":136,"author":{"gitId":"Ebolaeater"},"content":"                LocalDateTime date \u003d parseDate(requests[3] + \" \" + requests[4]);"},{"lineNumber":137,"author":{"gitId":"Ebolaeater"},"content":"                task.setDate(date);"},{"lineNumber":138,"author":{"gitId":"Ebolaeater"},"content":"                System.out.println(task.toString());"},{"lineNumber":139,"author":{"gitId":"Ebolaeater"},"content":"            } catch (InvalidDateException ex) {"},{"lineNumber":140,"author":{"gitId":"Ebolaeater"},"content":"                return \"Error! Invalid date format used\";"},{"lineNumber":141,"author":{"gitId":"Ebolaeater"},"content":"            }"},{"lineNumber":142,"author":{"gitId":"Ebolaeater"},"content":"        } else {"},{"lineNumber":143,"author":{"gitId":"Ebolaeater"},"content":"            task.setWork(newWork);"},{"lineNumber":144,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":146,"author":{"gitId":"Ebolaeater"},"content":"        return updatedString + task.toString();"},{"lineNumber":147,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":149,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"Ebolaeater"},"content":"     * @param str"},{"lineNumber":151,"author":{"gitId":"Ebolaeater"},"content":"     * @return"},{"lineNumber":152,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"Ebolaeater"},"content":"    public static LocalDateTime parseDate(String str) throws InvalidDateException {"},{"lineNumber":154,"author":{"gitId":"Ebolaeater"},"content":"        str \u003d str.trim();"},{"lineNumber":155,"author":{"gitId":"Ebolaeater"},"content":"        String datestr \u003d str.replaceAll(\"-\", \"/\");"},{"lineNumber":156,"author":{"gitId":"Ebolaeater"},"content":"        String[] datearr \u003d datestr.split(\"/\");"},{"lineNumber":157,"author":{"gitId":"Ebolaeater"},"content":"        System.out.println(datestr);"},{"lineNumber":158,"author":{"gitId":"Ebolaeater"},"content":"        if (datearr.length \u003c 2) {"},{"lineNumber":159,"author":{"gitId":"Ebolaeater"},"content":"            throw new InvalidDateException();"},{"lineNumber":160,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"Ebolaeater"},"content":"        if (datearr[0].length() \u003c 2) {"},{"lineNumber":162,"author":{"gitId":"Ebolaeater"},"content":"            datestr \u003d \"0\" + datestr;"},{"lineNumber":163,"author":{"gitId":"Ebolaeater"},"content":"            datearr[0] \u003d \"0\" + datearr[0];"},{"lineNumber":164,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"Ebolaeater"},"content":"        if (datearr[1].length() \u003c 2) {"},{"lineNumber":166,"author":{"gitId":"Ebolaeater"},"content":"            datestr \u003d datearr[0] + \"/0\" + datearr[1] + \"/\" + datearr[2];"},{"lineNumber":167,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"Ebolaeater"},"content":"        if (!datestr.contains(\":\")) {"},{"lineNumber":169,"author":{"gitId":"Ebolaeater"},"content":"            String[] arr \u003d datestr.split(\" \");"},{"lineNumber":170,"author":{"gitId":"Ebolaeater"},"content":"            if (arr.length !\u003d 2) {"},{"lineNumber":171,"author":{"gitId":"Ebolaeater"},"content":"                throw new InvalidDateException();"},{"lineNumber":172,"author":{"gitId":"Ebolaeater"},"content":"            }"},{"lineNumber":173,"author":{"gitId":"Ebolaeater"},"content":"            arr[1] \u003d arr[1].substring(0, 2) + \":\" + arr[1].substring(2);"},{"lineNumber":174,"author":{"gitId":"Ebolaeater"},"content":"            datestr \u003d arr[0] + \" \" + arr[1];"},{"lineNumber":175,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"Ebolaeater"},"content":"        try {"},{"lineNumber":177,"author":{"gitId":"Ebolaeater"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"},{"lineNumber":178,"author":{"gitId":"Ebolaeater"},"content":"            LocalDateTime date \u003d LocalDateTime.parse(datestr, formatter);"},{"lineNumber":179,"author":{"gitId":"Ebolaeater"},"content":"            return date;"},{"lineNumber":180,"author":{"gitId":"Ebolaeater"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":181,"author":{"gitId":"Ebolaeater"},"content":"            throw new InvalidDateException();"},{"lineNumber":182,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":185,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":186,"author":{"gitId":"Ebolaeater"},"content":"     * Removes the user requested task from the tasklist"},{"lineNumber":187,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":188,"author":{"gitId":"Ebolaeater"},"content":"     * @param request A string containing the integer value of the index."},{"lineNumber":189,"author":{"gitId":"Ebolaeater"},"content":"     * @param list The tasklist object containing all the stored tasks."},{"lineNumber":190,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":191,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":192,"author":{"gitId":"Ebolaeater"},"content":"    public static String delete(String request, TaskList list) {"},{"lineNumber":193,"author":{"gitId":"Ebolaeater"},"content":"        assert !request.equals(\"\") : \"Invalid input\";"},{"lineNumber":194,"author":{"gitId":"Ebolaeater"},"content":"        try {"},{"lineNumber":195,"author":{"gitId":"Ebolaeater"},"content":"            int index \u003d Integer.parseInt(request);"},{"lineNumber":196,"author":{"gitId":"Ebolaeater"},"content":"            isNumeric(index, list);"},{"lineNumber":197,"author":{"gitId":"Ebolaeater"},"content":"            String str \u003d \"The event has been removed as per your request: \\n \""},{"lineNumber":198,"author":{"gitId":"Ebolaeater"},"content":"                    + list.get(index);"},{"lineNumber":199,"author":{"gitId":"Ebolaeater"},"content":"            list.delete(index);"},{"lineNumber":200,"author":{"gitId":"Ebolaeater"},"content":"            str +\u003d \". Now you have \" + list.getSize() + \" tasks to the list\";"},{"lineNumber":201,"author":{"gitId":"Ebolaeater"},"content":"            return str;"},{"lineNumber":202,"author":{"gitId":"Ebolaeater"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":203,"author":{"gitId":"Ebolaeater"},"content":"            return \"Error! You have not provided a valid number\";"},{"lineNumber":204,"author":{"gitId":"Ebolaeater"},"content":"        } catch (InvalidNumberException e) {"},{"lineNumber":205,"author":{"gitId":"Ebolaeater"},"content":"            return \"Error! The number provided was greater or lesser than the number of items in the list\";"},{"lineNumber":206,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":207,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":209,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":210,"author":{"gitId":"Ebolaeater"},"content":"     * Marks the task at the user requested index as done"},{"lineNumber":211,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":212,"author":{"gitId":"Ebolaeater"},"content":"     * @param request A String containing the integer value of the index"},{"lineNumber":213,"author":{"gitId":"Ebolaeater"},"content":"     * @param list The tasklist object containing all the stored tasks."},{"lineNumber":214,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":215,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":216,"author":{"gitId":"Ebolaeater"},"content":"    public static String update(String request, TaskList list) {"},{"lineNumber":217,"author":{"gitId":"Ebolaeater"},"content":"        assert !request.equals(\"\") : \"Input is invalid\";"},{"lineNumber":218,"author":{"gitId":"Ebolaeater"},"content":"        try {"},{"lineNumber":219,"author":{"gitId":"Ebolaeater"},"content":"            int index \u003d Integer.parseInt(request);"},{"lineNumber":220,"author":{"gitId":"Ebolaeater"},"content":"            isNumeric(index, list);"},{"lineNumber":221,"author":{"gitId":"Ebolaeater"},"content":"            list.updateStatus(index);"},{"lineNumber":222,"author":{"gitId":"Ebolaeater"},"content":"            String str \u003d \"Nice! I\u0027ve marked this task as done: \\n \""},{"lineNumber":223,"author":{"gitId":"Ebolaeater"},"content":"                    + list.get(index);"},{"lineNumber":224,"author":{"gitId":"Ebolaeater"},"content":"            str +\u003d \". Now you have \" + list.getSize() + \" tasks in the list\";"},{"lineNumber":225,"author":{"gitId":"Ebolaeater"},"content":"            return str;"},{"lineNumber":226,"author":{"gitId":"Ebolaeater"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":227,"author":{"gitId":"Ebolaeater"},"content":"            return \"You have not provided a valid number\";"},{"lineNumber":228,"author":{"gitId":"Ebolaeater"},"content":"        } catch (InvalidNumberException e) {"},{"lineNumber":229,"author":{"gitId":"Ebolaeater"},"content":"            return \"The number provided was greater or lesser than the \""},{"lineNumber":230,"author":{"gitId":"Ebolaeater"},"content":"                    + \"number of items in the list\";"},{"lineNumber":231,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":232,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":233,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":234,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":235,"author":{"gitId":"Ebolaeater"},"content":"     * Checking if the index provided by the user is of the right size"},{"lineNumber":236,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":237,"author":{"gitId":"Ebolaeater"},"content":"     * @param n The index provided by the user"},{"lineNumber":238,"author":{"gitId":"Ebolaeater"},"content":"     * @param list The tasklist object containing all the stored tasks."},{"lineNumber":239,"author":{"gitId":"Ebolaeater"},"content":"     * @throws InvalidNumberException"},{"lineNumber":240,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":241,"author":{"gitId":"Ebolaeater"},"content":"    public static void isNumeric(int n, TaskList list) throws InvalidNumberException {"},{"lineNumber":242,"author":{"gitId":"Ebolaeater"},"content":"        if (list.getSize() \u003c n || n \u003c\u003d 0) {"},{"lineNumber":243,"author":{"gitId":"Ebolaeater"},"content":"            throw new InvalidNumberException(\"The number provided is bigger tha the list size\");"},{"lineNumber":244,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":245,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":246,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":247,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":248,"author":{"gitId":"Ebolaeater"},"content":"     * Adds a deadline object with description and datetime into the tasklist provided"},{"lineNumber":249,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":250,"author":{"gitId":"Ebolaeater"},"content":"     * @param word The input provided by the user with the description of the deadline as well as the date and time"},{"lineNumber":251,"author":{"gitId":"Ebolaeater"},"content":"     * @param list The tasklist object containing all the stored tasks."},{"lineNumber":252,"author":{"gitId":"Ebolaeater"},"content":"     * @return String containing the details of the deadline"},{"lineNumber":253,"author":{"gitId":"Ebolaeater"},"content":"     * @throws InvalidDeadlineException"},{"lineNumber":254,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":255,"author":{"gitId":"Ebolaeater"},"content":"    public static String getDeadline(String word, TaskList list) throws InvalidDeadlineException {"},{"lineNumber":256,"author":{"gitId":"Ebolaeater"},"content":"        if (!(word.contains(\"/by\") \u0026\u0026 !word.substring(word.indexOf(\"/by\") + 3).equals(\"\"))) {"},{"lineNumber":257,"author":{"gitId":"Ebolaeater"},"content":"            throw new InvalidDeadlineException();"},{"lineNumber":258,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":259,"author":{"gitId":"Ebolaeater"},"content":"        word \u003d word.substring(8);"},{"lineNumber":260,"author":{"gitId":"Ebolaeater"},"content":"        assert word.length() \u003e 0 : \"A deadline cannot be empty\";"},{"lineNumber":261,"author":{"gitId":"Ebolaeater"},"content":"        int index \u003d word.indexOf(\"/by\");"},{"lineNumber":262,"author":{"gitId":"Ebolaeater"},"content":"        String str \u003d word.substring(index + 3).trim();"},{"lineNumber":263,"author":{"gitId":"Ebolaeater"},"content":"        String datestr \u003d str.replaceAll(\"-\", \"/\");"},{"lineNumber":264,"author":{"gitId":"Ebolaeater"},"content":"        String[] datearr \u003d datestr.split(\"/\");"},{"lineNumber":265,"author":{"gitId":"Ebolaeater"},"content":"        if (datearr.length \u003c 2) {"},{"lineNumber":266,"author":{"gitId":"Ebolaeater"},"content":"            throw new InvalidDeadlineException();"},{"lineNumber":267,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":268,"author":{"gitId":"Ebolaeater"},"content":"        if (datearr[0].length() \u003c 2) {"},{"lineNumber":269,"author":{"gitId":"Ebolaeater"},"content":"            datestr \u003d \"0\" + datestr;"},{"lineNumber":270,"author":{"gitId":"Ebolaeater"},"content":"            datearr[0] \u003d \"0\" + datearr[0];"},{"lineNumber":271,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":272,"author":{"gitId":"Ebolaeater"},"content":"        if (datearr[1].length() \u003c 2) {"},{"lineNumber":273,"author":{"gitId":"Ebolaeater"},"content":"            datestr \u003d datearr[0] + \"/0\" + datearr[1] + \"/\" + datearr[2];"},{"lineNumber":274,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":275,"author":{"gitId":"Ebolaeater"},"content":"        if (!datestr.contains(\":\")) {"},{"lineNumber":276,"author":{"gitId":"Ebolaeater"},"content":"            String[] arr \u003d datestr.split(\" \");"},{"lineNumber":277,"author":{"gitId":"Ebolaeater"},"content":"            if (arr.length \u003e 2) {"},{"lineNumber":278,"author":{"gitId":"Ebolaeater"},"content":"                throw new InvalidDeadlineException();"},{"lineNumber":279,"author":{"gitId":"Ebolaeater"},"content":"            }"},{"lineNumber":280,"author":{"gitId":"Ebolaeater"},"content":"            arr[1] \u003d arr[1].substring(0, 2) + \":\" + arr[1].substring(2);"},{"lineNumber":281,"author":{"gitId":"Ebolaeater"},"content":"            datestr \u003d arr[0] + \" \" + arr[1];"},{"lineNumber":282,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":283,"author":{"gitId":"Ebolaeater"},"content":"        try {"},{"lineNumber":284,"author":{"gitId":"Ebolaeater"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"},{"lineNumber":285,"author":{"gitId":"Ebolaeater"},"content":"            LocalDateTime date \u003d LocalDateTime.parse(datestr, formatter);"},{"lineNumber":286,"author":{"gitId":"Ebolaeater"},"content":"            Deadline deadline \u003d new Deadline(word.substring(0, index), date);"},{"lineNumber":287,"author":{"gitId":"Ebolaeater"},"content":"            list.update(deadline);"},{"lineNumber":288,"author":{"gitId":"Ebolaeater"},"content":"            return deadline.toString() + \" has been added to the list. You have \" + list.getSize() + \" tasks left to do\";"},{"lineNumber":289,"author":{"gitId":"Ebolaeater"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":290,"author":{"gitId":"Ebolaeater"},"content":"            return \"Error! Invalid Date provided\";"},{"lineNumber":291,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":292,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":293,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":294,"author":{"gitId":"Ebolaeater"},"content":"     * Adds an event object with description and datetime into the tasklist provided"},{"lineNumber":295,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":296,"author":{"gitId":"Ebolaeater"},"content":"     * @param word The input provided by the user with the description of the event as well as the date and time"},{"lineNumber":297,"author":{"gitId":"Ebolaeater"},"content":"     * @param list The tasklist object containing all the stored tasks."},{"lineNumber":298,"author":{"gitId":"Ebolaeater"},"content":"     * @return String object containing the details of the event"},{"lineNumber":299,"author":{"gitId":"Ebolaeater"},"content":"     * @throws InvalidEventException"},{"lineNumber":300,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":301,"author":{"gitId":"Ebolaeater"},"content":"    public static String getEventTest(String word, TaskList list) throws InvalidEventException {"},{"lineNumber":302,"author":{"gitId":"Ebolaeater"},"content":"        if (!(word.contains(\"/at\") \u0026\u0026 !word.substring(word.indexOf(\"/at\") + 3).equals(\"\"))) {"},{"lineNumber":303,"author":{"gitId":"Ebolaeater"},"content":"            throw new InvalidEventException();"},{"lineNumber":304,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":305,"author":{"gitId":"Ebolaeater"},"content":"        word \u003d word.substring(5);"},{"lineNumber":306,"author":{"gitId":"Ebolaeater"},"content":"        int index \u003d word.indexOf(\"/at\");"},{"lineNumber":307,"author":{"gitId":"Ebolaeater"},"content":"        String str \u003d word.substring(index + 3).trim();"},{"lineNumber":308,"author":{"gitId":"Ebolaeater"},"content":"        String datestr \u003d str.replaceAll(\"-\", \"/\");"},{"lineNumber":309,"author":{"gitId":"Ebolaeater"},"content":"        String[] datearr \u003d datestr.split(\"/\");"},{"lineNumber":310,"author":{"gitId":"Ebolaeater"},"content":"        if (datearr.length \u003c 2) {"},{"lineNumber":311,"author":{"gitId":"Ebolaeater"},"content":"            throw new InvalidEventException();"},{"lineNumber":312,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":313,"author":{"gitId":"Ebolaeater"},"content":"        if (datearr[0].length() \u003c 2) {"},{"lineNumber":314,"author":{"gitId":"Ebolaeater"},"content":"            datestr \u003d \"0\" + datestr;"},{"lineNumber":315,"author":{"gitId":"Ebolaeater"},"content":"            datearr[0] \u003d \"0\" + datearr[0];"},{"lineNumber":316,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":317,"author":{"gitId":"Ebolaeater"},"content":"        if (datearr[1].length() \u003c 2) {"},{"lineNumber":318,"author":{"gitId":"Ebolaeater"},"content":"            datestr \u003d datearr[0] + \"/0\" + datearr[1] + \"/\" + datearr[2];"},{"lineNumber":319,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":320,"author":{"gitId":"Ebolaeater"},"content":"        if (!datestr.contains(\":\")) {"},{"lineNumber":321,"author":{"gitId":"Ebolaeater"},"content":"            String[] arr \u003d datestr.split(\" \");"},{"lineNumber":322,"author":{"gitId":"Ebolaeater"},"content":"            if (arr.length \u003e 2) {"},{"lineNumber":323,"author":{"gitId":"Ebolaeater"},"content":"                throw new InvalidEventException();"},{"lineNumber":324,"author":{"gitId":"Ebolaeater"},"content":"            }"},{"lineNumber":325,"author":{"gitId":"Ebolaeater"},"content":"            arr[1] \u003d arr[1].substring(0, 2) + \":\" + arr[1].substring(2);"},{"lineNumber":326,"author":{"gitId":"Ebolaeater"},"content":"            datestr \u003d arr[0] + \" \" + arr[1];"},{"lineNumber":327,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":328,"author":{"gitId":"Ebolaeater"},"content":"        try {"},{"lineNumber":329,"author":{"gitId":"Ebolaeater"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"},{"lineNumber":330,"author":{"gitId":"Ebolaeater"},"content":"            LocalDateTime date \u003d LocalDateTime.parse(datestr, formatter);"},{"lineNumber":331,"author":{"gitId":"Ebolaeater"},"content":"            Event event \u003d new Event(word.substring(0, index), date);"},{"lineNumber":332,"author":{"gitId":"Ebolaeater"},"content":"            list.update(event);"},{"lineNumber":333,"author":{"gitId":"Ebolaeater"},"content":"            return event.toString() + \" has been added to the list. You have \" + list.getSize() + \" tasks left to do\";"},{"lineNumber":334,"author":{"gitId":"Ebolaeater"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":335,"author":{"gitId":"Ebolaeater"},"content":"            return \"Error! Incorrect Date format used\";"},{"lineNumber":336,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":337,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":338,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":339,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":340,"author":{"gitId":"Ebolaeater"},"content":"     * Checks if a command provided by the user is valid"},{"lineNumber":341,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":342,"author":{"gitId":"Ebolaeater"},"content":"     * @param line The String input from the user"},{"lineNumber":343,"author":{"gitId":"Ebolaeater"},"content":"     * @throws UnknownCommandException"},{"lineNumber":344,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":345,"author":{"gitId":"Ebolaeater"},"content":"    public static void validity(String line) throws UnknownCommandException {"},{"lineNumber":346,"author":{"gitId":"Ebolaeater"},"content":"        ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e(Arrays.asList(\"delete\", \"done\", \"todo\","},{"lineNumber":347,"author":{"gitId":"Ebolaeater"},"content":"                \"event\", \"deadline\", \"find\", \"list\", \"bye\", \"number\", \"update\"));"},{"lineNumber":348,"author":{"gitId":"Ebolaeater"},"content":"        String[] words \u003d line.split(\" \");"},{"lineNumber":349,"author":{"gitId":"Ebolaeater"},"content":"        if (line.equals(\"list\") || line.equals(\"bye\") || line.equals(\"number\")) {"},{"lineNumber":350,"author":{"gitId":"Ebolaeater"},"content":"            return;"},{"lineNumber":351,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":352,"author":{"gitId":"Ebolaeater"},"content":"        if (list.contains(words[0]) \u0026\u0026 words.length \u003e 1) {"},{"lineNumber":353,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":354,"author":{"gitId":"Ebolaeater"},"content":"        } else {"},{"lineNumber":355,"author":{"gitId":"Ebolaeater"},"content":"            throw new UnknownCommandException();"},{"lineNumber":356,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":357,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":358,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":359,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":360,"author":{"gitId":"Ebolaeater"},"content":"     * Finds a task based on a keyword"},{"lineNumber":361,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":362,"author":{"gitId":"Ebolaeater"},"content":"     * @param input A user-inputted string which is the keyword"},{"lineNumber":363,"author":{"gitId":"Ebolaeater"},"content":"     * @throws InvalidNumberException"},{"lineNumber":364,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":365,"author":{"gitId":"Ebolaeater"},"content":"    public static String find(String input, TaskList list) throws InvalidNumberException {"},{"lineNumber":366,"author":{"gitId":"Ebolaeater"},"content":"        String[] requests \u003d input.split(\" \");"},{"lineNumber":367,"author":{"gitId":"Ebolaeater"},"content":"        assert requests.length !\u003d 0 : \"Invalid request provided\";"},{"lineNumber":368,"author":{"gitId":"Ebolaeater"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":369,"author":{"gitId":"Ebolaeater"},"content":"        if (requests.length !\u003d 2) {"},{"lineNumber":370,"author":{"gitId":"Ebolaeater"},"content":"            throw new InvalidNumberException(\"More than one keyword was provided\");"},{"lineNumber":371,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":372,"author":{"gitId":"Ebolaeater"},"content":"        for (int i \u003d 1; i \u003c\u003d list.getSize(); i++) {"},{"lineNumber":373,"author":{"gitId":"Ebolaeater"},"content":"            if (list.get(i).getWork().contains(requests[1])) {"},{"lineNumber":374,"author":{"gitId":"Ebolaeater"},"content":"                tasks.add(list.get(i));"},{"lineNumber":375,"author":{"gitId":"Ebolaeater"},"content":"            }"},{"lineNumber":376,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":377,"author":{"gitId":"Ebolaeater"},"content":"        return new TaskList(tasks).toString() + \" contain \" + requests[1];"},{"lineNumber":378,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":379,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":380,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":381,"author":{"gitId":"Ebolaeater"},"content":"     * Adds a toDo object containing the description provided to the list of tasks"},{"lineNumber":382,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":383,"author":{"gitId":"Ebolaeater"},"content":"     * @param work A String containing the description of the todo object that needs to be added"},{"lineNumber":384,"author":{"gitId":"Ebolaeater"},"content":"     * @param list The tasklist object containing all the stored tasks."},{"lineNumber":385,"author":{"gitId":"Ebolaeater"},"content":"     * @return A String containing information about the todo object"},{"lineNumber":386,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":387,"author":{"gitId":"Ebolaeater"},"content":"    public static String getTodo(String work, TaskList list) throws EmptyTodoException {"},{"lineNumber":388,"author":{"gitId":"Ebolaeater"},"content":"        assert work.length() !\u003d 0 : \"Empty strings are not allowed\";"},{"lineNumber":389,"author":{"gitId":"Ebolaeater"},"content":"        if (work.length() \u003e 4) {"},{"lineNumber":390,"author":{"gitId":"Ebolaeater"},"content":"            ToDos todo \u003d new ToDos(work.substring(4));"},{"lineNumber":391,"author":{"gitId":"Ebolaeater"},"content":"            list.update(todo);"},{"lineNumber":392,"author":{"gitId":"Ebolaeater"},"content":"            return todo.toString()  + \" has been added to the list. You have \" + list.getSize() + \" tasks left to do\";"},{"lineNumber":393,"author":{"gitId":"Ebolaeater"},"content":"        } else {"},{"lineNumber":394,"author":{"gitId":"Ebolaeater"},"content":"            throw new EmptyTodoException();"},{"lineNumber":395,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":396,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":397,"author":{"gitId":"Ebolaeater"},"content":"}"}],"authorContributionMap":{"Ebolaeater":397}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ebolaeater"},"content":"import java.io.BufferedReader;"},{"lineNumber":2,"author":{"gitId":"Ebolaeater"},"content":"import java.io.File;"},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":"import java.io.FileReader;"},{"lineNumber":4,"author":{"gitId":"Ebolaeater"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"Ebolaeater"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"Ebolaeater"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"Ebolaeater"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":10,"author":{"gitId":"Ebolaeater"},"content":"import tasks.Deadline;"},{"lineNumber":11,"author":{"gitId":"Ebolaeater"},"content":"import tasks.Event;"},{"lineNumber":12,"author":{"gitId":"Ebolaeater"},"content":"import tasks.Task;"},{"lineNumber":13,"author":{"gitId":"Ebolaeater"},"content":"import tasks.ToDos;"},{"lineNumber":14,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":15,"author":{"gitId":"Ebolaeater"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"Ebolaeater"},"content":" * Made to store and retrieve the data in duke.txt"},{"lineNumber":17,"author":{"gitId":"Ebolaeater"},"content":" * A storage object will have a particular filepath"},{"lineNumber":18,"author":{"gitId":"Ebolaeater"},"content":" * from which it will read and write the tasklist to"},{"lineNumber":19,"author":{"gitId":"Ebolaeater"},"content":" */"},{"lineNumber":20,"author":{"gitId":"Ebolaeater"},"content":"public class Storage {"},{"lineNumber":21,"author":{"gitId":"Ebolaeater"},"content":"    private static String path \u003d \"Data/duke.txt\";"},{"lineNumber":22,"author":{"gitId":"Ebolaeater"},"content":"    private static TaskList list;"},{"lineNumber":23,"author":{"gitId":"Ebolaeater"},"content":"    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":24,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Ebolaeater"},"content":"     * Filepath refers to the path of the file which we will interact with"},{"lineNumber":26,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Ebolaeater"},"content":"    private String filePath;"},{"lineNumber":28,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":29,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Ebolaeater"},"content":"     * Gets the filepath and uses this filepath to find the file which"},{"lineNumber":31,"author":{"gitId":"Ebolaeater"},"content":"     * initialize the tasklist."},{"lineNumber":32,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"Ebolaeater"},"content":"     * @param filepath A string to enable us to access the file to get the tasklist"},{"lineNumber":34,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Ebolaeater"},"content":"    public Storage (String filepath) {"},{"lineNumber":36,"author":{"gitId":"Ebolaeater"},"content":"        assert filepath.length() !\u003d 0 : \"Invalid filepath provided\";"},{"lineNumber":37,"author":{"gitId":"Ebolaeater"},"content":"        this.filePath \u003d filepath;"},{"lineNumber":38,"author":{"gitId":"Ebolaeater"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"Ebolaeater"},"content":"            FileReader file \u003d new FileReader(filepath);"},{"lineNumber":40,"author":{"gitId":"Ebolaeater"},"content":"            BufferedReader reader \u003d new BufferedReader(file);"},{"lineNumber":41,"author":{"gitId":"Ebolaeater"},"content":"            String line;"},{"lineNumber":42,"author":{"gitId":"Ebolaeater"},"content":"            while ((line \u003d reader.readLine()) !\u003d null) {"},{"lineNumber":43,"author":{"gitId":"Ebolaeater"},"content":"                tasks.add(getTask(line));"},{"lineNumber":44,"author":{"gitId":"Ebolaeater"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"Ebolaeater"},"content":"            file.close();"},{"lineNumber":46,"author":{"gitId":"Ebolaeater"},"content":"        } catch (IOException e) {"},{"lineNumber":47,"author":{"gitId":"Ebolaeater"},"content":"            tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":48,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":51,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"Ebolaeater"},"content":"     * Reads the file at the given path and parses the Strings inside into task objects"},{"lineNumber":53,"author":{"gitId":"Ebolaeater"},"content":"     * which can be added to the tasklist"},{"lineNumber":54,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"Ebolaeater"},"content":"     * @param line"},{"lineNumber":56,"author":{"gitId":"Ebolaeater"},"content":"     * @return A Task object which could be a todo, deadline or event"},{"lineNumber":57,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"Ebolaeater"},"content":"    private Task getTask(String line) {"},{"lineNumber":59,"author":{"gitId":"Ebolaeater"},"content":"        Task task;"},{"lineNumber":60,"author":{"gitId":"Ebolaeater"},"content":"        if (line.charAt(1) \u003d\u003d \u0027T\u0027) {"},{"lineNumber":61,"author":{"gitId":"Ebolaeater"},"content":"            task \u003d new ToDos(line.substring(6));"},{"lineNumber":62,"author":{"gitId":"Ebolaeater"},"content":"        } else if (line.charAt(1) \u003d\u003d \u0027D\u0027) {"},{"lineNumber":63,"author":{"gitId":"Ebolaeater"},"content":"            int index \u003d line.indexOf(\"|\");"},{"lineNumber":64,"author":{"gitId":"Ebolaeater"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"},{"lineNumber":65,"author":{"gitId":"Ebolaeater"},"content":"            LocalDateTime date \u003d LocalDateTime.parse(line.substring(index + 1).trim(), formatter);"},{"lineNumber":66,"author":{"gitId":"Ebolaeater"},"content":"            task \u003d new Deadline(line.substring(6, index), date);"},{"lineNumber":67,"author":{"gitId":"Ebolaeater"},"content":"        } else {"},{"lineNumber":68,"author":{"gitId":"Ebolaeater"},"content":"            int index \u003d line.indexOf(\"|\");"},{"lineNumber":69,"author":{"gitId":"Ebolaeater"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"},{"lineNumber":70,"author":{"gitId":"Ebolaeater"},"content":"            LocalDateTime date \u003d LocalDateTime.parse(line.substring(index + 1).trim(), formatter);"},{"lineNumber":71,"author":{"gitId":"Ebolaeater"},"content":"            task \u003d new Event(line.substring(6, index), date);"},{"lineNumber":72,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"Ebolaeater"},"content":"        if (line.charAt(4) \u003d\u003d \u00270\u0027) {"},{"lineNumber":74,"author":{"gitId":"Ebolaeater"},"content":"            task.updateStatus();"},{"lineNumber":75,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"Ebolaeater"},"content":"        assert task !\u003d null : \"A task object can never be null\";"},{"lineNumber":77,"author":{"gitId":"Ebolaeater"},"content":"        return task;"},{"lineNumber":78,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":80,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":81,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"Ebolaeater"},"content":"     * Get the list of tasks from the arraylist"},{"lineNumber":83,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"Ebolaeater"},"content":"     * @return TaskList containing the tasks"},{"lineNumber":85,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"Ebolaeater"},"content":"    public static TaskList loadTest(String filePath) {"},{"lineNumber":87,"author":{"gitId":"Ebolaeater"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":88,"author":{"gitId":"Ebolaeater"},"content":"        try {"},{"lineNumber":89,"author":{"gitId":"Ebolaeater"},"content":"            FileReader file \u003d new FileReader(filePath);"},{"lineNumber":90,"author":{"gitId":"Ebolaeater"},"content":"            BufferedReader reader \u003d new BufferedReader(file);"},{"lineNumber":91,"author":{"gitId":"Ebolaeater"},"content":"            String line;"},{"lineNumber":92,"author":{"gitId":"Ebolaeater"},"content":"            while ((line \u003d reader.readLine()) !\u003d null) {"},{"lineNumber":93,"author":{"gitId":"Ebolaeater"},"content":"                tasks.add(getTasks(line));"},{"lineNumber":94,"author":{"gitId":"Ebolaeater"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"Ebolaeater"},"content":"            file.close();"},{"lineNumber":96,"author":{"gitId":"Ebolaeater"},"content":"        } catch (IOException e) {"},{"lineNumber":97,"author":{"gitId":"Ebolaeater"},"content":"            tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":98,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"Ebolaeater"},"content":"        return new TaskList(tasks);"},{"lineNumber":100,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":102,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"Ebolaeater"},"content":"     * Get the list of tasks from the arraylist"},{"lineNumber":104,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":105,"author":{"gitId":"Ebolaeater"},"content":"     * @return TaskList containing the tasks"},{"lineNumber":106,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"Ebolaeater"},"content":"    public static TaskList load() {"},{"lineNumber":108,"author":{"gitId":"Ebolaeater"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":109,"author":{"gitId":"Ebolaeater"},"content":"        try {"},{"lineNumber":110,"author":{"gitId":"Ebolaeater"},"content":"            FileReader file \u003d new FileReader(\"Data/duke.txt\");"},{"lineNumber":111,"author":{"gitId":"Ebolaeater"},"content":"            BufferedReader reader \u003d new BufferedReader(file);"},{"lineNumber":112,"author":{"gitId":"Ebolaeater"},"content":"            String line;"},{"lineNumber":113,"author":{"gitId":"Ebolaeater"},"content":"            while ((line \u003d reader.readLine()) !\u003d null) {"},{"lineNumber":114,"author":{"gitId":"Ebolaeater"},"content":"                tasks.add(getTasks(line));"},{"lineNumber":115,"author":{"gitId":"Ebolaeater"},"content":"            }"},{"lineNumber":116,"author":{"gitId":"Ebolaeater"},"content":"            file.close();"},{"lineNumber":117,"author":{"gitId":"Ebolaeater"},"content":"        } catch (IOException e) {"},{"lineNumber":118,"author":{"gitId":"Ebolaeater"},"content":"            tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":119,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"Ebolaeater"},"content":"        return new TaskList(tasks);"},{"lineNumber":121,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":123,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"Ebolaeater"},"content":"     * Reads the file at the given path and parses the Strings inside into task objects"},{"lineNumber":125,"author":{"gitId":"Ebolaeater"},"content":"     * which can be added to the tasklist"},{"lineNumber":126,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":127,"author":{"gitId":"Ebolaeater"},"content":"     * @param line"},{"lineNumber":128,"author":{"gitId":"Ebolaeater"},"content":"     * @return A Task object which could be a todo, deadline or event"},{"lineNumber":129,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"Ebolaeater"},"content":"    private static Task getTasks(String line) {"},{"lineNumber":131,"author":{"gitId":"Ebolaeater"},"content":"        Task task;"},{"lineNumber":132,"author":{"gitId":"Ebolaeater"},"content":"        if (line.charAt(1) \u003d\u003d \u0027T\u0027) {"},{"lineNumber":133,"author":{"gitId":"Ebolaeater"},"content":"            task \u003d new ToDos(line.substring(6));"},{"lineNumber":134,"author":{"gitId":"Ebolaeater"},"content":"        } else if (line.charAt(1) \u003d\u003d \u0027D\u0027) {"},{"lineNumber":135,"author":{"gitId":"Ebolaeater"},"content":"            int index \u003d line.indexOf(\"|\");"},{"lineNumber":136,"author":{"gitId":"Ebolaeater"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"},{"lineNumber":137,"author":{"gitId":"Ebolaeater"},"content":"            LocalDateTime date \u003d LocalDateTime.parse(line.substring(index + 1).trim(), formatter);"},{"lineNumber":138,"author":{"gitId":"Ebolaeater"},"content":"            task \u003d new Deadline(line.substring(6, index), date);"},{"lineNumber":139,"author":{"gitId":"Ebolaeater"},"content":"        } else {"},{"lineNumber":140,"author":{"gitId":"Ebolaeater"},"content":"            int index \u003d line.indexOf(\"|\");"},{"lineNumber":141,"author":{"gitId":"Ebolaeater"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"},{"lineNumber":142,"author":{"gitId":"Ebolaeater"},"content":"            LocalDateTime date \u003d LocalDateTime.parse(line.substring(index + 1).trim(), formatter);"},{"lineNumber":143,"author":{"gitId":"Ebolaeater"},"content":"            task \u003d new Event(line.substring(6, index), date);"},{"lineNumber":144,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"Ebolaeater"},"content":"        if (line.charAt(4) \u003d\u003d \u00270\u0027) {"},{"lineNumber":146,"author":{"gitId":"Ebolaeater"},"content":"            task.updateStatus();"},{"lineNumber":147,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"Ebolaeater"},"content":"        assert task !\u003d null : \"A task can never be null\";"},{"lineNumber":149,"author":{"gitId":"Ebolaeater"},"content":"        return task;"},{"lineNumber":150,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":152,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"Ebolaeater"},"content":"     * Writes the tasklist into the file at the filepath of this storage object in a format which"},{"lineNumber":154,"author":{"gitId":"Ebolaeater"},"content":"     * can be easily parsed when the chatbot is rerun. If the file or folder doesn\u0027t exist then,"},{"lineNumber":155,"author":{"gitId":"Ebolaeater"},"content":"     * a new file will be made"},{"lineNumber":156,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"Ebolaeater"},"content":"    public static void saveTest(String direct, String addedFile) {"},{"lineNumber":158,"author":{"gitId":"Ebolaeater"},"content":"        try {"},{"lineNumber":159,"author":{"gitId":"Ebolaeater"},"content":"            String folderPath \u003d direct;"},{"lineNumber":160,"author":{"gitId":"Ebolaeater"},"content":"            File directory \u003d new File(folderPath);"},{"lineNumber":161,"author":{"gitId":"Ebolaeater"},"content":"            if (!directory.isDirectory()) {"},{"lineNumber":162,"author":{"gitId":"Ebolaeater"},"content":"                File folder \u003d new File(folderPath);"},{"lineNumber":163,"author":{"gitId":"Ebolaeater"},"content":"                folder.mkdir();"},{"lineNumber":164,"author":{"gitId":"Ebolaeater"},"content":"            }"},{"lineNumber":165,"author":{"gitId":"Ebolaeater"},"content":"            File file \u003d new File(direct + \"/\" + addedFile);"},{"lineNumber":166,"author":{"gitId":"Ebolaeater"},"content":"            file.createNewFile();"},{"lineNumber":167,"author":{"gitId":"Ebolaeater"},"content":"            FileWriter writer \u003d new FileWriter(file);"},{"lineNumber":168,"author":{"gitId":"Ebolaeater"},"content":"            writer.write(list.save());"},{"lineNumber":169,"author":{"gitId":"Ebolaeater"},"content":"            writer.close();"},{"lineNumber":170,"author":{"gitId":"Ebolaeater"},"content":"        } catch (IOException e) {"},{"lineNumber":171,"author":{"gitId":"Ebolaeater"},"content":"            System.out.println(\"No File found\");"},{"lineNumber":172,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":175,"author":{"gitId":"Ebolaeater"},"content":"     * Writes the tasklist into the file at the filepath of this storage object in a format which"},{"lineNumber":176,"author":{"gitId":"Ebolaeater"},"content":"     * can be easily parsed when the chatbot is rerun. If the file or folder doesn\u0027t exist then,"},{"lineNumber":177,"author":{"gitId":"Ebolaeater"},"content":"     * a new file will be made"},{"lineNumber":178,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":179,"author":{"gitId":"Ebolaeater"},"content":"    public void save() {"},{"lineNumber":180,"author":{"gitId":"Ebolaeater"},"content":"        try {"},{"lineNumber":181,"author":{"gitId":"Ebolaeater"},"content":"            String folderPath \u003d \"Data\";"},{"lineNumber":182,"author":{"gitId":"Ebolaeater"},"content":"            File directory \u003d new File(folderPath);"},{"lineNumber":183,"author":{"gitId":"Ebolaeater"},"content":"            if (!directory.isDirectory()) {"},{"lineNumber":184,"author":{"gitId":"Ebolaeater"},"content":"                File folder \u003d new File(folderPath);"},{"lineNumber":185,"author":{"gitId":"Ebolaeater"},"content":"                folder.mkdir();"},{"lineNumber":186,"author":{"gitId":"Ebolaeater"},"content":"            }"},{"lineNumber":187,"author":{"gitId":"Ebolaeater"},"content":"            File file \u003d new File(this.filePath);"},{"lineNumber":188,"author":{"gitId":"Ebolaeater"},"content":"            file.createNewFile();"},{"lineNumber":189,"author":{"gitId":"Ebolaeater"},"content":"            FileWriter writer \u003d new FileWriter(file);"},{"lineNumber":190,"author":{"gitId":"Ebolaeater"},"content":"            writer.write(list.save());"},{"lineNumber":191,"author":{"gitId":"Ebolaeater"},"content":"            writer.close();"},{"lineNumber":192,"author":{"gitId":"Ebolaeater"},"content":"        } catch (IOException e) {"},{"lineNumber":193,"author":{"gitId":"Ebolaeater"},"content":"            System.out.println(\"No File found\");"},{"lineNumber":194,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":197,"author":{"gitId":"Ebolaeater"},"content":"     * Writes the tasklist into the file at the filepath of this storage object in a format which"},{"lineNumber":198,"author":{"gitId":"Ebolaeater"},"content":"     * can be easily parsed when the chatbot is rerun. If the file or folder doesn\u0027t exist then,"},{"lineNumber":199,"author":{"gitId":"Ebolaeater"},"content":"     * a new file will be made"},{"lineNumber":200,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":201,"author":{"gitId":"Ebolaeater"},"content":"    public static void save(TaskList tasks) {"},{"lineNumber":202,"author":{"gitId":"Ebolaeater"},"content":"        assert tasks !\u003d null : \"A null object was passed in\";"},{"lineNumber":203,"author":{"gitId":"Ebolaeater"},"content":"        try {"},{"lineNumber":204,"author":{"gitId":"Ebolaeater"},"content":"            String folderPath \u003d \"Data\";"},{"lineNumber":205,"author":{"gitId":"Ebolaeater"},"content":"            File directory \u003d new File(folderPath);"},{"lineNumber":206,"author":{"gitId":"Ebolaeater"},"content":"            if (!directory.isDirectory()) {"},{"lineNumber":207,"author":{"gitId":"Ebolaeater"},"content":"                File folder \u003d new File(folderPath);"},{"lineNumber":208,"author":{"gitId":"Ebolaeater"},"content":"                folder.mkdir();"},{"lineNumber":209,"author":{"gitId":"Ebolaeater"},"content":"            }"},{"lineNumber":210,"author":{"gitId":"Ebolaeater"},"content":"            File file \u003d new File(path);"},{"lineNumber":211,"author":{"gitId":"Ebolaeater"},"content":"            file.delete();"},{"lineNumber":212,"author":{"gitId":"Ebolaeater"},"content":"            System.out.println(file.delete());"},{"lineNumber":213,"author":{"gitId":"Ebolaeater"},"content":"            file.createNewFile();"},{"lineNumber":214,"author":{"gitId":"Ebolaeater"},"content":"            FileWriter writer \u003d new FileWriter(file);"},{"lineNumber":215,"author":{"gitId":"Ebolaeater"},"content":"            writer.write(tasks.save());"},{"lineNumber":216,"author":{"gitId":"Ebolaeater"},"content":"            writer.close();"},{"lineNumber":217,"author":{"gitId":"Ebolaeater"},"content":"        } catch (IOException e) {"},{"lineNumber":218,"author":{"gitId":"Ebolaeater"},"content":"            System.out.println(\"No File found\");"},{"lineNumber":219,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":220,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":221,"author":{"gitId":"Ebolaeater"},"content":"}"}],"authorContributionMap":{"Ebolaeater":221}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ebolaeater"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":"import tasks.Task;"},{"lineNumber":4,"author":{"gitId":"Ebolaeater"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"Ebolaeater"},"content":" * An object which contains the list of tasks a user needs to do"},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Ebolaeater"},"content":"public class TaskList {"},{"lineNumber":8,"author":{"gitId":"Ebolaeater"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":9,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":10,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"Ebolaeater"},"content":"     * Initialized the arraylist with a list of tasks"},{"lineNumber":12,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"Ebolaeater"},"content":"     * @param tasks The list of tasks provided"},{"lineNumber":14,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"Ebolaeater"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":16,"author":{"gitId":"Ebolaeater"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":17,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":19,"author":{"gitId":"Ebolaeater"},"content":"    public ArrayList\u003cTask\u003e getTasks() {"},{"lineNumber":20,"author":{"gitId":"Ebolaeater"},"content":"        assert this.tasks !\u003d null : \"The arraylist of tasks can never be null\";"},{"lineNumber":21,"author":{"gitId":"Ebolaeater"},"content":"        return this.tasks;"},{"lineNumber":22,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":24,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Ebolaeater"},"content":"     * Add a task to the tasklist"},{"lineNumber":26,"author":{"gitId":"Ebolaeater"},"content":"     * @param task to be added into the tasklist"},{"lineNumber":27,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Ebolaeater"},"content":"    public void update(Task task) {"},{"lineNumber":29,"author":{"gitId":"Ebolaeater"},"content":"        assert task !\u003d null : \"A null task was passed in\";"},{"lineNumber":30,"author":{"gitId":"Ebolaeater"},"content":"        tasks.add(task);"},{"lineNumber":31,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":33,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Ebolaeater"},"content":"     * Get a task from the given index in the tasklist"},{"lineNumber":35,"author":{"gitId":"Ebolaeater"},"content":"     * @param i index to be pulled"},{"lineNumber":36,"author":{"gitId":"Ebolaeater"},"content":"     * @return Task object"},{"lineNumber":37,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Ebolaeater"},"content":"    public Task get(int i) {"},{"lineNumber":39,"author":{"gitId":"Ebolaeater"},"content":"        assert this.tasks !\u003d null : \"The arraylist of tasks can never be null\";"},{"lineNumber":40,"author":{"gitId":"Ebolaeater"},"content":"        return tasks.get(i - 1);"},{"lineNumber":41,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":43,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"Ebolaeater"},"content":"     * Delete at the given index"},{"lineNumber":45,"author":{"gitId":"Ebolaeater"},"content":"     * @param i index to be deleted"},{"lineNumber":46,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Ebolaeater"},"content":"    public void delete(int i) {"},{"lineNumber":48,"author":{"gitId":"Ebolaeater"},"content":"        assert this.tasks !\u003d null : \"The arraylist of tasks can never be null\";"},{"lineNumber":49,"author":{"gitId":"Ebolaeater"},"content":"        tasks.remove(i - 1);"},{"lineNumber":50,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":52,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"Ebolaeater"},"content":"     * Update the task to show done"},{"lineNumber":54,"author":{"gitId":"Ebolaeater"},"content":"     * @param i index to be updated"},{"lineNumber":55,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"Ebolaeater"},"content":"    public void updateStatus(int i) {"},{"lineNumber":57,"author":{"gitId":"Ebolaeater"},"content":"        assert this.tasks !\u003d null : \"The arraylist of tasks can never be null\";"},{"lineNumber":58,"author":{"gitId":"Ebolaeater"},"content":"        tasks.get(i - 1).updateStatus();"},{"lineNumber":59,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":61,"author":{"gitId":"Ebolaeater"},"content":"    public int getSize() {"},{"lineNumber":62,"author":{"gitId":"Ebolaeater"},"content":"        assert this.tasks !\u003d null : \"The arraylist of tasks can never be null\";"},{"lineNumber":63,"author":{"gitId":"Ebolaeater"},"content":"        return tasks.size();"},{"lineNumber":64,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":66,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"Ebolaeater"},"content":"     * The tasklist has to be converted into a String format that is easily parsable when the file is reopened"},{"lineNumber":68,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"Ebolaeater"},"content":"     * @return String in a format that easily parsable upon reopening the file"},{"lineNumber":70,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"Ebolaeater"},"content":"    public String save() {"},{"lineNumber":72,"author":{"gitId":"Ebolaeater"},"content":"        StringBuilder line \u003d new StringBuilder();"},{"lineNumber":73,"author":{"gitId":"Ebolaeater"},"content":"        assert this.tasks !\u003d null : \"The arraylist of tasks can never be null\";"},{"lineNumber":74,"author":{"gitId":"Ebolaeater"},"content":"        for (Task task : tasks) {"},{"lineNumber":75,"author":{"gitId":"Ebolaeater"},"content":"            String append \u003d \"\";"},{"lineNumber":76,"author":{"gitId":"Ebolaeater"},"content":"            boolean istodo \u003d task.istodo();"},{"lineNumber":77,"author":{"gitId":"Ebolaeater"},"content":"            if (istodo) {"},{"lineNumber":78,"author":{"gitId":"Ebolaeater"},"content":"                append \u003d task.description() + task.getWork() + \"\\n\";"},{"lineNumber":79,"author":{"gitId":"Ebolaeater"},"content":"            } else {"},{"lineNumber":80,"author":{"gitId":"Ebolaeater"},"content":"                append \u003d task.description() + task.getWork() + \"|\" + task.getDate() + \"\\n\";"},{"lineNumber":81,"author":{"gitId":"Ebolaeater"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"Ebolaeater"},"content":"            line.append(append);"},{"lineNumber":83,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"Ebolaeater"},"content":"        return line.toString();"},{"lineNumber":85,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":87,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"Ebolaeater"},"content":"     * Overriding the default toString method"},{"lineNumber":89,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"Ebolaeater"},"content":"     * @return String which prints out the taskList"},{"lineNumber":91,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"Ebolaeater"},"content":"    public String toString() {"},{"lineNumber":93,"author":{"gitId":"Ebolaeater"},"content":"        StringBuilder line \u003d new StringBuilder();"},{"lineNumber":94,"author":{"gitId":"Ebolaeater"},"content":"        assert this.tasks !\u003d null : \"The arraylist of tasks can never be null\";"},{"lineNumber":95,"author":{"gitId":"Ebolaeater"},"content":"        for (Task task : tasks) {"},{"lineNumber":96,"author":{"gitId":"Ebolaeater"},"content":"            line.append(task.toString());"},{"lineNumber":97,"author":{"gitId":"Ebolaeater"},"content":"            line.append(\u0027\\n\u0027);"},{"lineNumber":98,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"Ebolaeater"},"content":"        return line.toString();"},{"lineNumber":100,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"Ebolaeater"},"content":"}"}],"authorContributionMap":{"Ebolaeater":101}},{"path":"src/main/java/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ebolaeater"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Ebolaeater"},"content":" * The User Interface Object with a scanner and storage object that takes in and stores user input"},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":" */"},{"lineNumber":4,"author":{"gitId":"Ebolaeater"},"content":"public class UI {"},{"lineNumber":5,"author":{"gitId":"Ebolaeater"},"content":"    private Storage storage;"},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":7,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Ebolaeater"},"content":"     * Initializes a UI object with the ability to scan for user input and store it"},{"lineNumber":9,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"Ebolaeater"},"content":"     * @param store"},{"lineNumber":11,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Ebolaeater"},"content":"    public UI(Storage store) {"},{"lineNumber":13,"author":{"gitId":"Ebolaeater"},"content":"        assert store !\u003d null : \"A null storage object was provided\";"},{"lineNumber":14,"author":{"gitId":"Ebolaeater"},"content":"        this.storage \u003d store;"},{"lineNumber":15,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":17,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Ebolaeater"},"content":"     * Prints a welcome message for the users"},{"lineNumber":19,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Ebolaeater"},"content":"    public void welcome() {"},{"lineNumber":21,"author":{"gitId":"Ebolaeater"},"content":"        System.out.println(\"_____________________________\");"},{"lineNumber":22,"author":{"gitId":"Ebolaeater"},"content":"        System.out.println(\"Hello! I\u0027m Duke\\n\""},{"lineNumber":23,"author":{"gitId":"Ebolaeater"},"content":"                + \"What can I do for you?\");"},{"lineNumber":24,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":26,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Ebolaeater"},"content":"     * Gets a response to an user input"},{"lineNumber":28,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"Ebolaeater"},"content":"     * @param input A String from the user"},{"lineNumber":30,"author":{"gitId":"Ebolaeater"},"content":"     * @return String containing the response"},{"lineNumber":31,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Ebolaeater"},"content":"    public String getResponse(String input) {"},{"lineNumber":33,"author":{"gitId":"Ebolaeater"},"content":"        TaskList list \u003d Storage.load();"},{"lineNumber":34,"author":{"gitId":"Ebolaeater"},"content":"        return Parser.getResponse(input, list);"},{"lineNumber":35,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":37,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Ebolaeater"},"content":"     * Stores the resultant tasklist in a file and prints a simple goodbye message for the user"},{"lineNumber":39,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"Ebolaeater"},"content":"    public void escape() {"},{"lineNumber":41,"author":{"gitId":"Ebolaeater"},"content":"        storage.save();"},{"lineNumber":42,"author":{"gitId":"Ebolaeater"},"content":"        System.out.println(\"_____________________________\");"},{"lineNumber":43,"author":{"gitId":"Ebolaeater"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\\n\""},{"lineNumber":44,"author":{"gitId":"Ebolaeater"},"content":"                + \"_____________________________\");"},{"lineNumber":45,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Ebolaeater"},"content":"}"}],"authorContributionMap":{"Ebolaeater":46}},{"path":"src/main/java/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ebolaeater"},"content":"package exceptions;"},{"lineNumber":2,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"Ebolaeater"},"content":"    public DukeException(String message) {"},{"lineNumber":5,"author":{"gitId":"Ebolaeater"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"Ebolaeater"},"content":"}"}],"authorContributionMap":{"Ebolaeater":7}},{"path":"src/main/java/exceptions/EmptyTodoException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ebolaeater"},"content":"package exceptions;"},{"lineNumber":2,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":"public class EmptyTodoException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"Ebolaeater"},"content":"    public EmptyTodoException() {"},{"lineNumber":5,"author":{"gitId":"Ebolaeater"},"content":"        super(\"A todo cannot be empty\");"},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"Ebolaeater"},"content":"}"}],"authorContributionMap":{"Ebolaeater":7}},{"path":"src/main/java/exceptions/InvalidDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ebolaeater"},"content":"package exceptions;"},{"lineNumber":2,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":"public class InvalidDateException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"Ebolaeater"},"content":"    public InvalidDateException() {"},{"lineNumber":5,"author":{"gitId":"Ebolaeater"},"content":"        super(\"Wrong date Provided\");"},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"Ebolaeater"},"content":"}"}],"authorContributionMap":{"Ebolaeater":7}},{"path":"src/main/java/exceptions/InvalidDeadlineException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ebolaeater"},"content":"package exceptions;"},{"lineNumber":2,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":"public class InvalidDeadlineException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"Ebolaeater"},"content":"    public InvalidDeadlineException() {"},{"lineNumber":5,"author":{"gitId":"Ebolaeater"},"content":"        super(\"OOPS, this deadline activity is invalid\");"},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"Ebolaeater"},"content":"}"}],"authorContributionMap":{"Ebolaeater":7}},{"path":"src/main/java/exceptions/InvalidEventException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ebolaeater"},"content":"package exceptions;"},{"lineNumber":2,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":"public class InvalidEventException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"Ebolaeater"},"content":"    public InvalidEventException() {"},{"lineNumber":5,"author":{"gitId":"Ebolaeater"},"content":"        super(\"Oops you have not entered a valid event, maybe check you /at tag again\");"},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"Ebolaeater"},"content":"}"}],"authorContributionMap":{"Ebolaeater":7}},{"path":"src/main/java/exceptions/InvalidNumberException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ebolaeater"},"content":"package exceptions;"},{"lineNumber":2,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":"public class InvalidNumberException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"Ebolaeater"},"content":"    public InvalidNumberException(String msg) {"},{"lineNumber":5,"author":{"gitId":"Ebolaeater"},"content":"        super(msg);"},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"Ebolaeater"},"content":"}"}],"authorContributionMap":{"Ebolaeater":7}},{"path":"src/main/java/exceptions/InvalidTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ebolaeater"},"content":"package exceptions;"},{"lineNumber":2,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":"public class InvalidTaskException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"Ebolaeater"},"content":"    public InvalidTaskException() {"},{"lineNumber":5,"author":{"gitId":"Ebolaeater"},"content":"        super(\"Invalid task provided\");"},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"Ebolaeater"},"content":"}"}],"authorContributionMap":{"Ebolaeater":7}},{"path":"src/main/java/exceptions/UnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ebolaeater"},"content":"package exceptions;"},{"lineNumber":2,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":"public class UnknownCommandException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"Ebolaeater"},"content":"    public UnknownCommandException() {"},{"lineNumber":5,"author":{"gitId":"Ebolaeater"},"content":"        super(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"Ebolaeater"},"content":"}"}],"authorContributionMap":{"Ebolaeater":7}},{"path":"src/main/java/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ebolaeater"},"content":"package tasks;"},{"lineNumber":2,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":5,"author":{"gitId":"Ebolaeater"},"content":"public class Deadline extends Task {"},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"Ebolaeater"},"content":"     * Constructor to instantiate a new deadline object"},{"lineNumber":8,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":9,"author":{"gitId":"Ebolaeater"},"content":"     * @param work A String containing the description of the deadline"},{"lineNumber":10,"author":{"gitId":"Ebolaeater"},"content":"     * @param date A datetime object parsed in from user input"},{"lineNumber":11,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Ebolaeater"},"content":"    public Deadline(String work, LocalDateTime date) {"},{"lineNumber":13,"author":{"gitId":"Ebolaeater"},"content":"        super(work, date);"},{"lineNumber":14,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":16,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Ebolaeater"},"content":"     * Get the description of the deadline"},{"lineNumber":18,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"Ebolaeater"},"content":"     * @return String containg the description"},{"lineNumber":20,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Ebolaeater"},"content":"    public String description() {"},{"lineNumber":22,"author":{"gitId":"Ebolaeater"},"content":"        return super.isDone()"},{"lineNumber":23,"author":{"gitId":"Ebolaeater"},"content":"                ? \"[D][0]\""},{"lineNumber":24,"author":{"gitId":"Ebolaeater"},"content":"                : \"[D][1]\";"},{"lineNumber":25,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":27,"author":{"gitId":"Ebolaeater"},"content":"    public String toString() {"},{"lineNumber":28,"author":{"gitId":"Ebolaeater"},"content":"        return \"[D]\" + super.toString() + \"(by: \" + super.getDate() + \")\";"},{"lineNumber":29,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Ebolaeater"},"content":"}"}],"authorContributionMap":{"Ebolaeater":30}},{"path":"src/main/java/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ebolaeater"},"content":"package tasks;"},{"lineNumber":2,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":5,"author":{"gitId":"Ebolaeater"},"content":"public class Event extends Task {"},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"Ebolaeater"},"content":"     * Instantiate an event with a date and description"},{"lineNumber":8,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":9,"author":{"gitId":"Ebolaeater"},"content":"     * @param work Description of the event"},{"lineNumber":10,"author":{"gitId":"Ebolaeater"},"content":"     * @param date Date of the event"},{"lineNumber":11,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Ebolaeater"},"content":"    public Event(String work, LocalDateTime date) {"},{"lineNumber":13,"author":{"gitId":"Ebolaeater"},"content":"        super(work, date);"},{"lineNumber":14,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":16,"author":{"gitId":"Ebolaeater"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitId":"Ebolaeater"},"content":"        return \"[E]\" + super.toString() + \"(at: \" + super.getDate() + \")\";"},{"lineNumber":18,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":20,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"Ebolaeater"},"content":"     * Get a description of the event"},{"lineNumber":22,"author":{"gitId":"Ebolaeater"},"content":"     * @return String containing tge description of the event"},{"lineNumber":23,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Ebolaeater"},"content":"    public String description() {"},{"lineNumber":25,"author":{"gitId":"Ebolaeater"},"content":"        return super.isDone()"},{"lineNumber":26,"author":{"gitId":"Ebolaeater"},"content":"                ? \"[E][0]\""},{"lineNumber":27,"author":{"gitId":"Ebolaeater"},"content":"                : \"[E][1]\";"},{"lineNumber":28,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Ebolaeater"},"content":"}"}],"authorContributionMap":{"Ebolaeater":29}},{"path":"src/main/java/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ebolaeater"},"content":"package tasks;"},{"lineNumber":2,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Ebolaeater"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Ebolaeater"},"content":" * Creates a task with a datetime and description"},{"lineNumber":8,"author":{"gitId":"Ebolaeater"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Ebolaeater"},"content":"public class Task {"},{"lineNumber":10,"author":{"gitId":"Ebolaeater"},"content":"    private boolean done;"},{"lineNumber":11,"author":{"gitId":"Ebolaeater"},"content":"    private String work;"},{"lineNumber":12,"author":{"gitId":"Ebolaeater"},"content":"    private LocalDateTime date;"},{"lineNumber":13,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":14,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Ebolaeater"},"content":"     * Initializes a task with the user given description"},{"lineNumber":16,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"Ebolaeater"},"content":"     * @param work A String with the user description"},{"lineNumber":18,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Ebolaeater"},"content":"    public Task(String work) {"},{"lineNumber":20,"author":{"gitId":"Ebolaeater"},"content":"        this.done \u003d false;"},{"lineNumber":21,"author":{"gitId":"Ebolaeater"},"content":"        this.work \u003d work;"},{"lineNumber":22,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":24,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Ebolaeater"},"content":"     * Initializes a task with user given description and datetime"},{"lineNumber":26,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"Ebolaeater"},"content":"     * @param work A String containing the user given description"},{"lineNumber":28,"author":{"gitId":"Ebolaeater"},"content":"     * @param date A LocalDateTime object containing the timing of the deadline/task"},{"lineNumber":29,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Ebolaeater"},"content":"    public Task(String work, LocalDateTime date) {"},{"lineNumber":31,"author":{"gitId":"Ebolaeater"},"content":"        assert work.length() !\u003d 0 \u0026\u0026 date !\u003d null : \"The input cannot be empty \""},{"lineNumber":32,"author":{"gitId":"Ebolaeater"},"content":"                + \"and date cannot be null\";"},{"lineNumber":33,"author":{"gitId":"Ebolaeater"},"content":"        this.work \u003d work;"},{"lineNumber":34,"author":{"gitId":"Ebolaeater"},"content":"        this.date \u003d date;"},{"lineNumber":35,"author":{"gitId":"Ebolaeater"},"content":"        this.done \u003d false;"},{"lineNumber":36,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":38,"author":{"gitId":"Ebolaeater"},"content":"    public String getDate() {"},{"lineNumber":39,"author":{"gitId":"Ebolaeater"},"content":"        return date.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\"));"},{"lineNumber":40,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":42,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Ebolaeater"},"content":"     * Get a description of the task"},{"lineNumber":44,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"Ebolaeater"},"content":"     * @return String containing the description"},{"lineNumber":46,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Ebolaeater"},"content":"    public String description() {"},{"lineNumber":48,"author":{"gitId":"Ebolaeater"},"content":"        return done"},{"lineNumber":49,"author":{"gitId":"Ebolaeater"},"content":"                ? \"[T][0]\""},{"lineNumber":50,"author":{"gitId":"Ebolaeater"},"content":"                : \"[T][1]\";"},{"lineNumber":51,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Ebolaeater"},"content":"    public void updateStatus() {"},{"lineNumber":53,"author":{"gitId":"Ebolaeater"},"content":"        done \u003d true;"},{"lineNumber":54,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":56,"author":{"gitId":"Ebolaeater"},"content":"    public boolean isDone() {"},{"lineNumber":57,"author":{"gitId":"Ebolaeater"},"content":"        return done;"},{"lineNumber":58,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":60,"author":{"gitId":"Ebolaeater"},"content":"    public String getWork() {"},{"lineNumber":61,"author":{"gitId":"Ebolaeater"},"content":"        return work;"},{"lineNumber":62,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":64,"author":{"gitId":"Ebolaeater"},"content":"    public boolean istodo() {"},{"lineNumber":65,"author":{"gitId":"Ebolaeater"},"content":"        return false;"},{"lineNumber":66,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":68,"author":{"gitId":"Ebolaeater"},"content":"    public void setWork(String work) {"},{"lineNumber":69,"author":{"gitId":"Ebolaeater"},"content":"        this.work \u003d work;"},{"lineNumber":70,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":72,"author":{"gitId":"Ebolaeater"},"content":"    public void setDate(LocalDateTime date) {"},{"lineNumber":73,"author":{"gitId":"Ebolaeater"},"content":"        this.date \u003d date;"},{"lineNumber":74,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":76,"author":{"gitId":"Ebolaeater"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"Ebolaeater"},"content":"     * Overrides the toString method"},{"lineNumber":78,"author":{"gitId":"Ebolaeater"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"Ebolaeater"},"content":"     * @return String representing the task"},{"lineNumber":80,"author":{"gitId":"Ebolaeater"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"Ebolaeater"},"content":"    public String toString() {"},{"lineNumber":82,"author":{"gitId":"Ebolaeater"},"content":"        if (!this.done) {"},{"lineNumber":83,"author":{"gitId":"Ebolaeater"},"content":"            return \"[Not done]\" + this.work;"},{"lineNumber":84,"author":{"gitId":"Ebolaeater"},"content":"        } else {"},{"lineNumber":85,"author":{"gitId":"Ebolaeater"},"content":"            return \"[Donezo]\" + this.work;"},{"lineNumber":86,"author":{"gitId":"Ebolaeater"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"Ebolaeater"},"content":"}"}],"authorContributionMap":{"Ebolaeater":88}},{"path":"src/main/java/tasks/ToDos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ebolaeater"},"content":"package tasks;"},{"lineNumber":2,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":"public class ToDos extends Task {"},{"lineNumber":4,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":5,"author":{"gitId":"Ebolaeater"},"content":"    public ToDos(String work) {"},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":"        super(work);"},{"lineNumber":7,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":9,"author":{"gitId":"Ebolaeater"},"content":"    public String toString() {"},{"lineNumber":10,"author":{"gitId":"Ebolaeater"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":11,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":13,"author":{"gitId":"Ebolaeater"},"content":"    public boolean istodo() {"},{"lineNumber":14,"author":{"gitId":"Ebolaeater"},"content":"        return true;"},{"lineNumber":15,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Ebolaeater"},"content":"}"}],"authorContributionMap":{"Ebolaeater":16}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Ebolaeater"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Ebolaeater"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"Ebolaeater"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"Ebolaeater"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":8,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":9,"author":{"gitId":"Ebolaeater"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400\" fillHeight\u003d\"false\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":10,"author":{"gitId":"Ebolaeater"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"Ebolaeater"},"content":"        \u003cStackPane alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" prefWidth\u003d\"200\" prefHeight\u003d\"45\"\u003e"},{"lineNumber":12,"author":{"gitId":"Ebolaeater"},"content":"            \u003cchildren\u003e"},{"lineNumber":13,"author":{"gitId":"Ebolaeater"},"content":"                \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\" contentDisplay\u003d\"CENTER\"/\u003e"},{"lineNumber":14,"author":{"gitId":"Ebolaeater"},"content":"            \u003c/children\u003e"},{"lineNumber":15,"author":{"gitId":"Ebolaeater"},"content":"            \u003cpadding\u003e"},{"lineNumber":16,"author":{"gitId":"Ebolaeater"},"content":"                \u003cInsets left\u003d\"20\" right\u003d\"20\"/\u003e"},{"lineNumber":17,"author":{"gitId":"Ebolaeater"},"content":"            \u003c/padding\u003e"},{"lineNumber":18,"author":{"gitId":"Ebolaeater"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":19,"author":{"gitId":"Ebolaeater"},"content":"            \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":20,"author":{"gitId":"Ebolaeater"},"content":"    \u003c/children\u003e"},{"lineNumber":21,"author":{"gitId":"Ebolaeater"},"content":"    \u003cpadding\u003e"},{"lineNumber":22,"author":{"gitId":"Ebolaeater"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\"/\u003e"},{"lineNumber":23,"author":{"gitId":"Ebolaeater"},"content":"    \u003c/padding\u003e"},{"lineNumber":24,"author":{"gitId":"Ebolaeater"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Ebolaeater":24}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Ebolaeater"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"Ebolaeater"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"Ebolaeater"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"Ebolaeater"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":9,"author":{"gitId":"Ebolaeater"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"Ebolaeater"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"Ebolaeater"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"Ebolaeater"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"Ebolaeater"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"Ebolaeater"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"Ebolaeater"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"Ebolaeater"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"Ebolaeater"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"Ebolaeater"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"Ebolaeater"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"Ebolaeater":19}},{"path":"src/test/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Ebolaeater"},"content":"[D][✗] help me | 02/02/2020 09:23"},{"lineNumber":2,"author":{"gitId":"Ebolaeater"},"content":"[E][✓] help | 02/03/2020 11:45"},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":"[E][✗] do | 01/01/1111 11:33"}],"authorContributionMap":{"Ebolaeater":3}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ebolaeater"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":5,"author":{"gitId":"Ebolaeater"},"content":"import exceptions.EmptyTodoException;"},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":"import exceptions.InvalidEventException;"},{"lineNumber":7,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":8,"author":{"gitId":"Ebolaeater"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":10,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":11,"author":{"gitId":"Ebolaeater"},"content":"public class ParserTest {"},{"lineNumber":12,"author":{"gitId":"Ebolaeater"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"Ebolaeater"},"content":"    public void parseDateTest() throws InvalidEventException {"},{"lineNumber":14,"author":{"gitId":"Ebolaeater"},"content":"        assertEquals(Parser.getEventTest(\"event do /at 11/11/2020 23:59\", new TaskList(new ArrayList\u003c\u003e())),"},{"lineNumber":15,"author":{"gitId":"Ebolaeater"},"content":"                \"[E][Not Done] do (at: 11/11/2020 23:59)\");"},{"lineNumber":16,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":18,"author":{"gitId":"Ebolaeater"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"Ebolaeater"},"content":"    public void parseTodoTest() throws EmptyTodoException {"},{"lineNumber":20,"author":{"gitId":"Ebolaeater"},"content":"        assertEquals(Parser.getTodo(\"todo help me out sir\", new TaskList(new ArrayList\u003c\u003e())),"},{"lineNumber":21,"author":{"gitId":"Ebolaeater"},"content":"                \"[T][Not Done] help me out sir\");"},{"lineNumber":22,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Ebolaeater"},"content":"}"}],"authorContributionMap":{"Ebolaeater":23}},{"path":"src/test/java/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ebolaeater"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"Ebolaeater"},"content":"import tasks.Deadline;"},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":"import tasks.Event;"},{"lineNumber":4,"author":{"gitId":"Ebolaeater"},"content":"import tasks.Task;"},{"lineNumber":5,"author":{"gitId":"Ebolaeater"},"content":"import tasks.ToDos;"},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":7,"author":{"gitId":"Ebolaeater"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitId":"Ebolaeater"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"Ebolaeater"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitId":"Ebolaeater"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":12,"author":{"gitId":"Ebolaeater"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":13,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":14,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":15,"author":{"gitId":"Ebolaeater"},"content":"public class StorageTest {"},{"lineNumber":16,"author":{"gitId":"Ebolaeater"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"Ebolaeater"},"content":"    public void emptyFile() {"},{"lineNumber":18,"author":{"gitId":"Ebolaeater"},"content":"        //Simulating an empty or non existent file"},{"lineNumber":19,"author":{"gitId":"Ebolaeater"},"content":"        Storage store \u003d new Storage(\"data/dike.txt\");"},{"lineNumber":20,"author":{"gitId":"Ebolaeater"},"content":"        TaskList list \u003d store.load();"},{"lineNumber":21,"author":{"gitId":"Ebolaeater"},"content":"        ArrayList\u003cTask\u003e tasks \u003d list.getTasks();"},{"lineNumber":22,"author":{"gitId":"Ebolaeater"},"content":"        assertEquals(new ArrayList\u003c\u003e(), tasks);"},{"lineNumber":23,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":25,"author":{"gitId":"Ebolaeater"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"Ebolaeater"},"content":"    public void saveReopenTest() {"},{"lineNumber":27,"author":{"gitId":"Ebolaeater"},"content":"        // simulating what would happen if you load up a file and then write to it and close it again"},{"lineNumber":28,"author":{"gitId":"Ebolaeater"},"content":"        File f \u003d new File(\"data/doke.txt\");"},{"lineNumber":29,"author":{"gitId":"Ebolaeater"},"content":"        f.delete();"},{"lineNumber":30,"author":{"gitId":"Ebolaeater"},"content":"        TaskList list \u003d Storage.loadTest(\"data/doke.txt\");"},{"lineNumber":31,"author":{"gitId":"Ebolaeater"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"},{"lineNumber":32,"author":{"gitId":"Ebolaeater"},"content":"        list.update(new ToDos(\"help me out\"));"},{"lineNumber":33,"author":{"gitId":"Ebolaeater"},"content":"        list.update(new Deadline(\"I need your help\", LocalDateTime.parse(\"23/02/2020 12:00\", formatter)));"},{"lineNumber":34,"author":{"gitId":"Ebolaeater"},"content":"        list.update(new Event(\"We need to talk about the tests\", LocalDateTime.parse(\"23/02/2020 12:00\", formatter)));"},{"lineNumber":35,"author":{"gitId":"Ebolaeater"},"content":"        Storage.saveTest(\"data\", \"doke.txt\");"},{"lineNumber":36,"author":{"gitId":"Ebolaeater"},"content":"        TaskList newList \u003d Storage.loadTest(\"data/doke.txt\");"},{"lineNumber":37,"author":{"gitId":"Ebolaeater"},"content":"        assertEquals(list.toString(), newList.toString());"},{"lineNumber":38,"author":{"gitId":"Ebolaeater"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Ebolaeater"},"content":"}"}],"authorContributionMap":{"Ebolaeater":39}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Ebolaeater"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"Ebolaeater"},"content":"list"},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"Ebolaeater"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"Ebolaeater"},"content":"deadline do homework /by no idea :-p"},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":"bye"}],"authorContributionMap":{"Ebolaeater":6}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Ebolaeater"},"content":"SET MY_PATH\u003dC:\\Users\\banik\\OneDrive\\Desktop\\NUS Y2S1\\CS2103\\Duke ChatBot"},{"lineNumber":4,"author":{"gitId":"Ebolaeater"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":6,"author":{"gitId":"Ebolaeater"},"content":"if not exist \"%MY_PATH%\\bin\" mkdir \"%MY_PATH%\\bin\""},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":9,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":12,"author":{"gitId":"Ebolaeater"},"content":"javac  -cp \"%MY_PATH%\\src\\main\\java\" -Xlint:none -d \"%MY_PATH%\\bin\" \"%MY_PATH%\\src\\main\\java\\Duke.java\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":14,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":16,"author":{"gitId":"-"},"content":")"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":20,"author":{"gitId":"Ebolaeater"},"content":"java -classpath \"%MY_PATH%\\bin\" Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":23,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"Ebolaeater":5,"-":18}}]
