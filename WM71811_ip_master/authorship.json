[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "# duke.duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.duke.java` file, right-click it, and choose `Run duke.duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "WM71811": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 17,
      "-": 44
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "todo|✓|read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": "deadline|✓|do this|Mon 1pm"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "event|✘|do that|Tue 2-5pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "todo|✘|make directory"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "event|✓|do math|2020-12-10"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "deadline|✓|do english|Nov 13 2020"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "todo|✘|write homework"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "deadline|✘|project|Oct 11 2020"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "event|✘|meeting|2pm"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "event|✘|meeting2|2020-11-10"
      }
    ],
    "authorContributionMap": {
      "WM71811": 10
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public DialogBox(String input, Image image) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            dialog.setText(input);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            Circle clip \u003d new Circle(displayPicture.getFitWidth()/2,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    displayPicture.getFitHeight()/2, displayPicture.getFitWidth()/2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            displayPicture.setClip(clip);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            displayPicture.setImage(image);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * the text is on the right."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void flip() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Gets the user dialog box."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param userImage User image."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return The user dialog box."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static DialogBox getUserDialog(String input, Image userImage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return new DialogBox(input, userImage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Gets the duke dialog box."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param response Duke\u0027s response."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param dukeImage Duke\u0027s image."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return The duke dialog box."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static DialogBox getDukeDialog(String response, Image dukeImage) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        var db \u003d new DialogBox(response, dukeImage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 80
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Represents Duke class, which is the control class of Duke and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * includes the logic of Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private boolean canCloseWindow \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private static final String byeMessage \u003d \"bye\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Creates a duke object and initializes storage, taskList and ui."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        storage \u003d new Storage(\"data/tasks.txt\", \"data\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        taskList \u003d storage.read();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ui \u003d new Ui(taskList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns the ui object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return The ui object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public Ui getUi() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns duke\u0027s response based on the user\u0027s input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Sets the canCloseWindow to true if the input is"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * \"bye.\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param userInput The user\u0027s input."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return Duke\u0027s response."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public String getResponse(String userInput) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            Command command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            if (userInput.equals(byeMessage)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                canCloseWindow \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return command.execute(storage, taskList, ui);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Checks if the GUI window can be closed, by checking"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * whether the user inputs \"bye.\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return true if the GUI window can be closed, false otherwise."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public boolean canCloseWindow() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return canCloseWindow;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 70,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Launches the programme."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            //System.out.println(e.getCause()+e.getMessage());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            e.printStackTrace(System.out);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 18
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private final String MAIN_WINDOW_PATH \u003d \"/view/MainWindow.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Starts"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param stage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(MAIN_WINDOW_PATH));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 36
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Represents the controller for MainWindow. Provides the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * layout for the other controls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private final double TIME_DELAY \u003d 1.5;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private final String USER_IMAGE_PATH \u003d \"/images/user.png\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private final String DUKE_IMAGE_PATH \u003d \"/images/duke.png\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(USER_IMAGE_PATH));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(DUKE_IMAGE_PATH));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Initializes the GUI window."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private void initialize() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Sets the Duke object. Sends the greeting message to user by"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * adding the message in the dialog box."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param duke The Duke object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void setDuke(Duke duke) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(duke.getUi().displayGreeting(), dukeImage));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Creates a dialog boxes echoing user input, and another dialog box"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * containing Duke\u0027s reply, and then appends the two dialog boxes to"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * the dialog container. The user input is cleared after processing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * There is a delay of 1.5 seconds before the program close when the user"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * inputs \"bye.\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (duke.canCloseWindow()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            PauseTransition delay \u003d new PauseTransition((Duration.seconds(TIME_DELAY)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            delay.setOnFinished(event -\u003e Platform.exit());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            delay.play();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        );"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 78
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Represents an AddCommand and handles methods related to commands about adding a task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs an AddCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param task The duke.task to be added."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Executes the AddCommand by adding the duke.task in to the list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * and giving user messages. The storage file is also updated."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param taskList The taskList object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param ui The ui object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return Duke\u0027s response."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @throws InvalidInputException If the input is invalid."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public String execute(Storage storage, TaskList taskList, Ui ui) throws InvalidInputException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        storage.write(taskList.getListOfTasks());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return ui.displayAddition(task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Checks if the command is ExitCommand."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 50
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Represents a Command and handles methods related to commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param taskList The taskList object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param ui The ui object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return Duke\u0027s response."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @throws InvalidInputException If the input is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public abstract String execute(Storage storage, TaskList taskList, Ui ui) throws InvalidInputException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Checks if the command is ExitCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return True if it is ExitCommand; otherwise false."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 30
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Represents a DeleteCommand and handles methods related to commands"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * about deleting a task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs an DeleteCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param index The index of the duke.task to be deleted."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Executes the AddCommand by deleting the duke.task from the list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * and giving user messages. The storage file is also updated."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param taskList The taskList object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param ui The ui object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return Duke\u0027s response."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @throws InvalidInputException"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public String execute(Storage storage, TaskList taskList, Ui ui) throws InvalidInputException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Task task \u003d taskList.getTask(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        taskList.deleteTask(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        storage.write(taskList.getListOfTasks());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return ui.displayDeletion(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Checks if the command is ExitCommand."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WM71811": 53
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.exception.InvalidInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Represents a DoneCommand and handles methods related to commands"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * about marking a task as done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs an DoneCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Executes the DoneCommand by displaying the message to users"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * about the task is marked as done, and update the storage and"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * the taskList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param taskList The taskList object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param ui The ui object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return Duke\u0027s response."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @throws InvalidInputException If the input is invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public String execute(Storage storage, TaskList taskList, Ui ui) throws InvalidInputException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Task task \u003d taskList.getTask(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        taskList.setAsDone(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        storage.write(taskList.getListOfTasks());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return ui.displayDone(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Checks if the command is ExitCommand."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WM71811": 53
    }
  },
  {
    "path": "src/main/java/duke/command/ErrorCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Represents an ErrorCommand and handles methods related to"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * sending error message to users."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class ErrorCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private String errorMessage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs an ErrorCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param errorMessage The error message to be sent to users."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public ErrorCommand(String errorMessage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Executes the ErrorCommand by sending the error message to the users."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param taskList The taskList object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param ui The ui object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return Duke\u0027s response."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @throws InvalidInputException If the input is invalid."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public String execute(Storage storage, TaskList taskList, Ui ui) throws InvalidInputException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return ui.displayError(errorMessage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Checks if the command is ExitCommand."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WM71811": 48
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Represents an ExitCommand and handles methods related to commands"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * about sending the exit message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs an ExitCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Executes the ExitCommand by displaying the exit message to users."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param taskList The taskList object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param ui The ui object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return Duke\u0027s response."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @throws InvalidInputException If the input is invalid."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public String execute(Storage storage, TaskList taskList, Ui ui) throws InvalidInputException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return ui.displayExit();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Checks if the command is ExitCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return True."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WM71811": 46
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.exception.InvalidInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Represents a FindCommand and handles methods related to commands"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * about finding matching tasks associated with a keyword."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs an FindCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Executes the FindCommand by displaying the message to users"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * about the matching tasks found."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param taskList The taskList object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param ui The ui object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return Duke\u0027s response."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @throws InvalidInputException If the input is invalid."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public String execute(Storage storage, TaskList taskList, Ui ui) throws InvalidInputException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        for (Task task : taskList.getListOfTasks()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            String name \u003d task.getName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            if (name.contains(keyword)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                matchingTasks.add(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return ui.displayFinding(matchingTasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Checks if the command is ExitCommand."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 58
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Represents a ListCommand and handles methods related to commands"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * about displaying the list of tasks to users."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs a listCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Executes the ListCommand by sending user the list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * of tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param taskList The taskList object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param ui The ui object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return Duke\u0027s response."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @throws InvalidInputException If the input is invalid."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public String execute(Storage storage, TaskList taskList, Ui ui) throws InvalidInputException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return ui.getList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Checks if the command is ExitCommand."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 44
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Represents an InvalidDeadlineException and handles the exceptions related"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * to invalid deadline tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class InvalidDeadlineException extends InvalidInputException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs an InvalidDeadlineException."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param message Error message to be sent to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public InvalidDeadlineException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 17
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Represents an InvalidEventException and handles the exceptions related"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * to invalid event tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class InvalidEventException extends InvalidInputException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs an InvalidEventException."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param message Error message to be sent to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public InvalidEventException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 17
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFilePathException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Represents an InvalidFilePathException and handles the exceptions related"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * to invalid file paths."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class InvalidFilePathException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs an InvalidFilePathException."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param message Error message to be sent to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public InvalidFilePathException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 17
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Represents an InvalidInputException and handles the exceptions related"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * to invalid user inputs."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class InvalidInputException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs an InvalidInputException."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param message Error message to be sent to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public InvalidInputException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WM71811": 18
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidRequestException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.exception.InvalidInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Represents an InvalidRequestException and handles the exceptions related"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * to invalid user requests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class InvalidRequestException extends InvalidInputException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs an InvalidRequestException."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param message Error message to be sent to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public InvalidRequestException(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 19
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTodoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Represents an InvalidTodoException and handles the exceptions related"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * to invalid todo tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class InvalidTodoException extends InvalidInputException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs an InvalidTodoException."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param message Error message to be sent to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public InvalidTodoException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 18
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.command.ErrorCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.exception.InvalidInputException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.exception.InvalidEventException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.exception.InvalidRequestException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.exception.InvalidTodoException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.exception.InvalidDeadlineException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Represents a Parser class and consists of methods related to parsing user commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns a command object by parsing the user command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param userCommand The user command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return The command for Duke to execute."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static Command parse(String userCommand) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            if (userCommand.equals(\"bye\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                if (userCommand.equals(\"list\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    return new ListCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    String[] wordArray \u003d userCommand.split(\" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    int noOfWords \u003d wordArray.length;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    if (noOfWords \u003d\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        throw new InvalidInputException(\"I don\u0027t know what you need \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                                + \"me to do since the command is empty!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    if (wordArray[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        if (noOfWords \u003d\u003d 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                            throw new InvalidRequestException(\"Please tell me which task you want \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                                    + \"to be marked as done.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        if (noOfWords \u003e 2) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                            throw new InvalidRequestException(\"I can only handle one request to \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                                    + \"mark a task as DONE once! Please check your command.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        Integer index \u003d Integer.parseInt(wordArray[1]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        return new DoneCommand(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    } else if (wordArray[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        if (noOfWords \u003d\u003d 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                            throw new InvalidRequestException(\"Please tell me which task you want \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                                    + \"to delete!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        if (noOfWords \u003e 2) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                            throw new InvalidRequestException(\"I can only handle one request to \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                                    + \"delete a task at once! Please check your command.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        Integer index \u003d Integer.parseInt(wordArray[1]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        return new DeleteCommand(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    } else if (wordArray[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        if (noOfWords \u003d\u003d 1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                            throw new InvalidRequestException(\"Please tell me the word you want \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                                    + \"to find!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        if (noOfWords \u003e 2) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                            throw new InvalidRequestException(\"I can only handle one keyword!\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        return new FindCommand(wordArray[1]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        Task newTask;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        if (wordArray[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                            if (noOfWords \u003d\u003d 1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                                throw new InvalidTodoException(\"Please tell me the name \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                                        + \"of the todo task! Or else I cannot add it into the list.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                            String taskName \u003d userCommand.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                            newTask \u003d new Todo(taskName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        } else if (wordArray[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                            if (noOfWords \u003d\u003d 1) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                                throw new InvalidDeadlineException(\"Please tell me the name \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                                        + \"and the time due of the deadline task! Or else I \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                                        + \"cannot add it into the list.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                            String body \u003d userCommand.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                            if (body.split(\" /by\").length \u003c 2) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                                throw new InvalidDeadlineException(\"Please tell me both the name and\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                                        + \" the time due of the deadline task in the correct form! \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                                        + \"Don\u0027t forget to include the time by using /by.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                            String taskName \u003d body.split(\" /by \")[0];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                            String time \u003d body.split(\" /by \")[1];"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                            newTask \u003d new Deadline(taskName, time);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        } else if (wordArray[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                            if (noOfWords \u003d\u003d 1) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                                throw new InvalidEventException(\"Please tell me the name and time period\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                                        + \" of the event task! Or else I cannot add it into the list.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                            String body \u003d userCommand.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                            if (body.split(\" /at\").length \u003c 2) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                                throw new InvalidEventException(\"Please tell me both the name and \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                                        + \"the time period of the event task in the correct form! \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                                        + \"Don\u0027t forget to include the time by using /at.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                            String taskName \u003d body.split(\" /at \")[0];"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                            String time \u003d body.split(\" /at \")[1];"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                            newTask \u003d new Event(taskName, time);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                            throw new InvalidInputException(\"I cannot understand your command! \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                                    + \"Please ensure your command follows the rules.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        return new AddCommand(newTask);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return new ErrorCommand(e.getMessage());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 129
    }
  },
  {
    "path": "src/main/java/duke/parser/TimeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Represents a TimeParser and consists of methods related to"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * parsing the string representing the time of tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class TimeParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private LocalDate localDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs a TimeParser object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param localDate The localDate of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param time The time of the task,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public TimeParser(LocalDate localDate, String time) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        this.localDate \u003d localDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns a string representing the formatted time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return The formatted time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public String getFormattedTime() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            String formattedTime \u003d localDate.format(formatter);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return formattedTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WM71811": 42
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.exception.InvalidFilePathException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Represents the storage class. Storage class is a class consists of methods"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * related to storing the list of tasks and updating the file used for"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    // The default file path if the user does not provide the file path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private static final String DEFAULT_FILE_PATH \u003d \"data/tasks.txt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private String directoryPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs a storage object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param filePath The file path."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param directoryPath The directory path."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @throws InvalidFilePathException If the file path is invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public Storage(String filePath, String directoryPath) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            File directory \u003d new File(directoryPath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            if (!isValidFilePath(filePath)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                throw new InvalidFilePathException(\"The storage file should end with \u0027.txt\u0027\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                if (!directory.exists()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    directory.mkdir();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    throw new InvalidFilePathException(\"The directory does not exist at the start.\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                            + \" a directory to store the data would be created.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                this.directoryPath \u003d directoryPath;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        } catch (InvalidFilePathException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                e.getMessage();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Checks if the file path is valid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param filepath The file path."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return True if the file path is valid, false otherwise."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private static boolean isValidFilePath(String filepath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return filepath.endsWith(\".txt\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns the list of tasks stored in the file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return The list of tasks stored in the file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public TaskList read() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            ArrayList\u003cTask\u003e listOfTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            File storageFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            Scanner scanner \u003d new Scanner(storageFile);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                String currentLine \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                String[] wordsParsed \u003d currentLine.split(\"\\\\|\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                String whetherIsDone \u003d wordsParsed[1].equals(\"\\u2713\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        ? \"true\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        : \"false\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                switch (wordsParsed[0]) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    Task todo \u003d new Todo(wordsParsed[2]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    todo.setWhetherTaskDone(whetherIsDone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    listOfTasks.add(todo);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    Task deadline \u003d new Deadline(wordsParsed[2], wordsParsed[3]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    deadline.setWhetherTaskDone(whetherIsDone);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    listOfTasks.add(deadline);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    Task event \u003d new Event(wordsParsed[2], wordsParsed[3]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    event.setWhetherTaskDone(whetherIsDone);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    listOfTasks.add(event);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            scanner.close();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return new TaskList(listOfTasks);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            //System.out.println(e.toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Writes the list of tasks to the file."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param listOfTasks The list of tasks."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void write( ArrayList\u003cTask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            for (Task task : listOfTasks) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                fileWriter.write(task.writeToFile() + \"\\n\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 125
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.parser.TimeParser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Represents a Deadline and consists of methods related to Deadline Task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs a Deadline Task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param deadlineName Name of Deadline duke.task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param deadlineTime Time of Deadline duke.task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public Deadline(String deadlineName, String deadlineTime) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        super(deadlineName, deadlineTime);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns a string of the format required by the storage file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return String describing the Deadline duke.task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public String writeToFile() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        TimeParser timeParser \u003d new TimeParser(localDate, time);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        String formattedTime \u003d timeParser.getFormattedTime();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return \"deadline\" + \"|\" + this.getStatusSymbol() + \"|\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                + this.taskName + \"|\" + formattedTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns a string of a format to be printed by Duke."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return String describing the Deadline duke.task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        TimeParser timeParser \u003d new TimeParser(localDate, time);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        String formattedTime \u003d timeParser.getFormattedTime();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + formattedTime + \")\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 43
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.parser.TimeParser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Represents a Event and consists of methods related to Event Task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs a Event Task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param eventName Event name."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param eventTime Event time."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public Event(String eventName, String eventTime) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        super(eventName, eventTime);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns a string of the format required by the storage file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return String describing the Event duke.task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public String writeToFile() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return \"event\" + \"|\" + this.getStatusSymbol() + \"|\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                + this.taskName + \"|\" + this.time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns a string of a format to be printed by Duke."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return String describing the Event duke.task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        TimeParser timeParser \u003d new TimeParser(localDate, time);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        String formattedTime \u003d timeParser.getFormattedTime();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + formattedTime + \")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 41
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Represents a Task and consists of methods related to Task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    protected String taskName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    protected LocalDate localDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs a duke.task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param taskName Name of the duke.task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public Task(String taskName) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs a duke.task with time as an additional argument."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param taskName Name of the duke.task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param time Time of the duke.task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public Task(String taskName, String time) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            this.localDate \u003d LocalDate.parse(time.trim());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            localDate \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Sets the duke.task to be done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void setTaskToBeDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns a string representing the status of the duke.task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return Symbol of the status of the duke.task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public String getStatusSymbol() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return \"\\u2713\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return \"\\u2718\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns the duke.task\u0027s name."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return The name of the duke.task."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return this.taskName;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Sets the duke.task status."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param whetherIsDone Boolean showing whether the duke.task is done."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void setWhetherTaskDone(String whetherIsDone) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WM71811"
        },
        "content": "         isDone \u003d whetherIsDone.equals(\"true\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns a string of the format required by the storage file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return String describing the duke.task."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public String writeToFile() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return this.getStatusSymbol() + \"|\" + this.taskName;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns a string of a format to be printed by Duke."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return String describing the duke.task."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return \"[\" +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                this.getStatusSymbol() + \"] \" + taskName;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 98
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.exception.InvalidRequestException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Represents a TaskList and consists of information and methods related to the list of tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private ArrayList\u003cTask\u003e listOfTasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs a TaskList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param listOfTasks The list of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        this.listOfTasks \u003d listOfTasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Adds a duke.task to the list of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param newTask The duke.task to be added."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        listOfTasks.add(newTask);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Deletes a duke.task from the list of tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param index The index of the duke.task to be deleted."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @throws InvalidRequestException If the command is invalid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void deleteTask(int index) throws InvalidRequestException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            if (listOfTasks.size() \u003c index || index \u003c 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                throw new InvalidRequestException(\"You have entered an invalid duke.task \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        + \"number! Please try again.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            listOfTasks.remove(index - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Sets the duke.task in the list to be done."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param index The index of the duke.task to be set as done."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @throws InvalidRequestException If the command is invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void setAsDone(int index) throws InvalidRequestException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            if (listOfTasks.size() \u003c index || index \u003c 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                throw new InvalidRequestException(\"You have entered an invalid duke.task \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                        + \"number! Please try again.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            this.listOfTasks.get(index - 1).setTaskToBeDone();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Return the particular duke.task from the list by its index."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param index The index of the duke.task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return The duke.task with the index specified in the arraylist."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @throws InvalidRequestException If the command is invalid."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public Task getTask(int index) throws InvalidRequestException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (listOfTasks.size() \u003c index || index \u003c 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            throw new InvalidRequestException(\"You have entered an invalid duke.task \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    + \"number! Please try again.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return this.listOfTasks.get(index - 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns the list of tasks."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return The list of tasks."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public ArrayList\u003cTask\u003e getListOfTasks() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return this.listOfTasks;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WM71811"
        },
        "content": " }"
      }
    ],
    "authorContributionMap": {
      "WM71811": 86
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Represents a Todo and consists of methods related to Todo Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs a Todo Task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param name Task name."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public Todo(String name) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns a string of the format required by the storage file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return String describing the todo duke.task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public String writeToFile() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return \"todo\" + \"|\" + this.getStatusSymbol() + \"|\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                + this.taskName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns a string of a format to be printed by Duke."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return String describing the todo duke.task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 38
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Represents Ui class and consists of methods related to user interaction."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private static final String EMPTY_SPACE_BEFORE_TASK \u003d \"     \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private static final String GREETING_PART_ONE \u003d \"Hi, I am Duke! :D\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private static final String GREETING_PART_TWO \u003d \"Is there anything I could help with?\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private static final String EXIT_MESSAGE \u003d \"Bye! I look forward to meeting you next time!\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs an ui object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param taskList The TaskList object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public Ui(TaskList taskList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Prints the message in a particular form, the first and last line"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * is the line divider."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param message The message to be printed out."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void messageFormat(String... message) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        for (String i : message) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            System.out.println(i);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Displays greetings to the user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return Greeting message."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public String displayGreeting() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return GREETING_PART_ONE + GREETING_PART_TWO;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Displays exit message to the user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return Exit message."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public String displayExit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return EXIT_MESSAGE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Displays the list of tasks to the user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return The list of tasks."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public String getList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ArrayList\u003cTask\u003e listOfTasks \u003d taskList.getListOfTasks();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        int noOfTasks \u003d listOfTasks.size();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (noOfTasks \u003d\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            stringBuilder.append(\"There is no task in the list yet!\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            stringBuilder.append(\"Here are the tasks in the list:\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            for (int i \u003d 0; i \u003c noOfTasks; i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                Task task \u003d listOfTasks.get(i);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                stringBuilder.append((i + 1) + \".\" + task + \"\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Displays error message to the user."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param message The error message."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return The error message to be displayed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public String displayError(String message) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return message + \"\\n\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Displays the message that a particular task is marked as done"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * to the user."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param task The particular task that is marked as done."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return The message that a particular task is marked as done."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public String displayDone(Task task) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return \"Great! The task below is marked as done:\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                + EMPTY_SPACE_BEFORE_TASK + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Displays the message that a particular task is deleted to the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param task The particular task that is deleted."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return The message that a particular task is deleted."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public String displayDeletion(Task task) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ArrayList\u003cTask\u003e listOfTasks \u003d taskList.getListOfTasks();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        int noOfTasks \u003d listOfTasks.size();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        stringBuilder.append(\"Okay. The task below is deleted from your list:\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                + EMPTY_SPACE_BEFORE_TASK + task.toString() + \"\\n\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (noOfTasks \u003d\u003d 1) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            stringBuilder.append(\"Now there is 1 task in total in your list.\\n\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            stringBuilder.append(\"Now there are \" + listOfTasks.size() + \" tasks \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    + \"in total in your list.\\n\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Displays the message that a particular task is added"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * in to the list to the user."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param task The particular task that is added to the list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return The message that a particular task is added into the list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public String displayAddition(Task task) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ArrayList\u003cTask\u003e listOfTasks \u003d taskList.getListOfTasks();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        int noOfTasks \u003d listOfTasks.size();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        stringBuilder.append(\"Noted! The task below is added into the list:\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                + EMPTY_SPACE_BEFORE_TASK + task + \"\\n\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (noOfTasks \u003d\u003d 1) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            stringBuilder.append(\"There is 1 task in total in your list.\\n\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            stringBuilder.append(\"There are \" + listOfTasks.size()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    + \" tasks in total in your list.\\n\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Displays the message that the tasks tasks matching the keyword"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * is found to the user, listing the matching tasks."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param matchingTasks The tasks matching the keyword."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return The message that lists the matching tasks."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public String displayFinding(ArrayList\u003cTask\u003e matchingTasks) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        int noOfTasks \u003d matchingTasks.size();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (noOfTasks \u003d\u003d 0) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            stringBuilder.append(\"There is no task that match with this keyword!\\n\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            stringBuilder.append(\"Here are the task or tasks that match with this keyword:\\n\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            for (int i \u003d 0; i \u003c noOfTasks; i++) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                Task task \u003d matchingTasks.get(i);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                stringBuilder.append((i + 1) + \".\" + task + \"\\n\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 171
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\" textOverrun\u003d\"CLIP\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                \u003cInsets bottom\u003d\"20.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                \u003cFont name\u003d\"Chalkboard\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"75.0\" fitWidth\u003d\"75.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "WM71811": 24
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"450.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"374.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"374.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"450.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"442.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "WM71811": 19
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertEquals(3,3);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 12
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void DeadlineConstructor_DeadlineWithNameAndDate(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertEquals(\"[D][\\u2718] do homework (by: Oct 19 2020)\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                new Deadline(\"do homework\", \"2020-10-19\").toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 15
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void TodoConstructor_TodoWithName(){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertEquals(\"[T][\\u2718] do homework\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                new Todo(\"do homework\").toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 14
    }
  },
  {
    "path": "text-ui-test/data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "deadline|✓|return book|2020-10"
      }
    ],
    "authorContributionMap": {
      "WM71811": 1
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "find book"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "deadline return book /by 2020-10"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "event project meeting /at Tue 10-12am"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "find project"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "todo"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "blah"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "deadline get book"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "event presentation preparation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "WM71811": 18
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "java -classpath ..\\bin duke.duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "WM71811": 2,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "if"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  ! ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    find ../src/main/java -name \"*.java\" \u003esources.txt"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  )"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "WM71811": 5,
      "-": 37
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "../src/main/java/duke/ui/Ui.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": "../src/main/java/duke/parser/Parser.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "../src/main/java/duke/parser/TimeParser.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "../src/main/java/duke/storage/Storage.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "../src/main/java/duke/task/TaskList.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "../src/main/java/duke/task/Event.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "../src/main/java/duke/task/Task.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "../src/main/java/duke/task/Deadline.java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "../src/main/java/duke/task/Todo.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "../src/main/java/duke/command/DeleteCommand.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "../src/main/java/duke/command/ListCommand.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "../src/main/java/duke/command/Command.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "../src/main/java/duke/command/AddCommand.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "../src/main/java/duke/command/FindCommand.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "../src/main/java/duke/command/ExitCommand.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "../src/main/java/duke/command/DoneCommand.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "../src/main/java/duke/command/ErrorCommand.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "../src/main/java/duke/Duke.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "../src/main/java/duke/exception/InvalidDeadlineException.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "../src/main/java/duke/exception/InvalidEventException.java"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "../src/main/java/duke/exception/InvalidFilePathException.java"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "../src/main/java/duke/exception/InvalidInputException.java"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "../src/main/java/duke/exception/InvalidRequestException.java"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "../src/main/java/duke/exception/InvalidTodoException.java"
      }
    ],
    "authorContributionMap": {
      "WM71811": 24
    }
  }
]
