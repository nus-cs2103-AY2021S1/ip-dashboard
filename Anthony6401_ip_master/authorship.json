[
  {
    "path": "junit-test/EXPECTED_STORAGE_CHANGE_TO_DONE.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "T | 1 | Sample task"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "D | 1 | Sample task | 2020-05-05 0000"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "D | 1 | Sample task | 2019-05-05 0000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "E | 0 | Sample task | 2020-10-10 0000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "E | 1 | Sample task | 2019-10-10 0000"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 5
    }
  },
  {
    "path": "junit-test/EXPECTED_STORAGE_DELETE.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "T | 0 | Sample task"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "D | 1 | Sample task | 2020-05-05 0000"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "E | 0 | Sample task | 2020-10-10 0000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 4
    }
  },
  {
    "path": "junit-test/EXPECTED_STORAGE_SAVE.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "T | 0 | Sample task"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "D | 1 | Sample task | 2020-05-05 0000"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "D | 0 | Sample task | 2019-05-05 0000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "E | 0 | Sample task | 2020-10-10 0000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "E | 1 | Sample task | 2019-10-10 0000"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 5
    }
  },
  {
    "path": "src/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Class to represents the Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a new Duke object to initialized the program."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        storage \u003d new Storage(\"data/storage.txt\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private void takeUserInput() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String userInput \u003d ui.readLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                Command command \u003d Parser.parseUserInput(userInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                ui.showError(e);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ui.welcome();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        takeUserInput();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ui.exit();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Run the Duke program."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param args The command line input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 56,
      "-": 4
    }
  },
  {
    "path": "src/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Class to represents all command. This class also contains"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * specific string for commands."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /** String to specify bye command. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static String COMMAND_BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /** String to specify list command. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static String COMMAND_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /** String to specify done command. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static String COMMAND_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /** String to specify delete command. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static String COMMAND_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /** String to specify todo command. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static String COMMAND_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /** String to specify deadline command. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static String COMMAND_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /** String to specify event command. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static String COMMAND_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /** String to specify taskafter command. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static String COMMAND_TASK_AFTER \u003d \"taskafter\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /** String to specify taskbefore command. */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static String COMMAND_TASK_BEFORE \u003d \"taskbefore\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /** String to specify find command. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static String COMMAND_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a Command object with isExit as false."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns whether the Duke should stop running or not."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return Duke\u0027s current state to continue running."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Terminates Duke program."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks TaskList of the current task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param ui Ui to deals with interactions with the user."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param storage Storage to save the data to the hard disk."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws DukeException Thrown when something when wrong when executing the command."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 77
    }
  },
  {
    "path": "src/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * This class represents the deadline command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * When executed, the class will add the deadline task and save it"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * locally."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a Command for deadline with the specified task\u0027s name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * and date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskName the task\u0027s name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param date the deadline\u0027s date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public DeadlineCommand(String taskName, LocalDateTime date) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Executes the DeadlineCommand. Executing this command will"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * create a new DeadlineTask that will be added to the TaskList"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * and will be saved to the hard disk by Storage. The Ui will shown"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * the corresponding message depending on whether an exception is thrown"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * or not."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks TaskList of the current task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param ui Ui to deals with interactions with the user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param storage Storage to save the data to the hard disk."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws DukeException If the storage fails to save to the hard disk."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task task \u003d new DeadlineTask(taskName, date);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        storage.saveTaskToFile(task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String message \u003d ui.addSuccess(task, tasks.size());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ui.sendMessage(message);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 53
    }
  },
  {
    "path": "src/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.InvalidTaskNumberException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * This class represents the delete command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * When executed, the class will delete the specified task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a Command for delete with the specified task number"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * that want to be deleted."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskNumber the task\u0027s number you want to delete"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public DeleteCommand(int taskNumber) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Executes the DeleteCommand. Executing this command will"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * delete the task corresponding to the task number in the list as well as"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * in the hard disk. The Ui will shown the corresponding message based on if an"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * exception is thrown or not."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks TaskList of the current task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param ui Ui to deals with interactions with the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param storage Storage to save the data to the hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws DukeException If the task number is less than 1"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * or exceed the TaskList size or the storage fails to read the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (taskNumber \u003c 1 || taskNumber \u003e tasks.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new InvalidTaskNumberException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Task task \u003d tasks.deleteTask(taskNumber - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.deleteTaskInFile(taskNumber);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String message \u003d ui.deleteSuccess(task, tasks.size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            ui.sendMessage(message);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 50
    }
  },
  {
    "path": "src/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.InvalidTaskNumberException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * This class represents the done command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * When executed, the class will mark the specified task as done."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a Command to mark the specified task number"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * as done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskNumber the task\u0027s number you want to mark as done"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public DoneCommand(int taskNumber) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Executes the DoneCommand. Executing this command will"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * mark the task corresponding to the task number as done in the list as well as"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * in the hard disk. The Ui will shown the corresponding message based on if an"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * exception is thrown or not."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks TaskList of the current task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param ui Ui to deals with interactions with the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param storage Storage to save the data to the hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws DukeException If the task number is less than 1"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * or exceed the TaskList size or storage fails to read the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (taskNumber \u003c 1 || taskNumber \u003e tasks.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new InvalidTaskNumberException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Task task \u003d tasks.getTask(taskNumber - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            task.setStatusToDone();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.changeTaskInFile(taskNumber);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String message \u003d ui.doneSuccess(task);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            ui.sendMessage(message);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 51
    }
  },
  {
    "path": "src/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * This class represents the event command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * When executed, the class will add the event task and save it"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * locally."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a Command for event with the specified task\u0027s name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * and date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskName the task\u0027s name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param date the event\u0027s date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public EventCommand(String taskName, LocalDateTime date) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Executes the EventCommand. Executing this command will"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * create a new EventTask that will be added to the TaskList"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * and will be saved to the hard disk by Storage. The Ui will shown"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * the corresponding message depending on whether an exception is thrown"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * or not."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks TaskList of the current task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param ui Ui to deals with interactions with the user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param storage Storage to save the data to the hard disk."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws DukeException If the storage fails to save to the hard disk."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task task \u003d new EventTask(taskName, date);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        storage.saveTaskToFile(task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String message \u003d ui.addSuccess(task, tasks.size());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ui.sendMessage(message);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 53
    }
  },
  {
    "path": "src/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * This class represents the exit command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * When executed, duke program will be terminated."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Executes the ExitCommand. Executing this command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * will stop the duke from running."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks TaskList of the current task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param ui Ui to deals with interactions with the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param storage Storage to save the data to the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super.exit();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 25
    }
  },
  {
    "path": "src/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * This class represents the find command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * When executed, the class will display all the task containing"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * a certain keyword."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a Command to find a task with specified keyword."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param keyword The specified keyword"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Executes the FindCommand. Executing this command will"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * prints out every task in the list that has the specified"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * keyword in the task\u0027s name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks TaskList of the current task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param ui Ui to deals with interactions with the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param storage Storage to save the data to the hard disk."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String message \u003d ui.findTask(keyword, tasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ui.sendMessage(message);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 38
    }
  },
  {
    "path": "src/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.NoTaskException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * This class represents the list command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * When executed, the current list will be displayed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Executes the ListCommand. Executing this command will"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * print out every details of the current task such as"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * the type (todo, deadline, or event), status (done or not),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * and the task\u0027s name as well as the date for event and deadline"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks TaskList of the current task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param ui Ui to deals with interactions with the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param storage Storage to save the data to the hard disk."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws DukeException If TaskList is empty."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new NoTaskException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String message \u003d ui.showList(tasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            ui.sendMessage(message);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 36
    }
  },
  {
    "path": "src/duke/command/TaskAfterCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * This class represents the task after command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * When executed, the class will display all the task after"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * a certain date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class TaskAfterCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a Command to check all the task after"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * a certain date."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param date The specified date"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public TaskAfterCommand(LocalDate date) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Executes the TaskAfterCommand. Executing this command will"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * prints out every task in the list that is due after the specified"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * date. Note that it will prints only deadline and event task since"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * todo task does not have any date."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks TaskList of the current task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param ui Ui to deals with interactions with the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param storage Storage to save the data to the hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String message \u003d ui.eachTaskAfter(date, tasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ui.sendMessage(message);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 42
    }
  },
  {
    "path": "src/duke/command/TaskBeforeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * This class represents the task before command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * When executed, the class will display all the task before or"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * equals to a certain date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class TaskBeforeCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a Command to check all the task before or equals"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * to a certain date."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param date The specified date"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public TaskBeforeCommand(LocalDate date) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Executes the TaskBeforeCommand. Executing this command will"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * prints out every task in the list that is due before or"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * equals to the specified date. Note that it will prints"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * only deadline and event task since todo task does"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * not have any date."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks TaskList of the current task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param ui Ui to deals with interactions with the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param storage Storage to save the data to the hard disk."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String message \u003d ui.eachTaskBefore(date, tasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ui.sendMessage(message);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 43
    }
  },
  {
    "path": "src/duke/command/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * This class represents the todo command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * When executed, the class will add the todo task and save it"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * locally."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a Command for event with the specified task\u0027s name."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskName the task\u0027s name"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public ToDoCommand(String taskName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Executes the ToDoCommand. Executing this command will"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * create a new ToDoTask that will be added to the TaskList"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * and will be saved to the hard disk by Storage. The Ui will shown"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * the corresponding message depending on whether an exception is thrown"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * or not."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks TaskList of the current task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param ui Ui to deals with interactions with the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param storage Storage to save the data to the hard disk."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws DukeException If the storage fails to save to the hard disk."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task task \u003d new ToDoTask(taskName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        storage.saveTaskToFile(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String message \u003d ui.addSuccess(task, tasks.size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ui.sendMessage(message);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 47
    }
  },
  {
    "path": "src/duke/exception/DeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * The exception thrown when the user does not input any description"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * for the deadline\u0027s task name or does not use /by to specify the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * task\u0027s date."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class DeadlineException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a DeadlineException with default message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The message is \"OOPS!!! The description or date of a deadline cannot be empty.\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public DeadlineException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"OOPS!!! The description or date of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 17
    }
  },
  {
    "path": "src/duke/exception/DeleteException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * The exception thrown when the user does not input any number"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * in order to delete a task in the list."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class DeleteException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a DeleteException with default message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The message is \"OOPS!!! You need a task number to use delete!.\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public DeleteException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"OOPS!!! You need a task number to use delete!\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 16
    }
  },
  {
    "path": "src/duke/exception/DoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * The exception thrown when the user does not input any number"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * in order to mark a task as done."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class DoneException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a DoneException with default message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The message is \"OOPS!!! You need a task number to use done!.\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public DoneException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"OOPS!!! You need a task number to use done!\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 16
    }
  },
  {
    "path": "src/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * The base exception class for all exceptions that will be thrown when running Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " *  All other exceptions such as IOException and DateTimeParseException will be wrapped"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " *  by some custom exception that extends DukeException."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a DukeException with the specified message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param message message of the exception"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 18
    }
  },
  {
    "path": "src/duke/exception/EventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * The exception thrown when the user does not input any description"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * for the event\u0027s task name or does not use /at to specify the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * task\u0027s date."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class EventException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs an EventException with default message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The message is \"OOPS!!! The description or time of an event cannot be empty.\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public EventException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"OOPS!!! The description or time of an event cannot be empty.\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 17
    }
  },
  {
    "path": "src/duke/exception/FailToReadFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * The exception thrown when the Scanner or FileWriter class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * fails to read the file in the hard disk."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class FailToReadFileException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a FailToReadFileException with default message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The message is \"Something went wrong when reading the storage file! Please try again.\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public FailToReadFileException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"Something went wrong when reading the storage file! Please try again.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 16
    }
  },
  {
    "path": "src/duke/exception/FindException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * The exception thrown when the user does not input any keyword"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * when using find commmand."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class FindException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a FindException with default message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The message is \"Please put in a keyword!\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public FindException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"Please put in a keyword!\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 16
    }
  },
  {
    "path": "src/duke/exception/InvalidDateFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * The exception thrown when the user does not input any date"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * or input invalid date format when using taskbefore or taskafter"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class InvalidDateFormatException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs an InvalidDateFormatException with default message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The message is \"Invalid date format! Please put it something like 2020-12-31!.\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public InvalidDateFormatException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"Invalid date format! Please put it something like 2020-12-31!\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 17
    }
  },
  {
    "path": "src/duke/exception/InvalidDateTimeFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * The exception thrown when the user does not input any date"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * or input invalid date format when using deadline or event"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class InvalidDateTimeFormatException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs an InvalidDateTimeFormatException with default message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The message is \"Invalid date format!"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Please put it something like 2020-12-31 1800 for 31 December 2020 6 pm.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public InvalidDateTimeFormatException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"Invalid date format! Please put it something\" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \"like 2020-12-31 1800 for 31 December 2020 6 pm.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 19
    }
  },
  {
    "path": "src/duke/exception/InvalidTaskNumberException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * The exception thrown when the user input invalid data"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * such as characters."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class InvalidTaskNumberException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs an InvalidTaskNumberException with default message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The message is \"Invalid task number!\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public InvalidTaskNumberException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"Invalid task number!\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 16
    }
  },
  {
    "path": "src/duke/exception/NoTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * The exception thrown when the user want to see their task\u0027s list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * when they have not add any task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class NoTaskException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a NoTaskException with default message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The message is \"You haven\u0027t add any task!\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public NoTaskException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"You haven\u0027t add any task!\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 16
    }
  },
  {
    "path": "src/duke/exception/NotACommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * The exception thrown when the user input something"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * that duke does not recognized as a command."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class NotACommandException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a NotACommandException with default message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The message is \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public NotACommandException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 16
    }
  },
  {
    "path": "src/duke/exception/ToDoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * The exception thrown when the user does not input any description"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * for the todo\u0027s task name."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class ToDoException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a ToDoException with default message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The message is \"OOPS!!! The description of a todo cannot be empty.\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public ToDoException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 16
    }
  },
  {
    "path": "src/duke/task/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Class to represents the DeadlineTask object. This task object"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * is used to represent a task that has a certain deadline date."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a new DeadlineTask object with the specified task name and date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * When a new Task object is created, the status is set to ongoing by default."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskName The task\u0027s name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param date The task\u0027s date"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public DeadlineTask(String taskName, LocalDateTime date) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Gets the deadlineTask\u0027s date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return The deadline\u0027s date"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public LocalDateTime getDate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Gets the string representation of the date in the format of"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * yyyy-MM-dd HHmm e.g. 2020-01-01 1400 represents Jan 01 2019 2 pm."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return A string representation of the date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String getDateString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns the string representation of the DeadlineTask."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * DeadlineTask is represented as \"D\" in the front and it will also shows"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * the date in the format of MMM dd yyyy HH:mm e.g. Jan 01 2020 18:00."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return A string representation of DeadlineTask"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return \"[D]\" + super.toString() +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \" (by: \" + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\")) + \")\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 56
    }
  },
  {
    "path": "src/duke/task/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Class to represents the EventTask object. This task object"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * is used to represent an event happening at a certain date."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a new EventTask object with the specified task name and date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * When a new Task object is created, the status is set to ongoing by default."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskName The task\u0027s name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param date The event\u0027s date"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public EventTask(String taskName, LocalDateTime date) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Gets the eventTask\u0027s date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return The event\u0027s date"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public LocalDateTime getDate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Gets the string representation of the date in the format of"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * yyyy-MM-dd HHmm e.g. 2020-01-01 1400 represents Jan 01 2019 2 pm."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return A string representation of the date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String getDateString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns the string representation of the EventTask."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * EventTask is represented as \"E\" in the front and it will also shows"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * the date in the format of MMM dd yyyy HH:mm e.g. Jan 01 2020 18:00."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return A string representation of EventTask"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return \"[E]\" + super.toString() +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \" (at: \" + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\")) + \")\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 56
    }
  },
  {
    "path": "src/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Class to represent the task object. This class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * stores the task\u0027s name as well as the status of the task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private enum Status {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DONE, ONGOING"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a new Task object with the specified task name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * When a new Task object is created, the status is set to ongoing by default."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskName The task\u0027s name"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public Task(String taskName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.status \u003d Status.ONGOING;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Gets the task\u0027s name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return The task\u0027s name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.taskName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns true if the task has already been marked"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * as done and false otherwise."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return The status of the task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.status \u003d\u003d Status.DONE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Sets the task\u0027s status to done."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void setStatusToDone() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        status \u003d Status.DONE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns the string representation of the task. If the task is done,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * it will be marked as O. Otherwise, it will be marked as X."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return a string representation of the task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (status \u003d\u003d Status.DONE) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return \"[O] \" + taskName;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return \"[X] \" + taskName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 67
    }
  },
  {
    "path": "src/duke/task/ToDoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Class to represents the ToDoTask object. This task object"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * is used to represent all the task without any date."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class ToDoTask extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a new ToDoTask object with the specified task name."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * When a new Task object is created, the status is set to ongoing by default."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskName The task\u0027s name"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public ToDoTask(String taskName) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns the string representation of the ToDoTask."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * ToDoTask is represented with \"T\" in front."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return a string representation of the ToDoTask."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 29
    }
  },
  {
    "path": "src/duke/utility/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.command.TaskAfterCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.command.TaskBeforeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.command.ToDoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DeadlineException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DeleteException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DoneException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.EventException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.FindException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.InvalidDateFormatException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.InvalidDateTimeFormatException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.InvalidTaskNumberException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.NotACommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.ToDoException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Class to parse the user input. This class will try to"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * change the user input to a functional command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Parses the task so that it will be saved in the specific format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * in the hard disk. This is done to make it easier to read the data"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * that is stored locally when running the Duke again."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param task Task to be parsed"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return parsed task for saving purpose"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static String parseForSave(Task task) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String taskName \u003d task.getTaskName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String parsed \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String isDone \u003d task.isDone()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                ? \"1\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                : \"0\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (task instanceof ToDoTask) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            parsed \u003d \"T | \" + isDone + \" | \" + taskName + \"\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else if (task instanceof DeadlineTask) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            DeadlineTask deadlineTask \u003d (DeadlineTask) task;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String date \u003d deadlineTask.getDateString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            parsed \u003d \"D | \" + isDone + \" | \" + taskName + \" | \" + date + \"\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else if (task instanceof EventTask) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            EventTask eventTask \u003d (EventTask) task;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String time \u003d eventTask.getDateString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            parsed \u003d \"E | \" + isDone + \" | \" + taskName + \" | \" + time + \"\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return parsed;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Parses the string that is being read in the hard disk and creates"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * the task representation of the string."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskString String that represents a task in the hard disk"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return The task representation of the string"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static Task parseForReadingFile(String taskString) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String[] taskArr \u003d taskString.split(\"\\\\|\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String taskType \u003d taskArr[0].trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        boolean isDone \u003d taskArr[1].trim().equals(\"1\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String taskName \u003d taskArr[2].trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task newTask \u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (taskType.equals(\"T\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            newTask \u003d new ToDoTask(taskName);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else if (taskType.equals(\"D\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String date \u003d taskArr[3].trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            LocalDateTime deadlineDate \u003d LocalDateTime.parse(date, formatter);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            newTask \u003d new DeadlineTask(taskName, deadlineDate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else if (taskType.equals(\"E\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String date \u003d taskArr[3].trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            LocalDateTime eventDate \u003d LocalDateTime.parse(date, formatter);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            newTask \u003d new EventTask(taskName, eventDate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            newTask.setStatusToDone();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Parses the user input in order to change it into a functional command."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * If the user input a wrong command or the user does not supply any arg"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * while the command needs an arg, it will throws an exception."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param userInput The user input"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return The command representation of the user input"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws DukeException If there is no arg or wrong arg for"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * specific command or user input wrong command"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static Command parseUserInput(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String[] userInputArr \u003d userInput.split(\"\\\\s\", 2);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String command \u003d userInputArr[0];"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String arg \u003d null;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (userInputArr.length !\u003d 1) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            arg \u003d userInputArr[1];"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (command.equals(Command.COMMAND_BYE)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else if (command.equals(Command.COMMAND_LIST)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else if (command.equals(Command.COMMAND_DONE)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (arg \u003d\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new DoneException();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            int taskNumber;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                taskNumber \u003d Integer.parseInt(arg);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new InvalidTaskNumberException();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return new DoneCommand(taskNumber);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else if (command.equals(Command.COMMAND_DELETE)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (arg \u003d\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new DeleteException();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            int taskNumber;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                taskNumber \u003d Integer.parseInt(arg);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new InvalidTaskNumberException();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return new DeleteCommand(taskNumber);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else if (command.equals(Command.COMMAND_TASK_AFTER)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (arg \u003d\u003d null) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new InvalidDateFormatException();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            LocalDate parsedDate;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                parsedDate \u003d LocalDate.parse(arg);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new InvalidDateFormatException();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return new TaskAfterCommand(parsedDate);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else if (command.equals(Command.COMMAND_TASK_BEFORE)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (arg \u003d\u003d null) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new InvalidDateFormatException();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            LocalDate parsedDate;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                parsedDate \u003d LocalDate.parse(arg);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new InvalidDateFormatException();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return new TaskBeforeCommand(parsedDate);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else if (command.equals(Command.COMMAND_TODO)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (arg \u003d\u003d null) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new ToDoException();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return new ToDoCommand(arg);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else if (command.equals(Command.COMMAND_DEADLINE)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (arg \u003d\u003d null) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new DeadlineException();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String[] arrForDeadline \u003d arg.split(\"/by\", 2);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (arrForDeadline.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new DeadlineException();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String taskForDeadline \u003d arrForDeadline[0].trim();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String dateForDeadline \u003d arrForDeadline[1].trim();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            LocalDateTime deadlineDate;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                deadlineDate \u003d LocalDateTime.parse(dateForDeadline, formatter);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new InvalidDateTimeFormatException();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return new DeadlineCommand(taskForDeadline, deadlineDate);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else if (command.equals(Command.COMMAND_EVENT)) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (arg \u003d\u003d null) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new EventException();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String[] arrForEvent \u003d arg.split(\"/at\", 2);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (arrForEvent.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new EventException();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String taskForEvent \u003d arrForEvent[0].trim();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String dateForEvent \u003d arrForEvent[1].trim();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            LocalDateTime eventDate;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                eventDate \u003d LocalDateTime.parse(dateForEvent, formatter);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new InvalidDateTimeFormatException();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return new EventCommand(taskForEvent, eventDate);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else if (command.equals(Command.COMMAND_FIND)) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (arg \u003d\u003d null) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new FindException();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return new FindCommand(arg);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new NotACommandException();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 250
    }
  },
  {
    "path": "src/duke/utility/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.FailToReadFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * This class deals with saving, changing, or deleting"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * data in the hard disk. These are done in order to remember"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * all the current task when running the Duke again."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private Path storagePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a Storage object with the specified file path."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param filePath The file path to the storage file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.storagePath \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Saves the task to the hard disk. The task will be parsed"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * to the task\u0027s saving format before it is saved to the hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Note that the new task will be appended to the end of the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param task The task to be saved"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws DukeException If the FileWriter fails to read the file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void saveTaskToFile(Task task) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            FileWriter fw \u003d new FileWriter(storagePath.toString(), true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String toBeAppend \u003d Parser.parseForSave(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            fw.write(toBeAppend);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new FailToReadFileException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Changes the task\u0027s status to done in the hard disk based on"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * the line number specified. This will change \u00270\u0027 (which indicates"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * ongoing task) in the hard disk to \u00271\u0027 (which indicates done task)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param line The task line that wanted to be changed"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws DukeException If the Scanner or FileWriter fails to read the file"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void changeTaskInFile(int line) throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            File file \u003d new File(storagePath.toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            int count \u003d 1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String taskLine \u003d sc.nextLine() + \"\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                if (count \u003d\u003d line) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    if (taskLine.charAt(4) \u003d\u003d \u00270\u0027) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                        taskLine \u003d taskLine.replaceFirst(\"0\", \"1\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                sb.append(taskLine);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String tobeWritten \u003d sb.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            FileWriter fw \u003d new FileWriter(storagePath.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            fw.write(tobeWritten);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new FailToReadFileException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Delete a task in the hard disk based on the line number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * specified."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param line The task line that wanted to be changed"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws DukeException If the Scanner or FileWriter fails to read the file"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void deleteTaskInFile(int line) throws DukeException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            File file \u003d new File(storagePath.toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            int count \u003d 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String taskLine \u003d sc.nextLine() + \"\\n\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                if (count !\u003d line) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    sb.append(taskLine);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String tobeWritten \u003d sb.toString();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            FileWriter fw \u003d new FileWriter(storagePath.toString());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            fw.write(tobeWritten);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new FailToReadFileException();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private void createStorageFile() throws DukeException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Path dataPath \u003d storagePath.getParent();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            File dataFile \u003d new File(dataPath.toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (!dataFile.exists()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                dataFile.mkdir();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            File storageFile \u003d new File(storagePath.toString());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (!storageFile.exists()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                storageFile.createNewFile();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new FailToReadFileException();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Read the storage file in the hard disk. If no folder or"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * file has been created, it will create the folder or file"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * automatically. All the strings read from the hard disk"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * will be parsed to their corresponding task and added to the"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * list of task."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return List of task"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws DukeException If fails to create the new file locally"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * or the Scanner fails to read the file"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            createStorageFile();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            File file \u003d new File(storagePath.toString());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String taskString \u003d sc.nextLine();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                Task taskInFile \u003d Parser.parseForReadingFile(taskString);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                tasks.add(taskInFile);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new FailToReadFileException();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 175
    }
  },
  {
    "path": "src/duke/utility/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Class to represents the Task\u0027s list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * This class is used to control the list of task such as"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * add task, delete task, get task, etc."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a new TaskList with no task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a new TaskList with the specified list of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks List of tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Gets the list of tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return list of tasks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Deletes a specific task according to the task number."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Note that the task count starts from 0."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskNum task\u0027s number that wants to be deleted"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return the deleted task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public Task deleteTask(int taskNum) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.tasks.remove(taskNum);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Gets the current size of the TaskList."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return current size of the TaskList"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Adds the specified task to the TaskList."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param task task that wants to be added"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Gets a specific task according to the task number."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Note that the task count starts from 0."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskNum task\u0027s number of a task"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return task corresponding to the task\u0027s number"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public Task getTask(int taskNum) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.tasks.get(taskNum);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns the current state of the Task List. If there is a task"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * in the Task List, it return false. Otherwise, it returns true."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return list condition"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.tasks.isEmpty();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 90
    }
  },
  {
    "path": "src/duke/utility/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package duke.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * This class deals with unit interface of Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * This includes the messages that Duke will send as well as"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * reading the user input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private final String INDENTATION \u003d \"  \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Constructs a new Ui object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Reads the user input as a string."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String readLine() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.sc.nextLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Welcomes the user when the user starts Duke."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void welcome() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String message \u003d \"Hi! My name is Duke.\\nWhat do you want me to do?\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        sendMessage(message);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Sends a farewell message to the user when the user exit Duke."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String message \u003d \"Bye. Thank you for using me!\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        sendMessage(message);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns a message about the specified task has been marked"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * as done."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param task task that was marked as done"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return done success message"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String doneSuccess(Task task) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return \"Sucessfully marked this task as done:\\n\" + INDENTATION + task.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns a message about the specified task has been deleted."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The message will also tells how many tasks left in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param task task that was deleted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskSize the task size after deletion"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return delete success message"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String deleteSuccess(Task task, int taskSize) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return \"Okay. I will delete this task:\\n\" + INDENTATION + task + \"\\n\" +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \"Now you have \" + taskSize + \" \" + (taskSize \u003d\u003d 1 ? \"task \" : \"tasks \") + \"in the list.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns a message about the specified task has been added."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The message will also tells how many tasks left in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param task task that was added"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param taskSize the task size after addition"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return add success message"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String addSuccess(Task task, int taskSize) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return \"Okay. I will add this task:\\n\" + INDENTATION + task + \"\\n\" +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \"Now you have \" + taskSize + \" \" + (taskSize \u003d\u003d 1 ? \"task \" : \"tasks \") + \"in the list.\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns a message showing all of tasks in the list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The numbering shown in this message is used when the user"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * wants to delete task or mark task as done."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks TaskList to be shown"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return message about all the tasks in the list"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String showList(TaskList tasks) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        sb.append(\"Here is the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            sb.append((i + 1) + \". \" + tasks.getTask(i) + \"\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return sb.toString().trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns a message showing all the tasks in the list that happens"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * after the specified date."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param date the specified date by the user"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return message about all the tasks in the list after the specified date"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String eachTaskAfter(LocalDate date, TaskList tasks) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        sb.append(\"Here is the tasks after \""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \":\\n\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        for (Task task : tasks.getTasks()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (task instanceof ToDoTask) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            } else if (task instanceof DeadlineTask) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                DeadlineTask deadlineTask \u003d (DeadlineTask) task;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                if (date.isBefore(deadlineTask.getDate().toLocalDate())) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    sb.append(count + \". \" + task + \"\\n\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            } else if (task instanceof EventTask) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                EventTask eventTask \u003d (EventTask) task;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                if (date.isBefore(eventTask.getDate().toLocalDate())) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    sb.append(count + \". \" + task + \"\\n\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return sb.toString().trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns a message showing all the tasks in the list that happens"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * before or equals to the specified date."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param date the specified date by the user"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return message about all the tasks in the list before"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * or equals the specified date"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String eachTaskBefore(LocalDate date, TaskList tasks) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        sb.append(\"Here is the tasks before \""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \":\\n\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        for (Task task : tasks.getTasks()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (task instanceof ToDoTask) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            } else if (task instanceof DeadlineTask) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                DeadlineTask deadlineTask \u003d (DeadlineTask) task;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                if (date.isAfter(deadlineTask.getDate().toLocalDate())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                        || date.isEqual(deadlineTask.getDate().toLocalDate())) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    sb.append(count + \". \" + task + \"\\n\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            } else if (task instanceof EventTask) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                EventTask eventTask \u003d (EventTask) task;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                if (date.isAfter(eventTask.getDate().toLocalDate())"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                        || date.isEqual(eventTask.getDate().toLocalDate())) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    sb.append(count + \". \" + task + \"\\n\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return sb.toString().trim();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns a message showing all the tasks in the list that contains"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * the specified keyword."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param keyword keyword to find task"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return message about all the task that contains the specified keyword"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String findTask(String keyword, TaskList tasks) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        boolean isFound \u003d false;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        for (Task task : tasks.getTasks()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (task.getTaskName().contains(keyword)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                isFound \u003d true;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                sb.append(count + \". \" + task + \"\\n\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (isFound) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return \"Here are the matching tasks in your list:\\n\" + sb.toString().trim();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return \"No task found with that keyword!\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Gets the DukeException\u0027s message and prints it to the user."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param e exception thrown when running duke"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void showError(DukeException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        sendMessage(e.getMessage());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Prints the specified message to the user."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param sendMessage message to be sent to the user"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void sendMessage(String sendMessage) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        System.out.println(createLine(sendMessage));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Creates a line of equals sign before and after the specified message."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * The length of the line may change depends on the length of"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * the message."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @param message the specified message"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @return message with line before and after it"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String createLine(String message) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Scanner sc \u003d new Scanner(message);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String equalSign \u003d \"\u003d\";"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        int width \u003d 75;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String textLine \u003d INDENTATION + sc.nextLine();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            sb.append(textLine + \"\\n\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            width \u003d Math.max(width, textLine.length() + 2);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String line \u003d equalSign.repeat(width);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return line + \"\\n\" + sb.toString() + line;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 251
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DeadlineException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DeleteException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.DoneException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.EventException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.InvalidDateFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.InvalidDateTimeFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.InvalidTaskNumberException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.NotACommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.exception.ToDoException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parseToDoTaskForSavingTest() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String taskName \u003d \"Sample task\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task task \u003d new ToDoTask(taskName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String parsedTaskNotDone \u003d Parser.parseForSave(task);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String expectedNotDone \u003d \"T | 0 | Sample task\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(expectedNotDone, parsedTaskNotDone);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        task.setStatusToDone();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String parsedTaskDone \u003d Parser.parseForSave(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String expectedDone \u003d \"T | 1 | Sample task\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(expectedDone, parsedTaskDone);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parseDeadlineTaskForSavingTest() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String taskName \u003d \"Sample task\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.parse(\"2020-01-01 0000\", formatter);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task task \u003d new DeadlineTask(taskName, date);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String parsedTaskNotDone \u003d Parser.parseForSave(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String expectedNotDone \u003d \"D | 0 | Sample task | 2020-01-01 0000\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(expectedNotDone, parsedTaskNotDone);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        task.setStatusToDone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String parsedTaskDone \u003d Parser.parseForSave(task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String expectedDone \u003d \"D | 1 | Sample task | 2020-01-01 0000\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(expectedDone, parsedTaskDone);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parseEventTaskForSavingTest() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String taskName \u003d \"Sample task\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.parse(\"2020-01-01 0000\", formatter);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task task \u003d new EventTask(taskName, date);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String parsedTaskNotDone \u003d Parser.parseForSave(task);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String expectedNotDone \u003d \"E | 0 | Sample task | 2020-01-01 0000\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(expectedNotDone, parsedTaskNotDone);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        task.setStatusToDone();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String parsedTaskDone \u003d Parser.parseForSave(task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String expectedDone \u003d \"E | 1 | Sample task | 2020-01-01 0000\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(expectedDone, parsedTaskDone);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parseToDoTaskForReadingFileTest() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String readDataNotDone \u003d \"T | 0 | Sample task\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task taskNotDone \u003d Parser.parseForReadingFile(readDataNotDone);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(\"[T][X] Sample task\", taskNotDone.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String readDataDone \u003d \"T | 1 | Sample task\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task taskDone \u003d Parser.parseForReadingFile(readDataDone);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(\"[T][O] Sample task\", taskDone.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parseDeadlineTaskForReadingFileTest() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String readDataNotDone \u003d \"D | 0 | Sample task | 2020-01-01 0000\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task taskNotDone \u003d Parser.parseForReadingFile(readDataNotDone);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(\"[D][X] Sample task (by: Jan 01 2020 00:00)\", taskNotDone.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String readDataDone \u003d \"D | 1 | Sample task | 2020-01-01 0000\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task taskDone \u003d Parser.parseForReadingFile(readDataDone);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(\"[D][O] Sample task (by: Jan 01 2020 00:00)\", taskDone.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parseEventTaskForReadingFileTest() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String readDataNotDone \u003d \"E | 0 | Sample task | 2020-01-01 0000\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task taskNotDone \u003d Parser.parseForReadingFile(readDataNotDone);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(\"[E][X] Sample task (at: Jan 01 2020 00:00)\", taskNotDone.toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String readDataDone \u003d \"E | 1 | Sample task | 2020-01-01 0000\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task taskDone \u003d Parser.parseForReadingFile(readDataDone);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(\"[E][O] Sample task (at: Jan 01 2020 00:00)\", taskDone.toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parseUserInputByeTest() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInput \u003d \"bye\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInput);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parseUserInputListTest() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInput \u003d \"list\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInput);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parseUserInputDoneTest() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputNoArg \u003d \"done\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertThrows(DoneException.class, () -\u003e {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputNoArg);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputWrongArg \u003d \"done a\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertThrows(InvalidTaskNumberException.class, () -\u003e {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputWrongArg);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputCorrectArg \u003d \"done 1\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputCorrectArg);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parseUserInputDeleteTest() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputNoArg \u003d \"delete\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertThrows(DeleteException.class, () -\u003e {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputNoArg);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputWrongArg \u003d \"delete a\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertThrows(InvalidTaskNumberException.class, () -\u003e {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputWrongArg);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputCorrectArg \u003d \"delete 1\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputCorrectArg);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parseUserInputTaskAfterTest() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputNoArg \u003d \"taskafter\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertThrows(InvalidDateFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputNoArg);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputWrongArg \u003d \"taskafter 10 june 2020\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertThrows(InvalidDateFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputWrongArg);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputCorrectArg \u003d \"taskafter 2020-01-01\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputCorrectArg);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parseUserInputTaskBeforeTest() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputNoArg \u003d \"taskbefore\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertThrows(InvalidDateFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputNoArg);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputWrongArg \u003d \"taskbefore 10 june 2020\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertThrows(InvalidDateFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputWrongArg);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputCorrectArg \u003d \"taskbefore 2020-01-01\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputCorrectArg);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parseUserInputToDoTest() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputCorrect \u003d \"todo Sample task\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputCorrect);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputIncorrect \u003d \"todo\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertThrows(ToDoException.class, () -\u003e {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputIncorrect);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parseUserInputDeadlineTest() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputCorrect \u003d \"deadline Sample task /by 2020-05-05 1000\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputCorrect);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputNoArg \u003d \"deadline\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertThrows(DeadlineException.class, () -\u003e {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputNoArg);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputNoDate \u003d \"deadline Sample task\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertThrows(DeadlineException.class, () -\u003e {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputNoDate);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputNoBy \u003d \"deadline Sample task /date description\";"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertThrows(DeadlineException.class, () -\u003e {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputNoBy);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputWrongDate \u003d \"deadline Sample task /by 01 January 2020\";"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertThrows(InvalidDateTimeFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputWrongDate);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parseUserInputEventTest() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputCorrect \u003d \"event Sample task /at 2020-05-05 1000\";"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputCorrect);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputNoArg \u003d \"event\";"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertThrows(EventException.class, () -\u003e {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputNoArg);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputNoDate \u003d \"event Sample task\";"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertThrows(EventException.class, () -\u003e {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputNoDate);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputNoAt \u003d \"event Sample task /date description\";"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertThrows(EventException.class, () -\u003e {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputNoAt);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String userInputWrongDate \u003d \"event Sample task /at 01 January 2020\";"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertThrows(InvalidDateTimeFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(userInputWrongDate);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parseNotACommandTest() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String NotACommand1 \u003d \"abc\";"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertThrows(NotACommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(NotACommand1);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String NotACommand2 \u003d \"cba\";"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertThrows(NotACommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(NotACommand2);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String NotACommand3 \u003d \"dead line\";"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertThrows(NotACommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Parser.parseUserInput(NotACommand3);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 286
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void StorageSaveTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Path path \u003d Paths.get(\"../../junit-test/ACTUAL_STORAGE_SAVE.txt\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Storage storage \u003d new Storage(path.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        File actualStorageSave \u003d new File(path.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (actualStorageSave.exists()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            actualStorageSave.delete();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String taskName \u003d \"Sample task\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ToDoTask toDoTask \u003d new ToDoTask(taskName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime deadlineDate1 \u003d LocalDateTime.parse(\"2020-05-05 0000\", formatter);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime deadlineDate2 \u003d LocalDateTime.parse(\"2019-05-05 0000\", formatter);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DeadlineTask deadlineTask1 \u003d new DeadlineTask(taskName, deadlineDate1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        deadlineTask1.setStatusToDone();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DeadlineTask deadlineTask2 \u003d new DeadlineTask(taskName, deadlineDate2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(deadlineTask1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(deadlineTask2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime eventDate1 \u003d LocalDateTime.parse(\"2020-10-10 0000\", formatter);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime eventDate2 \u003d LocalDateTime.parse(\"2019-10-10 0000\", formatter);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        EventTask eventTask1 \u003d new EventTask(taskName, eventDate1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        EventTask eventTask2 \u003d new EventTask(taskName, eventDate2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        eventTask2.setStatusToDone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            actualStorageSave.createNewFile();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.saveTaskToFile(toDoTask);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.saveTaskToFile(deadlineTask1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.saveTaskToFile(deadlineTask2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.saveTaskToFile(eventTask1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.saveTaskToFile(eventTask2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            File expectedStorageSave \u003d new File(\"../../junit-test/EXPECTED_STORAGE_SAVE.txt\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Scanner scForActual \u003d new Scanner(actualStorageSave);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Scanner scForExpected \u003d new Scanner(expectedStorageSave);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            boolean areSame \u003d true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            while (scForActual.hasNext() || scForExpected.hasNext()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String lineActual \u003d scForActual.nextLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String lineExpected \u003d scForExpected.nextLine();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                if (!lineActual.equals(lineExpected)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    areSame \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Assertions.assertTrue(areSame);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void StorageChangeToDoneTest() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Path path \u003d Paths.get(\"../../junit-test/ACTUAL_STORAGE_CHANGE_TO_DONE.txt\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Storage storage \u003d new Storage(path.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        File actualStorageChangeToDone \u003d new File(path.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (actualStorageChangeToDone.exists()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            actualStorageChangeToDone.delete();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String taskName \u003d \"Sample task\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ToDoTask toDoTask \u003d new ToDoTask(taskName);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime deadlineDate1 \u003d LocalDateTime.parse(\"2020-05-05 0000\", formatter);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime deadlineDate2 \u003d LocalDateTime.parse(\"2019-05-05 0000\", formatter);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DeadlineTask deadlineTask1 \u003d new DeadlineTask(taskName, deadlineDate1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        deadlineTask1.setStatusToDone();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DeadlineTask deadlineTask2 \u003d new DeadlineTask(taskName, deadlineDate2);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(deadlineTask1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(deadlineTask2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime eventDate1 \u003d LocalDateTime.parse(\"2020-10-10 0000\", formatter);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime eventDate2 \u003d LocalDateTime.parse(\"2019-10-10 0000\", formatter);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        EventTask eventTask1 \u003d new EventTask(taskName, eventDate1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        EventTask eventTask2 \u003d new EventTask(taskName, eventDate2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        eventTask2.setStatusToDone();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            actualStorageChangeToDone.createNewFile();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.saveTaskToFile(toDoTask);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.saveTaskToFile(deadlineTask1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.saveTaskToFile(deadlineTask2);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.saveTaskToFile(eventTask1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.saveTaskToFile(eventTask2);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.changeTaskInFile(1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.changeTaskInFile(3);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            File expectedStorageChangeToDone \u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    new File(\"../../junit-test/EXPECTED_STORAGE_CHANGE_TO_DONE.txt\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Scanner scForActual \u003d new Scanner(actualStorageChangeToDone);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Scanner scForExpected \u003d new Scanner(expectedStorageChangeToDone);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            boolean areSame \u003d true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            while (scForActual.hasNext() || scForExpected.hasNext()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String lineActual \u003d scForActual.nextLine();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String lineExpected \u003d scForExpected.nextLine();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                if (!lineActual.equals(lineExpected)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    areSame \u003d false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Assertions.assertTrue(areSame);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void StorageDeleteTest() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Path path \u003d Paths.get(\"../../junit-test/ACTUAL_STORAGE_DELETE.txt\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Storage storage \u003d new Storage(path.toString());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        File actualStorageDelete \u003d new File(path.toString());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (actualStorageDelete.exists()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            actualStorageDelete.delete();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String taskName \u003d \"Sample task\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ToDoTask toDoTask \u003d new ToDoTask(taskName);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime deadlineDate1 \u003d LocalDateTime.parse(\"2020-05-05 0000\", formatter);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime deadlineDate2 \u003d LocalDateTime.parse(\"2019-05-05 0000\", formatter);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DeadlineTask deadlineTask1 \u003d new DeadlineTask(taskName, deadlineDate1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        deadlineTask1.setStatusToDone();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DeadlineTask deadlineTask2 \u003d new DeadlineTask(taskName, deadlineDate2);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(deadlineTask1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(deadlineTask2);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime eventDate1 \u003d LocalDateTime.parse(\"2020-10-10 0000\", formatter);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime eventDate2 \u003d LocalDateTime.parse(\"2019-10-10 0000\", formatter);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        EventTask eventTask1 \u003d new EventTask(taskName, eventDate1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        EventTask eventTask2 \u003d new EventTask(taskName, eventDate2);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        eventTask2.setStatusToDone();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            actualStorageDelete.createNewFile();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.saveTaskToFile(toDoTask);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.saveTaskToFile(deadlineTask1);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.saveTaskToFile(deadlineTask2);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.saveTaskToFile(eventTask1);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.saveTaskToFile(eventTask2);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.deleteTaskInFile(3);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            storage.deleteTaskInFile(4);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            File expectedStorageDelete \u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    new File(\"../../junit-test/EXPECTED_STORAGE_DELETE.txt\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Scanner scForActual \u003d new Scanner(actualStorageDelete);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Scanner scForExpected \u003d new Scanner(expectedStorageDelete);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            boolean areSame \u003d true;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            while (scForActual.hasNext() || scForExpected.hasNext()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String lineActual \u003d scForActual.nextLine();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String lineExpected \u003d scForExpected.nextLine();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                if (!lineActual.equals(lineExpected)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    areSame \u003d false;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Assertions.assertTrue(areSame);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        });"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 214
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void TaskListIsEmptyTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertTrue(taskList.isEmpty());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(new ToDoTask(\"Sample task 1\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(new ToDoTask(\"Sample task 2\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(new ToDoTask(\"Sample task 3\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertFalse(taskList.isEmpty());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void TaskListAddTest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(new ToDoTask(\"Sample task 1\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(new ToDoTask(\"Sample task 2\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(new ToDoTask(\"Sample task 3\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(taskList.size(), 3);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void TaskListDeleteTest() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(new ToDoTask(\"Sample task 1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(new ToDoTask(\"Sample task 2\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(new ToDoTask(\"Sample task 3\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.deleteTask(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(new ToDoTask(\"Sample task 4\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(new ToDoTask(\"Sample task 5\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.deleteTask(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.deleteTask(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(taskList.size(), 2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void TaskListGetTest() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task task1 \u003d new ToDoTask(\"Sample task 1\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task task2 \u003d new ToDoTask(\"Sample task 2\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task task3 \u003d new ToDoTask(\"Sample task 3\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task task4 \u003d new ToDoTask(\"Sample task 4\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(task1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(task2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(task3);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(task4);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(new ToDoTask(\"Sample task 5\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertTrue(task1 \u003d\u003d taskList.getTask(0));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertTrue(task3 \u003d\u003d taskList.getTask(2));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 67
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void taskMethodsTest() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime deadlineDate \u003d LocalDateTime.parse(\"2020-05-05 0000\", formatter);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime eventDate \u003d LocalDateTime.parse(\"2020-10-10 0000\", formatter);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String taskName \u003d \"Sample Task\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task toDoTask \u003d new ToDoTask(taskName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task deadlineTask \u003d new DeadlineTask(taskName, deadlineDate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task eventTask \u003d new EventTask(taskName, eventDate);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(taskName, toDoTask.getTaskName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(taskName, deadlineTask.getTaskName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(taskName, eventTask.getTaskName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertFalse(toDoTask.isDone());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertFalse(deadlineTask.isDone());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertFalse(eventTask.isDone());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String toDoTaskExpectedNotDone \u003d \"[T][X] Sample Task\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String deadlineTaskExpectedNotDone \u003d \"[D][X] Sample Task (by: May 05 2020 00:00)\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String eventTaskExpectedNotDone \u003d \"[E][X] Sample Task (at: Oct 10 2020 00:00)\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(toDoTaskExpectedNotDone, toDoTask.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(deadlineTaskExpectedNotDone, deadlineTask.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(eventTaskExpectedNotDone, eventTask.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        toDoTask.setStatusToDone();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        deadlineTask.setStatusToDone();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        eventTask.setStatusToDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertTrue(toDoTask.isDone());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertTrue(deadlineTask.isDone());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertTrue(eventTask.isDone());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String toDoTaskExpectedDone \u003d \"[T][O] Sample Task\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String deadlineTaskExpectedDone \u003d \"[D][O] Sample Task (by: May 05 2020 00:00)\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String eventTaskExpectedDone \u003d \"[E][O] Sample Task (at: Oct 10 2020 00:00)\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(toDoTaskExpectedDone, toDoTask.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(deadlineTaskExpectedDone, deadlineTask.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(eventTaskExpectedDone, eventTask.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void deadlineTaskTest() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime deadlineDateTask \u003d LocalDateTime.parse(\"2020-05-05 0000\", formatter);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String taskName \u003d \"Sample Task\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DeadlineTask deadlineTask \u003d new DeadlineTask(taskName, deadlineDateTask);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime deadlineDateCorrect \u003d LocalDateTime.parse(\"2020-05-05 0000\", formatter);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime deadlineDateWrong \u003d LocalDateTime.parse(\"2020-10-05 0000\", formatter);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertTrue(deadlineTask.getDate().equals(deadlineDateCorrect));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertFalse(deadlineTask.getDate().equals(deadlineDateWrong));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String dateExpected \u003d \"2020-05-05 0000\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(dateExpected, deadlineTask.getDateString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void eventTaskTest() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime eventDateTask \u003d LocalDateTime.parse(\"2020-05-05 0000\", formatter);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String taskName \u003d \"Sample Task\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        EventTask eventTask \u003d new EventTask(taskName, eventDateTask);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime eventDateCorrect \u003d LocalDateTime.parse(\"2020-05-05 0000\", formatter);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime eventDateWrong \u003d LocalDateTime.parse(\"2020-10-05 0000\", formatter);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertTrue(eventTask.getDate().equals(eventDateCorrect));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertFalse(eventTask.getDate().equals(eventDateWrong));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String dateExpected \u003d \"2020-05-05 0000\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(dateExpected, eventTask.getDateString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 89
    }
  },
  {
    "path": "src/test/java/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import duke.utility.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void doneSuccessTest() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String taskName \u003d \"Sample task\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task toDoTask \u003d new ToDoTask(taskName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        toDoTask.setStatusToDone();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String toDoTaskExpected \u003d \"Sucessfully marked this task as done:\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"  \" + \"[T][O] Sample task\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(toDoTaskExpected, ui.doneSuccess(toDoTask));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.parse(\"2020-01-01 0000\", formatter);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task deadlineTask \u003d new DeadlineTask(taskName, date);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        deadlineTask.setStatusToDone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String deadlineTaskExpected \u003d \"Sucessfully marked this task as done:\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"  \" + \"[D][O] Sample task (by: Jan 01 2020 00:00)\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(deadlineTaskExpected, ui.doneSuccess(deadlineTask));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task eventTask \u003d new EventTask(taskName, date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        eventTask.setStatusToDone();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String eventTaskExpected \u003d \"Sucessfully marked this task as done:\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"  \" + \"[E][O] Sample task (at: Jan 01 2020 00:00)\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(eventTaskExpected, ui.doneSuccess(eventTask));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void deleteSuccessTest() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String taskName \u003d \"Sample task\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task toDoTask \u003d new ToDoTask(taskName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        toDoTask.setStatusToDone();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String toDoTaskExpected \u003d \"Okay. I will delete this task:\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"  \" + \"[T][O] Sample task\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"Now you have 2 tasks in the list.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(toDoTaskExpected, ui.deleteSuccess(toDoTask, 2));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.parse(\"2020-01-01 0000\", formatter);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task deadlineTask \u003d new DeadlineTask(taskName, date);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String deadlineTaskExpected \u003d \"Okay. I will delete this task:\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"  \" + \"[D][X] Sample task (by: Jan 01 2020 00:00)\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"Now you have 1 task in the list.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(deadlineTaskExpected, ui.deleteSuccess(deadlineTask, 1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task eventTask \u003d new EventTask(taskName, date);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        eventTask.setStatusToDone();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String eventTaskExpected \u003d \"Okay. I will delete this task:\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"  \" + \"[E][O] Sample task (at: Jan 01 2020 00:00)\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"Now you have 3 tasks in the list.\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(eventTaskExpected, ui.deleteSuccess(eventTask, 3));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void addSuccessTest() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String taskName \u003d \"Sample task\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task toDoTask \u003d new ToDoTask(taskName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        toDoTask.setStatusToDone();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String toDoTaskExpected \u003d \"Okay. I will add this task:\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"  \" + \"[T][O] Sample task\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"Now you have 2 tasks in the list.\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(toDoTaskExpected, ui.addSuccess(toDoTask, 2));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.parse(\"2020-01-01 0000\", formatter);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task deadlineTask \u003d new DeadlineTask(taskName, date);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String deadlineTaskExpected \u003d \"Okay. I will add this task:\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"  \" + \"[D][X] Sample task (by: Jan 01 2020 00:00)\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"Now you have 1 task in the list.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(deadlineTaskExpected, ui.addSuccess(deadlineTask, 1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task eventTask \u003d new EventTask(taskName, date);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        eventTask.setStatusToDone();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String eventTaskExpected \u003d \"Okay. I will add this task:\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"  \" + \"[E][O] Sample task (at: Jan 01 2020 00:00)\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                + \"Now you have 3 tasks in the list.\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(eventTaskExpected, ui.addSuccess(eventTask, 3));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void showListTest() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String taskName \u003d \"Sample task\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.parse(\"2020-01-01 0000\", formatter);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task toDoTask \u003d new ToDoTask(taskName);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        toDoTask.setStatusToDone();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task deadlineTask \u003d new DeadlineTask(taskName, date);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task eventTask \u003d new EventTask(taskName, date);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        eventTask.setStatusToDone();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(toDoTask);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(deadlineTask);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(eventTask);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String showListBeforeExpected \u003d \"Here is the tasks in your list:\\n\" +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \"1. [T][O] Sample task\\n\" +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \"2. [D][X] Sample task (by: Jan 01 2020 00:00)\\n\" +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \"3. [E][O] Sample task (at: Jan 01 2020 00:00)\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(showListBeforeExpected, ui.showList(taskList));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(new ToDoTask(\"Another sample task\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(new EventTask(\"Another sample task\", date));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String showListAfterExpected \u003d \"Here is the tasks in your list:\\n\" +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \"1. [T][O] Sample task\\n\" +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \"2. [D][X] Sample task (by: Jan 01 2020 00:00)\\n\" +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \"3. [E][O] Sample task (at: Jan 01 2020 00:00)\\n\" +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \"4. [T][X] Another sample task\\n\" +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \"5. [E][X] Another sample task (at: Jan 01 2020 00:00)\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(showListAfterExpected, ui.showList(taskList));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        public void eachTaskAfterTest() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            LocalDate dateTest \u003d LocalDate.parse(\"2020-01-01\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String taskName \u003d \"Sample task\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            LocalDateTime deadlineDate1 \u003d LocalDateTime.parse(\"2020-05-05 0000\", formatter);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            LocalDateTime deadlineDate2 \u003d LocalDateTime.parse(\"2019-05-05 0000\", formatter);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            DeadlineTask deadlineTask1 \u003d new DeadlineTask(taskName, deadlineDate1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            deadlineTask1.setStatusToDone();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            DeadlineTask deadlineTask2 \u003d new DeadlineTask(taskName, deadlineDate2);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            taskList.addTask(deadlineTask1);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            taskList.addTask(deadlineTask2);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            LocalDateTime eventDate1 \u003d LocalDateTime.parse(\"2020-10-10 0000\", formatter);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            LocalDateTime eventDate2 \u003d LocalDateTime.parse(\"2019-10-10 0000\", formatter);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            EventTask eventTask1 \u003d new EventTask(taskName, eventDate1);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            EventTask eventTask2 \u003d new EventTask(taskName, eventDate2);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            eventTask2.setStatusToDone();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            taskList.addTask(eventTask1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            taskList.addTask(eventTask2);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String expectedOutput \u003d \"Here is the tasks after Jan 01 2020:\\n\" +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    \"1. [D][O] Sample task (by: May 05 2020 00:00)\\n\" +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    \"2. [E][X] Sample task (at: Oct 10 2020 00:00)\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Assertions.assertEquals(expectedOutput, ui.eachTaskAfter(dateTest, taskList));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void eachTaskBeforeTest() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDate dateTest \u003d LocalDate.parse(\"2020-01-01\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String taskName \u003d \"Sample task\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime deadlineDate1 \u003d LocalDateTime.parse(\"2020-05-05 0000\", formatter);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime deadlineDate2 \u003d LocalDateTime.parse(\"2019-05-05 0000\", formatter);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DeadlineTask deadlineTask1 \u003d new DeadlineTask(taskName, deadlineDate1);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        deadlineTask1.setStatusToDone();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DeadlineTask deadlineTask2 \u003d new DeadlineTask(taskName, deadlineDate2);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(deadlineTask1);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(deadlineTask2);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime eventDate1 \u003d LocalDateTime.parse(\"2020-10-10 0000\", formatter);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        LocalDateTime eventDate2 \u003d LocalDateTime.parse(\"2019-10-10 0000\", formatter);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        EventTask eventTask1 \u003d new EventTask(taskName, eventDate1);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        EventTask eventTask2 \u003d new EventTask(taskName, eventDate2);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        eventTask2.setStatusToDone();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(eventTask1);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        taskList.addTask(eventTask2);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String expectedOutput \u003d \"Here is the tasks before Jan 01 2020:\\n\" +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \"1. [D][X] Sample task (by: May 05 2019 00:00)\\n\" +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \"2. [E][O] Sample task (at: Oct 10 2019 00:00)\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(expectedOutput, ui.eachTaskBefore(dateTest, taskList));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void createLineTest() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String shortMessage \u003d \"This is a short message.\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String expectedShortMessage \u003d"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\" +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \"  This is a short message.\\n\" +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(expectedShortMessage, ui.createLine(shortMessage));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String longMessage \u003d \"This is a really \" +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \"looooooooooooooooooooooooooooooooooooooonnnnnnnnnnnnnnnnnnnggggggggggggg message\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String expectedLongMessage \u003d"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\" +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \"  This is a really looooooooooooooooooooooooooooooooooooooonnnnnnnnnnnnnnnnnnnggggggggggggg message\\n\" +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Assertions.assertEquals(expectedLongMessage, ui.createLine(longMessage));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 228
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "deadline do homework /by no idea :-p"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 16
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 1,
      "-": 20
    }
  }
]
