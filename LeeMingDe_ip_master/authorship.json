[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    archiveBaseName \u003d \"Duke v0.2\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 18,
      "-": 43
    }
  },
  {
    "path": "config/travis/check-eof-newline.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "# Checks that all text files end with a newline."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "ret\u003d0"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "# Preserve filename with spaces by only splitting on newlines."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "IFS\u003d\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        echo \"ERROR:$filename:$line: no newline at EOF.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 18
    }
  },
  {
    "path": "config/travis/check-line-endings.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "# Checks for prohibited line endings."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "# Prohibited line endings: \\r\\n"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ret \u003d 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 19
    }
  },
  {
    "path": "config/travis/check-trailing-whitespace.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "# Checks for trailing whitespace"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        # Only warn for markdown files (*.md) to accomodate text editors"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        # which do not properly handle trailing whitespace."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        # (e.g. GitHub web editor)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if ($1 ~ /\\.md$/) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            severity \u003d \"WARN\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            severity \u003d \"ERROR\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            ret \u003d 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        print severity, $1, $2, \" trailing whitespace.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 26
    }
  },
  {
    "path": "config/travis/deploy_github_pages.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "# Pushes files generated by Asciidoctor and associated files to gh-pages branch for commits to master branch."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "set -o errexit # exit with nonzero exit code if any line fails"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "if [ -z \"$GITHUB_TOKEN\" ]; then"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  echo \u0027GITHUB_TOKEN is not set up in Travis. Skipping deploy.\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  exit 0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "fi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "set -o nounset # exit if variable is unset"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "cd build/docs/html5"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "git init"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "git config user.name \u0027Deployment Bot (Travis)\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "git config user.email \u0027deploy@travis-ci.org\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "git config credential.helper \u0027store --file\u003d.git/credentials\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "echo \"https://${GITHUB_TOKEN}:@github.com\" \u003e .git/credentials"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "git remote add upstream \"https://github.com/${TRAVIS_REPO_SLUG}.git\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "# Reset to gh-pages branch, or create orphan branch if gh-pages does not exist in remote."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "if git ls-remote --exit-code --heads upstream gh-pages; then"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    git fetch --depth\u003d1 upstream gh-pages"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    git reset upstream/gh-pages"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "elif [ $? -eq 2 ]; then # exit code of git ls-remote is 2 if branch does not exist"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    git checkout --orphan gh-pages"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "else # error occurred"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    exit $?"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "fi"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "# Exit if there are no changes to gh-pages files."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "if changes\u003d$(git status --porcelain) \u0026\u0026 [ -z \"$changes\" ]; then"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    echo \u0027No changes to GitHub Pages files; exiting.\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "git add -A ."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "git commit -m \"Rebuild pages at ${TRAVIS_COMMIT}\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "git push --quiet upstream HEAD:gh-pages"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 42
    }
  },
  {
    "path": "config/travis/run-checks.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "ret\u003d0 \u0026\u0026"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "for checkscript in \"$dir\"/check-*; do"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    if ! \"$checkscript\"; then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 11
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "T | 0 | return book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "T | 0 | return book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "D | 0 | return book | 2/12/2019 1800"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "R | 0 | meeting | daily | 1800"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 4
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a Duke chat bot."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of Duke object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        storage \u003d new Storage(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of Duke object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Initializes the TaskList, Ui and Storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param filePath Path of file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            System.out.println(ui.showLoadingError());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Executes the running of the chat bot."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.out.println(Ui.greet());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                System.out.println(ui.showLine());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                System.out.println(c.execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                System.out.println(ui.showError(e.getMessage()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                System.out.println(ui.showLine());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Parses user inputs into commands and returns it as a string."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return String of executed command."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Runs the chat bot."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 86,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.gui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the scene."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param stage Stage of a JavaFX application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 38
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.command.RecurringCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.command.ToDoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.command.UndoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.exception.DukeFrequencyNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.exception.DukeInputNotRecognizedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.exception.DukeTaskNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Parses the input by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    enum Input {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        LIST, BYE, DONE, TODO, DEADLINE, EVENT, DELETE, UNDO, FIND, RECURRING"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Parses the input by the user and return a Command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param fullCommand User input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return Command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeInputNotRecognizedException If the input is not recognised."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeTaskNotFoundException       If the task is not found."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static Command parse(String fullCommand)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throws DukeInputNotRecognizedException, DukeTaskNotFoundException, DukeFrequencyNotFoundException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String[] command \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (!hasInputs(command[0])) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeInputNotRecognizedException(\" ERROR... INPUT NOT RECOGNIZED. \\n PLEASE TRY AGAIN. \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        switch (Input.valueOf(command[0].toUpperCase())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return parseList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return parseBye();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return parseDone(command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return parseToDo(command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return parseDeadline(command);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return parseEvent(command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return parseDelete(command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        case UNDO:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return parseUndo(command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return parseFind(command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        case RECURRING:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return parseRecurring(command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeInputNotRecognizedException(\" ERROR... INPUT NOT RECOGNIZED. \\n PLEASE TRY AGAIN. \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Checks if string is inside enum Input."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return Boolean value."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private static boolean hasInputs(String input) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        for (Input i : Input.values()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (input.toUpperCase().equals(i.toString())) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Handles the case where the user input is \"done\"."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param commandDetails Command inputted by user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return DoneCommand."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeTaskNotFoundException If the task is not found."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static DoneCommand parseDone(String[] commandDetails) throws DukeTaskNotFoundException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (commandDetails.length \u003c 2 || !Character.isDigit(commandDetails[1].charAt(0))) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeTaskNotFoundException(\" ERROR... NON-INTEGER RECOGNIZED OR TASK NUMBER NOT INPUTTED. \\n \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    + \"PLEASE TRY AGAIN. \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return new DoneCommand(commandDetails);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Handles the case where the user input is \"todo\"."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param commandDetails Command inputted by user."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return ToDoCommand."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeTaskNotFoundException If the task is not found."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static ToDoCommand parseToDo(String[] commandDetails) throws DukeTaskNotFoundException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (commandDetails.length \u003c 2) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeTaskNotFoundException(\" ERROR... TODO DESCRIPTION EMPTY. \\n PLEASE TRY AGAIN. \");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return new ToDoCommand(commandDetails);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Handles the case where the user input is \"deadline\"."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param commandDetails Command inputted by user."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return DeadlineCommand."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeTaskNotFoundException If the task is not found."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static DeadlineCommand parseDeadline(String[] commandDetails) throws DukeTaskNotFoundException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (commandDetails.length \u003c 2) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeTaskNotFoundException(\" ERROR... DEADLINE DESCRIPTION EMPTY . \\n PLEASE TRY AGAIN. \");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String[] stringArray \u003d commandDetails[1].split(\"/\", 2);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (stringArray.length \u003c 2 || stringArray[1].split(\" \", 2).length \u003c 2) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeTaskNotFoundException(\" ERROR... DEADLINE DATE EMPTY. \\n PLEASE TRY AGAIN. \");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return new DeadlineCommand(stringArray);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Handles the case where the user input is \"event\"."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param commandDetails Command inputted by user."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return EventCommand."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeTaskNotFoundException If the task is not found."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static EventCommand parseEvent(String[] commandDetails) throws DukeTaskNotFoundException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (commandDetails.length \u003c 2) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeTaskNotFoundException(\" ERROR... EVENT DESCRIPTION EMPTY. \\n PLEASE TRY AGAIN. \");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String[] stringArray \u003d commandDetails[1].split(\"/\", 2);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (stringArray.length \u003c 2 || stringArray[1].split(\" \", 2).length \u003c 1) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeTaskNotFoundException(\" ERROR... EVENT DATE EMPTY. \\n PLEASE TRY AGAIN. \");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return new EventCommand(stringArray);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Handles the case where the user input is \"delete\"."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param commandDetails Command inputted by user."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return DeleteCommand."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeTaskNotFoundException If the task is not found."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static DeleteCommand parseDelete(String[] commandDetails) throws DukeTaskNotFoundException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (commandDetails.length \u003c 2 || !Character.isDigit(commandDetails[1].charAt(0))) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeTaskNotFoundException(\" ERROR... NON-INTEGER RECOGNIZED OR TASK NUMBER NOT INPUTTED. \\n \""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    + \"PLEASE TRY AGAIN. \");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return new DeleteCommand(commandDetails);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Handles the case where the user input is \"undo\"."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param commandDetails Command inputted by user."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return UndoCommand."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeTaskNotFoundException If the task is not found."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static UndoCommand parseUndo(String[] commandDetails) throws DukeTaskNotFoundException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (commandDetails.length \u003c 2 || !Character.isDigit(commandDetails[1].charAt(0))) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeTaskNotFoundException(\" ERROR... NON-INTEGER RECOGNIZED OR TASK NUMBER NOT INPUTTED. \\n \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    + \"PLEASE TRY AGAIN. \");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return new UndoCommand(commandDetails);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Handles the case where the user input is \"find\"."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param commandDetails Command inputted by user."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return FindCommand."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeTaskNotFoundException If not task is inputted."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static FindCommand parseFind(String[] commandDetails) throws DukeTaskNotFoundException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (commandDetails.length \u003c 2) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeTaskNotFoundException(\" ERROR... TODO DESCRIPTION EMPTY. \\n PLEASE TRY AGAIN. \");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return new FindCommand(commandDetails[1].trim());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Handles the case where the user input is \"list\"."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return ListCommand."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static ListCommand parseList() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Handles the case where the user input is \"bye\"."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return ByeCommand."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static ByeCommand parseBye() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return new ByeCommand();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Handles the case where the user input is \"recurring\"."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param commandDetails Command inputted by user."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return RecurringCommand."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeTaskNotFoundException If not task is inputted."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static RecurringCommand parseRecurring(String[] commandDetails)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throws DukeFrequencyNotFoundException, DukeTaskNotFoundException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (commandDetails.length \u003c 2) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeFrequencyNotFoundException(\" ERROR... RECURRING TASK FREQUENCY EMPTY. \""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    + \"\\n PLEASE TRY AGAIN IN THE FORMAT \u0027RECURRING [FREQUENCY] [DESCRIPTION]\u0027\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String[] stringArray \u003d commandDetails[1].split(\" \", 2);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (stringArray.length \u003c 2) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeTaskNotFoundException(\" ERROR... RECURRING TASK DESCRIPTION EMPTY. \""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    + \"\\n PLEASE TRY AGAIN IN THE FORMAT \u0027RECURRING [FREQUENCY] [DESCRIPTION]\u0027\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return new RecurringCommand(stringArray);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 229
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.exception.DukeFileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.exception.DukeInputNotRecognizedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.task.RecurringTask;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Takes care of file related operation."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private static final String TODO \u003d \"T\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private static final String DEADLINE \u003d \"D\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private static final String EVENT \u003d \"E\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private static final String RECURRING \u003d \"R\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of Storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a file directory if it is missing."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a file if it does not exist."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param filePath Path of the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            Path directory \u003d Paths.get(filePath).getParent();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (!Files.exists(directory)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                Files.createDirectory(directory);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                assert Files.exists(directory);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            file \u003d new File(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Reads the tasks in a file and convert them into an ArrayList."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return ArrayList of Task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeFileNotFoundException If file is not found."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeFileNotFoundException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                String[] task \u003d sc.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                switch (task[0].trim()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                case TODO:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    taskList.add(readTodo(task));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                case DEADLINE:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    taskList.add(readDeadline(task));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                case EVENT:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    taskList.add(readEvent(task));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                case RECURRING:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    taskList.add(readRecurring(task));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    assert false : \"Unknown format of Data\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } catch (FileNotFoundException | DukeInputNotRecognizedException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeFileNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a ToDo using the task details."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param task Details of task."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return ToDo."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private ToDo readTodo(String[] task) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ToDo toDo \u003d new ToDo(task[2].trim());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (task[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            toDo.doneTask();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return toDo;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a Deadline using the task details."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param task Details of task."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return Deadline."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Deadline readDeadline(String[] task) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Deadline deadline \u003d new Deadline(task[2].trim(), task[3].trim());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (task[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            deadline.doneTask();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a Event using the task details."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param task Details of task."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return Event."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Event readEvent(String[] task) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Event event \u003d new Event(task[2].trim(), task[3].trim());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (task[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            event.doneTask();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a RecurringTask using the task details."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param task Details of task."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return RecurringTask."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private RecurringTask readRecurring(String[] task) throws DukeInputNotRecognizedException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        RecurringTask recurringTask \u003d RecurringTask.createRecurringTask("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                task[2].trim(), task[3].trim(), task[4].trim());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (task[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            recurringTask.doneTask();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return recurringTask;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Saves the TaskList to a file."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param taskList ArrayList of Task."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void save(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            FileWriter fw \u003d new FileWriter(file.getPath());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            fw.write(iterateTasks(taskList));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Iterates through the list of tasks and combine them into a string."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param taskList ArrayList of tasks."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return String containing all the task and its details."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private String iterateTasks(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        StringBuilder content \u003d new StringBuilder();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        taskList.forEach(task -\u003e {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                String taskDetails \u003d String.format(\"T | %d | %s\", task.isTaskDone() ? 1 : 0, task.getDescription());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                content.append(taskDetails).append(\"\\n\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                String taskDetails \u003d String.format(\"D | %d | %s | %s\","
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                        task.isTaskDone() ? 1 : 0, task.getDescription(), ((Deadline) task).getDate());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                content.append(taskDetails).append(\"\\n\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                String taskDetails \u003d String.format(\"E | %d | %s | %s\","
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                        task.isTaskDone() ? 1 : 0, task.getDescription(), ((Event) task).getAt());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                content.append(taskDetails).append(\"\\n\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            } else if (task instanceof RecurringTask) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                String taskDetails \u003d String.format(\"R | %d | %s | %s | %s\","
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                        task.isTaskDone() ? 1 : 0, task.getDescription(), ("
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                                (RecurringTask) task).getDate(), ((RecurringTask) task).getTime());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                content.append(taskDetails).append(\"\\n\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        });"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return content.toString();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 187
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a list of tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of a TaskList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of a TaskList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param tasks ArrayList of Task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Gets the arrayList of Task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return An arrayList of Task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 38
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Takes care of user interface for the chat bot."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of Ui."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Initializes scanner."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Displays the welcome message when the program starts."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return String containing greeting message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static String greet() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return (\"~ \\n Hello I\u0027m the Terminator \\n What can I do for you? \\n~\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Displays the message when there is a loading error."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return String containing loading error message."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String showLoadingError() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return \" ERROR DETECTED! UNABLE TO LOAD TASKLIST. \\n CREATING NEW TASKLIST\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Displays the list of task in the TaskList."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param taskList ArrayList of task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return String containing all the tasks."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String showTaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        StringBuilder output \u003d new StringBuilder(\" Here are targets in your kill list: \\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (!taskList.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                int count \u003d i + 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                output.append(String.format(\"\\n   %d. \", count)).append(taskList.get(i).toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Takes in user inputs."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return Input by the user."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String input \u003d sc.nextLine().trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Displays text when the program stops."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return String containing message to terminate."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String showBye() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return \" I will be back! \";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Displays error message."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param message Error message."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return String containing error message."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String showError(String message) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Displays divider."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return String containing a divider."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String showLine() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return \"\\n ******************************************************************** \\n\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Displays the list of matching task in the TaskList."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param tasks ArrayList of task."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return String that contains list of matching tasks."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String showMatchingTask(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        StringBuilder output \u003d new StringBuilder(\" Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            int count \u003d i + 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            output.append(String.format(\"   %d. \", count)).append(tasks.get(i).toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Displays the task that is completed."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param task Task that is completed."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return String that contains the task that is done."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String showDoneTask(Task task) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return \" Nice! Target Eliminated: \\n   \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + task.toString();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Displays the task that has been undone."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param task Task that is undone."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return String that contains the task that has been undone."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String showUndoTask(Task task) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return \" Task has been undone: \\n   \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + task.toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Displays the task that is deleted."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param task Task that is deleted."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param numTask Number of tasks."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return String that contains the deleted task."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String showDeletedTask(Task task, int numTask) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return String.format(\" Noted. Target Scraped: \\n   %s \\n \""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + \"Now you have %d tasks in the list. \", task.toString(), numTask);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Displays the task that is added."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param task Task that is added."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param numTask Number of tasks."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return String containing the task added."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String showTask(Task task, int numTask) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String displayNum \u003d String.format(\"   %s \\n Now you have %d tasks in the list. \", task, numTask);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String output \u003d \" Got it. I\u0027ve added this task: \\n\" + displayNum;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 157
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a command which ends the operation."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Executes the operation for the program to terminate."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param tasks TaskList linked to the program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param ui Ui linked to the program."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param storage Storage linked to the program."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return String that contains the executed ByeCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assert storage !\u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return ui.showBye();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns a boolean that dictates if the program is running."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return True."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 37
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Executes an operation."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param tasks TaskList linked to the program."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param ui Ui linked to the program."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param storage Storage linked to the program."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return String that contains the executed command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeException If an error is encountered."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns a boolean that dictates if the program is running."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return Boolean value."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 31
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a command which creates a task with a deadline."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private String[] commandDetails;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of a DeadlineCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param commandDetails String array with task details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public DeadlineCommand(String[] commandDetails) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.commandDetails \u003d commandDetails;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Executes the operation for an task with a deadline to be added."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param tasks TaskList linked to the program."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param ui Ui linked to the program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param storage Storage linked to the program."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return String that contains the executed DeadlineCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String day \u003d commandDetails[1].split(\" \", 2)[1];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Deadline deadline \u003d new Deadline(commandDetails[0], day.trim());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        tasks.getTasks().add(deadline);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return ui.showTask(deadline, tasks.getTasks().size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns a boolean that dictates if the program is running."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 49
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.exception.DukeTaskNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.task.RecurringTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a command which deletes a task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private String[] commandDetails;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of a DeleteCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param commandDetails String array with task details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public DeleteCommand(String[] commandDetails) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.commandDetails \u003d commandDetails;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Executes the operation for an task to be deleted."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param tasks TaskList linked to the program."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param ui Ui linked to the program."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param storage Storage linked to the program."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return String that contains the executed DeleteCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeTaskNotFoundException If the task is not found."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeTaskNotFoundException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        int taskNumber \u003d Character.getNumericValue(commandDetails[1].charAt(0)) - 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (tasks.getTasks().isEmpty() || taskNumber \u003e tasks.getTasks().size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeTaskNotFoundException(\" ERROR... TASK NOT FOUND. \\n PLEASE TRY AGAIN \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (tasks.getTasks().get(taskNumber) instanceof RecurringTask) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            RecurringTask recurringTask \u003d (RecurringTask) tasks.getTasks().get(taskNumber);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            recurringTask.cancelRepeat();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Task removedTask \u003d tasks.getTasks().remove(taskNumber);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return ui.showDeletedTask(removedTask, tasks.getTasks().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns a boolean that dictates if the program is running."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 58
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.exception.DukeTaskNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a command which marks a task as completed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private String[] commandDetails;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of a DoneCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param commandDetails String array with task details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public DoneCommand(String[] commandDetails) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.commandDetails \u003d commandDetails;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Executes the operation for an task to be marked as done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param tasks TaskList linked to the program."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param ui Ui linked to the program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param storage Storage linked to the program."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return String that contains the executed DoneCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeTaskNotFoundException If the task is not found."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeTaskNotFoundException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        int taskNumber \u003d Character.getNumericValue(commandDetails[1].charAt(0)) - 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (tasks.getTasks().isEmpty() || taskNumber \u003e tasks.getTasks().size()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeTaskNotFoundException(\" ERROR... TASK NOT FOUND. \\n PLEASE TRY AGAIN \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        tasks.getTasks().get(taskNumber).doneTask();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return ui.showDoneTask(tasks.getTasks().get(taskNumber));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns a boolean that dictates if the program is running."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 52
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a command which creates a task with an event."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private String[] commandDetails;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of an EventCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param commandDetails String array with task details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public EventCommand(String[] commandDetails) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.commandDetails \u003d commandDetails;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Executes the operation for an task with an event to be added."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param tasks TaskList linked to the program."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param ui Ui linked to the program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param storage Storage linked to the program."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return String that contains the executed EventCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String at \u003d commandDetails[1].split(\" \", 2)[1];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Event event \u003d new Event(commandDetails[0], at);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        tasks.getTasks().add(event);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return ui.showTask(event, tasks.getTasks().size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns a boolean that dictates if the program is running."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 49
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.exception.DukeTaskNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a command which finds a task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of a FindCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param keyword Keyword to find tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.keyword \u003d keyword.toLowerCase();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Executes the operation to find matching tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param tasks TaskList linked to the program."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param ui Ui linked to the program."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param storage Storage linked to the program."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return String that contains the executed FindCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeTaskNotFoundException If no matching tasks are found."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeTaskNotFoundException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        tasks.getTasks().forEach(task -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (task.getDescription().toLowerCase().contains(keyword)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                taskArrayList.add(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (taskArrayList.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeTaskNotFoundException(\" NO MATCHING TASK FOUND. \\n PLEASE TRY AGAIN. \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return ui.showMatchingTask(taskArrayList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns a boolean that dictates if the program is running."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 59
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a command which lists the task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Executes the operation for the list of task to be shown."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param tasks TaskList linked to the program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param ui Ui linked to the program."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param storage Storage linked to the program."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return String that contains the executed ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return ui.showTaskList(tasks.getTasks());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns a boolean that dictates if the program is running."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 35
    }
  },
  {
    "path": "src/main/java/duke/command/RecurringCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.exception.DukeFrequencyNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.exception.DukeInputNotRecognizedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.task.RecurringTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class RecurringCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private String[] commandDetails;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of a Recurring Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param commandDetails String array with task details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public RecurringCommand(String[] commandDetails) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.commandDetails \u003d commandDetails;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Executes the operation for an task that is recurring to be added."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param tasks TaskList linked to the program."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param ui Ui linked to the program."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param storage Storage linked to the program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return String that contains the executed RecurringCommand."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throws DukeFrequencyNotFoundException, DukeInputNotRecognizedException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String frequency \u003d commandDetails[0];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String[] taskDetails \u003d commandDetails[1].split(\" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        RecurringTask recurringTask \u003d handleRecurring(frequency, taskDetails);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        tasks.getTasks().add(recurringTask);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return ui.showTask(recurringTask, tasks.getTasks().size());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a RecurrringTask object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param frequency Either Daily, Weekly or Monthly."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param taskDetails Details of task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return RecurringTask."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeFrequencyNotFoundException No frequency is inputted by user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeInputNotRecognizedException Input time is not in correct format."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private RecurringTask handleRecurring(String frequency, String[] taskDetails)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throws DukeFrequencyNotFoundException, DukeInputNotRecognizedException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (taskDetails.length \u003c 2) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeFrequencyNotFoundException(\"Please give a time for recurring tasks.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String time \u003d taskDetails[1];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (time.length() \u003e 4) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeInputNotRecognizedException(\"Please input a time in the 24 hour format. Eg. 0600\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return RecurringTask.createRecurringTask(taskDetails[0], frequency, time);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns a boolean that dictates if the program is running."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 71
    }
  },
  {
    "path": "src/main/java/duke/command/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a command which creates a task with a todo."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private String[] commandDetails;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of an ToDoCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param commandDetails String array with task details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public ToDoCommand(String[] commandDetails) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.commandDetails \u003d commandDetails;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Executes the operation for an task with a todo to be added."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param tasks TaskList linked to the program."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param ui Ui linked to the program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param storage Storage linked to the program."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return String that contains the executed ToDoCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ToDo toDo \u003d new ToDo(commandDetails[1]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        tasks.getTasks().add(toDo);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return ui.showTask(toDo, tasks.getTasks().size());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns a boolean that dictates if the program is running."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 48
    }
  },
  {
    "path": "src/main/java/duke/command/UndoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.exception.DukeTaskNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a command which undo a task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private String[] commandDetails;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of an UndoCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param commandDetails String array with task details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public UndoCommand(String[] commandDetails) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.commandDetails \u003d commandDetails;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Executes the operation for an task to be undone."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param tasks TaskList linked to the program."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param ui Ui linked to the program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param storage Storage linked to the program."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return String that contains the executed UndoCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeTaskNotFoundException If the task is not found."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeTaskNotFoundException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        int taskNumber \u003d Character.getNumericValue(commandDetails[1].charAt(0)) - 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (tasks.getTasks().isEmpty() || taskNumber \u003e tasks.getTasks().size()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeTaskNotFoundException(\" ERROR... TASK NOT FOUND. \\n PLEASE TRY AGAIN \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        tasks.getTasks().get(taskNumber).undoTask();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return ui.showUndoTask(tasks.getTasks().get(taskNumber));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns a boolean that dictates if the program is running."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 52
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents an exception related to program operations."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Constructs a new exception with null as its detail message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public DukeException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Constructs a new exception with specified message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param message String representing the message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 22
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeFileNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents an exception in program operations when file is not found."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class DukeFileNotFoundException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Constructs a new exception with null as its detail message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public DukeFileNotFoundException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Constructs a new exception with specified message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param message String representing the message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public DukeFileNotFoundException(String message) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 22
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeFrequencyNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class DukeFrequencyNotFoundException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Constructs a new exception with null as its detail message."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public DukeFrequencyNotFoundException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Constructs a new exception with specified message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param message String representing the message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public DukeFrequencyNotFoundException(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 19
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeInputNotRecognizedException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class DukeInputNotRecognizedException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Constructs a new exception with null as its detail message."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public DukeInputNotRecognizedException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Constructs a new exception with specified message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param message String representing the message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public DukeInputNotRecognizedException(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 19
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeTaskNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class DukeTaskNotFoundException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Constructs a new exception with null as its detail message."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public DukeTaskNotFoundException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Constructs a new exception with specified message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param message String representing the message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public DukeTaskNotFoundException(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 19
    }
  },
  {
    "path": "src/main/java/duke/gui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 61
    }
  },
  {
    "path": "src/main/java/duke/gui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/daUser.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/daDuke.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Initializes the dialog container and display greeting message."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                DialogBox.getDukeDialog(Ui.greet(), dukeImage)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userInput.setText(\"something\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (input.toLowerCase().equals(\"bye\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            exitApplication(input, response);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        addDialogBox(input, response);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Exits the application."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param input Input by the user."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param response Response from duke."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private void exitApplication(String input, String response) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        KeyFrame keyFrame \u003d new KeyFrame(Duration.seconds(0), e -\u003e addDialogBox(input, response));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        KeyFrame exit \u003d new KeyFrame(Duration.seconds(1.5), e -\u003e Platform.exit());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Timeline timeline \u003d new Timeline(keyFrame, exit);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Platform.runLater(timeline::play);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Adds Duke and User dialog to container."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param input Input by the user."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param response Response from duke."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private void addDialogBox(String input, String response) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 90
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a task with a deadline."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    protected LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private DateTimeFormatter fmt \u003d new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .appendPattern(\"[d-MM-yyyy HHmm][yyyy-MM-d HHmm]\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .optionalStart()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .appendPattern(\" HHmm\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .optionalEnd()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .toFormatter();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of a Deadline."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param description Description of the task with deadline."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param by Date of the task\u0027s deadline."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.date \u003d by;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        by \u003d by.replace(\u0027/\u0027, \u0027-\u0027);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.localDateTime \u003d LocalDateTime.parse(by, fmt);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Gets deadline of task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return Date of task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Converts a Deadline object to a string."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return A string displaying the task and its status."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + localDateTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy h:mm a\")) + \")\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 57
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a task with an event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of an Event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param description Description of the task with deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param at Event\u0027s date and time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Gets date and time of an event task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return Event\u0027s date and time."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String getAt() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Converts an Event object to a string."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return A string displaying the task and its status."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 39
    }
  },
  {
    "path": "src/main/java/duke/task/RecurringTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.exception.DukeFrequencyNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.exception.DukeInputNotRecognizedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a RecurringTask."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class RecurringTask extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    enum Frequency {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        DAILY, WEEKLY, MONTHLY, TEST;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Timer timer \u003d new Timer();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Constructs a RecurringTask object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param date Either Daily, weekly or monthly."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private RecurringTask(String description, String date) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private void setTime(String time) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates an RecurringTask object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param date Either Daily, weekly or monthly."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param time A string that contains the time for the task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return RecurringTask."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeInputNotRecognizedException Input not recognized as time is not in correct format."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static RecurringTask createRecurringTask(String description, String date, String time)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throws DukeInputNotRecognizedException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            int hour \u003d Integer.parseInt(time.substring(0, 2));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            int min \u003d Integer.parseInt(time.substring(1, 4));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            calendar.set(Calendar.HOUR_OF_DAY, hour);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            calendar.set(Calendar.MINUTE, min);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            RecurringTask recurringTask \u003d new RecurringTask(description, date);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            recurringTask.setTime(time);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            recurringTask.repeatTask(date, calendar);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return recurringTask;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeInputNotRecognizedException(\"Please input a time in the 24 hour format. Eg. 0600\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Calculates how long before the recurring task will undo itself."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param date Either daily, weekly or monthly."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return A long that contains the time for the next undo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeFrequencyNotFoundException User input is not daily, weekly or monthly."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    protected static long getTimeDelay(String date) throws DukeFrequencyNotFoundException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (!hasInputs(date)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeFrequencyNotFoundException(\"Frequency not found. \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    + \"Please only enter Daily, Weekly or Monthly\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        switch (Frequency.valueOf(date.toUpperCase())) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        case TEST:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            calendar.add(Calendar.MINUTE, 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return calendar.getTimeInMillis() - System.currentTimeMillis();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        case DAILY:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            calendar.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return calendar.getTimeInMillis() - System.currentTimeMillis();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        case WEEKLY:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            calendar.add(Calendar.DATE, 7);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return calendar.getTimeInMillis() - System.currentTimeMillis();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        case MONTHLY:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            calendar.add(Calendar.MONTH, 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return calendar.getTimeInMillis() - System.currentTimeMillis();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeFrequencyNotFoundException(\" Frequency not found. \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                   + \"Please only enter Daily, Weekly or Monthly\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Checks if string is inside enum Frequency."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return Boolean value."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private static boolean hasInputs(String input) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        for (Frequency i : Frequency.values()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (input.toUpperCase().equals(i.toString())) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Schedules the task to be repeated."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param date Either daily, weekly or monthly."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param calendar Calender object."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeFrequencyNotFoundException"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void repeatTask(String date, Calendar calendar) throws DukeFrequencyNotFoundException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        TimerTask timerTask \u003d new TimerTask() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                RecurringTask.super.undoTask();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        };"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        timer.schedule(timerTask, calendar.getTime(), getTimeDelay(date));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Cancels the timer."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void cancelRepeat() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        timer.cancel();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Converts a RecurringTask object to a string."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return A string displaying the task and its status."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return \"[R]\" + super.toString() + \" \" + date + \" at \" + time;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 156
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of a Task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Gets task completion symbol."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return Tick or X symbols"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return (isDone ? \"✓\" : \"X\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Marks task as completed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void doneTask() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Marks task as uncompleted."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void undoTask() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Gets description of task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return Description of task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Checks if task is done."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return Boolean value."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean isTaskDone() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Converts a Task object to a string."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return A string displaying the task and its status."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 70
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a task with a todo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of a Todo."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param description Description of the todo."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Converts a ToDo object to a string."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return A string displaying the task and its status."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return String.format(\"[T]%s\", super.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 28
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 19
    }
  },
  {
    "path": "src/test/java/CommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class CommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_deleteCommand_exceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ToDo toDo \u003d new ToDo(\"read book\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        taskList.getTasks().add(toDo);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.out.println(Parser.parse(\"delete 1\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .execute(taskList, new Ui(), new Storage(\"invalidPath/task.txt\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(\"Noted. Target Scraped: \\n   \" + toDo.toString()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + \" \\n Now you have 0 tasks in the list.\", outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_doneCommand_exceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ToDo toDo \u003d new ToDo(\"read book\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        taskList.getTasks().add(toDo);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.out.println(Parser.parse(\"done 1\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .execute(taskList, new Ui(), new Storage(\"invalidPath/task.txt\")));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(\"Nice! Target Eliminated: \\n   \" + toDo.toString(), outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_undoCommand_exceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ToDo toDo \u003d new ToDo(\"read book\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        toDo.doneTask();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        taskList.getTasks().add(toDo);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.out.println(Parser.parse(\"undo 1\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .execute(taskList, new Ui(), new Storage(\"invalidPath/task.txt\")));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(\"Task has been undone: \\n   \" + toDo.toString(), outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_toDoCommand_exceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.out.println(Parser.parse(\"todo read book\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .execute(taskList, new Ui(), new Storage(\"invalidPath/task.txt\")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this task: \\n\" + \"   [T][X] read book \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + \"\\n Now you have 1 tasks in the list.\", outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_deadline_exceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.out.println(Parser.parse(\"deadline return book /by 2/12/2019 1800\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .execute(taskList, new Ui(), new Storage(\"invalidPath/task.txt\")));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + \"   [D][X] return book  (by: Dec 2 2019 6:00 PM) \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + \"\\n Now you have 1 tasks in the list.\", outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_event_exceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.out.println(Parser.parse(\"event return book /at 2/12/2019 4-6pm\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .execute(taskList, new Ui(), new Storage(\"invalidPath/task.txt\")));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + \"   [E][X] return book  (at: 2/12/2019 4-6pm) \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + \"\\n Now you have 1 tasks in the list.\", outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 98
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_invalidCommand_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            Parser.parse(\"INVALID\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(\"ERROR... INPUT NOT RECOGNIZED. \\n PLEASE TRY AGAIN.\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void duke_invalidPath_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        new Duke(\"invalidPath/task.txt\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(\"ERROR DETECTED! UNABLE TO LOAD TASKLIST. \\n CREATING NEW TASKLIST\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 47
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void todo_normalInput_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ToDo todo \u003d new ToDo(\"read book\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(\"[T][X] read book\", todo.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void deadline_normalInput_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"read book\", \"2/12/2019 2300\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(\"[D][X] read book (by: Dec 2 2019 11:00 PM)\", deadline.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void deadline_differentDateFormat_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"read book\", \"2019/12/2 2300\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(\"[D][X] read book (by: Dec 2 2019 11:00 PM)\", deadline.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void event_normalInput_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Event event \u003d new Event (\"read book\", \"2/12/2019 4-6pm\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(\"[E][X] read book (at: 2/12/2019 4-6pm)\", event.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 37
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "add book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 3
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "set PATH\u003d%PATH%;C:\\Program Files\\Java\\jdk-11.0.8\\bin"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "SET MY_PATH\u003dC:\\Users\\Lee\\Dropbox\\Y2S1\\CS2103T\\Duke"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "if not exist \"%MY_PATH%\\bin\" mkdir \"%MY_PATH%\\bin\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "javac  -cp \"%MY_PATH%\\src\\main\\java\" -Xlint:none -d \"%MY_PATH%\\bin\" \"%MY_PATH%\\src\\main\\java\\*.java\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "java -classpath \"%MY_PATH%\\bin\" main.java.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "PAUSE"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 10,
      "-": 16
    }
  }
]
