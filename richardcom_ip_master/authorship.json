[
  {
    "path": "duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "T | 0 | readbooks"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": "E | 0 | return book | 2020-11-11T11:11"
      }
    ],
    "authorContributionMap": {
      "richardcom": 2
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.commands.EnumCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class that represents the Duke application which contains the main method in the class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    static final String filePath \u003d \"duke.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private TaskList result;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * The main method of the application"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param args the arguments of the main method."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        new Duke(filePath).run();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets up the user interface and load list from file storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param filePath the path of the file storage of list of tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            result \u003d new TaskList(storage.readFromFile());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            result \u003d new TaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Scans the user input and responds to command inputs."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        ui.greetings();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            String instruction \u003d sc.nextLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                EnumCommand enumCommand \u003d Parser.parseCommand(instruction);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                Command.executeCommand(enumCommand, instruction, result);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                storage.storeToFile(result);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                ui.showError(e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 64,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static duke.parser.Parser.dateProcessor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static duke.parser.Parser.dateTimeProcessor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class representing command execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Executes the commands from the input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param enumCommand the enumeration type of the input command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param instruction the string of input command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param result the TaskList storing the list of tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws DukeException if the description or the datetime format of the task is illegal."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static void executeCommand(EnumCommand enumCommand, String instruction, TaskList result) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        switch (enumCommand) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (instruction.substring(4).strip().equals(\"\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                throw new DukeException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            result.add(new ToDo(instruction.substring(4).strip()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            ui.addTaskAlert(result);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (instruction.substring(8).strip().equals(\"\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                throw new DukeException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            String[] tempDeadline \u003d instruction.substring(8).strip().split(\"/by\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (tempDeadline.length \u003c 2) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                throw new DukeException(\"The date and time of the deadline cannot be empty.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            String descDeadline \u003d tempDeadline[0].strip();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            String dateDeadline \u003d tempDeadline[1].strip();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            LocalDateTime dtDeadLine \u003d dateTimeProcessor(dateDeadline);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            result.add(new Deadlines(descDeadline, dtDeadLine));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            ui.addTaskAlert(result);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (instruction.substring(5).strip().equals(\"\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                throw new DukeException(\"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            String[] tempEvent \u003d instruction.substring(5).strip().split(\"/at\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (tempEvent.length \u003c 2) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                throw new DukeException(\"The date and time of the event cannot be empty.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            String descEvent \u003d tempEvent[0].strip(); // clear the white spaces at the front and at the back"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            String dateEvent \u003d tempEvent[1].strip(); // clear the white spaces at the front and at the back"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            LocalDateTime dtEvent \u003d dateTimeProcessor(dateEvent);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            result.add(new Events(descEvent, dtEvent));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            ui.addTaskAlert(result);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            ui.farewell();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            System.exit(1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (instruction.substring(4).strip().equals(\"\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                throw new DukeException(\"The description of a done message cannot be empty.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            Integer indexDone \u003d Integer.valueOf(instruction.substring(5).strip()) - 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (indexDone + 1 \u003e result.getSize()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                throw new DukeException(\"The index of the task to be done is out of range.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            Task tempDone \u003d result.get(indexDone);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            tempDone.markAsDone();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            result.set(indexDone, tempDone);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            ui.doneAlert(tempDone);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (instruction.substring(6).strip().equals(\"\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                throw new DukeException(\"The description of a delete message cannot be empty.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            Integer indexDelete \u003d Integer.valueOf(instruction.substring(7).strip()) - 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (indexDelete + 1 \u003e result.getSize()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                throw new DukeException(\"The index of the task to be deleted is out of range.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            Task tempDelete \u003d result.get(indexDelete);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            result.remove((int) indexDelete);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            ui.deleteTaskAlert(tempDelete, result);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            ui.showList(result);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        case CHECK:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (instruction.substring(5).strip().equals(\"\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                throw new DukeException(\"The \\\"check\\\" command is not entered correctly\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            String dateTimeTmp \u003d instruction.substring(5).strip();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            LocalDate dtCheck \u003d dateProcessor(dateTimeTmp);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            TaskList occurings \u003d searchTasksByTime(dtCheck, result);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            ui.showList(occurings);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (instruction.substring(4).strip().equals(\"\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                throw new DukeException(\"The \\\"find\\\" command is not entered correctly\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            String keyword \u003d instruction.substring(4).strip();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            TaskList matchingList \u003d findTaskByKeyword(keyword, result);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            ui.findTaskAlert(matchingList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns a TaskList of tasks that meet the input date requirement"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param localDate the date from input that of tasks."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param tasks the TaskList of all tasks"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return the TaskList of tasks that meet the input date requirement"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static TaskList searchTasksByTime(LocalDate localDate, TaskList tasks) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        TaskList occurings \u003d new TaskList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            boolean isMatch \u003d false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            Task temp \u003d tasks.get(i);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (temp instanceof Deadlines) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                Deadlines deadlines \u003d (Deadlines) temp;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                if (deadlines.getDate().equals(localDate)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    isMatch \u003d true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (temp instanceof Events) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                Events deadlines \u003d (Events) temp;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                if (deadlines.getDate().equals(localDate)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    isMatch \u003d true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (isMatch) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                occurings.add(temp);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return occurings;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static TaskList findTaskByKeyword(String keyword, TaskList tasks) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        TaskList matchingList \u003d new TaskList();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            boolean isMatch \u003d false;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            Task temp \u003d tasks.get(i);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (temp.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                isMatch \u003d true;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (isMatch) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                matchingList.add(temp);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return matchingList;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 182
    }
  },
  {
    "path": "src/main/java/duke/commands/EnumCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class that represents enumeration of commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public enum EnumCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    DEADLINE, EVENT, TODO, BYE, DONE, DELETE, LIST, CHECK, FIND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * An exception to be thrown in the Duke application when illegal commands or exceptions are met."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    String line \u003d \"___________________________________________________________________________________\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    String smallSpace \u003d \"    \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    String bigSpace \u003d \"     \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Constructs the DukeException."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param message The error message to be ."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Represents the exception message in the personalized format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a string that represents the exception message."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return smallSpace + line + \"\\n\" + bigSpace + \"☹ OOPS!!! \" +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                this.getMessage() + \"\\n\" + smallSpace + line + \"\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 29
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.commands.EnumCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class that represents a parser which parses commands and dateTime"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Constructs a parser that takes in no parameter."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Converts user input to command enumerations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param instruction the string that represents user input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return enumeration of commands that matches the input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws DukeException if the input format is illegal"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static EnumCommand parseCommand(String instruction) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Integer indexOfSplit \u003d instruction.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String command;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EnumCommand enumCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (indexOfSplit \u003d\u003d -1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            command \u003d instruction;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            command \u003d instruction.substring(0, indexOfSplit);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            enumCommand \u003d EnumCommand.BYE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else if (command.equals(\"done\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            enumCommand \u003d EnumCommand.DONE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else if (command.equals(\"delete\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            enumCommand \u003d EnumCommand.DELETE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            enumCommand \u003d EnumCommand.LIST;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else if (command.equals(\"todo\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            enumCommand \u003d EnumCommand.TODO;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else if (command.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            enumCommand \u003d EnumCommand.DEADLINE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else if (command.equals(\"event\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            enumCommand \u003d EnumCommand.EVENT;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else if (command.equals(\"check\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            enumCommand \u003d EnumCommand.CHECK;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else if (command.equals(\"find\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            enumCommand \u003d EnumCommand.FIND;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means, there is a typo  :-(\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return enumCommand;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Converts the user input of date to the correct date format."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param date the input date string from user."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return LocalDate Object that matches the user input date."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws DukeException if the user input format is illegal."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws DateTimeException if the date is an illegal date."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static LocalDate dateProcessor(String date) throws DukeException, DateTimeException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String[] dateSplit \u003d date.split(\"-\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (dateSplit.length !\u003d 3 || dateSplit[0].strip().length() !\u003d 4"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                || dateSplit[1].strip().length() !\u003d 2 || dateSplit[2].strip().length() !\u003d 2) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DukeException(\"The input date format is incorrect\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        LocalDate localDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return localDate;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Converts the user input of dateTime to the correct dateTime format."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param dateTime the input dateTime string from user."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a LocalDateTime object that matches the input string."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws DukeException if the user input format is illegal."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws DateTimeException if the date is an illegal date."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static LocalDateTime dateTimeProcessor(String dateTime) throws DukeException, DateTimeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String[] dateTimeSplit \u003d dateTime.strip().split(\" \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (dateTimeSplit.length !\u003d 2) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DukeException(\"The format of the input date and time is incorrect\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String date \u003d dateTimeSplit[0].strip();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String[] dateSplit \u003d date.split(\"-\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (dateSplit.length !\u003d 3 || dateSplit[0].strip().length() !\u003d 4"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                || dateSplit[1].strip().length() !\u003d 2 || dateSplit[2].strip().length() !\u003d 2) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DukeException(\"The input date format is incorrect\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        LocalDate localDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String time \u003d dateTimeSplit[1].strip();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (time.length() !\u003d 4) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DukeException(\"The input time format is incorrect\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        LocalTime localTime \u003d LocalTime.of(Integer.parseInt(time.substring(0, 2)), Integer.parseInt(time.substring(2, 4)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        LocalDateTime localDateTime \u003d LocalDateTime.of(localDate, localTime);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return localDateTime;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 115
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class that represents the file storage of list of task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    String filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Constructs the file Storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param filePath the file path to store the Task List."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns a list of tasks that is read from the file storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a list of tasks that is read from the file storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws DukeException if the file is not read correctly."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public List\u003cTask\u003e readFromFile() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                Task temp;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                String[] instructions \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                int num \u003d instructions.length;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                String type \u003d instructions[0].strip();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                if (type.equals(\"T\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    if (num !\u003d 3) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                        throw new DukeException(\"The data format of the file is incorrect\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    temp \u003d new ToDo(instructions[2].strip());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    if (instructions[1].strip().equals(\"1\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                        temp.markAsDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    tasks.add(temp);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                } else if (type.equals(\"D\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    if (num !\u003d 4) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                        throw new DukeException(\"The data format of the file is incorrect\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    LocalDateTime dtDeadline \u003d LocalDateTime.parse(instructions[3].strip());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    temp \u003d new Deadlines(instructions[2].strip(), dtDeadline);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    if (instructions[1].strip().equals(\"1\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                        temp.markAsDone();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    tasks.add(temp);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                } else if (type.equals(\"E\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    if (num !\u003d 4) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                        throw new DukeException(\"The data format of the file is incorrect\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    LocalDateTime dtEvent \u003d LocalDateTime.parse(instructions[3].strip());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    temp \u003d new Events(instructions[2].strip(), dtEvent);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    if (instructions[1].strip().equals(\"1\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                        temp.markAsDone();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    tasks.add(temp);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Stores the TaskList to the file storage system."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param tasks the TaskList of tasks from the application to be stored in the file storage."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws DukeException when the file is not written correctly."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void storeToFile(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            String breaker \u003d \" | \";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                Task temp \u003d tasks.get(i);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                String state \u003d \"0\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                if (temp instanceof ToDo) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    if (temp.isDone()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                        state \u003d \"1\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    fileWriter.write(\"T\" + breaker + state + breaker + temp.getDescription() + \"\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                } else if (temp instanceof Deadlines) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    Deadlines deadline \u003d (Deadlines) temp;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    if (deadline.isDone()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                        state \u003d \"1\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    fileWriter.write(\"D\" + breaker + state + breaker + deadline.getDescription()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                            + breaker + deadline.getBy() + \"\\n\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                } else if (temp instanceof Events) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    Events event \u003d (Events) temp;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    if (event.isDone()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                        state \u003d \"1\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    fileWriter.write(\"E\" + breaker + state + breaker + event.getDescription()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                            + breaker + event.getStartTime() + \"\\n\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 127
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadlines.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class that represents the a task that has a deadline."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class Deadlines extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private LocalDateTime by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Constructs the deadline class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param description the string of description of the deadline task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param cutTime the LocalDateTime object that represents the deadline of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Deadlines(String description, LocalDateTime cutTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.by \u003d cutTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the deadline datetime of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return the LocalDateTime object of deadline."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public LocalDateTime getBy() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the deadline date of the task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return the localDate object of the task deadline."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return by.toLocalDate();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the string representation of the deadline task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return the string representation of deadline task, including status icon, description,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *         and description."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH : mm\")) + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 54
    }
  },
  {
    "path": "src/main/java/duke/tasks/Events.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class that represents the a task that has a start date time."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class Events extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private LocalDateTime startTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Constructs the events class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param description the string of description of the events task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param startTime the LocalDateTime object that represents the events of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Events(String description, LocalDateTime startTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the start datetime of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return the LocalDateTime object of start dateTime."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public LocalDateTime getStartTime() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the event date of the task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return the localDate object of the task start time."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return startTime.toLocalDate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the string representation of the event task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return the string representation of event task, including status icon, description,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *         and description."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + this.startTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH : mm\")) + \")\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 52
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class that represents a task with a description."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Constructs the task class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param description the string of description of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the string representation of the status icon."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a string representation of the status icon, a tick if it is done, a cross otherwise."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns a string of the task description."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a string description of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns a boolean value of whether the task is done or not."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return true if task is done, false otherwise."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the isDone to be true if task is done, false otherwise."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the string representation of the task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a string representation of the task, including status icon and description."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 63
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class that represents a list to store the tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    List\u003cTask\u003e result;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Constructs a TaskList object by passing in a list of tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param list a list of tasks that needs to be stored."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public TaskList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.result \u003d list;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Constructs a TaskList object by passing in no parameters."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Adds a task to the taskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param task the task object that needs to be added to the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        result.add(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the task at an index of the TaskList."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param index the index in the list that needs to be set."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param task the task object that needs to be set at the spot."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void set(Integer index, Task task) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        result.set(index, task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns a task object at an index."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param index the index in the list that needs to be retrieved."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a task object at the index in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Task get(Integer index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return result.get(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the size of the TaskList."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return an int value representing the size of the TaskList."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return result.size();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Deletes the task object at the index."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param index the index in the list that needs to be deleted."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        result.remove(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 74
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class that represents the a task that needs to be done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Constructs the toDo class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param description the string of description of the toDo task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the string representation of the toDo task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return the string representation of toDo task, including status icon,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *         and description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 26
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class that handles user interface interactions."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static String greetings \u003d \"Hello! I\u0027m Mr. Duke, your personal assistant\\n     What can I do for you? : )\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static String farewell \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static String doneAlert \u003d \"Nice! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static String addTaskFrontAlert \u003d \"Got it. I\u0027ve added this task for you:\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static String addTaskTailAlert \u003d \"Now you have %d tasks in the list.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static String deleteTaskFrondAlert \u003d \"Noted. I\u0027ve removed this task:\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static String findTaskFrontAlert \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Prints out greetings at the beginning."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void greetings() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        printAnswer(\"\", greetings, \"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Prints out reminders when adding a task to the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param result the TaskList of all tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void addTaskAlert(TaskList result) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        printAnswer(addTaskFrontAlert, \"   \" + result.get(result.getSize() - 1).toString(), String.format(addTaskTailAlert, result.getSize()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Prints out the reminders when done with a task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param tempDone the task object that has been done."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void doneAlert(Task tempDone) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        printAnswer(doneAlert, \"   \" + tempDone.toString(), \"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Prints out a reminder when a task has been deleted."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param tempDelete the task object that has been deleted."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param result the TaskList of all the tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void deleteTaskAlert(Task tempDelete, TaskList result) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        printAnswer(deleteTaskFrondAlert, \"   \" + tempDelete.toString(), String.format(addTaskTailAlert, result.getSize()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Prints out a list of tasks."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param result the TaskList of task to be printed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void showList(TaskList result) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        printList(\":) Here are all the tasks in your list:\", result, \"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Prints a farewell message when exiting the application."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void farewell() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        printAnswer(\"\", farewell, \"\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Prints out a list of tasks when finding by keywords."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param result the list of tasks that are found by a keyword."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void findTaskAlert(TaskList result) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        printList(findTaskFrontAlert, result, \"\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Prints out answers according to commands with front reminder, and tail reminder."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param FrontGuidance a string representing reminders at the front."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param answer a string representing the answer to the user command."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param TailGuidance a string representing reminders at the tail."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static void printAnswer(String FrontGuidance, String answer, String TailGuidance) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String line \u003d \"___________________________________________________________________________________\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String smallSpace \u003d \"    \";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String bigSpace \u003d \"     \";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        System.out.println(smallSpace + line);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (FrontGuidance.length() !\u003d 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            System.out.println(bigSpace + FrontGuidance);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        System.out.println(bigSpace + answer);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (TailGuidance.length() !\u003d 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            System.out.println(bigSpace + TailGuidance);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        System.out.println(smallSpace + line + \"\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Prints out a list according to commands with front reminder, and tail reminder."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param FrontGuidance a string representing reminders at the front."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param result a TaskList to be printed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param TailGuidance a string representing reminders at the tail."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static void printList(String FrontGuidance, TaskList result, String TailGuidance) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String line \u003d \"___________________________________________________________________________________\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String smallSpace \u003d \"    \";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String bigSpace \u003d \"     \";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        System.out.println(smallSpace + line);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (FrontGuidance.length() !\u003d 0) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            System.out.println(bigSpace + FrontGuidance);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        for (int i \u003d 0; i \u003c result.getSize(); i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            System.out.println(bigSpace + (i + 1) + \". \" + result.get(i));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (TailGuidance.length() !\u003d 0) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            System.out.println(bigSpace + TailGuidance);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        System.out.println(smallSpace + line + \"\\n\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Prints out the error message when encountering exceptions."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param e the exception message to be printed."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void showError(Exception e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        System.out.println(e.toString());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 137
    }
  },
  {
    "path": "src/test/java/duke/tasks/EventsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class EventsTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(\"[E][✘] work hard (at: 12月 12 2020 12 : 21)\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                new Events(\"work hard\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                        LocalDateTime.of(2020, 12, 12, 12, 21)).toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void testGetStart() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(LocalDateTime.of(2020, 11, 11, 11, 11),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                new Events(\"study\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                        LocalDateTime.of(2020, 11, 11, 11, 11)).getStartTime());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(LocalDateTime.of(1999, 8, 11, 01, 11),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                new Events(\"study\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                        LocalDateTime.of(1999, 8, 11, 01, 11)).getStartTime());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 27
    }
  },
  {
    "path": "src/test/java/duke/tasks/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void testStringConversion(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(\"[T][✘] join sports club\", new ToDo(\"join sports club\").toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 15
    }
  },
  {
    "path": "text-ui-test/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "T | 1 | readbook"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": "T | 0 | borrow book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "D | 0 | return book again | 1111-11-11T12:12"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "D | 0 | return book | 1111-11-11T12:12"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "D | 0 | study hard | 1111-11-11T00:01"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "D | 0 | return books | 0808-08-08T08:08"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "E | 0 | work hard | 2020-12-12T12:21"
      }
    ],
    "authorContributionMap": {
      "richardcom": 7
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "todo readbook"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": "todo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "done 8"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "done3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "deadline      return home /by today"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": " deadline go home /by tomorrow"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "deadline homework /by"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "event"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "event meeting"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "eventproject meeting/ at Mon"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "event exam /at"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "delete 7"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "delete2"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "delete"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "deadline return book /by 1111-11-111212"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "event project meeting /at 0909-09-09 09"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "deadline return books /by 0808-0808 0808"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "deadline return book again /by1111-11-11 1212"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "event project meeting again /at 090-09-09 0909"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "deadline return books again /by 0808-08-0 0808"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "deadline return book /by 1111-11-11 1212"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "deadline study hard /by      1111-11-11 0001"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "      event project meeting /at 0909-09-09 0909"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "deadline return books /by 0808-08-08 0808"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "check 1111-11-11"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "event work hard /at2020-12-12 1221"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "find book"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "find"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "richardcom": 41
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "richardcom": 4,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "# run the program, feed duke.commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "richardcom": 4,
      "-": 36
    }
  }
]
