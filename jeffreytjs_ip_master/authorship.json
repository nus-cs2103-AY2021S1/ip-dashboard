[
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "T | 1 | read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "D | 0 | return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "E | 0 | project meeting Aug /at 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "T | 1 | join sports club"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 4
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private static ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static void main(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        System.out.println(\"Hi there, I\u0027m TARS!\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        ReadWriteFile.readTaskList(taskList);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "//        for (Task t : taskList) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "//            System.out.println(t);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        boolean stop \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        while (!stop) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            String[] line \u003d scanner.nextLine().split(\" \", 2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            String operation \u003d line[0];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            switch (operation) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                case \"bye\":"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    stop \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    System.out.println(\"Bye bye. See you again soon!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                case \"list\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        Helper.showList(taskList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    } catch (DukeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                case \"done\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        Helper.markAsDone(line, taskList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    } catch (DukeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    if (line.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        System.out.println(\"â˜¹ OOPS! Description for command \u0027\" + operation + \"\u0027 not found, try again!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    } else if (operation.equals(\"todo\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                            Helper.addToDo(line, taskList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        } catch (DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    } else if (operation.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                            Helper.addDeadline(line, taskList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                            Helper.addEvent(line, taskList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        } catch (DukeException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                case \"delete\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        Helper.deleteTask(line, taskList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    } catch (DukeException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    // Handles all other inputs"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    System.out.println(\"â˜¹ Sorry, I don\u0027t recognise that command! Try one of the following instead: todo, event, deadline, done or delete\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            ReadWriteFile.writeToFile(taskList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "jeffreytjs": 80
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 5
    }
  },
  {
    "path": "src/main/java/Helper.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class Helper extends Duke{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static void addToDo(String[] line, ArrayList\u003cTask\u003e taskList) throws DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        String description \u003d line[1];"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        // Validate description"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            throw new DukeException(\"â˜¹ OOPS!!! Description of todo unclear. Here\u0027s an example: \u0027todo borrow book\u0027\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Task task \u003d new ToDo(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        ReadWriteFile.writeToFile(taskList);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        System.out.println(\"Now you have \" + taskList.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static void showList(ArrayList\u003cTask\u003e taskList) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            throw new DukeException(\"The list is empty! Add in some new tasks!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        for (Task item : taskList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            System.out.println(counter + \". \" + item);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static void markAsDone(String[] line, ArrayList\u003cTask\u003e taskList) throws DukeException{"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        // Validate task index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        if (line.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            throw new DukeException(\"Tell me which task you have done!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        if (line[1].isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            throw new DukeException(\"Tell me which task you have done!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        int task_index \u003d Integer.parseInt(line[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        if (task_index \u003e taskList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            throw new DukeException(\"Only existing tasks of index \u003c\u003d \" + taskList.size() + \" can be marked as done!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Task task \u003d taskList.get(task_index - 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static void addDeadline(String[] line, ArrayList\u003cTask\u003e taskList) throws DukeException{"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        // Validate date/time"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        String[] description \u003d line[1].split(\" /by \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        if (description.length !\u003d 2) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            throw new DukeException(\"â˜¹ OOPS!!! Description of deadline unclear. Here\u0027s an example: \u0027deadline return book /by Sunday\u0027\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        String by \u003d formatDate(description[1]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Task task \u003d new Deadline(description[0], by);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        System.out.println(\"Now you have \" + taskList.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static void addEvent(String[] line, ArrayList\u003cTask\u003e taskList) throws DukeException{"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        // Validate date/time"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        String[] description \u003d line[1].split(\" /at \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        if (description.length !\u003d 2) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            throw new DukeException(\"â˜¹ OOPS!!! Description of event unclear. Here\u0027s an example: \u0027event project meeting /at Mon 2-4pm\u0027\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        String at \u003d formatDate(description[1]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Task task \u003d new Event(description[0], at);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        System.out.println(\"Now you have \" + taskList.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static void deleteTask(String[] line, ArrayList\u003cTask\u003e taskList) throws DukeException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        // Validate task index"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        if (line.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            throw new DukeException(\"Tell me which task you want to delete!\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        if (line[1].isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            throw new DukeException(\"Tell me which task you want to delete!\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        int task_index \u003d Integer.parseInt(line[1]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        // Validate task index"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        if (task_index \u003e taskList.size()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            throw new DukeException(\"Only existing tasks of index \u003c\u003d \" + taskList.size() + \" can be deleted!\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Task task \u003d taskList.get(task_index - 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        taskList.remove(task);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        System.out.println(\"Now you have \" + taskList.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private static String formatDate(String date) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        LocalDate taskDate;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        LocalTime taskTime \u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        date \u003d date.replace(\u0027/\u0027, \u0027-\u0027);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        String[] dateArguments \u003d date.split(\" \");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        taskDate \u003d LocalDate.parse(dateArguments[0]);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        if (dateArguments.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HH[:]mm\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            taskTime \u003d LocalTime.parse(dateArguments[1], formatter);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        System.out.println((taskDate));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        String output \u003d taskDate.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        if (taskTime !\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            output +\u003d \", \" + taskTime.format(DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 122
    }
  },
  {
    "path": "src/main/java/ReadWriteFile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class ReadWriteFile {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static void readTaskList(ArrayList\u003cTask\u003e taskList) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        java.nio.file.Path path \u003d java.nio.file.Paths.get(\"data\").resolve(\"duke.txt\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        boolean dirExists \u003d java.nio.file.Files.exists(path);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        if (dirExists) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                File inFile \u003d new File(path.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                Scanner sc \u003d new Scanner(inFile);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                Task t;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                while (sc.hasNext()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    String[] task \u003d sc.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    switch (task[0].trim()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        case \"T\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                            t \u003d new ToDo(task[2].trim());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        case \"D\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                            String[] dDescription \u003d task[2].split(\" /by \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                            t \u003d new Deadline(dDescription[0].trim(), dDescription[1].trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        case \"E\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                            String[] eDescription \u003d task[2].split(\" /at \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                            t \u003d new Event(eDescription[0].trim(), eDescription[1].trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        default:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                            throw new DukeException(\"â˜¹ Sorry, I don\u0027t recognise that command from the text file!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    if (task[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        t.markAsDone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    taskList.add(t);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                File infile \u003d new File(path.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static void writeToFile(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        java.nio.file.Path path \u003d java.nio.file.Paths.get(\"data\").resolve(\"duke.txt\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            StringBuilder content \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            FileWriter fw \u003d new FileWriter(path.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            for (Task task : taskList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    String taskDetails \u003d String.format(\"T | %d | %s\", task.isDone ? 1 : 0, task.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    content.append(taskDetails).append(\"\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    String taskDetails \u003d String.format(\"D | %d | %s\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                            task.isDone ? 1 : 0, task.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    content.append(taskDetails).append(\"\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    String taskDetails \u003d String.format(\"E | %d | %s\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                            task.isDone ? 1 : 0, task.toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    content.append(taskDetails).append(\"\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            fw.write(content.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 73
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 16
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 16
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    protected void markAsDone() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 28
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 13
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "todo"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "deadline buy snacks"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 13
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "REM resolved symbols appearing as question mark"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "REM updated pathing, compile the code into the bin folder"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "jeffreytjs": 6
    }
  }
]
