[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "chloelee767": 18
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.storage.TaskListStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * Class that ties together commands and ui."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Creates a new instance of Duke."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param ui Ui for Duke to interact with."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public Duke(Ui ui) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        TaskList taskList \u003d new TaskListStorage(\"data/tasks.txt\").load(ui);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        // TODO: currently broken due to non-monospace font"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        // String logo \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        //     \" ____        _        \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        //         + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        //         + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        //         + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        //         + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        // sayLine(logo);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ui.say(\"Hello, I\u0027m Duke. What can I do for you?\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ui.setInputHandler((String input) -\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            Parser.parse(input).execute(ui, taskList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "chloelee767": 31
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.ui.Gui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        new Gui();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 12
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * This Command will add a Task to the TaskList."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class AddCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Creates an AddCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param task the task to add."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void execute(Ui ui, TaskList list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ui.say(String.format(\"Got it, I\u0027ve added this task:\\n  %s\\n%s\", task.displayString(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                Helper.getNumberOfTasksString(list)));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 28
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * This Command will cause Duke to exit."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class ByeCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void execute(Ui ui, TaskList list) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ui.say(\"Bye! Hope to see you again soon!\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 15
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * This interface represents an action which Duke can take in response to user input."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Executes this Command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param ui the ui which the Command can interact with."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param list the TaskList which the Command can read and modify."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void execute(Ui ui, TaskList list);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 18
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineDateEdit.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class DeadlineDateEdit implements Edit\u003cDeadline\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public DeadlineDateEdit(Date newDate) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        date \u003d newDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void apply(Deadline deadline) throws EditingException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        deadline.setDate(date);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 18
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * This Command will delete a Task from the TaskList."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Creates a DeleteCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param taskNumber the number (1-based) of the Task to delete."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public DeleteCommand(int taskNumber) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void execute(Ui ui, TaskList list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            Helper.validateTaskNumber(taskNumber, list);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (InvalidTaskNumberException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            ui.say(e.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Task t \u003d list.delete(taskNumber - 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ui.say(String.format(\"Noted. I\u0027ve removed this task:\\n  %s\\n%s\", t.displayString(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                Helper.getNumberOfTasksString(list)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 34
    }
  },
  {
    "path": "src/main/java/duke/command/DescriptionEdit.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class DescriptionEdit implements Edit\u003cTask\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public DescriptionEdit(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void apply(Task task) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        task.setDescription(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 16
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * This Command will mark a Task as done."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Creates a DoneCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param taskNumber the number (1-based) of the Task to mark as done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public DoneCommand(int taskNumber) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void execute(Ui ui, TaskList list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            Helper.validateTaskNumber(taskNumber, list);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (InvalidTaskNumberException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            ui.say(e.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Task t \u003d list.get(taskNumber - 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (t.isDone()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            sb.append(\"You\u0027ve already completed this task:\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            t.markAsDone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            sb.append(\"Nice! I\u0027ve marked this task as done:\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        sb.append(\"  \" + t.displayString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assert !sb.toString().isBlank();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ui.say(sb.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 43
    }
  },
  {
    "path": "src/main/java/duke/command/Edit.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * This interface represents an edit that can be applied to an object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * @param \u003cT\u003e The type of object to edit."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public interface Edit\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    void apply(T object) throws EditingException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 10
    }
  },
  {
    "path": "src/main/java/duke/command/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "// TODO: fix unsafe generic stuff"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * This Command edits a Task or its subclasses."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * @param \u003cT\u003e The type of Task to edit."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class EditCommand\u003cT extends Task\u003e implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Edit\u003cT\u003e[] edits;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Creates an EditCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param taskNumber The number of the Task to edit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param edits The edits to apply."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public EditCommand(int taskNumber, Edit\u003cT\u003e... edits) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.edits \u003d edits;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void execute(Ui ui, TaskList list) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            Helper.validateTaskNumber(taskNumber, list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (InvalidTaskNumberException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            ui.say(e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            T task \u003d (T) list.get(taskNumber - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            for (Edit\u003cT\u003e edit : edits) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    edit.apply(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                } catch (EditingException editingException) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    ui.say(editingException.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            ui.say(\"Okay, edited this:\\n  \" + task.displayString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (ClassCastException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            ui.say(\"Wrong type of task!\"); // TODO: better error message"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 50
    }
  },
  {
    "path": "src/main/java/duke/command/EditingException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "class EditingException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    EditingException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 7
    }
  },
  {
    "path": "src/main/java/duke/command/ErrorCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * This Command makes Duke report an error to the user. No special formatting is added."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class ErrorCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Creates an ErrorCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param message the error message for Duke to show."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public ErrorCommand(String message) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void execute(Ui ui, TaskList list) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ui.say(message);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 25
    }
  },
  {
    "path": "src/main/java/duke/command/EventDateEdit.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class EventDateEdit implements Edit\u003cEvent\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Date start;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Date end;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public EventDateEdit(Date newStart, Date newEnd) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        start \u003d newStart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        end \u003d newEnd;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public EventDateEdit(Date newDate, EventDateType type) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (type.equals(EventDateType.START)) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            start \u003d newDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            end \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            start \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            end \u003d newDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void apply(Event event) throws EditingException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String invalidDateMessage \u003d \"Start date cannot be after end date!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (start !\u003d null \u0026\u0026 end !\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            if (start.after(end)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                throw new EditingException(invalidDateMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            event.setStart(start);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            event.setEnd(end);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } else if (start !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            if (start.after(event.getEnd())) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                throw new EditingException(invalidDateMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            event.setStart(start);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } else if (end !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            if (event.getStart().after(end)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                throw new EditingException(invalidDateMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            event.setEnd(end);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 47
    }
  },
  {
    "path": "src/main/java/duke/command/EventDateType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public enum EventDateType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    START,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    END;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 6
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * This Command will cause Duke to find and display the Tasks whose description contains the specified String."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private String query;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Creates a FindCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param query the String query to search for."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public FindCommand(String query) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.query \u003d query;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void execute(Ui ui, TaskList list) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            message \u003d \"There are no items in your list.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            List\u003cTask\u003e matches \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    list.toStream().filter(t -\u003e t.getDescription().contains(query)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            if (matches.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                message \u003d \"No matching tasks found!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                message \u003d \"Here are the matching tasks in your list:\\n\" + Helper.tasksToDisplayListString(matches);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assert !message.isBlank();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ui.say(message);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 43
    }
  },
  {
    "path": "src/main/java/duke/command/Helper.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "class Helper {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Checks if a Task number (1-based) is valid. Throws an {@link InvalidTaskNumberException} with a message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * describing what is wrong if the number is invalid. Otherwise does nothing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param taskNumber the 1-based task number to validate."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param taskList   the task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    static void validateTaskNumber(int taskNumber, TaskList taskList) throws InvalidTaskNumberException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new InvalidTaskNumberException(\"Your list is empty.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } else if (taskNumber \u003c 1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new InvalidTaskNumberException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    String.format(\"That\u0027s not a valid number, please give a number from 1 to %d.\", taskList.size()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } else if (taskNumber \u003e taskList.size()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new InvalidTaskNumberException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    String.format(\"That\u0027s not a valid number, you only have %d item%s in your list.\", taskList.size(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                            taskList.size() \u003d\u003d 1 ? \"\" : \"s\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Returns a numbered list of the given Tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param tasks the List of Tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @return a numbered list of Tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    static String tasksToDisplayListString(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            sb.append((i + 1) + \". \" + tasks.get(i).displayString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Returns a numbered list of the given Tasks."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param tasks the TaskList."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @return a numbered list of Tasks."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    static String tasksToDisplayListString(TaskList tasks) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            sb.append((i + 1) + \". \" + tasks.get(i).displayString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Returns a String describing the number of Tasks in a TaskList."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param taskList the TaskList."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @return a message describing the number of Tasks in the TaskList."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    static String getNumberOfTasksString(TaskList taskList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return String.format(\"Now you have %d item%s in your list.\", taskList.size(), taskList.size() \u003d\u003d 1 ? \"\" : \"s\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 69
    }
  },
  {
    "path": "src/main/java/duke/command/InvalidTaskNumberException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "class InvalidTaskNumberException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    InvalidTaskNumberException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 7
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * This Command will cause Duke to list all the Tasks inside the TaskList."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void execute(Ui ui, TaskList list) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            ui.say(\"There are no items in your list.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            ui.say(\"Here are the tasks in your list:\\n\" + Helper.tasksToDisplayListString(list));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 18
    }
  },
  {
    "path": "src/main/java/duke/parser/DukeParsingException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * This exception is handled within the route function in the Duke class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "class DukeParsingException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    DukeParsingException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 10
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.command.DeadlineDateEdit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.command.DescriptionEdit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.command.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.command.ErrorCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.command.EventDateEdit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.command.EventDateType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * This class contains a function to parse user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Returns the appropriate Command based on the given user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param input the user input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @return a Command that should be executed in response to the user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static Command parse(String input) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        input \u003d input.strip();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String[] split \u003d input.split(\"\\\\s+\", 2); // this should contain at least \"\", even when input is empty"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assert split.length \u003e\u003d 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String command \u003d split[0];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String args \u003d split.length \u003d\u003d 2 ? split[1] : \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                ensureNoArgs(args, command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                return new ByeCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            } else if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                ensureNoArgs(args, command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            } else if (command.equals(\"done\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                int taskNumber \u003d parseTaskNumber(args, \"you have completed\", \"done 1\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                return new DoneCommand(taskNumber);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            } else if (command.equals(\"delete\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                int taskNumber \u003d parseTaskNumber(args, \"you want to remove\", \"delete 1\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                return new DeleteCommand(taskNumber);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            } else if (command.equals(\"todo\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                if (args.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    return new ErrorCommand(\"Couldn\u0027t add todo! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                return new AddCommand(new Task(args));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            } else if (command.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                return new AddCommand(parseDeadline(args));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            } else if (command.equals(\"event\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                return new AddCommand(parseEvent(args));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            } else if (command.equals(\"find\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                ensureArgsPresent(args, \"what phrase you would like to search for\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                return new FindCommand(args);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            } else if (command.equals(\"edit\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                return parseEditCommand(args);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            } else if (input.isBlank()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                return new ErrorCommand(\"You need to tell me what you want me to do!\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                return new ErrorCommand(\"Sorry, I don\u0027t understand that!\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (DukeParsingException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return new ErrorCommand(e.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    // helpers for parse function"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private static void ensureNoArgs(String args, String commandName) throws DukeParsingException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (!args.isEmpty()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new DukeParsingException(String.format(\"I don\u0027t understand that. Did you mean %s?\", commandName));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private static void ensureArgsPresent(String args, String errorString) throws DukeParsingException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (args.isBlank()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new DukeParsingException(\"I need to know \" + errorString + \"!\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private static int parseTaskNumber(String args, String taskDescription, String example)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throws DukeParsingException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return Integer.parseInt(args);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new DukeParsingException("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    String.format(\"You need to tell me the number of the task %s. Eg. %s\", taskDescription, example));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private static EditCommand parseEditCommand(String args) throws DukeParsingException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        // TODO: implement multiple edits at once eg. edit 1 /start \u003cstart\u003e /end \u003cend\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String[] argsSplit;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            argsSplit \u003d splitAround(args, \"\\\\s+/((start)|(end)|(date)|(description))\\\\s+\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (DukeParsingException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new DukeParsingException(\"Couldn\u0027t edit item. To edit an item, talk to me using the format:\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    + \"edit \u003ctask number\u003e \u003cwhat to edit\u003e \u003cedited content\u003e\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        int taskNumber \u003d parseTaskNumber(argsSplit[0], \"you want to edit\", \"edit 1 /description \u003cnew description\u003e\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String content \u003d argsSplit[1];"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (args.contains(\"/start\") || args.contains(\"/end\") || args.contains(\"/date\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            ensureArgsPresent(content, \"the new date\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            Date newDate \u003d parseDate(content);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            if (args.contains(\"/start\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                return new EditCommand(taskNumber, new EventDateEdit(newDate, EventDateType.START));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            } else if (args.contains(\"/end\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                return new EditCommand(taskNumber, new EventDateEdit(newDate, EventDateType.END));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            } else if (args.contains(\"/date\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                return new EditCommand(taskNumber, new DeadlineDateEdit(newDate));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } else if (args.contains(\"/description\")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            ensureArgsPresent(content, \"the new task description\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return new EditCommand(taskNumber, new DescriptionEdit(content));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        throw new DukeParsingException(\"You need to tell me what you want to edit!\"); // TODO better help message"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private static Event parseEvent(String args) throws DukeParsingException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String[] argsSplit;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String[] dateStrings;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            argsSplit \u003d splitAround(args, \"\\\\s+/at\\\\s+\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            description \u003d argsSplit[0];"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            dateStrings \u003d splitAround(argsSplit[1], \"\\\\s*-\\\\s*\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (DukeParsingException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new DukeParsingException(\"Couldn\u0027t add event! To add an event, talk to me using \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    + \"the format event \u003cdescription\u003e /at \u003cstart\u003e-\u003cend\u003e!\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Date start \u003d parseDate(dateStrings[0]);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Date end \u003d parseDate(dateStrings[1]);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (start.after(end)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new DukeParsingException(\"Start date is after end date!\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return new Event(description, start, end);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private static Deadline parseDeadline(String args) throws DukeParsingException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String[] argsSplit;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            argsSplit \u003d splitAround(args, \"\\\\s+/by\\\\s+\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            description \u003d argsSplit[0];"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (DukeParsingException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new DukeParsingException(\"Couldn\u0027t add deadline! To add a deadline, talk to me using \""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    + \"the format deadline \u003cdescription\u003e /by \u003cdate\u003e!\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        // allow DukeParsingException thrown here to be propagated, since it contains a useful error message"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        // for the user"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Date date \u003d parseDate(argsSplit[1]);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return new Deadline(description, date);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Splits a string into 2 around the first occurrence of a regex pattern. An exception is thrown if the pattern does"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * not exist, or if either of the tokens are blank."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private static String[] splitAround(String string, String pattern) throws DukeParsingException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        int splitSize \u003d 2;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String[] argSplit \u003d string.split(pattern, splitSize);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (argSplit.length !\u003d splitSize) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new DukeParsingException(\"\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        for (String s : argSplit) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            if (s.isBlank()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                throw new DukeParsingException(\"\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return argSplit;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private static Date parseDate(String dateString) throws DukeParsingException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        final DateFormat dateOnly \u003d new SimpleDateFormat(\"d/M/y\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        // TODO: improve time parsing - this accepts nonsense time formats eg. 27:00. Hm also does not work for some"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        // reason."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        final DateFormat withTime \u003d new SimpleDateFormat(\"d/M/y H:m\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return withTime.parse(dateString);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            // ignore, because we want to try parsing with date only after this"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return dateOnly.parse(dateString);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new DukeParsingException("
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    \"Invalid date format! I only understand dates in the format day/month/year time \""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                            + \"or day/month/year. Eg. 15/01/2020 17:00 for 15th January 5pm\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 215
    }
  },
  {
    "path": "src/main/java/duke/storage/Deserializer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "interface Deserializer\u003cT\u003e {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    T deserialize(String string) throws DeserializingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 5
    }
  },
  {
    "path": "src/main/java/duke/storage/DeserializingException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "class DeserializingException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 5
    }
  },
  {
    "path": "src/main/java/duke/storage/FileMissingException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "class FileMissingException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 5
    }
  },
  {
    "path": "src/main/java/duke/storage/FileReadingException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "class FileReadingException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    FileReadingException(Exception e) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 6
    }
  },
  {
    "path": "src/main/java/duke/storage/FileWritingException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "class FileWritingException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    FileWritingException(Exception e) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 6
    }
  },
  {
    "path": "src/main/java/duke/storage/Serializable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "interface Serializable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    String serialize();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 5
    }
  },
  {
    "path": "src/main/java/duke/storage/StorageHelper.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "class StorageHelper {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    static void save(Serializable object, String filepath) throws FileWritingException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        File file \u003d new File(filepath);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            if (file.getParentFile() !\u003d null) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                file.getParentFile().mkdirs(); // may throw SecurityException"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            // may throw IOException"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            Files.writeString(file.toPath(), object.serialize(), StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (IOException | SecurityException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new FileWritingException(e);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    static \u003cT\u003e T open(Deserializer\u003cT\u003e deserializer, String filepath)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throws FileMissingException, FileReadingException, DeserializingException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        File file \u003d new File(filepath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new FileMissingException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String s \u003d Files.readString(file.toPath(), StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return deserializer.deserialize(s);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new FileReadingException(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 38
    }
  },
  {
    "path": "src/main/java/duke/storage/TaskListStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * This class is responsible for loading a TaskList from an existing file and creating TaskLists which can be saved to a"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class TaskListStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Creates a new TaskListStorage which which read from and write to the specified file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param filepath the path to the file where the TaskList should be loaded from and saved to."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public TaskListStorage(String filepath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Tries to load an existing TaskList from a file (specified in the constructor). A new TaskList is created if an"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * existing file cannot be found or read, or if the file has an invalid format. The TaskList returned will attempt"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * to save to the file every time it is modified."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param ui the Ui this TaskList can interact with to display error or other messages to the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @return an existing or new TaskList which saves to the file every time it is modified."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public TaskList load(Ui ui) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        final String createNewListMessage \u003d \"I\u0027ll create a new list of tasks.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        TaskList list;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            list \u003d StorageHelper.open(this::deserializeTaskList, filepath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            ui.say(String.format(\"Loaded tasks from %s.\", filepath));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (FileMissingException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            ui.say(String.format(\"Couldn\u0027t find the file %s. %s\", filepath, createNewListMessage));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            list \u003d new TaskList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (FileReadingException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            ui.say(String.format(\"Couldn\u0027t read the file %s. %s\", filepath, createNewListMessage));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            list \u003d new TaskList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (DeserializingException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            ui.say(String.format(\"I don\u0027t understand the data in %s. %s\", filepath, createNewListMessage));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            list \u003d new TaskList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        list.connectStorage((taskList) -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                StorageHelper.save(() -\u003e serializeTaskList(taskList), filepath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            } catch (FileWritingException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                ui.say(String.format(\"Couldn\u0027t save task list to %s!\", filepath));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private String serializeTaskList(TaskList tasklist) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return IntStream.range(0, tasklist.size()).mapToObj(i -\u003e serializeTask(tasklist.get(i)))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                .collect(Collectors.joining(\"\\n\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private TaskList deserializeTaskList(String string) throws DeserializingException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String[] taskStrings \u003d string.split(\"\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        TaskList tasklist \u003d new TaskList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        for (String taskString : taskStrings) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            tasklist.add(deserializeTask(taskString));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return tasklist;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private String serializeTask(Task task) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        List\u003cString\u003e tokens \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        tokens.add(\"T\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        tokens.add(task.getDescription());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        tokens.add(task.isDone() ? \"T\" : \"F\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            tokens.set(0, \"D\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            tokens.add(serializeDate(((Deadline) task).getDate()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (task instanceof Event) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            tokens.set(0, \"E\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            tokens.add(serializeDate(event.getStart()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            tokens.add(serializeDate(event.getEnd()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return String.join(\"\\t\", tokens);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Task deserializeTask(String string) throws DeserializingException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String[] tokens \u003d string.split(\"\\t\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String description \u003d tokens[1];"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String isDoneString \u003d tokens[2];"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            if (!isDoneString.equals(\"T\") \u0026\u0026 !isDoneString.equals(\"F\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                throw new DeserializingException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            boolean isDone \u003d isDoneString.equals(\"T\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            switch (tokens[0]) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                task \u003d new Task(description, isDone);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                Date date \u003d deserializeDate(tokens[3]);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                task \u003d new Deadline(description, isDone, date);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                Date start \u003d deserializeDate(tokens[3]);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                Date end \u003d deserializeDate(tokens[4]);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                task \u003d new Event(description, isDone, start, end);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                throw new DeserializingException();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new DeserializingException();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private String serializeDate(Date date) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return date.toInstant().toEpochMilli() + \"\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Date deserializeDate(String string) throws DeserializingException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return new Date(Long.parseLong(string));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new DeserializingException();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 142
    }
  },
  {
    "path": "src/main/java/duke/task/DateHelper.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * This class contains helper functions for formatting Dates for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "class DateHelper {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Formats a Date in the following format: Mon 12 Jan 2020 17:00"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param date the Date to format."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @return a String with the formatted Date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    static String formatDate(Date date) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return String.format(\"%ta %\u003ctd %\u003ctb %\u003ctY %\u003ctH:%\u003ctM\", date);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Formats a date range. If the start and end Dates are on the same day, the date will only be printed"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * once (eg. Mon 12 Jan 2020 17:00-19:00). Otherwise, the start and end Dates will each be formatted using"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * the formatDate function."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param start the start of the date range."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param end the end of the date range."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @return a String with the formatted Date."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    static String formatDateRange(Date start, Date end) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String datePattern \u003d \"%td %\u003ctb %\u003ctY\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (String.format(datePattern, start).equals(String.format(datePattern, end))) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return String.format(\"%ta %\u003ctd %\u003ctb %\u003ctY\", start) + \" \" + String.format(\"%tH:%\u003ctM-%tH:%\u003ctM\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    start, end);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return formatDate(start) + \" - \" + formatDate(end);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 38
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * This class represents a Deadline, which is a Task that needs to be done by a specified date and time."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Creates a Deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param description description of the Deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param isDone whether the Deadline is due."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param date the date of the Deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public Deadline(String description, boolean isDone, Date date) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Creates a Deadline which has not been completed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param description description of the Deadline."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param date the date of the Deadline."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public Deadline(String description, Date date) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this(description, false, date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public String displayString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return super.displayString() + String.format(\" (by: %s)\", DateHelper.formatDate(date));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    protected String taskTypeString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Returns the Date when this Deadline is due."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @return the due Date."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Changes the Date for this Deadline."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param date The new due Date."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void setDate(Date date) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        onChange();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 61
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * This class represents an Event which will take place during a specific period of time."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Date start;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Date end;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Creates an Event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param description description of the Event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param isDone whether the Event has been done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param start start Date of the Event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param end ending Date of the Event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public Event(String description, boolean isDone, Date start, Date end) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Creates an Event which has not been completed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param description description of the Event."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param start start Date of the Event."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param end ending Date of the Event."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public Event(String description, Date start, Date end) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this(description, false, start, end);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public String displayString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return super.displayString() + String.format(\" (at: %s)\", DateHelper.formatDateRange(start, end));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    protected String taskTypeString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Returns the start date of this Event."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @return the start date."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public Date getStart() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Returns the end date of this Event."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @return the end date."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public Date getEnd() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Changes the start date of this Event."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param date The new start date."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void setStart(Date date) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.start \u003d date;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        onChange();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Changes the end date of this Event."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param date The new end date."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void setEnd(Date date) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        onChange();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 84
    }
  },
  {
    "path": "src/main/java/duke/task/SaveFunction.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * This is a functional interface for the save function in the connectStorage method in the TaskList."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public interface SaveFunction {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Save the given TaskList to disk."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param list the TaskList to save."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void save(TaskList list);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 14
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * This class represents a Task, storing its description and whether it has been done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    protected boolean done;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Runnable onChangeFunction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Creates a Task which has not been completed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param description description of the Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this(description, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Creates a Task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param description description of the Task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param isDone whether this Task has been done."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.description \u003d sanitizeString(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        done \u003d isDone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        onChangeFunction \u003d () -\u003e {};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Returns whether this Task has been done."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @return true if the task has been done, false otherwise."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return done;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Marks this Task as done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        done \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        onChange();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Returns a String describing this Task for Duke to display to the user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @return a String describing this Task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public String displayString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String doneString \u003d done ? \"✓\" : \"✗\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return String.format(\"[%s][%s] %s\", taskTypeString(), doneString, description);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Returns the abbreviated type of this task used in the displayString() method."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @return a String describing the type of this Task."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    protected String taskTypeString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Returns the description of this Task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @return the description of this Task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Changes the description of this Task."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param description The new description for this Task."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.description \u003d sanitizeString(description);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        onChange();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    void setOnChangeFunction(Runnable function) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        onChangeFunction \u003d function;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    void onChange() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        onChangeFunction.run();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Sanitizes the given String by replacing tabs with 4 spaces so that the Task can be safely serialized"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * as a tab delimited file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param s the string to sanitize."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @return the sanitized string."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    protected static String sanitizeString(String s) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return s.replaceAll(\"\\t\", \"    \");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 105
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * This class represents a list of Tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private List\u003cTask\u003e list;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private SaveFunction saveFunction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Creates an empty TaskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        saveFunction \u003d (list) -\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        };"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Set the save function for this list. The save function will be run whenver the list changes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param function the save function."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void connectStorage(SaveFunction function) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        saveFunction \u003d function;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Adds a task to this list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param task the task to add."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        task.setOnChangeFunction(() -\u003e saveFunction.save(this));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        saveFunction.save(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Removes a task from this list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param index the index of the task to be removed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @return the task removed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public Task delete(int index) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Task removed \u003d list.remove(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        saveFunction.save(this);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return removed;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Retrieves a task from this list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param index the index of the task to be retrieved."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @return a task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Get the number of tasks in this list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @return the number of tasks."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Returns the Tasks in this TaskList as a Stream."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @return a Stream of Tasks."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public Stream\u003cTask\u003e toStream() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return IntStream.range(0, size()).mapToObj(list::get);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Returns the Tasks in this TaskList as a List. It is not possible to modify the Tasks in the returned list,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * and changes in the returned list will also not be reflected in this TaskList."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @return a List of Tasks."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public List\u003cTask\u003e toList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 93
    }
  },
  {
    "path": "src/main/java/duke/ui/Cli.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "// TODO: make this class implement Ui so that Duke can be launched in either GUI or CLI mode"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * This class is responsible for displaying Duke\u0027s responses on the screen."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class Cli {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Prints the given string to the console as a response from Duke, wrapping lines that exceed 68 characters in"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * length."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param string the string to print."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void say(String string) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        final String indent \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        final int lineLength \u003d 68;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        final String separator \u003d indent + \"_\".repeat(lineLength);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        List\u003cString\u003e strings \u003d splitIntoLines(string, lineLength);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        System.out.println(separator);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        for (String s : strings) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            System.out.println(indent + s);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        System.out.println(separator);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Splits a string into lines with at most lineLength number of characters. This method does not account for"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * characters of differing widths (eg. tab character, or if non-monospace fonts are used)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param string     the string to split."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param lineLength the maximum number of characters per line."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @return a list of strings where each string corresponds to 1 line."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    List\u003cString\u003e splitIntoLines(String string, int lineLength) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        // TODO: should this method be private instead?"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String[] lines \u003d string.split(\"\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        StringBuilder sb;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        for (String l : lines) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String[] words \u003d l.split(\" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            for (String w : words) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                if (sb.length() \u003d\u003d 0 || sb.length() + w.length() \u003c\u003d lineLength) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    sb.append(w);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    sb.append(\" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    list.add(sb.toString().stripTrailing());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    sb.append(w);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    sb.append(\" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            if (l.equals(\"\") || sb.length() \u003e 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                list.add(sb.toString().stripTrailing());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 66
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * A custom JavaFX component for displaying Duke\u0027s or the user\u0027s message together with a display picture."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private DialogBox(String text, Image image) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        displayPicture.setImage(image);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Creates a DialogBox to display the user\u0027s inputs, with the display picture on the right and right-aligned text."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param text The user\u0027s input text to display."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param image The user\u0027s display picture."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @return A DialogBox to display the user\u0027s input."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image image) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return new DialogBox(text, image);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Creates a DialogBox to display Duke\u0027s response, with the display picture on the left and left-aligned text."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param text Duke\u0027s response to display."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param image Duke\u0027s display picture."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @return A DialogBox to display Duke\u0027s responses."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image image) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        var db \u003d new DialogBox(text, image);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 74
    }
  },
  {
    "path": "src/main/java/duke/ui/Gui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class Gui {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static class App extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        public void start(Stage stage) throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                FXMLLoader fxmlLoader \u003d new FXMLLoader(Gui.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Launches the JavaFX application."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public Gui() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Application.launch(App.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 37
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class MainWindow extends AnchorPane implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.jpg\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/duke.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    // non-ui"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private boolean shouldStop;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Consumer\u003cString\u003e inputHandler;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Creates a new MainWindow."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public MainWindow() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        shouldStop \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        inputHandler \u003d s -\u003e {};"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * This method is called by FXMLLoader after the root element has been completely processed. It should not be"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * manually called. Setup code which requires the root node or its children to be initialised is put here."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        new Duke(this); // TODO: think of a nicer way to do this"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getUserDialog(input, userImage)); // show user input"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        inputHandler.accept(input);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (shouldStop) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void setInputHandler(Consumer\u003cString\u003e function) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        inputHandler \u003d function;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        shouldStop \u003d true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void say(String string) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(string, dukeImage));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 81
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * This interface defines how other classes (eg. Commands, TaskListStorage) can manipulate the Ui."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Tells Duke to exit after it finishes handling the current user input."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void stop();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Makes Duke say the given String."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param string the String for Duke to say."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void say(String string);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Sets the function for handling user input. The Ui will call this function whenever it receives user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param function The function for handling user input, which should take in a single String, the user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void setInputHandler(Consumer\u003cString\u003e function);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 28
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 19
    }
  },
  {
    "path": "src/test/java/duke/storage/StorageHelperTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class StorageHelperTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void save_currentDirectoryNoFile() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String path \u003d \"test.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            File file \u003d new File(path);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String string \u003d \"test\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            StorageHelper.save(() -\u003e string, path);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String actual \u003d Files.readString(file.toPath(), StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            assertEquals(string, actual);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        });"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void save_directoryExistsNoFile() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String path \u003d \"testDir/test.txt\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            File file \u003d new File(path);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String string \u003d \"test\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            file.getParentFile().mkdir();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            StorageHelper.save(() -\u003e string, path);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String actual \u003d Files.readString(file.toPath(), StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            assertEquals(string, actual);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            file.getParentFile().delete();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        });"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void save_overwriteExistingFile() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String path \u003d \"test.txt\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            File file \u003d new File(path);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            Files.writeString(file.toPath(), \"old text\", StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String newText \u003d \"new text\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            StorageHelper.save(() -\u003e newText, path);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String actual \u003d Files.readString(file.toPath(), StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            assertEquals(newText, actual);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        });"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void save_noDirectory_createDirectory() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String path \u003d \"testDir/test.txt\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            File file \u003d new File(path);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String string \u003d \"test\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            StorageHelper.save(() -\u003e string, path);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String actual \u003d Files.readString(file.toPath(), StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            assertEquals(string, actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            file.getParentFile().delete();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void open_fileExists() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String path \u003d \"testOpen.txt\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String actual \u003d StorageHelper.open((String s) -\u003e s, path);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            assertEquals(\"test\", actual);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void open_missingFile_throwException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertThrows(FileMissingException.class, () -\u003e StorageHelper.open((String s) -\u003e s, \"nonExistentFile.txt\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 83
    }
  },
  {
    "path": "src/test/java/duke/ui/CliTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class CliTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private \u003cT\u003e void assertListEquality(List\u003cT\u003e expected, List\u003cT\u003e actual) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void splitIntoLines_exactLineLength() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        List\u003cString\u003e result \u003d new Cli().splitIntoLines(\"abc d f s\", 3);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertListEquality(Arrays.asList(\"abc\", \"d f\", \"s\"), result); // using list equality"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void splitIntoLines_overLineLength() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        List\u003cString\u003e result \u003d new Cli().splitIntoLines(\"abc def s\", 5);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertListEquality(Arrays.asList(\"abc\", \"def s\"), result);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void splitIntoLines_singleLongWord() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        List\u003cString\u003e result \u003d new Cli().splitIntoLines(\"abcdefgh s abcdefghijklmn\", 5);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertListEquality(Arrays.asList(\"abcdefgh\", \"s\", \"abcdefghijklmn\"), result);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void splitIntoLines_newlines() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        List\u003cString\u003e result \u003d new Cli().splitIntoLines(\"abc\\ndefg zd\\nxy\", 3);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertListEquality(Arrays.asList(\"abc\", \"defg\", \"zd\", \"xy\"), result);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 39
    }
  },
  {
    "path": "testOpen.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "test"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 1
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "todo sleep"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "deadline cs2103 ip level 6 /by Thu 20 Aug 23:59"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "event some other event /at TBD"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "yeet"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "done zz"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "done 100"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "todo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "deadline something"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "deadline something /by "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "deadline    /by"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "deadline    /by sometime"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "event"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 23
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "# if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "if ! javac ../src/main/java/duke/*/*.java ../src/main/java/duke/*.java  -Xlint:none -d ../bin"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "chloelee767": 3
    }
  }
]
