[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "1. After the importing is complete, locate the `src/dukemain/java/Duke.java` file, right-click it, and choose `Run Duke.dukemain()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 1,
      "-": 25
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    implementation \u0027org.junit.jupiter:junit-jupiter:5.4.2\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    mainClassName \u003d \"src.main.java.DukeMain\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 2,
      "-": 45
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import dukemain.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * Command object has a CommandType to determine which specific command to execute"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * and a description which contains the user input String. Command objects to be executed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * are always valid as input validation is done by the data.Parser object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * Command object also handles manipulation of list of Task objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * @author Hakiem Rasid"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public CommandType type;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Constructor for Command object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param type Type of command to be executed as CommandType."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param description User input instruction as String."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public Command(CommandType type, String description) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns list of Task objects after executing command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param tasks List of Task objects to be manipulated."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return List of Task objects after changes made from executing command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @throws IndexOutOfBoundsException If index specified in DONE or DELETE command"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * does not lie within range of list of Task objects."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public ArrayList\u003cTask\u003e executeCommand(ArrayList\u003cTask\u003e tasks) throws"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        switch (this.type) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            case BYE:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                Ui.byeMessage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                return tasks;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            case CLEAR:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                if (Ui.promptConfirm(new Scanner(System.in))) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    // Reference to empty ArrayList"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    Ui.clearedListMessage();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    // do nothing"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    Ui.didNotClearListMessage();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    return tasks;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    // do nothing"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    Ui.printList(tasks, \"print\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    return tasks;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                return markDone(tasks, this.description);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                return deleteTask(tasks, this.description);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                return addTask(tasks, this.description);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                return findTask(tasks, this.description);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            case UNKNOWN:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                System.out.println(this.description);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                return tasks;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns a list of Task objects with a description that contains the key."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param tasks List of Task objects of which to find matching Tasks."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param key Key used to find matching Task objects."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return List of matching Task objects."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public ArrayList\u003cTask\u003e findTask(ArrayList\u003cTask\u003e tasks, String key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        ArrayList\u003cTask\u003e matchedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            if (task.getName().toLowerCase().contains(key.toLowerCase())) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                matchedTasks.add(task);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (matchedTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            Ui.noMatchMessage();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            Ui.printList(matchedTasks, \"find\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns list of Task objects with specified Task object marked as done."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param tasks List of Task objects."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param input Keyword \"done\" followed by index of Task object to be marked done."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return List of updated Task objects."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @throws IndexOutOfBoundsException If index specified in DONE Command"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * does not lie within range of list of Task objects."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public ArrayList\u003cTask\u003e markDone(ArrayList\u003cTask\u003e tasks, String input) throws"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        // parse int for index of task to be marked as done"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        int index \u003d Integer.valueOf(input.split(\" \")[1]);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        Task current \u003d tasks.get(index - 1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        current.completeTask();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        Ui.markDoneMessage(current.printTask());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns updated list of Task objects after deleting Task at specified index."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param tasks List of Task objects to be manipulated."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param input Keyword \"delete\" followed by index of Task to be deleted."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return Updated list of Task objects."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @throws IndexOutOfBoundsException If index specified in DELETE Command"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * does not lie within range of list of Task objects."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public ArrayList\u003cTask\u003e deleteTask(ArrayList\u003cTask\u003e tasks, String input) throws"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        // parse int for index of task to be deleted"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        int index \u003d Integer.valueOf(input.split(\" \")[1]);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        Task current \u003d tasks.remove(index - 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        Ui.deleteTaskMessage(current.printTask(), tasks.size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    // Adds Task to list. Checks inputs and throws exceptions for invalid inputs"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns updated list of Task objects after adding the specified Task."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param tasks List of Task objects to be manipulated."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param input Keyword of specified Task type followed by details of the Task."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return Updated List of Task objects."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public ArrayList\u003cTask\u003e addTask(ArrayList\u003cTask\u003e tasks, String input) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        String[] splitSpace \u003d input.split(\" \");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (this.type.equals(CommandType.TODO)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // case: todo"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            for (String str : splitSpace) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                if (str.toLowerCase().equals(\"todo\")) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    sb.append(str + \" \");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            } // end for loop"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            task \u003d new ToDo(sb.toString().trim());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else if (this.type.equals(CommandType.DEADLINE)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // case: deadline"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            String name \u003d input.split(\"/by\")[0].trim().substring(9);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            String deadline \u003d input.split(\"/by\")[1].trim();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            task \u003d new Deadline(name, deadline);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // case: event"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            String name \u003d input.split(\"/at\")[0].trim().substring(6);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            String time \u003d input.split(\"/at\")[1].trim();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            task \u003d new Event(name, time);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        Ui.addTaskMessage(task.printTask(), tasks.size());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns the type of this Command object."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return Type of this Command object as CommandType."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public CommandType getType() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns description(user input instruction) of this Command object."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return Description of Command object as String."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 209
    }
  },
  {
    "path": "src/main/java/command/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    TODO, DEADLINE, EVENT, LIST, DONE, BYE, DELETE, CLEAR, UNKNOWN, FIND"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 5
    }
  },
  {
    "path": "src/main/java/data/DateManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "package data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * data.DateManager object parses valid String inputs from Deadline and Event"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * objects to be stored as Date objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * @author Hakiem Rasid"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "public class DateManager {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private static String[] DATE_INPUT_FORMATS \u003d {\"invalid\", \"dd-MM-yyyy\", \"dd/MM/yyyy\", \"dd-MM-yyyy kkmm\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        \"dd/MM/yyyy kkmm\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private static String[] DATE_OUTPUT_FORMATS \u003d {\"MMM dd yyyy\", \"MMM dd yyyy\u0027,\u0027 hh:mma\"};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns Optional containing Date if String is valid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param str Input String to be parsed as Date object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return Optional containing Date if String is valid. Empty Optional otherwise."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public Optional\u003cDate\u003e getDate(String str) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            if (getDateFormat(str).equals(DATE_INPUT_FORMATS[0])) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // returns empty Optional if str is not of valid format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                Optional\u003cDate\u003e empty \u003d Optional.empty();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                return empty;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                SimpleDateFormat formatter \u003d new SimpleDateFormat(getDateFormat(str));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                return Optional.of(formatter.parse(str));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns String representation of valid Date object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param str Valid input String to be parsed as Date."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return String representation of Date."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public String getDateAsString(String str) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        // assumes that str input has valid date format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        // input checks done in Deadline and Event"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        SimpleDateFormat sdf;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (getDateFormat(str).equals(DATE_INPUT_FORMATS[1]) ||"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                getDateFormat(str).equals(DATE_INPUT_FORMATS[2])) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            sdf \u003d new SimpleDateFormat(DATE_OUTPUT_FORMATS[0]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            sdf \u003d new SimpleDateFormat(DATE_OUTPUT_FORMATS[1]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return sdf.format(getDate(str).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    // return format of date String or invalid"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns format of String input of a date."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param str String representation of a date/"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return Format of Date object if input is valid. Returns \"invalid\" otherwise."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public String getDateFormat(String str) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (str.length() !\u003d DATE_INPUT_FORMATS[1].length() \u0026\u0026"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                str.length() !\u003d DATE_INPUT_FORMATS[3].length()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // input string has invalid format if it is not of correct length"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            return DATE_INPUT_FORMATS[0];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (str.length() \u003d\u003d DATE_INPUT_FORMATS[1].length()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // either of format dd-mm-yyyy or dd/mm/yyyy"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            if (str.substring(2, 3).equals(\"-\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // case: dd-mm-yyyy"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                String[] date \u003d str.split(\"-\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                return (isValidDateNumerals(date)) ? DATE_INPUT_FORMATS[1] : DATE_INPUT_FORMATS[0];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            } else if (str.substring(2, 3).equals(\"/\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // case: dd/mm/yyyy"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                String[] date \u003d str.split(\"/\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                return (isValidDateNumerals(date)) ? DATE_INPUT_FORMATS[2] : DATE_INPUT_FORMATS[0];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // invalid format"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                return DATE_INPUT_FORMATS[0];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // case: dd-mm-yyyy hhhh or dd/mm/yyyy hhhh"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            if (str.substring(2, 3).equals(\"-\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // case: dd-mm-yyyy hhhh"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                String hrs \u003d str.split(\" \")[1];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                String[] date \u003d str.split(\" \")[0].split(\"-\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                String[] dateTime \u003d new String[4];"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // assign values to dateTime array"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                for (int i \u003d 0; i \u003c 3; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    dateTime[i] \u003d date[i];"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                dateTime[3] \u003d hrs;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                return (isValidDateNumerals(dateTime)) ? DATE_INPUT_FORMATS[3] : DATE_INPUT_FORMATS[0];"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            } else if (str.substring(2, 3).equals(\"/\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // case: dd/mm/yyyy hhhh"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                String hrs \u003d str.split(\" \")[1];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                String[] date \u003d str.split(\" \")[0].split(\"/\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                String[] dateTime \u003d new String[4];"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // assign values to dateTime array"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                for (int i \u003d 0; i \u003c 3; i++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    dateTime[i] \u003d date[i];"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                dateTime[3] \u003d hrs;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                return (isValidDateNumerals(dateTime)) ? DATE_INPUT_FORMATS[4] : DATE_INPUT_FORMATS[0];"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // invalid format"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                return DATE_INPUT_FORMATS[0];"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    // checks validity integers in String representation of date"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Checks validity of integers in String representation of a date."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param arr Array containing integers for day, month and year."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return True if integers form a valid date. False otherwise."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private boolean isValidDateNumerals(String[] arr) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        boolean isValid \u003d true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (Integer.parseInt(arr[0]) \u003e 31) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // invalid if day \u003e 31"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (Integer.parseInt(arr[1]) \u003e 12) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // invalid if month \u003e 12"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (Integer.parseInt(arr[2]) \u003c 2020) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // invalid if year \u003c 2020"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (arr.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // case dd mm yyyy hhhh"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            if (Integer.parseInt(arr[3]) \u003e 2359 || Integer.parseInt(arr[3]) \u003c 0) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                isValid \u003d false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return isValid;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 159
    }
  },
  {
    "path": "src/main/java/data/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "package data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import command.CommandType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * data.Parser object processes and makes sense of user input to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * Input validation is also done as inputs are parsed to ensure command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * Strings follow a specific format before they can be executed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * @author Hakiem Rasid"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static final String[] COMMANDS \u003d {\"todo\", \"deadline\", \"event\", \"list\", \"done\", \"bye\", \"delete\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        \"clear\", \"unknown\", \"find\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns Command object by processing user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param input User inputs as String."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return Command object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @throws InvalidInputException If inputs are of incorrect format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * and cannot be parsed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public Command parseCommand(String input) throws InvalidInputException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        String[] strings \u003d input.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (input.trim().toLowerCase().equals(Parser.COMMANDS[5])) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // returns BYE Command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            command \u003d new Command(CommandType.BYE, input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else if (input.trim().toLowerCase().equals(Parser.COMMANDS[7])) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // returns CLEAR Command"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            command \u003d new Command(CommandType.CLEAR, input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else if (input.trim().toLowerCase().equals(Parser.COMMANDS[3])) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // return LIST Command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            command \u003d new Command(CommandType.LIST, input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else if (strings[0].toLowerCase().equals(Parser.COMMANDS[4])) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // returns DONE Command"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            command \u003d new Command(CommandType.DONE, input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else if (strings[0].toLowerCase().equals(Parser.COMMANDS[6])) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // returns DELETE Command"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            command \u003d new Command(CommandType.DELETE, input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else if (strings[0].toLowerCase().equals(Parser.COMMANDS[0])) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // returns TODO Command"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            command \u003d new Command(CommandType.TODO, input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else if (strings[0].toLowerCase().equals(Parser.COMMANDS[1])) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // returns DEADLINE Command"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            command \u003d new Command(CommandType.DEADLINE, input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else if (strings[0].toLowerCase().equals(Parser.COMMANDS[2])) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // returns EVENT Command"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            command \u003d new Command(CommandType.EVENT, input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else if (strings[0].toLowerCase().equals(Parser.COMMANDS[9])) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // returns FIND Command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            command \u003d new Command(CommandType.FIND, input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // returns UNKNOWN Command"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            command \u003d new Command(CommandType.UNKNOWN, \"Sorry, I don\u0027t understand!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return validateCommand(command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns Command object after validating its contents."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param cmd Command object to be validated."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return Valid Command object that can be executed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @throws InvalidInputException If description of input Command"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * is of incorrect format and cannot be parsed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public Command validateCommand(Command cmd) throws InvalidInputException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        Command validCommand \u003d new Command(CommandType.UNKNOWN, \"Sorry, I don\u0027t understand!\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        switch(cmd.getType()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            case BYE:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            case CLEAR:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            case UNKNOWN:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // no need to validate these Command types"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                validCommand \u003d cmd;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                validCommand \u003d checkDoneAndDeleteValidity(cmd);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                validCommand \u003d checkToDoValidity(cmd);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                validCommand \u003d checkDeadlineAndEventValidity(cmd);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                validCommand \u003d  checkFindValidity(cmd);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return validCommand;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns valid Command object after input validity checks of"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * FIND Command."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param cmd Command object with CommandType FIND."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return Input Command object if description passes input validity checks."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @throws InvalidInputException If description of Command object is of"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * incorrect format."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public Command checkFindValidity(Command cmd) throws InvalidInputException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        String description \u003d cmd.getDescription();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        String key;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (description.trim().equals(\"find\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // throws exception for invalid input i.e. \"find\", \"find \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            throw new InvalidInputException(\"Incomplete find command\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        key \u003d description.trim().substring(5).trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return new Command(CommandType.FIND, key);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns valid Command object after input validity checks of"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * DEADLINE and EVENT Commands."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param cmd Command object with CommandType DEADLINE or EVENT."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return Input Command object if description passes input validity checks."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @throws InvalidInputException If description of Command object is of"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * incorrect format."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public Command checkDeadlineAndEventValidity(Command cmd) throws InvalidInputException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        String cmdIdentifier;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        String description \u003d cmd.getDescription();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (cmd.getType().equals(CommandType.DEADLINE)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // case: DEADLINE"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            cmdIdentifier \u003d \"by\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // case: EVENT"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            cmdIdentifier \u003d \"at\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (!description.contains(\" /\" + cmdIdentifier)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // throws exception if invalid input format: does not contain \"/by\" or \"/at\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // must have space before /by or /at keywords"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            throw new InvalidInputException(\"Command is missing \\\"/\" + cmdIdentifier +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    \"\\\" keyword\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (description.split(\" /\")[0].toLowerCase().equals(\"deadline\") ||"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                description.split(\" /\")[0].toLowerCase().equals(\"event\")) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // throws exception if invalid input format: \"deadline /by taskDeadline\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // throws exception if invalid input format: \"event /by eventDate\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            throw new InvalidInputException(\"Missing task description\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (description.split(\" \")[(description.split(\" \").length - 1)].equals(\"/\" + cmdIdentifier)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // throws exception if invalid input format: \"deadline taskName /by\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            throw new InvalidInputException(\"Missing task deadline/time\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return cmd;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns valid Command object after input validity checks of TODO Command."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param cmd Command object with CommandType TODO."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return Input Command object if description passes input validity checks."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @throws InvalidInputException If description of Command object is of incorrect format."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public Command checkToDoValidity(Command cmd) throws InvalidInputException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (cmd.getDescription().split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // throws exception if invalid input format: \"todo\" (missing task name)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            throw new InvalidInputException(\"Todo command incomplete\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return cmd;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns valid Command object after input validity checks of DONE or"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * DELETE Commands."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param cmd Command object with CommandType DONE or DELETE."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return Input Command object if description passes input validity checks."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @throws InvalidInputException If description of Command object is of"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * incorrect format."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public Command checkDoneAndDeleteValidity(Command cmd) throws InvalidInputException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        String description \u003d cmd.getDescription();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (description.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // throws exception if invalid input format: \"done\"/\"delete\" (missing index)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            throw new InvalidInputException(\"Task index not specified\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (description.split(\" \").length \u003e 2) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // throws exception if invalid input format: \u003e 2 strings separated by \" \""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // e.g \"done/delete 1 2 3\", \"done/delete 12 text\""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            throw new InvalidInputException(\"Sorry, command unclear! Please specify only one index\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // parse int for index of task to be marked as done/deleted"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            index \u003d Integer.valueOf(description.split(\" \")[1]);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // throws exception if invalid input format: Invalid integer"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // e.g \"done/delete abc\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            throw new InvalidInputException(\"Please enter a valid integer\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return cmd;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 216
    }
  },
  {
    "path": "src/main/java/data/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "package data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * data.Storage object handles saving and loading of data for list of Task objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * Task objects are stored as String representations in specified .txt file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * @author Hakiem Rasid"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Constructor of data.Storage object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param filePath Target .txt file for saving and loading of data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Sends data of list of Task objects as String to be saved onto"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * target .txt file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param taskList List of Task objects to be saved."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public void saveData(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            File file \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // if file doesn\u0027t exists, then create it"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            file.exists();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            FileWriter writer \u003d new FileWriter(file, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            for (Task task : taskList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    ToDo currentTask \u003d (ToDo) task;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    writer.write(\"t \" + currentTask.getName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    Deadline currentTask \u003d (Deadline) task;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    writer.write(\"d \" + currentTask.getName() + \" \" + currentTask.getDeadline());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    Event currentTask \u003d (Event) task;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    writer.write(\"e \" + currentTask.getName() + \" \" + currentTask.getTime());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    // do nothing"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                if (task.isDone()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    writer.write(\" done\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    writer.write(\" incomplete\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                writer.write(\"\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            } // end for loop"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            writer.flush();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns list of Task objects after loading data from .txt file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns empty list if no data is found."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return List of Task objects if data is found and loaded. Empty list"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * if no data is found."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public ArrayList\u003cTask\u003e loadData() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            String currentLine;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            while ((currentLine \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                String[] line \u003d currentLine.split(\" \");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                Task newTask;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                if (line[0].equals(\"t\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    // case ToDo"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    newTask \u003d new ToDo(line[1]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                } else if (line[0].equals(\"d\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    // case Deadline"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    newTask \u003d new Deadline(line[1], line[2]);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    // case event"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    newTask \u003d new Event(line[1], line[2]);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                if (line[line.length - 1].equals(\"done\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    newTask.completeTask();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                list.add(newTask);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            } // end while loop"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // returns empty ArrayList if savedata text file not found"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            return new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            ioe.printStackTrace();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 126
    }
  },
  {
    "path": "src/main/java/data/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "package data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import command.CommandType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import dukemain.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * data.TaskList object contains a list of Task objects that are added and edited"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * by the user. This object has a data.Storage object to manage saving and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * loading of data."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * @author Hakiem Rasid"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Constructor for data.TaskList object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param filePath Destination file for saving and loading of data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public TaskList(String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.list \u003d storage.loadData();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Reads input from user and executes the appropriate commands to manipulate"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * the list of Task objects or provide instructions to the program."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public void runCommands() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            Ui.horizontalLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                Ui.horizontalLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                Command cmd \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                this.list \u003d cmd.executeCommand(this.list);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                if (cmd.getType().equals(CommandType.BYE)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    // exit program if user inputs \"bye\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                Ui.invalidInputMessage();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            } catch (IndexOutOfBoundsException obe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                Ui.invalidIndexMessage();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    // Returns list of Tasks"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns List of Task objects."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return List of Task objects."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return this.list;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Saves list of Task obejcts onto specified txt file."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public void save() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        storage.saveData(this.list);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 76
    }
  },
  {
    "path": "src/main/java/dukemain/DukeMain.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "package dukemain;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "public class DukeMain {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        TaskList taskList \u003d new TaskList(\"src/savedata/data.txt\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        Ui.startUpMessage();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        taskList.runCommands();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        taskList.save();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 13
    }
  },
  {
    "path": "src/main/java/dukemain/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "package dukemain;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * main.Ui class handles any text or String representations to be viewed by the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * @author Hakiem Rasid"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            \"_________________________________________________________________________________________\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Prints start-up message upon program execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static void startUpMessage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        horizontalLine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(\"Hello I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        //horizontalLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Prints a horizontal line."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static void horizontalLine() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(Ui.HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Prints goodbye message upon exiting program."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static void byeMessage() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Prints message upon clearing list of Task objects."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static void clearedListMessage() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(\"Task list cleared!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Prints message upon failing to confirm clearing of list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static void didNotClearListMessage() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(\"Did NOT clear your task list! \" +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                \"Is there anything else?\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Prints message upon successful marking of Task as done."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param task String representation of Task marked as done."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static void markDoneMessage(String task) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(\"Nice! I have marked this task as done:\\n\\t\" + task);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Prints message upon successful deletion of specified task and current size"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * of list of Task objects."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param task String representation of Task deleted."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param size Size of list of Task objects after deletion."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static void deleteTaskMessage(String task, int size) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(\"Okay! I have removed this task:\\n\\t\" + task);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(\"Now you have \" + size + \" tasks in your list\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Prints message upon successful adding of new Task object to list and current"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * size of list of Task objects."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param task String representation of Task added to list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param size Size of list of Task objects after adding new Task."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static void addTaskMessage(String task, int size) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(\"Got it! Task added to list.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(\"\\t\" + task);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(\"Now you have \" + size + \" tasks in your list.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Prints String representation of all Task objects in the input list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param tasks List of Task objects."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static void printList(ArrayList\u003cTask\u003e tasks, String printOrFind) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (printOrFind.equals(\"print\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            System.out.println(\"Here are your tasks:\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            System.out.println(\"Here are your matching tasks:\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            System.out.println(i + 1 + \". \" + tasks.get(i).printTask());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Prints message if FIND command does not return any matching Task objects."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static void noMatchMessage() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(\"Sorry! There are not tasks \" +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                \"that match that description.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Prints message upon reading input of invalid format."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static void invalidInputMessage() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(\"Please enter valid input\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Prints message upon reading DONE, DELETE input command"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * of invalid format."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static void invalidIndexMessage() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(\"Please enter valid index\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns a boolean value after user has confirmed or denied a previous"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * instruction."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param sc Scanner object to read inputs."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return  True if user confirms previous instruction. False if otherwise."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static boolean promptConfirm(Scanner sc) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(\"Are you sure? (Y/N)\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        horizontalLine();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        horizontalLine();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return input.toLowerCase().equals(\"y\") ? true : false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 149
    }
  },
  {
    "path": "src/main/java/exception/InvalidInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "public class InvalidInputException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public InvalidInputException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 7
    }
  },
  {
    "path": "src/main/java/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import data.DateManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * Deadline object is a subclass of Task object. It contains a deadline String,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * data.DateManager to process the deadline and an Optional to store a Date object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * if deadline is of a valid format."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * @author Hakiem Rasid"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private String deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private Optional\u003cDate\u003e optDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private DateManager dateManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Constructor for Deadline object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param name Description of task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param deadline Description of deadline for this task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public Deadline(String name, String deadline) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.dateManager \u003d new DateManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.optDate \u003d dateManager.getDate(deadline);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns Deadline for this task to be completed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return Deadline as a String."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return this.deadline;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Prints a String representation of Deadline object and processes validity of deadline"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * format to determine format of output."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Clearly labels the Deadline object to be easily distinguishable from other"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Task objects."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return String representation of Deadline."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        sb.append(\"[D]\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        sb.append(super.printTask());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (!optDate.isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            sb.append(\" (by: \" + this.deadline + \")\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            sb.append(\" (by: \" + dateManager.getDateAsString(deadline) + \")\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 66
    }
  },
  {
    "path": "src/main/java/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import data.DateManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * Event object is a subclass of Task object. It contains a time as String,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * data.DateManager to process the time and an Optional to store a Date object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * if time is of a valid format."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * @author Hakiem Rasid"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private Optional\u003cDate\u003e optTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private DateManager dateManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Constructor for Event object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param name Description of event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param deadline Description of time of this event."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public Event(String name, String time) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.dateManager \u003d new DateManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.optTime \u003d dateManager.getDate(time);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns time of this event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return Time as a String."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Prints a String representation of Event object and processes validity of time"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * format to determine format of output."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Clearly labels the Deadline object to be easily distinguishable from other"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Task objects."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return String representation of Event."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        sb.append(\"[E]\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        sb.append(super.printTask());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (!optTime.isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            sb.append(\" (at: \" + this.time + \")\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            sb.append(\" (by: \" + dateManager.getDateAsString(time) + \")\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 65
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * Task object contains a name or description of the task to be done and"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * an indicator if it has been completed."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * @author Hakiem Rasid"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private boolean done;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Constructor for Task object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param name Description or name of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public Task(String name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Marks the task as completed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public void completeTask() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.done \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns name/description of the task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns boolean value to determine if task has been completed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return True if task is completed. False otherwise."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return this.done;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Prints a string representation of the Task object with a tick if the"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * task has been competed and a cross otherwise."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return String representation of Task object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        StringBuilder out \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (this.isDone()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            out.append(\"[/] \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            out.append(\"[X] \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        out.append(this.getName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return out.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 67
    }
  },
  {
    "path": "src/main/java/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * ToDo object is a subclass of Task object but does not contain any extra information."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * @author Hakiem Rasid"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Constructor for ToDo object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param name Description of this task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public ToDo(String name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns a String representation of ToDo object. Clearly labels the ToDo object to be"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * distinguishable from other Task objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return String representation of ToDo object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        sb.append(\"[T]\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        sb.append(super.printTask());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 33
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import command.CommandType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import data.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public void checkDeadlineAndEventValidity_validCommand_success () {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        Command deadlineCommand \u003d new Command(CommandType.DEADLINE,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                \"deadline hw /by 12/10/2020 1330\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        Command eventCommand \u003d new Command(CommandType.EVENT,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                \"event concert /at 12/12/2020 1445\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            assertEquals(deadlineCommand, new Parser().checkDeadlineAndEventValidity(deadlineCommand));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            assertEquals(deadlineCommand, new Parser().checkDeadlineAndEventValidity(deadlineCommand));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public void checkDeadlineAndEventValidity_invalidDeadlineMissingKeyword_exceptionThrown() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        Command deadlineCommand \u003d new Command(CommandType.DEADLINE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                \"deadline hw 12/10/2020 1330\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            assertEquals(deadlineCommand, new Parser().checkDeadlineAndEventValidity(deadlineCommand));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            assertEquals(\"Command is missing \\\"/by\\\" keyword\", e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public void checkDeadlineAndEventValidity_invalidEventMissingKeyword_exceptionThrown() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        Command eventCommand \u003d new Command(CommandType.EVENT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                \"event concert 12/10/2020 1330\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            assertEquals(eventCommand, new Parser().checkDeadlineAndEventValidity(eventCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            assertEquals(\"Command is missing \\\"/at\\\" keyword\", e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 51
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "deadline return book /by 12/12/2020 1400"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "event group meeting /at 11-12-2020"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "todo join a club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "todo"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "event"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "event /at 12-11-2020 1545"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "event watch netflix /at"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "event watch netflix /at 12/12/2020 1545"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "deadline /by Monday"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "deadline assignment /by"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "deadline assignment /by Monday"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 22
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 1,
      "-": 20
    }
  }
]
