[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 18,
      "-": 44
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * Deadline is a type of Task, which takes in a specific date/time."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected String connector;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected LocalTime time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected boolean hasTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Constructor that creates a new Deadline object based on stored data or input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param description describes the deadline"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param id position of deadline"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param dueDateTime when it is due by"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param stored whether it is from stored.txt or a new input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public Deadline(String description, int id, String dueDateTime, boolean stored) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        super(description, id);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (stored) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            // stored data"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"d/MMM/yyyy\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            DateTimeFormatter timeFormat \u003d DateTimeFormatter.ofPattern(\"h:mma\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String[] dateTime \u003d dueDateTime.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.connector \u003d dateTime[0];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (dateTime.length \u003e 4) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                // if user inputs time after date"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                String date \u003d dateTime[1] + \"/\" + dateTime[2] + \"/\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        + dateTime[3].substring(0, dateTime[3].length() - 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                this.date \u003d LocalDate.parse(date, dateFormat);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                this.time \u003d LocalTime.parse(dateTime[4], timeFormat);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                this.hasTime \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                String date \u003d dateTime[1] + \"/\" + dateTime[2] + \"/\" + dateTime[3];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                this.date \u003d LocalDate.parse(date, dateFormat);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                this.hasTime \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            DateTimeFormatter timeFormat \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String[] dateTime \u003d dueDateTime.split(\" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.connector \u003d dateTime[0];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.date \u003d LocalDate.parse(dateTime[1], dateFormat);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (dateTime.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                // if user inputs time after date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                this.time \u003d LocalTime.parse(dateTime[2], timeFormat);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                this.hasTime \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                this.hasTime \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (hasTime) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return \"[D][\" + this.getStatusIcon() + \"] \" + this.description + \"(\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + this.connector + \" \" + this.date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \", \" + this.time.format(DateTimeFormatter.ofPattern(\"h:mma\")) + \")\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return \"[D][\" + this.getStatusIcon() + \"] \" + this.description + \"(\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + this.connector + \" \" + this.date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \")\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 71
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Circle clip \u003d new Circle(50, 45, 40);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        displayPicture.setClip(clip);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 61
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * The main class which invokes all the necessary classes to start the chatbot."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * @author Chen Ler"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Constructor to initialise all of the necessary variables."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ListOfItems listOfItems \u003d new ListOfItems();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        parser \u003d new Parser(listOfItems);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        ui \u003d new Ui(parser);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Getter method for JUnit testing purpose only."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @return Parser object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public Parser getParser() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this.parser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        new Duke();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Retrieve response from Ui after receiving input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param input user\u0027s command"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @return output given by the chatbot"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this.ui.run(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Getter method to get instance of Ui."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @return Ui object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public Ui getUi() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return this.ui;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lerxcl": 45,
      "-": 6
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * The customised Exception when the chatbot encounters an error."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 8
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * Event is a type of Task, which takes in a specific date/time."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected String connector;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected LocalTime startTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected LocalTime endTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Constructor that creates a new Event object based on stored data or input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param description describes the event"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param id position of event"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param duration duration of event"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param stored whether it is from stored.txt or a new input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public Event(String description, int id, String duration, boolean stored) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        super(description, id);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (stored) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            //stored data"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"d/MMM/yyyy\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            DateTimeFormatter timeFormat \u003d DateTimeFormatter.ofPattern(\"h:mma\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String[] dateTime \u003d duration.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.connector \u003d dateTime[0];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String date \u003d dateTime[1] + \"/\" + dateTime[2] + \"/\" + dateTime[3].substring(0, dateTime[3].length() - 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.date \u003d LocalDate.parse(date, dateFormat);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.startTime \u003d LocalTime.parse(dateTime[4], timeFormat);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.endTime \u003d LocalTime.parse(dateTime[6], timeFormat);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            DateTimeFormatter timeFormat \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String[] dateTime \u003d duration.split(\" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.connector \u003d dateTime[0];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.date \u003d LocalDate.parse(dateTime[1], dateFormat);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String[] times \u003d dateTime[2].split(\"-\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.startTime \u003d LocalTime.parse(times[0], timeFormat);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            this.endTime \u003d LocalTime.parse(times[1], timeFormat);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return \"[E][\" + this.getStatusIcon() + \"] \" + this.description + \"(\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + this.connector + \" \" + this.date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + \", \" + this.startTime.format(DateTimeFormatter.ofPattern(\"h:mma\")) + \" - \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + this.endTime.format(DateTimeFormatter.ofPattern(\"h:mma\")) + \")\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 57
    }
  },
  {
    "path": "src/main/java/HandleFile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * Handles all of the file operations of \"stored.txt\" file."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class HandleFile {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected File storedData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected ListOfItems list;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Constructor creates a new HandleFile object and passes to checkFile()."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param list list of tasks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public HandleFile(ListOfItems list) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.storedData \u003d new File(\"stored.txt\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.checkFile();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Checks whether if \"stored.txt\" file exists, which it will pass to readFile()."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Else, it creates a new \"stored.txt\" file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected void checkFile() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (!this.storedData.exists()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                this.storedData.createNewFile();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                readFile();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Reads the file using Scanner, and passes each line to ListOfItems\u0027s addStored(String input)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected void readFile() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            Scanner sc \u003d new Scanner(this.storedData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                this.list.addStoredList(sc.nextLine());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Writes to \"stored.txt\", where it will copy each line from ListOfItems\u0027s list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param listOfItems list of tasks"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected void writeFile(ListOfItems listOfItems) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            List\u003cTask\u003e list \u003d listOfItems.list;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            FileWriter fw \u003d new FileWriter(this.storedData);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                Task task \u003d list.get(i);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                assert list.get(i).id \u003e 0 : \"item id cannot be \u003c\u003d 0!\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                String taskText \u003d task.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                bw.write(taskText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                bw.write(\"\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 80
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * A launcher class to workaround classpath issues, launch the GUI application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 10
    }
  },
  {
    "path": "src/main/java/ListOfItems.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * Contains the task list, handles all of the list manipulations + checks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class ListOfItems {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private final HandleFile handleFile;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected List\u003cTask\u003e list;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected String divider \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected String tabSpacing \u003d \"   \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Initialises a new ArrayList, and index starts from 0."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Also, it initialises a new HandleFile and takes in ListOfItems."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public ListOfItems() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.index \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.handleFile \u003d new HandleFile(this);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Handles all of the information from \"stored.txt\" and adds it to the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * It also updates the index with every addition."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param input a line from \"stored.txt\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected void addStoredList(String input) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        char type \u003d input.charAt(1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        boolean isDone \u003d input.charAt(4) \u003d\u003d \u0027✓\u0027;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (type \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            //To-do"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String description \u003d input.substring(7);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            Todo todo \u003d new Todo(description, index + 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (isDone) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                todo.markAsDone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            list.add(index, todo);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else if (type \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            //Deadline"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String[] info \u003d input.split(\"[(]\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String description \u003d info[0].substring(7);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String dueDateTime \u003d info[1].substring(0, info[1].length() - 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            Deadline deadline \u003d new Deadline(description, index + 1, dueDateTime, true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (isDone) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                deadline.markAsDone();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            list.add(index, deadline);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else if (type \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            //Event"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String[] info \u003d input.split(\"[(]\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String description \u003d info[0].substring(7);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String duration \u003d info[1].substring(0, info[1].length() - 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            Event event \u003d new Event(description, index + 1, duration, true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (isDone) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                event.markAsDone();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            list.add(index, event);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assert this.index !\u003d 0 : \"items not added properly from stored.txt\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Retrieves the list and prints out every task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @return output of chatbot"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @throws DukeException if list is empty"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected String getList() throws DukeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String output \u003d divider + \"\\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new DukeException(\"List is empty, you have free time (for now)! YAY :D\" + \"\\n\" + divider);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            output \u003d output + \"Here are the task(s) in your list: \\n\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            for (int i \u003d 0; i \u003c index; i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                assert list.get(i).id \u003e 0 : \"item id cannot be 0 or negative!\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                output \u003d output + list.get(i).id + \".\" + list.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        output \u003d output + divider;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Marks a particular task is done."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @return output of chatbot"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @throws DukeException if number given is invalid"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected String doneItem(String input) throws DukeException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            // retrieve number after \"done \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            int number \u003d Integer.parseInt(input.substring(5));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            Task task \u003d list.get(number - 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (task.isDone) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                return \"Task already done!\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                task.markAsDone();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                handleFile.writeFile(this);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                String message \u003d \"Good job! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                String output \u003d divider + \"\\n\" + message + \"\\n\" + tabSpacing"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        + task + \"\\n\" + divider;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                assert output.contains(\"✓\") : \"task is not marked as done!\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                return output;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new DukeException(\"\\n\" + divider + \"\\n\" + \"Sorry, you did not enter a valid number. Please try again.\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"\\n\" + divider);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Deletes a particular task."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Modifies other task\u0027s index if necessary, so that list is still in chronological order."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @return output of chatbot"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @throws DukeException if number given is invalid"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected String deleteItem(String input) throws DukeException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            int number \u003d Integer.parseInt(input.substring(7));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            Task task \u003d list.get(number - 1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            for (int i \u003d number; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                list.get(i).id \u003d list.get(i).id - 1;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            list.remove(task);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            index--;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            handleFile.writeFile(this);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return divider + \"\\n\" + \"Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + tabSpacing + task + \"\\n\" + \"Now you have \" + index + \" tasks in the list.\\n\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + divider;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new DukeException(\"\\n\" + divider + \"\\n\" + \"Whoops, you did not enter a valid number.\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"\\n\" + divider);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Adds a new task to the list."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Checks what type of task is given and passes on to the respective add function."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @return output of chatbot"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @throws DukeException if incomplete commands are given"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected String addItem(String input) throws DukeException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (input.contains(\"todo\")) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return addTodo(input);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else if (input.contains(\"deadline\")) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return addDeadline(input);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else if (input.contains(\"event\")) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return addEvent(input);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new DukeException(\"\\n\" + divider + \"\\n\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"Sorry, you did not enter a valid command! Please try again.\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"\\n\" + divider);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Adds a new To-do item to the list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @return output of chatbot"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @throws DukeException if an invalid To-do item is given"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected String addTodo(String input) throws DukeException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String addedMessage \u003d \"Got it. I\u0027ve added this task: \";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String totalMessage \u003d \"Now you have \" + (index + 1) + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String description \u003d input.substring(5);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            Todo todo \u003d new Todo(description, index + 1);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String output \u003d divider + \"\\n\" + addedMessage + \"\\n\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            list.add(index, todo);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            output \u003d output + tabSpacing + list.get(index) + \"\\n\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + totalMessage + \"\\n\" + divider;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            handleFile.writeFile(this);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new DukeException(\"\\n\" + divider + \"\\n\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"Whoops, you did not fill in the details of the Todo properly :(\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"\\n\" + \"Please try again.\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"\\n\" + divider);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Adds a new Deadline item to the list."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @return output of chatbot"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @throws DukeException if an invalid Deadline item is given"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected String addDeadline(String input) throws DukeException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String addedMessage \u003d \"Got it. I\u0027ve added this task: \";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String totalMessage \u003d \"Now you have \" + (index + 1) + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String[] info \u003d input.split(\"/\", 2);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String description \u003d info[0].substring(9);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String dueDateTime \u003d info[1];"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            Deadline deadline \u003d new Deadline(description, index + 1, dueDateTime, false);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String output \u003d divider + \"\\n\" + addedMessage + \"\\n\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            list.add(index, deadline);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            output \u003d output + tabSpacing + list.get(index) + \"\\n\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + totalMessage + \"\\n\" + divider;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            handleFile.writeFile(this);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new DukeException(\"\\n\" + divider + \"\\n\""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"Whoops, you did not fill in the details of the Deadline properly :(\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"\\n\" + \"Please try again.\""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"\\n\" + divider);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new DukeException(\"\\n\" + divider + \"\\n\""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"Whoops, you did not fill in the due date/time of the Deadline properly.\""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"\\n\" + \"Please try again.\""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"\\n\" + divider);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new DukeException(\"\\n\" + divider + \"\\n\""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"Sorry, you did not fill in the due date(DD/MM/YYYY)\""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"\\n\" + \"and/or time(HHmm) properly. Please try again.\""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"\\n\" + divider);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Adds a new Event item to the list."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @return output of chatbot"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @throws DukeException if an invalid Event item is given"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected String addEvent(String input) throws DukeException {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String addedMessage \u003d \"Got it. I\u0027ve added this task: \";"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String totalMessage \u003d \"Now you have \" + (index + 1) + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String[] info \u003d input.split(\"/\", 2);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String description \u003d info[0].substring(6);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String duration \u003d info[1];"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            Event event \u003d new Event(description, index + 1, duration, false);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String output \u003d divider + \"\\n\" + addedMessage + \"\\n\";"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            list.add(index, event);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            output \u003d output + tabSpacing + list.get(index) + \"\\n\""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + totalMessage + \"\\n\" + divider;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            handleFile.writeFile(this);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new DukeException(\"\\n\" + divider + \"\\n\""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"Whoops, you did not fill in the details of the Event properly :(\""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"\\n\" + \"Please try again.\""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"\\n\" + divider);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new DukeException(\"\\n\" + divider + \"\\n\""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"Whoops, you did not fill in the duration of the Event properly.\""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"\\n\" + \"Please try again.\""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"\\n\" + divider);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new DukeException(\"\\n\" + divider + \"\\n\""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"Sorry, you did not fill in the due date(DD/MM/YYYY)\""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"\\n\" + \"and/or time(HHmm) properly. Please try again.\""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"\\n\" + divider);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Checks and outputs all of the tasks that are due by a specific date."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @return output of chatbot"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @throws DukeException if input does not follow this format: \"items due by DD/MM/YYYY\""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected String checkBy(String input) throws DukeException {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            boolean hasResults \u003d false;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String info \u003d input.substring(13);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(info, dateFormat);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String output \u003d divider + \"\\n\" + \"Task(s) due by \" + date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"))"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \" :\" + \"\\n\";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            for (Task task : this.list) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                boolean isDeadlineAndEqualsDate \u003d task instanceof Deadline \u0026\u0026 ((Deadline) task).date.equals(date);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                boolean isEventAndEqualsDate \u003d task instanceof Event \u0026\u0026 ((Event) task).date.equals(date);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                if (isDeadlineAndEqualsDate || isEventAndEqualsDate) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    hasResults \u003d true;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    assert task.id \u003e 0 : \"item id cannot be 0 or negative!\";"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    output \u003d output + task + \"\\n\";"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (!hasResults) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                output \u003d output + \"- No tasks due on \" + date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"))"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        + \" -\\n\";"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            output \u003d output + divider;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new DukeException(\"\\n\" + divider + \"\\n\""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"Sorry, you did not enter a valid date (DD/MM/YYYY)! \""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"\\n\" + \"Please try again.\""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"\\n\" + divider);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Checks and outputs all of the task that are due before a specific date and/or time."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @return output of chatbot"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @throws DukeException if input does not follow this format: \"items due before DD/MM/YYYY\""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * or \"items due before DD/MM/YYYY HHmm\""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected String checkBefore(String input) throws DukeException {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            boolean hasResults \u003d false;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String info \u003d input.substring(17);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            DateTimeFormatter timeFormat \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (info.length() \u003c\u003d 10) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                // only consists of date"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                LocalDate date \u003d LocalDate.parse(info, dateFormat);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                String output \u003d divider + \"\\n\" + \"Task(s) due before \""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        + date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \" :\\n\";"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                for (Task task : this.list) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    boolean isDeadlineAndDue \u003d task instanceof Deadline \u0026\u0026 !((Deadline) task).date.isAfter(date);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    boolean isEventAndDue \u003d task instanceof Event \u0026\u0026 !((Event) task).date.isAfter(date);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    if (isDeadlineAndDue || isEventAndDue) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        hasResults \u003d true;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        assert task.id \u003e 0 : \"item id cannot be 0 or negative!\";"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        output \u003d output + task + \"\\n\";"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                if (!hasResults) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    output \u003d output + \"- No tasks due before \" + date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"))"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                            + \" -\\n\";"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                output \u003d output + divider;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                return output;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                // date + time"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                LocalDate date \u003d LocalDate.parse(info.split(\" \")[0], dateFormat);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                LocalTime time \u003d LocalTime.parse(info.split(\" \")[1], timeFormat);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                String output \u003d divider + \"\\n\" + \"Task(s) due before \""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        + date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"))"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        + \", \" + time.format(DateTimeFormatter.ofPattern(\"h:mma\")) + \" :\\n\";"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                for (Task task : this.list) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    boolean checkDate \u003d false;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    boolean checkTime \u003d false;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    boolean isDeadline \u003d task instanceof Deadline;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    if (isDeadline) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        checkDate \u003d !((Deadline) task).date.isAfter(date);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        checkTime \u003d ((Deadline) task).time !\u003d null"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                                \u0026\u0026 !((Deadline) task).time.isAfter(time);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    boolean isEvent \u003d task instanceof Event;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    if (isEvent) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        checkDate \u003d !((Event) task).date.isAfter(date);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        checkTime \u003d ((Event) task).endTime !\u003d null"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                                \u0026\u0026 !((Event) task).endTime.isAfter(time);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    if ((isDeadline || isEvent) \u0026\u0026 (checkDate \u0026\u0026 checkTime)) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        hasResults \u003d true;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        assert task.id \u003e 0 : \"item id cannot be 0 or negative!\";"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                        output \u003d output + task + \"\\n\";"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                if (!hasResults) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    output \u003d output + \"- No tasks due before \" + date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"))"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                            + \", \" + time.format(DateTimeFormatter.ofPattern(\"h:mma\")) + \" -\\n\";"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                output \u003d output + divider;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                return output;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new DukeException(\"\\n\" + divider + \"\\n\""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"Sorry, you did not enter a valid date (DD/MM/YYYY)\""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"\\n\" + \"and/or time (HHmm)! Please try again.\""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"\\n\" + divider);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Finds all tasks that contains the phrase given by the user\u0027s input."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @return output of chatbot"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @throws DukeException if input does not follow the proper search syntax"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected String find(String input) throws DukeException {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            boolean hasResults \u003d false;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String info \u003d input.substring(5);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            String output \u003d divider + \"\\n\" + \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            for (Task task : this.list) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                if (task.description.contains(info)) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    assert task.id \u003e 0 : \"id cannot be \u003c\u003d 0!\";"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    output \u003d output + task.id + \". \" + task + \"\\n\";"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    hasResults \u003d true;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (!hasResults) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                output \u003d output + \"- No results found -\\n\";"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            output \u003d output + divider;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            throw new DukeException(\"\\n\" + divider + \"\\n\""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"Sorry, you did not enter a search. Please try again.\""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                    + \"\\n\" + divider);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 437
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            stage.setTitle(\"Bob the Chatbot\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            Image icon \u003d new Image(this.getClass().getResourceAsStream(\"/images/icon.jpg\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            stage.getIcons().add(icon);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 32
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Bob.jpg\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        // Get the welcome message"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String response \u003d duke.getUi().hello();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 55
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * Parser deals with deciphering the user commands."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected ListOfItems listOfItems;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Constructor initialises a new Parser object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param list list of tasks"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public Parser(ListOfItems list) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.listOfItems \u003d list;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Handles the user input and direct the input to the respective method in ListOfItems."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * If it is not a valid command, a Duke Exception will be thrown."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @return output of chatbot"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected String run(String input) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                return listOfItems.getList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            } else if (input.contains(\"done\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                return listOfItems.doneItem(input);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            } else if (input.contains(\"delete\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                return listOfItems.deleteItem(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            } else if (input.contains(\"items due by\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                // check items due on a specific date"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                return listOfItems.checkBy(input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            } else if (input.contains(\"items due before\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                // check items due before a specific date + time"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                return listOfItems.checkBefore(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            } else if (input.contains(\"find\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                return listOfItems.find(input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                return listOfItems.addItem(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lerxcl": 47
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * Task is the parent class of To-do, Deadline, and Event."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected int id;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Constructor initialises a new Task object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param description describes the task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param id position of task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public Task(String description, int id) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Retrieves the icon for the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @return icon to determine whether task is completed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return (isDone ? \"✓\" : \"✘\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *  Marks a task as completed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 37
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * To-do is a type of Task, which has no specific due date/time."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Constructor that creates a new To-do."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param description describes the To-do"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param id position of the To-do"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public Todo(String description, int id) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        super(description, id);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return \"[T][\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 19
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " * Ui class deals with all of the interactions with the user."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected Parser parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected String divider \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Constructor creates an Ui object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @param parser parser object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public Ui(Parser parser) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Greets the user when the program starts."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @return hello message"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected String hello() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String intro \u003d \"Hello! I\u0027m Bob\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "                + \"What can I do for you?\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return divider + \"\\n\" + intro + \"\\n\" + divider;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Handles all of the user inputs and passes it to the parser."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @return output of chatbot"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected String run(String input) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        if (!input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return this.parser.run(input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "            return this.goodbye();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * Handles it when the user wants to exit the program."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     * @return goodbye message"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    protected String goodbye() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String message \u003d divider + \"\\n\" + \"Bye. Hope to see you again soon! :)\" + \"\\n\" + divider;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 51
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" graphicTextGap\u003d\"50.0\" style\u003d\"-fx-padding: 10; -fx-background-color: #38565c; -fx-background-radius: 10;\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" smooth\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 12
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Start typing here!\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: #282c34;\" text\u003d\"Send\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: #282c34;\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 19
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    // Overwrite \"stored.txt\" to start from clean slate"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private FileWriter fw \u003d new FileWriter(\"stored.txt\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private ListOfItems listOfItems \u003d new ListOfItems();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    private Parser parser \u003d new Parser(listOfItems);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    public DukeTest() throws IOException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    void testTodo() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        parser.run(\"todo a\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String result \u003d listOfItems.list.get(0).toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertEquals(\"[T][✘] a\", result);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        parser.run(\"delete 1\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    void testDeadlineDate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        parser.run(\"deadline hw /by 11/11/2020\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String result \u003d listOfItems.list.get(0).toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertEquals(\"[D][✘] hw (by 11 Nov 2020)\", result);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        parser.run(\"delete 1\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    void testDeadlineDateTime() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        parser.run(\"deadline hw /by 11/11/2020 2359\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String result \u003d listOfItems.list.get(0).toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertEquals(\"[D][✘] hw (by 11 Nov 2020, 11:59PM)\", result);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        parser.run(\"delete 1\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    void testEvent() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        parser.run(\"event meeting /from 12/12/2020 1000-1200\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String result \u003d listOfItems.list.get(0).toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertEquals(\"[E][✘] meeting (from 12 Dec 2020, 10:00AM - 12:00PM)\", result);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        parser.run(\"delete 1\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    void testDone() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        parser.run(\"todo a\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        parser.run(\"done 1\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        String result \u003d listOfItems.list.get(0).toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        assertEquals(\"[T][✓] a\", result);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "        parser.run(\"delete 1\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 58
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "lalala"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "todo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "todo App"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "deadline HW"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "deadline HW /by Thursday"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "event"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "event Meeting"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "event Meeting /on Tuesday 10am"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "done 1 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 19
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lerxcl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lerxcl"
        },
        "content": "PAUSE"
      }
    ],
    "authorContributionMap": {
      "lerxcl": 3,
      "-": 20
    }
  }
]
