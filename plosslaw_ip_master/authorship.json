[
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "0 T fsdjafk"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "1 D ffjidsafjo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "2020-01-01"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "0 E birthday"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "2020-04-03"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 5
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private String dueDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private String dueDateInSaveFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private Deadline(String name, String dueDate, String dueDateInSaveFormat) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        this.dueDateInSaveFormat \u003d dueDateInSaveFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static Deadline createDeadline(String name, String dueDate) throws DukeException{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        LocalDate localDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            localDate \u003d LocalDate.parse(dueDate);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new DukeException(\"Please specify the due date as follows: yyyy-mm-dd\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return new Deadline(name,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                localDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")), dueDate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public String returnMissingNameError() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return \"The description of a deadline task cannot be empty.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public String toSaveDataFormat() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String saveData \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        saveData +\u003d this.isDone ? 1 : 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        saveData +\u003d \" D \" + this.name + \"\\n\" + this.dueDateInSaveFormat;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return saveData;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String marked \u003d this.isDone ? \"[✓] \" : \"[✗] \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String eventTime \u003d this.dueDate.length() \u003e 0 ? \" (by: \" + this.dueDate + \")\" : \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return \"[D]\" + marked + this.name + eventTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 46
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private final String VERSION_NUMBER \u003d \"1.0.0\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private final Scanner SC \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private final Path DUKE_DATA_FILE_PATH \u003d Paths.get(\"data\", \"duke.txt\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private final Path DUKE_DATA_DIR_PATH \u003d Paths.get(\"data\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private final String NEW_LINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private final String HORIZONTAL_LINE \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private final String PADDING \u003d \"      \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private enum Commands {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        EXIT(\"BYE\"), DELETE(\"DELETE \"), LIST(\"LIST\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        DONE(\"DONE \"), TODO(\"TODO \"), EVENT(\"EVENT \"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        DEADLINE(\"DEADLINE \"), DELETEALL(\"DELETE ALL\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        private final String str;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        Commands(String str){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            this.str \u003d str;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        public String getString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            return this.str;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private final String MESSAGE_TEMPLATE \u003d HORIZONTAL_LINE + NEW_LINE + PADDING + \"%s\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + NEW_LINE + HORIZONTAL_LINE + NEW_LINE + NEW_LINE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private final String MESSAGE_TEMPLATE_VERBAL \u003d HORIZONTAL_LINE + NEW_LINE + PADDING + \"Deuk: %s\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + NEW_LINE + HORIZONTAL_LINE + NEW_LINE + NEW_LINE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private final String MESSAGE_TEMPLATE_ERROR \u003d HORIZONTAL_LINE + NEW_LINE + PADDING"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + \"☹ OOPS!!! %s\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + NEW_LINE + HORIZONTAL_LINE + NEW_LINE + NEW_LINE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private final List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        sayHello();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            loadTasksFromDisk();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        } catch (DukeDataFolderException ex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            printError(ex.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            File dir \u003d new File(DUKE_DATA_DIR_PATH.toUri());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            Boolean isCreated \u003d dir.mkdir();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            if (isCreated) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                echoBack(\"Successfully created Deuk Data Folder\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    FileWriter fw \u003d new FileWriter(DUKE_DATA_FILE_PATH.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    fw.close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                } catch (IOException err) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    printError(err.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                printError(\"Failed to create Deuk Data Folder\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            printError(ex.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            printError(\"Missing Deuk Data File!\" + NEW_LINE + PADDING + \"Creating new Deuk Data File...\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            );"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                FileWriter fw \u003d new FileWriter(DUKE_DATA_FILE_PATH.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                fw.close();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            } catch (IOException err) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                printError(err.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            if (SC.hasNext()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                String input \u003d SC.nextLine().trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                if (input.toUpperCase().equals(Commands.EXIT.getString())) { // to make command case-insensitive"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    sayGoodbye();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                if (input.toUpperCase().equals(Commands.LIST.getString())) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    displayStorageList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                } else if (input.length() \u003e\u003d 5 \u0026\u0026 input.substring(0,5).toUpperCase().equals(Commands.DONE.getString())) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        int index \u003d Integer.parseInt(input.substring(5).trim());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        setTaskDone(index);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        printError(\"Please input an Integer for the \\\"Done\\\" command.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    } catch (DukeException ex) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        printError(ex.getMessage());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                } else if (input.toUpperCase().equals(Commands.DELETEALL.getString())) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        deleteAllTasks();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    } catch (DukeException ex) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        printError(ex.getMessage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                } else if (input.length() \u003e\u003d 7 \u0026\u0026 input.substring(0,7).toUpperCase().equals(Commands.DELETE.getString())) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        int index \u003d Integer.parseInt(input.substring(7).trim());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        deleteTask(index);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        printError(\"Please input an Integer for the \\\"Delete\\\" command.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    } catch (DukeException ex) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        printError(ex.getMessage());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                } else if (input.length() \u003e\u003d 5 \u0026\u0026 input.substring(0,5).toUpperCase().equals(Commands.TODO.getString())) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        String name \u003d input.substring(5).trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        addToStorageList(Todo.createTodo(name));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    } catch (DukeException ex) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        printError(ex.getMessage());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                } else if (input.length() \u003e\u003d 6 \u0026\u0026 input.substring(0,6).toUpperCase().equals(Commands.EVENT.getString())) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        int limiterPosition \u003d input.indexOf(\" /at \");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        String name;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        String timing;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        if (limiterPosition !\u003d -1) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                            name \u003d input.substring(6, limiterPosition).trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                            timing \u003d input.substring(limiterPosition + 5).trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                            throw new DukeException(\"Missing date for Event task\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        addToStorageList(Event.createEvent(name, timing));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    } catch (DukeException ex) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        printError(ex.getMessage());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                } else if (input.length() \u003e\u003d 9 \u0026\u0026 input.substring(0,9).toUpperCase().equals(Commands.DEADLINE.getString())) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        int limiterPosition \u003d input.indexOf(\" /by \");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        String name;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        String dueDate;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        if (limiterPosition !\u003d -1) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                            name \u003d input.substring(9, limiterPosition).trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                            dueDate \u003d input.substring(limiterPosition + 5).trim();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                            throw new DukeException(\"Missing deadline for Deadline task\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        addToStorageList(Deadline.createDeadline(name, dueDate));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    } catch (DukeException ex) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                        printError(ex.getMessage());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    printError(\"Sorry I don\u0027t know what that means :(\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private void echoBack(String message) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        System.out.printf(MESSAGE_TEMPLATE_VERBAL, message);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private void addToStorageList(Task obj) throws DukeException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        if (obj.getName().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new DukeException(obj.returnMissingNameError());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        this.taskList.add(obj);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String numOfTasks \u003d this.taskList.size() \u003d\u003d 1 ? \"1 task\" : this.taskList.size() + \" tasks\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String message \u003d \"Got it. I\u0027ve added the following task: \" + NEW_LINE"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                + PADDING + \"  \" + obj.toString() + NEW_LINE"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                + PADDING + \"Now you have \"  + numOfTasks + \" in total.\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        System.out.printf(MESSAGE_TEMPLATE, message);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private void displayStorageList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        if (this.taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            System.out.printf(MESSAGE_TEMPLATE, \"Your list is empty, try adding some tasks to it\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String output \u003d \"You have the following tasks in your list:\" + NEW_LINE;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        for (Task ele: this.taskList) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            output +\u003d PADDING + counter + \". \" + ele.toString() + NEW_LINE;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        output \u003d output.substring(0, output.length()-1);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        System.out.printf(MESSAGE_TEMPLATE, output);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private void setTaskDone(int index) throws DukeException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        if (index \u003c\u003d 0 || index \u003e this.taskList.size()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new DukeException(\"Invalid index, cannot find task.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        this.taskList.get(index-1).setDoneness(true);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String message \u003d \"Nice job! I\u0027ll mark that as done:\" + NEW_LINE + PADDING"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                + \"  \" + this.taskList.get(index-1).toString();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        System.out.printf(MESSAGE_TEMPLATE, message);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private void deleteTask(int index) throws DukeException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        if (index \u003c\u003d 0 || index \u003e this.taskList.size()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new DukeException(\"Invalid index, cannot find task.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        Task task \u003d this.taskList.get(index-1);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        this.taskList.remove(index-1);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String numOfTasks \u003d this.taskList.size() \u003d\u003d 1 ? \"1 task\" : this.taskList.size() + \" tasks\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String message \u003d \"Noted. The following task has been removed:\""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                + NEW_LINE + PADDING + \"  \" + task.toString() + NEW_LINE"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                + PADDING + \"Now you have \"  + numOfTasks + \" left.\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        System.out.printf(MESSAGE_TEMPLATE, message);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private void deleteAllTasks() throws DukeException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        if (this.taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new DukeException(\"Your list is already empty.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        this.taskList.clear();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String message \u003d \"Noted. All tasks have been removed.\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        System.out.printf(MESSAGE_TEMPLATE, message);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private void loadTasksFromDisk() throws FileNotFoundException, DukeException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        File dukeDataFile \u003d new File(DUKE_DATA_FILE_PATH.toUri());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        if (Files.notExists(DUKE_DATA_DIR_PATH)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new DukeDataFolderException(\"Missing Deuk Data Folder!\" + NEW_LINE + PADDING +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    \"Creating new Deuk Data Folder...\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            );"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        Scanner fs \u003d new Scanner(dukeDataFile);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        while (fs.hasNext()) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            String taskString \u003d fs.nextLine();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            Scanner sc \u003d new Scanner(taskString);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            Boolean isDone \u003d sc.nextInt() \u003d\u003d 1;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            String taskType \u003d sc.next();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            String taskName \u003d sc.next();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            if (taskType.equals(\"T\")) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                task \u003d Todo.createTodo(taskName);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            } else if (taskType.equals(\"D\")) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                String dueDate \u003d fs.nextLine();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                task \u003d Deadline.createDeadline(taskName, dueDate);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            } else if (taskType.equals(\"E\")) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                String timing \u003d fs.nextLine();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                task \u003d Event.createEvent(taskName, timing);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                throw new DukeException(\"Save file corrupted!\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            task.setDoneness(isDone);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            this.taskList.add(task);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "//        System.out.println(\"full path: \" + dukeDataFile.getAbsolutePath());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "//        System.out.println(\"file exists?: \" + dukeDataFile.exists());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "//        System.out.println(\"is Directory?: \" + dukeDataFile.isDirectory());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private void saveTasksToDisk() throws IOException {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        // TODO: check dirty flag before saving to disk"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        FileWriter fw \u003d new FileWriter(DUKE_DATA_FILE_PATH.toString());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String tasksString \u003d \"\";"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        for (Task task : this.taskList) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            tasksString +\u003d task.toSaveDataFormat() + NEW_LINE;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        fw.write(tasksString);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private void printError(String error) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        System.out.printf(MESSAGE_TEMPLATE_ERROR, error);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private void sayGoodbye() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            saveTasksToDisk();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            printError(ex.getMessage());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        System.out.printf(MESSAGE_TEMPLATE_VERBAL, \"Goodbye, hope to see you again!\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private void sayHello() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String logo \u003d"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                  \"     _____             _    \\n\""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                + \"    |  __ \\\\           | |   \\n\""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                + \"    | |  | | ___ _   _| | __\\n\""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                + \"    | |  | |/ _ \\\\ | | | |/ /\\n\""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                + \"    | |__| |  __/ |_| |   \u003c \\n\""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                + \"    |_____/ \\\\___|\\\\__,_|_|\\\\_\\\\  v\" + VERSION_NUMBER + \"\\n\";"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String introMessage \u003d \"I\u0027m Deuk, nice to meet you\\n\" + PADDING +"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                \"How can I be of service today?\";"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        System.out.printf(logo + MESSAGE_TEMPLATE_VERBAL, introMessage);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        new Duke().init();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 290,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeDataFolderException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "public class DukeDataFolderException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    DukeDataFolderException(String errorMessage) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 5
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 5
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private String timing;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private String timingInSaveFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private Event(String name, String timing, String timingInSaveFormat) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        this.timing \u003d timing;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        this.timingInSaveFormat \u003d timingInSaveFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static Event createEvent(String name, String timing) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        LocalDate localDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            localDate \u003d LocalDate.parse(timing);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new DukeException(\"Please specify the date as follows: yyyy-mm-dd\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return new Event(name,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                localDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")), timing);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public String returnMissingNameError() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return \"The description of an event task cannot be empty.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public String toSaveDataFormat() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String saveData \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        saveData +\u003d this.isDone ? 1 : 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        saveData +\u003d \" E \" + this.name + \"\\n\" + this.timingInSaveFormat;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return saveData;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String marked \u003d this.isDone ? \"[✓] \" : \"[✗] \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String eventTime \u003d this.timing.length() \u003e 0 ? \" (at: \" + this.timing + \")\" : \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return \"[E]\" + marked + this.name + eventTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 46
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 2
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private static final Path DUKE_DATA_FILE_PATH \u003d Paths.get(\"data\", \"duke.txt\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private static final Path DUKE_DATA_DIR_PATH \u003d Paths.get(\"data\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private static final String NEW_LINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private static final String PADDING \u003d \"      \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static void loadTasksFromDisk(List\u003cTask\u003e taskList) throws FileNotFoundException, DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        File dukeDataFile \u003d new File(DUKE_DATA_FILE_PATH.toUri());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        if (Files.notExists(DUKE_DATA_DIR_PATH)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            throw new DukeDataFolderException(\"Missing Deuk Data Folder!\" + NEW_LINE + PADDING +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                    \"Creating new Deuk Data Folder...\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            );"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        Scanner fs \u003d new Scanner(dukeDataFile);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        while (fs.hasNext()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            String taskString \u003d fs.nextLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            Scanner sc \u003d new Scanner(taskString);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            Boolean isDone \u003d sc.nextInt() \u003d\u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            String taskType \u003d sc.next();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            String taskName \u003d sc.next();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            if (taskType.equals(\"T\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                task \u003d Todo.createTodo(taskName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            } else if (taskType.equals(\"D\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                String dueDate \u003d fs.nextLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                task \u003d Deadline.createDeadline(taskName, dueDate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            } else if (taskType.equals(\"E\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                String timing \u003d fs.nextLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                task \u003d Event.createEvent(taskName, timing);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "                throw new DukeException(\"Save file corrupted!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            task.setDoneness(isDone);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            taskList.add(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "//        System.out.println(\"full path: \" + dukeDataFile.getAbsolutePath());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "//        System.out.println(\"file exists?: \" + dukeDataFile.exists());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "//        System.out.println(\"is Directory?: \" + dukeDataFile.isDirectory());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static void saveTasksToDisk(List\u003cTask\u003e taskList) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        // TODO: check dirty flag before saving to disk"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        FileWriter fw \u003d new FileWriter(DUKE_DATA_FILE_PATH.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String tasksString \u003d \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            tasksString +\u003d task.toSaveDataFormat() + NEW_LINE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        fw.write(tasksString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 62
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    protected final String name;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    protected Boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    protected Task(String name) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void setDoneness(Boolean isDone) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return String.valueOf(this.name);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public String returnMissingNameError() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return \"The description of a task cannot be empty.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public String toSaveDataFormat() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String saveData \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        saveData +\u003d this.isDone ? 1 : 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        saveData +\u003d \" A \" + this.name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return saveData;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String marked \u003d this.isDone ? \"[✓] \" : \"[✗] \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return marked + this.name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 32
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private final List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void addTask() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void deleteTask() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void deleteAllTasks() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void displayTasks() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public void setTaskDone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 26
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "public class Todo extends Task{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private Todo(String name) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static Todo createTodo(String name) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return new Todo(name);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public String returnMissingNameError() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return \"The description of a todo task cannot be empty.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public String toSaveDataFormat() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String saveData \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        saveData +\u003d this.isDone ? 1 : 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        saveData +\u003d \" T \" + this.name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return saveData;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        String marked \u003d this.isDone ? \"[✓] \" : \"[✗] \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "        return \"[T]\" + marked + this.name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 30
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private final String NEW_LINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private final String HORIZONTAL_LINE \u003d"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private final String PADDING \u003d \"      \";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private final String MESSAGE_TEMPLATE \u003d HORIZONTAL_LINE + NEW_LINE + PADDING + \"%s\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + NEW_LINE + HORIZONTAL_LINE + NEW_LINE + NEW_LINE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private final String MESSAGE_TEMPLATE_VERBAL \u003d HORIZONTAL_LINE + NEW_LINE + PADDING + \"Deuk: %s\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + NEW_LINE + HORIZONTAL_LINE + NEW_LINE + NEW_LINE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    private final String MESSAGE_TEMPLATE_ERROR \u003d HORIZONTAL_LINE + NEW_LINE + PADDING"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + \"☹ OOPS!!! %s\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "            + NEW_LINE + HORIZONTAL_LINE + NEW_LINE + NEW_LINE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static void print(String msg) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static void printError(String errMsg) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    public static void printVerbal(String msg) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 26
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "blah"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "todoffjslfsdj"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "todo make tea"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "event party"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "deadline homework"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "event birthday party /at 9 April 2020"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "deadline homework /by 13 Aug 2020 2359"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "done fdjsfklsd"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "delete 9"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "delete fdjsfds"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "delete all"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 18
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "plosslaw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "plosslaw"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "plosslaw": 3,
      "-": 20
    }
  }
]
