[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00276.0.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    mainClassName \u003d \"rogue.Launcher\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    archiveBaseName \u003d \"rogue\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 19,
      "-": 42
    }
  },
  {
    "path": "src/main/java/rogue/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Launcher for {@code Rogue}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 12
    }
  },
  {
    "path": "src/main/java/rogue/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * The entry point of {@code Rogue} to initialize the GUI."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** The path of the file to which {@code Rogue} will save its data. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String DEFAULT_SAVE_FILE_PATH \u003d \"./data/tasks.txt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Rogue rogue \u003d new Rogue(DEFAULT_SAVE_FILE_PATH);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        stage.setTitle(\"Rogue\"); // Sets title for the window"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Ui.init(stage, rogue);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 21
    }
  },
  {
    "path": "src/main/java/rogue/Rogue.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.report.Report;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.logic.directives.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.logic.directives.exceptions.ExecutionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.logic.parser.exceptions.IncorrectInputException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.storage.exceptions.StorageException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * The chat-bot {@code Rogue}. Consists of three main elements: the {@code Storage},"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * the {@code TaskList}, and the {@code Ui}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class Rogue {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs {@code Rogue}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Loads data from the file at the given path."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The data is used to recreate the tasks if it is successfully parsed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Otherwise, an empty {@code TaskList} is used instead."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param filePath The relative or absolute path where persistent information is stored."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Rogue(String filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        storage \u003d Storage.init(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } catch (StorageException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            // TBD: should let user know that file is not loaded successfully"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Parses a user input."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * A valid input is executed by {@code Rogue} and an appropriate response"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * will be generated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * An invalid input or a failed execution of valid input will result in"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * an error message."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param input The user input to parse."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return A response from {@code Rogue}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            Executable e \u003d Parser.createExe(input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            assert e !\u003d null : \"A parser must create an executable!\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            Report r \u003d e.execute(storage, tasks, ui);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            assert r !\u003d null : \"An executable must generate a report!\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return r.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } catch (IncorrectInputException | ExecutionException | StorageException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 70
    }
  },
  {
    "path": "src/main/java/rogue/commons/util/DateTimeUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Utility class to manage dates and times."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DateTimeUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Parses a date string of format \"dd-MM-yyyy\" into a {@code LocalDate} object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param dateString The date string."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return {@LocalDate} matching the date provided"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws DateTimeParseException when the given date string does not conform to the format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static LocalDate parseStringToDate(String dateString) throws DateTimeParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return LocalDate.parse(dateString, formatter);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 23
    }
  },
  {
    "path": "src/main/java/rogue/logic/directives/AddDirective.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.logic.directives;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.logic.directives.exceptions.ExecutionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.argument.Action;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.report.Report;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.task.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.storage.exceptions.StorageException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Adds a {@code Task} to the {@code TaskList}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class AddDirective implements Executable {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Message for when the action does not match any valid task. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String ERROR_INVALID_TASK \u003d \"Stop trying to fool me.\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \" Such a task cannot be added.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Message upon adding a {@code Task} successfully. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String MESSAGE_ADD_SUCCESS \u003d \"Since you\u0027re so helpless, I\u0027ll remember \\\"%s\\\" for you.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"You have made me remember %d task(s).\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final Action action;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs an {@code AddDirective}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param action        The type of {@code Task} to add."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param description   The description of the {@code Task}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public AddDirective(Action action, String description) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.date \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs an {@code AddDirective}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param action        The type of {@code Task} to add."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param description   The description of the {@code Task}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param date          The date of the {@code Deadline} or {@code Event}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public AddDirective(Action action, String description, LocalDate date) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Adds a {@code Todo}, {@code Deadline}, or {@code Event} to the {@code TaskList}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Which {@code Task} is added depends on the {@code Action}: {@code Action.ADD_TODO},"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code Action.ADD_DEADLINE}, and {@code Action.ADD_EVENT} respectively."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * All {@code Task} are then saved to {@code Storage}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param storage   An instance of {@code Storage}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param tasks     The {@code TaskList} to which a {@code Task} is added."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param ui        An instance of {@code Ui}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return A {@code Report} with a success message"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws StorageException if data cannot be saved to file."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Report execute(Storage storage, TaskList tasks, Ui ui)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throws ExecutionException, StorageException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert description !\u003d null : \"The description for a task cannot be null.\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        switch (action) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case ADD_TODO:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            task \u003d new Todo(description);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case ADD_DEADLINE:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            task \u003d new Deadline(description, date);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case ADD_EVENT:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            task \u003d new Event(description, date);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new ExecutionException(ERROR_INVALID_TASK); // Should not be reached"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        storage.save(tasks.getTaskList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new Report(String.format(MESSAGE_ADD_SUCCESS, task, tasks.count()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 101
    }
  },
  {
    "path": "src/main/java/rogue/logic/directives/DeleteDirective.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.logic.directives;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.report.Report;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.logic.directives.exceptions.ExecutionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.storage.exceptions.StorageException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Deletes a {@code Task} from the {@code TaskList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DeleteDirective implements Executable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Message for when index is invalid. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String ERROR_INCORRECT_INDEX \u003d \"Stop trying to fool me. Task #%d does not exist.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Message upon deleting a {@code Task} successfully. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String MESSAGE_DELETE_SUCCESS \u003d \"Great! One fewer thing to remember: %s\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"I still need to remember %d task(s).\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs a {@code DeleteDirective}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param index The index of the {@code Task} to delete."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public DeleteDirective(int index) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Deletes a {@code Task} from the {@code TaskList}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * All {@code Task} are then saved to {@code Storage}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param storage   An instance of {@code Storage}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param tasks     The {@code TaskList} from which a {@code Task} is deleted."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param ui        An instance of {@code Ui}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return A {@code Report} with a success message"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws ExecutionException if the index does not match any {@code Task} in the {@code TaskList}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws StorageException if data cannot be saved to file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Report execute(Storage storage, TaskList tasks, Ui ui)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throws ExecutionException, StorageException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            Task deletedTask \u003d tasks.delete(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            assert deletedTask !\u003d null : \"Deleted task cannot be null!\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            storage.save(tasks.getTaskList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new Report(String.format(MESSAGE_DELETE_SUCCESS, deletedTask.toString(), tasks.count()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new ExecutionException(String.format(ERROR_INCORRECT_INDEX, index + 1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 60
    }
  },
  {
    "path": "src/main/java/rogue/logic/directives/DoneDirective.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.logic.directives;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.report.Report;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.logic.directives.exceptions.ExecutionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.storage.exceptions.StorageException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Marks a {@code Task} as complete."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DoneDirective implements Executable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Message for when index is invalid. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String ERROR_INCORRECT_INDEX \u003d \"Stop trying to fool me. Task #%d does not exist.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Message for when {@code Task} is marked as done successfully. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String MESSAGE_DONE_SUCCESS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            \"Finally, I fell asleep while waiting for you to finish: %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs a {@code DoneDirective}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param index The index of the {@code Task} to mark as done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public DoneDirective(int index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Marks a {@code Task} from the {@code TaskList} as complete."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param storage   An instance of {@code Storage}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param tasks     The {@code TaskList} from which a {@code Task} is marked as complete."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param ui        An instance of {@code Ui}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return A {@code Report} with a success message"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws ExecutionException if the index provided is invalid."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws StorageException if data cannot be saved to file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Report execute(Storage storage, TaskList tasks, Ui ui)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throws ExecutionException, StorageException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            tasks.get(index).markAsDone();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            assert tasks.get(index).isDone() : \"The task must be marked as done!\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            storage.save(tasks.getTaskList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new Report(String.format(MESSAGE_DONE_SUCCESS, tasks.get(index).toString()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new ExecutionException(String.format(ERROR_INCORRECT_INDEX, index + 1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 57
    }
  },
  {
    "path": "src/main/java/rogue/logic/directives/Executable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.logic.directives;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.report.Report;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.logic.directives.exceptions.ExecutionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.storage.exceptions.StorageException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Represents an action that can be executed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public interface Executable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Gets {@code Rogue} to execute an action."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param storage   An instance of {@code Storage}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param tasks     An instance of {@code TaskList}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param ui        An instance of {@code Ui}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return A {@code Report} containing a message"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws ExecutionException when incorrect parameters are provided for an {@code Action}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws StorageException if data cannot be saved to file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    Report execute(Storage storage, TaskList tasks, Ui ui) throws ExecutionException, StorageException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 25
    }
  },
  {
    "path": "src/main/java/rogue/logic/directives/FindDirective.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.logic.directives;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.report.Report;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Finds {@code Task} from the {@code TaskList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class FindDirective implements Executable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Message for when the search yields no results. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String MESSAGE_FIND_FAILURE \u003d \"Of course nothing is found. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"Don\u0027t you even remember the tasks you added?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Message for when there is at least one search result. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String MESSAGE_FIND_SUCCESS \u003d \"What? Is nap time over? Here are your tasks then:\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final String description; // Defaults to \"\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final int numOfDays; // Defaults to maximum value of integer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs a {@code FindDirective}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Searches for tasks using their descriptions. Matches all tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * that have the search term in their descriptions."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param description The search term."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public FindDirective(String description) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.numOfDays \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs a {@code FindDirective}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Searches for tasks using their dates. Matches all tasks that are due"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * in a certain number of days (relative to system date)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param numOfDays The number of days."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public FindDirective(int numOfDays) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.description \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.numOfDays \u003d numOfDays;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs a {@code FindDirective}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Searches for tasks using both their descriptions and dates."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Matches all tasks that have the search term in their descriptions"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * and are due in a certain number of days (relative to system date)."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param description   The search term."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param numOfDays     The number of days (from system date)."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public FindDirective(String description, int numOfDays) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.numOfDays \u003d numOfDays;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Finds {@code Task} with descriptions containing the search term."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param storage   An instance of {@code Storage}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param tasks     The {@code TaskList} to search for matching {@code Task}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param ui        An instance of {@code Ui}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return A {@code Report} containing the tasks that match the search"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Report execute(Storage storage, TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        boolean hasDescription \u003d !description.equals(\"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        boolean hasDay \u003d numOfDays !\u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert hasDescription || hasDay : \"At least one search condition must be present!\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        TaskList searchResults;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (hasDescription \u0026\u0026 hasDay) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            searchResults \u003d tasks.searchByDescription(description)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    .searchByDays(numOfDays);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } else if (hasDay) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            searchResults \u003d tasks.searchByDays(numOfDays);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            searchResults \u003d tasks.searchByDescription(description);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (searchResults.getTaskList().isEmpty()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new Report(MESSAGE_FIND_FAILURE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return generateReport(searchResults.getTaskList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Report generateReport(List\u003cTask\u003e matchingTasks) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(String.format(MESSAGE_FIND_SUCCESS, description));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(\"\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        for (Task task : matchingTasks) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            builder.append(task);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            builder.append(\"\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new Report(builder.toString().trim());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 111
    }
  },
  {
    "path": "src/main/java/rogue/logic/directives/HelpDirective.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.logic.directives;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.report.Report;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Displays a set of instructions for the user to learn how to use {@code Rogue}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class HelpDirective implements Executable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Shows available actions and options that can be taken by {@code Rogue}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param storage   An instance of {@code Storage}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param tasks     The {@code TaskList} from which {@code Task} should be listed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param ui        An instance of {@code Ui}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return A {@code Report} with a list of actions and their options"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Report execute(Storage storage, TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(\"Only because you begged:\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(\"\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(\"Input format: Description\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(\"An option marked ![] is mandatory, and *[] optional.\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(\"\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(\"1. help: lists all available actions and their options.\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(\"2. todo ![/d description_String]: adds a ToDo with a description\\n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(\"3. event ![/d description_String] ![/at date_dd-MM-yyyy]: adds an event\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + \" with a description and date.\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(\"4. deadline ![/d description_String] ![/by date_dd-MM-yyyy]: adds a deadline\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + \" with a description and date.\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(\"5. list: displays all stored tasks.\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(\"6. delete ![/i index_int]: deletes the task with specified index.\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(\"7. done ![/i index_int]: marks the task with specified index as done.\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(\"8. find *[/d description_String] *[/days numOfDays_int]: searches for tasks\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + \" that match the description or is due in specified number of days;\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + \" both options can be combined for AND-search ; at least one option is needed.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new Report(builder.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 46
    }
  },
  {
    "path": "src/main/java/rogue/logic/directives/ListDirective.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.logic.directives;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.report.Report;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Lists all stored {@code Task} within the {@code TaskList}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class ListDirective implements Executable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Lists the {@code Task} in the {@code TaskList}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param storage   An instance of {@code Storage}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param tasks     The {@code TaskList} from which {@code Task} should be listed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param ui        An instance of {@code Ui}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return A {@code Report} with a list of {@code Task}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Report execute(Storage storage, TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(\"Do you really need me to name them out for you?\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(\"\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        for (Task task : tasks.getTaskList()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            builder.append(String.format(\"%d. %s\\n\", ++i, task));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new Report(builder.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 34
    }
  },
  {
    "path": "src/main/java/rogue/logic/directives/exceptions/ExecutionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.logic.directives.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Represents an error when the an {@code Executable} cannot be executed"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * successfully."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class ExecutionException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ExecutionException(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 11
    }
  },
  {
    "path": "src/main/java/rogue/logic/parser/AddDirectiveParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.logic.parser.exceptions.IncorrectInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.logic.directives.AddDirective;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.argument.Action;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.argument.Argument;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Parses user inputs into an {@code AddDirective}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class AddDirectiveParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Option to add a description to a {@code Task}. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String OPTION_DESCRIPTION \u003d \"/d\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Option to add a date and time to a {@code Deadline}. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String OPTION_DEADLINE_DATETIME \u003d \"/by\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Option to add a date and time to an {@code Event}. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String OPTION_EVENT_DATETIME \u003d \"/at\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Message for when the description is missing. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String ERROR_MISSING_DESC \u003d \"Stop trying to fool me. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"A task must be followed by a description.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Message for when the date is missing from a datetime. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String ERROR_MISSING_DATE \u003d \"Stop trying to fool me.\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \" The date must come right after \\\"%s\\\".\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Message for when the format of the dead is incorrect. */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String ERROR_INCORRECT_DATE_FORMAT \u003d \"Stop trying to fool me.\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \" The date must be in dd-MM-yyyy format.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Message for when the action does not match any valid task. */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String ERROR_INVALID_TASK \u003d \"Stop trying to fool me.\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \" Such a task cannot be added.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates an {@code AddDirective} for a {@code Task}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * OPTION_DESCRIPTION: the description of a {@code Task}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * OPTION_DEADLINE_DATETIME: the datetime for a {@code Deadline}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * OPTION_EVENT_DATETIME: the datetime for an {@code Event}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param args The action and options to be parsed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return An {@code AddDirective} for the requested {@code Task}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws IncorrectInputException if no task description or an invalid action is provided."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public AddDirective parse(Argument args) throws IncorrectInputException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String description \u003d args.getOptionValue(OPTION_DESCRIPTION);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new IncorrectInputException(ERROR_MISSING_DESC);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        switch (args.getAction()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case ADD_TODO:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new AddDirective(Action.ADD_TODO, description);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case ADD_DEADLINE:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return parseDeadline(description, args);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case ADD_EVENT:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return parseEvent(description, args);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new IncorrectInputException(ERROR_INVALID_TASK); // Should not be reached"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private AddDirective parseDeadline(String description, Argument args) throws IncorrectInputException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String dateString \u003d args.getOptionValue(OPTION_DEADLINE_DATETIME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (dateString.equals(\"\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new IncorrectInputException(String.format(ERROR_MISSING_DATE, OPTION_DEADLINE_DATETIME));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            LocalDate by \u003d DateTimeUtil.parseStringToDate(dateString);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new AddDirective(Action.ADD_DEADLINE, description, by);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new IncorrectInputException(ERROR_INCORRECT_DATE_FORMAT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private AddDirective parseEvent(String description, Argument args) throws IncorrectInputException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String dateString \u003d args.getOptionValue(OPTION_EVENT_DATETIME);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (dateString.equals(\"\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new IncorrectInputException(String.format(ERROR_MISSING_DATE, OPTION_EVENT_DATETIME));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            LocalDate at \u003d DateTimeUtil.parseStringToDate(dateString);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new AddDirective(Action.ADD_EVENT, description, at);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new IncorrectInputException(ERROR_INCORRECT_DATE_FORMAT);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 107
    }
  },
  {
    "path": "src/main/java/rogue/logic/parser/ArgumentParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.logic.parser.exceptions.IncorrectInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.argument.Action;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.argument.Argument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Validates user inputs and separates them into an {@code Action}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * and its options."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class ArgumentParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** A valid input follows the pattern {@code \u003ccommand\u003e /\u003coption1\u003e \u003cvalue1\u003e (/\u003coption2\u003e \u003cvalue2\u003e...)} */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Pattern PATTERN_VALID_INPUT \u003d Pattern.compile(\"\\\\s*([\\\\w\\\\s-]+)\\\\s*(?:/.+)*\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** An option-value pair follows the pattern {@code /\u003coption\u003e \u003cvalue\u003e}. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Pattern PATTERN_OPTIONS \u003d Pattern.compile(\"(/[\\\\w-]+)\\\\s+([^/]+)\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Message for empty or invalid user inputs. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String ERROR_INVALID_INPUT \u003d \"Do you not know the commands?\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \" I could consider telling you if you begged for help.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Parses the input into an {@code Action} and its corresponding options."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return The arguments for an {@code Executable}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws IncorrectInputException when the user input is empty or does not conform to the pattern."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static Argument parseArgs(String input) throws IncorrectInputException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Matcher inputMatcher \u003d PATTERN_VALID_INPUT.matcher(input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Empty or invalid input from user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!inputMatcher.matches()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new IncorrectInputException(ERROR_INVALID_INPUT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Matcher argsMatcher \u003d PATTERN_OPTIONS.matcher(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert inputMatcher.group(1) !\u003d null : \"The action cannot be null!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Action action \u003d Action.getAction(inputMatcher.group(1).trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Map\u003cString, String\u003e optionValueMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Capture all option-value pairs"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        while (argsMatcher.find()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            // Group 1 should contain the option, and group 2 the value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            optionValueMap.put(argsMatcher.group(1).trim(), argsMatcher.group(2).trim());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new Argument(action, optionValueMap);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 57
    }
  },
  {
    "path": "src/main/java/rogue/logic/parser/DeleteDirectiveParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.logic.directives.DeleteDirective;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.logic.parser.exceptions.IncorrectInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.argument.Argument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Parses user inputs into a {@code DeleteDirective}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DeleteDirectiveParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Option to select the index of a {@code Task} from the {@code TaskList}. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String OPTION_INDEX \u003d \"/i\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Message for when the index is missing. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String ERROR_INCORRECT_INDEX \u003d \"Stop trying to fool me. The \\\"delete\\\" command\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \" must be followed by the index of the task.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates a {@code DeleteDirective} for a {@code Task}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * OPTION_INDEX: the index of the {@code Task} to delete."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param args The action and options to be parsed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return A {@code FindDirective} to search for matching {@code Task}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws IncorrectInputException if the provided index is not an integer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public DeleteDirective parse(Argument args) throws IncorrectInputException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            // The index provided by the user is off by one"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            int index \u003d Integer.parseInt(args.getOptionValue(OPTION_INDEX)) - 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new DeleteDirective(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new IncorrectInputException(ERROR_INCORRECT_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 37
    }
  },
  {
    "path": "src/main/java/rogue/logic/parser/DoneDirectiveParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.logic.directives.DoneDirective;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.logic.parser.exceptions.IncorrectInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.argument.Argument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Parses user inputs into a {@code DoneDirective}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DoneDirectiveParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Option to select the index of a {@code Task} from the {@code TaskList}. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String OPTION_INDEX \u003d \"/i\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Message for when the index is missing. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String ERROR_INCORRECT_INDEX \u003d \"Stop trying to fool me. The \\\"done\\\" command\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \" must be followed by the index of the task.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates a {@code DoneDirective} for a {@code Task}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * OPTION_INDEX: the index of the {@code Task} to mark as done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param args The action and options to be parsed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return A {@code DoneDirective} for the requested {@code Task}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws IncorrectInputException if the provided index is not an integer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public DoneDirective parse(Argument args) throws IncorrectInputException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            // The index provided by the user is off by one"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            int index \u003d Integer.parseInt(args.getOptionValue(OPTION_INDEX)) - 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new DoneDirective(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new IncorrectInputException(ERROR_INCORRECT_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 37
    }
  },
  {
    "path": "src/main/java/rogue/logic/parser/FindDirectiveParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.logic.directives.FindDirective;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.logic.parser.exceptions.IncorrectInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.argument.Argument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Parses user inputs into a {@code FindDirective}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class FindDirectiveParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Option to search for a {@code Task} by its description. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String OPTION_SEARCH_DESCRIPTION \u003d \"/d\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Option to search for a {@code Task} by its date. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String OPTION_SEARCH_DAYS \u003d \"/days\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Message when no search terms are provided. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String ERROR_MISSING_SEARCH_TERM \u003d \"Stop trying to fool me. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"The \\\"find\\\" command must be followed by a search condition.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Message when the number of days provided is not an integer. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String ERROR_INCORRECT_DAYS \u003d \"Stop trying to fool me. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \" The number of days should be a number.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates a {@code FindDirective} for a {@code Task}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * At least one search condition has to be provided. Multiple search conditions"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * will result in a combined (AND) search."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * OPTION_SEARCH_DESCRIPTION: all tasks with description containing the search term."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * OPTION_SEARCH_DAYS: all tasks that are not overdue and due to happen in the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * specified number of days (from system date)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param args The action and options to be parsed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return A {@code DoneDirective} for the requested {@code Task}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws IncorrectInputException if no search condition is provided."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public FindDirective parse(Argument args) throws IncorrectInputException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String descriptionSearchTerm \u003d args.getOptionValue(OPTION_SEARCH_DESCRIPTION);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String daySearchTerm \u003d args.getOptionValue(OPTION_SEARCH_DAYS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        boolean hasDescription \u003d !descriptionSearchTerm.equals(\"\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        boolean hasDay \u003d !daySearchTerm.equals(\"\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!hasDescription \u0026\u0026 !hasDay) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new IncorrectInputException(ERROR_MISSING_SEARCH_TERM);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (hasDescription \u0026\u0026 hasDay) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new FindDirective(descriptionSearchTerm, parseDay(daySearchTerm));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } else if (hasDay) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new FindDirective(parseDay(daySearchTerm));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new FindDirective(descriptionSearchTerm);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Parses a string (the number of days) into an integer."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param daySearchTerm The string to parse."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return The number of days"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws IncorrectInputException if the string is not an integer."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private int parseDay(String daySearchTerm) throws IncorrectInputException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return Integer.parseInt(daySearchTerm);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new IncorrectInputException(ERROR_INCORRECT_DAYS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 74
    }
  },
  {
    "path": "src/main/java/rogue/logic/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.logic.directives.Executable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.logic.directives.HelpDirective;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.logic.directives.ListDirective;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.logic.parser.exceptions.IncorrectInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.argument.Argument;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Parses user inputs into an {@code Executable} that is understood"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * and can be executed by {@code Rogue}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Message for when user input is not a known {@code Action}. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String ERROR_UNKNOWN_COMMAND \u003d \"Stop trying to fool me. %s is an unknown command.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates an {@code Executable} to be run by {@code Rogue}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Splits the user input into separate arguments based on the whitespace"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * character. The first argument is checked against the list of possible"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code Action}. A valid {@code Action} will result in the appropriate"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code Executable} being created. Otherwise, an exception is thrown."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return An {@code Executable} corresponding to the {@code Action}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws IncorrectInputException if user input is an invalid {@code Action}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static Executable createExe(String input) throws IncorrectInputException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Argument args \u003d ArgumentParser.parseArgs(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        switch (args.getAction()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new HelpDirective();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new ListDirective();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new FindDirectiveParser().parse(args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case MARK_AS_DONE:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new DoneDirectiveParser().parse(args);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new DeleteDirectiveParser().parse(args);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case ADD_TODO:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case ADD_DEADLINE:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case ADD_EVENT:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new AddDirectiveParser().parse(args);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new IncorrectInputException(String.format(ERROR_UNKNOWN_COMMAND, input));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 57
    }
  },
  {
    "path": "src/main/java/rogue/logic/parser/exceptions/IncorrectInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Represents an error when a user input is not understood"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * by the {@code Parser} of {@code Rogue}."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class IncorrectInputException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public IncorrectInputException(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 11
    }
  },
  {
    "path": "src/main/java/rogue/model/argument/Action.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.model.argument;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Maps each possible action that {@code Rogue} can take to"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * a list of keywords. These keywords are entered by the user as inputs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * to execute the corresponding actions."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public enum Action {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    HELP (\"help\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    ADD_TODO (\"todo\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    ADD_DEADLINE (\"deadline\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    ADD_EVENT (\"event\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    LIST (\"list\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    FIND (\"find\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    DELETE (\"delete\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    MARK_AS_DONE (\"done\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    INVALID (\"\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Stores keyword to action mappings. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final Map\u003cString, Action\u003e KEYWORD_ACTION_MAP \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    // Caches the keyword and its corresponding action for fast reverse lookup. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        for (Action action : values()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            KEYWORD_ACTION_MAP.put(action.keyword, action);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs an {@code Action}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param keyword The keyword that is mapped to the action."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    Action(String keyword) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Performs a reverse lookup for {@code Action} given a keyword."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code Action.INVALID} is returned if the keyword is not mapped"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * to any {@code Action}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param keyword The keyword to be searched"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return An {@code Action} matching the keyword, or {@code Action.INVALID} if no match."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static Action getAction(String keyword) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Action action \u003d KEYWORD_ACTION_MAP.get(keyword);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return (action !\u003d null) ? action : Action.INVALID;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 55
    }
  },
  {
    "path": "src/main/java/rogue/model/argument/Argument.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.model.argument;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Represents the arguments for an {@code Executable}. Packages an {@code Action},"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * its options, and their corresponding values."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class Argument {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Action action;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Map\u003cString, String\u003e optionValueMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs an {@code Argument}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param action"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param optionValueMap"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Argument(Action action, Map\u003cString, String\u003e optionValueMap) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.optionValueMap \u003d optionValueMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Action getAction() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return action;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Gets the value corresponding to an option of an option-value pair."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * An empty string is returned the option does not exist in the option-value"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * map."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param option The option to query."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return The value if found, otherwise an empty string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public String getOptionValue(String option) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String value \u003d optionValueMap.get(option);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (value \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 46
    }
  },
  {
    "path": "src/main/java/rogue/model/report/Report.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.model.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Feedback generated after an {@code Executable} is executed by {@code Rogue}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * May contain messages for success, errors, or other miscellaneous information."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class Report {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final boolean isExit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs a {@code Report}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param message The main content of the report."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Report(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs a {@code Report}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param message   The main content of the report."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param isExit    Indicates whether {@code Rogue} should exit."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Report(String message, boolean isExit) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 40
    }
  },
  {
    "path": "src/main/java/rogue/model/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Represents a task that can be tracked by Rogue."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * A deadline additionally has a date component to specify"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * by when the task should be completed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private LocalDate by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs a {@code Deadline}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param description   The task description."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param by            By when the task should be completed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Deadline(String description, LocalDate by) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs a {@code Deadline}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param description   The task description."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param isDone        Whether the task is completed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param by            By when the task should be completed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Deadline(String description, boolean isDone, LocalDate by) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public String summarize() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return String.format(\"D | %s | %s\", super.summarize(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                by.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\")));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 54
    }
  },
  {
    "path": "src/main/java/rogue/model/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Represents a task that can be tracked by Rogue."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * An event additionally has a date component to specify"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * when the task will happen."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private LocalDate at;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs an {@code Event}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param description   The task description."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param at            By when the task should be completed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Event(String description, LocalDate at) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs an {@code Event}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param description   The task description."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param isDone        Whether the task is completed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param at            By when the task should be completed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Event(String description, boolean isDone, LocalDate at) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public String summarize() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return String.format(\"E | %s | %s\", super.summarize(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                at.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\")));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + at.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 55
    }
  },
  {
    "path": "src/main/java/rogue/model/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Represents a task that can be tracked by Rogue."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs a {@code Task}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param description The task description."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs a {@code Task}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param description   The task description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param isDone        Whether the task is completed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Gets the date of the {@code Task}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The epoch year is returned if the {@code Task} has no associated date."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return The date of the {@code Task}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return LocalDate.EPOCH;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Displays an icon based on completion status of a {@code Task}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return A tick if completed, or a cross otherwise"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Marks a {@code Task} as completed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Retrieves print-friendly summary of a {@code Task}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * 1 indicates a completed {@code Task}, and 0 an incomplete {@code Task}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return Print-friendly summary of task"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public String summarize() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return String.format(\"%d | %s\", isDone ? 1 : 0, description);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), description);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 83
    }
  },
  {
    "path": "src/main/java/rogue/model/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Wraps a list of {@code Task}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Provides bookkeeping functionalities to manage {@code Task} objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs a {@code TaskList}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs a {@code TaskList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param tasks A list of task to initialize the {@code TaskList}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public List\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Adds a {@code Task} to the {@code TaskList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param task The task to be added."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Retrieves {@code Task} corresponding to provided index from the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param index Index of the task to retrieve."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws IndexOutOfBoundsException when index is out of range."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Task get(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Deletes {@code Task} corresponding to provided index from the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param index Index of the task to delete."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws IndexOutOfBoundsException when index is out of range."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Task delete(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return tasks.remove(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Finds {@code Task} with descriptions containing the search term."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param searchTerm The search term."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return A {@code TaskList} for all matching {@code Task}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public TaskList searchByDescription(String searchTerm) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        List\u003cTask\u003e matchingTasks \u003d tasks.stream()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .filter(task -\u003e task.getDescription().contains(searchTerm))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new TaskList(matchingTasks);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Finds {@code Task} that are due to happen in the specified number of days."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Overdue {@code Task} are not included in the search."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param numOfDays The number of days."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return A {@code TaskList} for all matching {@code Task}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public TaskList searchByDays(int numOfDays) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        LocalDate startDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        LocalDate endDate \u003d startDate.plusDays(numOfDays + 1); // Add 1 to include end date"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        List\u003cTask\u003e matchingTasks \u003d tasks.stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .filter(task -\u003e task.getDate().isAfter(startDate) \u0026\u0026 task.getDate().isBefore(endDate))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new TaskList(matchingTasks);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Retrieves the number of {@code Task} currently in the list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return Number of tasks in list"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public int count() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 106
    }
  },
  {
    "path": "src/main/java/rogue/model/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Represents a task that can be tracked by Rogue."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * A todo is any general task that has to be done."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs a {@code Todo}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param description   The task description."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs a {@code Todo}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param description   The task description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param isDone        Whether the task is completed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public String summarize() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return String.format(\"T | %s\", super.summarize());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 37
    }
  },
  {
    "path": "src/main/java/rogue/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.storage.exceptions.StorageException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.nio.file.StandardOpenOption;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Deals with file I/O and persisting information across multiple executions."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Separator for each field in file. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String FORMAT_TASK_FIELD_DELIMITER \u003d \"\\\\s\\\\|\\\\s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** The value corresponding to whether a task is completed. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String VALUE_TASK_COMPLETE \u003d \"1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Message for when the save file does not conform to the expected format. */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String ERROR_INCORRECT_FILE_FORMAT \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            \"ERROR: Saved file does not have the correct format!\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Message for when an error is encountered when performing I/O operations. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String ERROR_IO \u003d \"ERROR: Unable to %s tasks from file!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs the {@code Storage}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param filePath The relative or absolute path where persistent information is stored."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Storage(Path filePath) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Factory method for producing the {@code Storage}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param filePath The relative or absolute path where persistent information is stored."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static Storage init(String filePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Path path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Path parentDirPath \u003d path.getParent();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            // Creates parent directories if they do not exist"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            if (parentDirPath !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                Files.createDirectories(parentDirPath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            if (Files.notExists(path)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                path \u003d Files.createFile(path);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert Files.exists(path) : \"Save file must be available!\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new Storage(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Writes the summary of each {@code Task} to the file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * All prior content in the file will be replaced."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param tasks A list of tasks."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws StorageException if the file cannot be written to."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void save(List\u003cTask\u003e tasks) throws StorageException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            List\u003cString\u003e taskSummary \u003d convertTasksToString(tasks);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            // Overwrites content in existing file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            Files.write(filePath, taskSummary, StandardOpenOption.TRUNCATE_EXISTING);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new StorageException(String.format(ERROR_IO, \"save\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Reads the summary of each {@code Task} from the file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Converts each summary into a {@code Task}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return A list of tasks"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public List\u003cTask\u003e load() throws StorageException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            List\u003cString\u003e taskSummary \u003d Files.readAllLines(filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return convertStringToTasks(taskSummary);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new StorageException(String.format(ERROR_IO, \"load\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Retrieves the summary from each {@code Task} in the list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param tasks A list of tasks."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return A list of extracted summary"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private List\u003cString\u003e convertTasksToString(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        List\u003cString\u003e taskSummary \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            assert task !\u003d null : \"A task cannot be null!\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            taskSummary.add(task.summarize());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return taskSummary;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Converts each entry in the task summary to a {@code Task}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * If any of the entries cannot be parsed, an exception is thrown."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param taskSummary"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return A list of tasks"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws StorageException if any summary is invalid."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private List\u003cTask\u003e convertStringToTasks(List\u003cString\u003e taskSummary) throws StorageException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        for (String summary : taskSummary) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                String[] args \u003d summary.split(FORMAT_TASK_FIELD_DELIMITER);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                assert args.length \u003e\u003d 3 : \"A task has a minimum of 3 fields!\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                boolean isDone \u003d (args[1].equals(VALUE_TASK_COMPLETE)) ? true : false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                String description \u003d args[2];"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                switch (args[0]) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    LocalDate date \u003d DateTimeUtil.parseStringToDate(args[3]);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    tasks.add(new Deadline(description, isDone, date));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    date \u003d DateTimeUtil.parseStringToDate(args[3]);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    tasks.add(new Event(description, isDone, date));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    tasks.add(new Todo(description, isDone));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            } catch (IndexOutOfBoundsException | DateTimeParseException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                throw new StorageException(ERROR_INCORRECT_FILE_FORMAT);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 168
    }
  },
  {
    "path": "src/main/java/rogue/storage/exceptions/StorageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.storage.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Represents an error when saving to or loading from save file."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class StorageException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public StorageException(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 10
    }
  },
  {
    "path": "src/main/java/rogue/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.scene.SnapshotParameters;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.scene.effect.DropShadow;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.scene.image.WritableImage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * and a label containing text from the speaker."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static enum Style {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        USER, ROGUE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    };"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** The radius of the circular clip for the image. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final double RADIUS_CIRCLE_CLIP \u003d 25.0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private HBox dialogContainer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private DialogBox(String text, Image img, Style style) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        setImage(img);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        setStyle(style);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates a {@code DialogBox} for the user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param text  The text to display."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param img   The image to display."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return A {@code DialogBox} with image displayed on the right."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new DialogBox(text, img, Style.USER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates a {@code DialogBox} for {@code Rogue}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param text  The text to display."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param img   The image to display."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return A {@code DialogBox} with image displayed on the left."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static DialogBox getRogueDialog(String text, Image img) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        var db \u003d new DialogBox(text, img, Style.ROGUE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Sets the text of the {@code DialogBox}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param text The text to set."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private void setText(String text) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Sets the image of the {@code DialogBox}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param img The image to set."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private void setImage(Image img) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        clipPictureToCircle();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Sets the style of the {@code DialogBox}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * USER: sets top right background radius to 0."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * ROGUE: sets top left background radius to 0 and background color to #30D158."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param style The style to set."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private void setStyle(Style style) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        switch (style) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case USER:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            dialogContainer.setStyle(\"-fx-background-radius: 1.5em 0 1.5em 1.5em;\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case ROGUE:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            dialogContainer.setStyle(\"-fx-background-radius: 0 1.5em 1.5em 1.5em;\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    + \"-fx-background-color: #30D158;\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            // Should not reach here"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Clips the display picture into a circle."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private void clipPictureToCircle() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Clips image to a circle."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Circle clip \u003d new Circle(RADIUS_CIRCLE_CLIP, RADIUS_CIRCLE_CLIP, RADIUS_CIRCLE_CLIP);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        displayPicture.setClip(clip);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 142
    }
  },
  {
    "path": "src/main/java/rogue/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.Rogue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Rogue rogue;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.jpg\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Image rogueImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Rogue.jpg\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Scrolls down to the end every time the height of the dialog container changes."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert userImage !\u003d null : \"Image for user cannot be null!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert rogueImage !\u003d null : \"Image for rogue cannot be null!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setRogue(Rogue r) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        rogue \u003d r;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Rogue\u0027s reply"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * and then appends them to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String response \u003d rogue.getResponse(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DialogBox.getRogueDialog(response, rogueImage)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 60
    }
  },
  {
    "path": "src/main/java/rogue/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.Rogue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * The interface of {@code Rogue} with which the user interacts."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Reads user input from the console, and displays messages,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * errors, and other textual information onto the console."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Starts the graphical user interface of Rogue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param stage The main stage for the user interface."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param rogue An instance of {@code Rogue}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static void init(Stage stage, Rogue rogue) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(rogue.Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setRogue(rogue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 36
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cfx:root styleClass\u003d\"dialog-root\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" stylesheets\u003d\"@../css/rogue.css\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cHBox fx:id\u003d\"dialogContainer\" styleClass\u003d\"dialog-text-container\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" styleClass\u003d\"dialog-text\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cHBox styleClass\u003d\"dialog-image-container\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" styleClass\u003d\"dialog-image\" fitHeight\u003d\"55.0\" fitWidth\u003d\"55.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"650.0\" prefWidth\u003d\"500.0\" styleClass\u003d\"main-container\" stylesheets\u003d\"@../css/rogue.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"rogue.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cHBox layoutY\u003d\"597.0\" styleClass\u003d\"main-footer-container\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"420.0\" promptText\u003d\"Enter your inputs here.\" styleClass\u003d\"main-input-field\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"58.0\" styleClass\u003d\"main-input-button\" text\u003d\"➤\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"585.0\" prefWidth\u003d\"500.0\" styleClass\u003d\"main-scroll-pane\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"545.0\" prefWidth\u003d\"486.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 22
    }
  },
  {
    "path": "src/test/java/rogue/logic/directives/ActionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.logic.directives;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.model.argument.Action;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class ActionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void getAction_validAction_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(Action.getAction(\"event\"), Action.ADD_EVENT);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(Action.getAction(\"todo\"), Action.ADD_TODO);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(Action.getAction(\"deadline\"), Action.ADD_DEADLINE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(Action.getAction(\"done\"), Action.MARK_AS_DONE);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(Action.getAction(\"list\"), Action.LIST);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(Action.getAction(\"delete\"), Action.DELETE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(Action.getAction(\"done\"), Action.MARK_AS_DONE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(Action.getAction(\"bye\"), Action.EXIT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void getAction_invalidAction_returnInvalid() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(Action.getAction(\"\"), Action.INVALID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(Action.getAction(\"test\"), Action.INVALID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(Action.getAction(\"123\"), Action.INVALID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 28
    }
  },
  {
    "path": "src/test/java/rogue/logic/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package rogue.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import rogue.logic.parser.exceptions.IncorrectInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void createExe_invalidArguments_exceptionThrown() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IncorrectInputException.class, () -\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            Parser.createExe(\"done book\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        });"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IncorrectInputException.class, () -\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            Parser.createExe(\"delete note\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        });"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void createExe_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IncorrectInputException.class, () -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            Parser.createExe(\"create todo borrow book\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 27
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "deadline do home /by no idea :-p"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 8
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "java -classpath ..\\bin Rogue \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "-": 19
    }
  }
]
