[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 2,
      "-": 24
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.command.CommandExecutor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.command.DukeCommandExecutor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.InvalidSaveFileException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.TaskArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.storage.DukeStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "// Main class that initializes the program."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final Scanner SC \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final CommandExecutor EXE \u003d new DukeCommandExecutor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final Ui UI \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final Storage STORAGE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final TaskArrayList TASK_LIST;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Duke(Path filePath) throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.STORAGE \u003d new DukeStorage(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.TASK_LIST \u003d new TaskArrayList(STORAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private void handleStart() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        UI.print(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Starts the program by calling the relevant initialization processes then starts taking in user inputs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void run() throws InvalidSaveFileException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            initialise();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new InvalidSaveFileException(\"An error has occurred while loading the save file!.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String input, msgBody;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            input \u003d SC.nextLine().trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                msgBody \u003d EXE.execute(input, TASK_LIST);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                UI.print(msgBody);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                if (EXE.shouldExit()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                UI.printErr(e.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private void initialise() throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        handleStart();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        List\u003cString\u003e loadedLines \u003d STORAGE.getSavedLines();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        for (String line: loadedLines) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            EXE.loadSaveString(line, TASK_LIST);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static void main(String[] args) throws IOException, InvalidSaveFileException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        new Duke(Paths.get(\"data\", \"duke.txt\")).run();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 76
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "// Abstract parent class for all classes that handle the logic of the chatbot"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "abstract class Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 5
    }
  },
  {
    "path": "src/main/java/duke/command/CommandExecutor.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " * Interface for any class that will delegate the parsing and the execution of user inputs."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " * Contains a shouldExit method which only returns true if the \"bye\" command was issued by the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public interface CommandExecutor {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public String execute(String in, TaskList taskList) throws DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void loadSaveString(String in, TaskList taskList) throws DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public boolean shouldExit();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 16
    }
  },
  {
    "path": "src/main/java/duke/command/CommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "// Parses and categorises the user\u0027s command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final String CMD_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final String CMD_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final String CMD_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final String CMD_DUE \u003d \"due\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final String CMD_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final String CMD_EXIT \u003d \"bye\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final String CMD_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final String CMD_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final String CMD_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Parses the user\u0027s command and return the type of command issued by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param in String command provided by user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @return CommandType type of command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static CommandType parseCmdWord(String in) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] input \u003d in.split(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String cmdWord \u003d input[0];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        switch (cmdWord) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        case CMD_DELETE:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return CommandType.Delete;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        case CMD_DONE:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return CommandType.Done;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        case CMD_DUE:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return CommandType.Due;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        case CMD_EXIT:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return CommandType.Exit;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        case CMD_FIND:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return CommandType.Find;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        case CMD_LIST:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return CommandType.List;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        case CMD_DEADLINE:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            // fallthrough"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        case CMD_EVENT:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            // fallthrough"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        case CMD_TODO:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return CommandType.Task;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return CommandType.Invalid;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Parses the user\u0027s \"task\" command and return the type of \"task\" command issued by the user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param in String \"task\" command provided by user"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @return CommandType type of \"task\" command"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static TaskType parseTaskType(String in) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] input \u003d in.split(\" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String task \u003d input[0];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        switch (task) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return TaskType.Deadline;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return TaskType.Event;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        case \"todo\": // todo task"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return TaskType.Todo;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return TaskType.Invalid;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 69
    }
  },
  {
    "path": "src/main/java/duke/command/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "// All the different types of command that a user can input, including invalid commands."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    Delete, Done, Due, Exit, Find, Invalid, List, Task"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 7
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "// Handles all the logic behind any \"delete\" command from the user"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Executes any \"delete\" command issued by the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Removes the task specified by the user from taskList and updates save file after deletion."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param in String \"delete\" command issued by user"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param taskList TaskList list that contains tasks added by the user"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @return String response message to user"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @throws InvalidCommandException If an invalid index is provided"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static String execute(String in, TaskList taskList) throws InvalidCommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            int index \u003d Integer.parseInt(in.replaceFirst(\"delete\", \"\").trim());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            Task task \u003d taskList.remove(index - 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            int len \u003d taskList.size();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return \"Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                    + \"  \" + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                    + \"Now you have \" + len + \" task\" + (len \u003d\u003d 1 ? \"\" : \"s\") + \" in the list.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new InvalidCommandException(\"Please input a valid index.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 29
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "// Handles all the logic behind any \"done\" command from the user"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Executes any \"done\" command issued by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Marks the task in the taskList specified by the user as done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param in String \"done\" command issued by user"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param taskList TaskList list that contains tasks added by the user"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @return String response message to user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @throws InvalidCommandException If an invalid index is provided"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static String execute(String in, TaskList taskList) throws InvalidCommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            int index \u003d Integer.parseInt(in.replaceFirst(\"done \", \"\")) - 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            Task task \u003d taskList.get(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            taskList.update(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return \"Nice! I\u0027ve marked this task as done\\n  \" + task.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new InvalidCommandException(\"Please input a valid index\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 29
    }
  },
  {
    "path": "src/main/java/duke/command/DueCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.parser.DateTimeParsing;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "// Handles all the logic behind any \"due\" command from the user"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class DueCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Executes any \"due\" command issued by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns the information of the tasks due on the date specified by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param in String \"due\" command issued by user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param taskList TaskList list that contains tasks added by the user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @return String response message to user including tasks due on the specified date"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @throws InvalidCommandException If an invalid date format is provided"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static String execute(String in, TaskList taskList) throws InvalidCommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String dateStr \u003d in.replaceFirst(\"due \", \"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            LocalDate date \u003d DateTimeParsing.parseDate(dateStr);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            String formattedDate \u003d DateTimeParsing.localDateToFormattedString(date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            ArrayList\u003cString\u003e filteredTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            int len \u003d taskList.size();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d len; i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                Task task \u003d taskList.get(i - 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                if (task.isDueOn(date)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                    String output \u003d i + \".\" + task.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                    filteredTasks.add(output);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            if (filteredTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                return \"There are no tasks due on \" + formattedDate + \"!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            String firstLine \u003d \"These are the tasks due on \" + formattedDate + \":\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return firstLine + \"\\n\" + String.join(\"\\n\", filteredTasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        } catch (DateTimeParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            String errMsg \u003d \"Please key in a valid date format.\\n\" + \"due *yyyy-mm-dd*\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new InvalidCommandException(errMsg);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 51
    }
  },
  {
    "path": "src/main/java/duke/command/DukeCommandExecutor.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class DukeCommandExecutor implements CommandExecutor {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private boolean hasExited \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Processes the command issued by user and passes it on to the relevant Command class for its execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param in String command issued by user"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param taskList TaskList list that contains tasks added by the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @return String response message to user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @throws DukeException If the command is not formatted properly"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public String execute(String in, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (hasExited) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new InvalidCommandException(\"Program has already exited!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        CommandType cmdType \u003d CommandParser.parseCmdWord(in);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        switch (cmdType) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        case Delete:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return DeleteCommand.execute(in, taskList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        case Done:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return DoneCommand.execute(in, taskList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        case Due:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return DueCommand.execute(in, taskList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        case Exit:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            hasExited \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return ExitCommand.execute();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        case Find:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return FindCommand.execute(in, taskList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        case List:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return ListCommand.execute(taskList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        case Task:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return TaskCommand.execute(in, taskList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        default: // Invalid"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "           throw new InvalidCommandException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns true if the \"bye\" command has been issued else returns false."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @return boolean should the program exit"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public boolean shouldExit() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return hasExited;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void loadSaveString(String in, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        TaskCommand.loadSavedTasks(in, taskList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 58
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "// Handles all the logic behind any \"exit\" command from the user"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Executes any \"exit\" command issued by the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns an exit message to the users."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @return String \"exit\" message to user"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static String execute() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 14
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "// Handles all the logic behind any \"find\" command from the user"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Executes any \"due\" command issued by the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns the information of the tasks containing the keyword specified by the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param in String \"due\" command issued by user"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param taskList TaskList list that contains tasks added by the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @return String response message to user including tasks containing the keyword"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static String execute(String in, TaskList taskList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String keyword \u003d in.replaceFirst(\"find \", \"\").trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        ArrayList\u003cString\u003e msg \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        int len \u003d taskList.size();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d len; i++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            Task task \u003d taskList.get(i - 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            if (task.containsKeyword(keyword)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                String output \u003d i + \".\" + task.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                msg.add(output);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String firstLine \u003d msg.size() \u003d\u003d 0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                ? \"None of the tasks matches the keyword!\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                : \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return firstLine + String.join(\"\\n\", msg);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 37
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "// Handles all the logic behind any \"list\" command from the user"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Executes any \"list\" command issued by the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Iterates the taskList and returns the information of all the tasks in the list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param taskList TaskList list that contains tasks added by the user"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @return String information of all the tasks in taskList"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static String execute(TaskList taskList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        int len \u003d taskList.size();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        ArrayList\u003cString\u003e msgBody \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        msgBody.add((len \u003d\u003d 0) ? \"There are no tasks in your list!\" : \"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d len; i++) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            Task task \u003d taskList.get(i - 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            String line \u003d i + \".\" + task.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            msgBody.add(line);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return String.join(\"\\n\", msgBody);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 30
    }
  },
  {
    "path": "src/main/java/duke/command/TaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.TaskFactory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "// Handles all the logic behind any \"task\" command from the user"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class TaskCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Executes any \"task\" command issued by the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Adds the task specified by the user to the taskList and updates save file after updating."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param in String \"task\" command issued by user"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param taskList TaskList list that contains tasks added by the user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @return String response message to user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @throws DukeException If the task command provided does not fit the specified format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static String execute(String in, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        TaskType taskType \u003d CommandParser.parseTaskType(in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String taskDetails \u003d in.replaceFirst(taskType.toString().toLowerCase(), \"\").trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (taskType \u003d\u003d TaskType.Invalid) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new InvalidCommandException(\"Something went wrong during the execution of the command. :-(\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return createTask(taskType, taskDetails, taskList, false, true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Creates the specific task type based on the taskType parameter and adds it to the taskList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Updates save file after updating."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param taskType TaskType the task type"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param details String the task details"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param taskList TaskList list that contains tasks added by the user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @return String response message to user"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @throws InvalidTaskException If the task command provided does not fit the specified format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static String createTask("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            TaskType taskType, String details, TaskList taskList, boolean isDone, boolean shouldUpdateStorage)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Task task \u003d TaskFactory.createTask(taskType, details);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        taskList.add(task, shouldUpdateStorage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        int len \u003d taskList.size();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return \"Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                + \"  \" + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                + \"Now you have \" + len + \" task\" + (len \u003d\u003d 1 ? \"\" : \"s\") + \" in the list.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static void loadSavedTasks(String in, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        boolean isDone \u003d in.charAt(0) \u003d\u003d \u00271\u0027;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String taskCommand \u003d in.substring(1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        TaskType taskType \u003d CommandParser.parseTaskType(taskCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String taskDetails \u003d taskCommand.replaceFirst(taskType.toString().toLowerCase(), \"\").trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (taskType \u003d\u003d TaskType.Invalid) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new InvalidCommandException(\"Something went wrong during the execution of the command. :-(\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        createTask(taskType, taskDetails, taskList, isDone, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 65
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "// Signals any exception that occurs while the program runs."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public abstract class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    protected DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "// Signals any invalid command issued by the user."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public InvalidCommandException(String errorMessage) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "// Signals that the deadline task provided by the user is formatted incorrectly."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class InvalidDeadlineException extends InvalidTaskException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public InvalidDeadlineException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        super(\"Please input the correct details for the deadline task.\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                + \"deadline *description* /by *yyyy-mm-dd* *HH:mm*\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "// Signals that the event task provided by the user is formatted incorrectly."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class InvalidEventException extends InvalidTaskException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public InvalidEventException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        super(\"Please input the correct details for the event task.\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                + \"event *description* /at *yyyy-mm-dd* *HH:mm*\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidSaveFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class InvalidSaveFileException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public InvalidSaveFileException(String errMsg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        super(errMsg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "// Signals that the task provided by the user is formatted incorrectly."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public abstract class InvalidTaskException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public InvalidTaskException(String errorMessage) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTodoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "// Signals that the todo task provided by the user is formatted incorrectly."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class InvalidTodoException extends InvalidTaskException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public InvalidTodoException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        super(\"Please input the correct details for the event task.\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                + \"todo *description*\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 9
    }
  },
  {
    "path": "src/main/java/duke/parser/DateTimeParsing.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "// Class that deals with any parsing or conversion of date and time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class DateTimeParsing {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Parses a formatted date string (YYYY-MM-DD) and returns the LocalDate equivalent of the date."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param date String formatted date string"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @return LocalDate LocalDate object of the provided date"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static LocalDate parseDate(String date) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return LocalDate.parse(date);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Converts the provided LocalDate object into a formatted string(MMM d yyyy)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param date LocalDate the date to convert into a formatted string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @return String formatted string of the provided date"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static String localDateToFormattedString(LocalDate date) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Converts the provided LocalDate object into a string(YYYY-MM-DD)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param date LocalDate the date to convert into a string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @return String string representation of the provided date"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static String localDateToString(LocalDate date) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        int day \u003d date.getDayOfMonth();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String dayStr \u003d day \u003c 10 ? \"0\" + day : Integer.toString(day);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        int month \u003d date.getMonthValue();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String monthStr \u003d month \u003c 10 ? \"0\" + month : Integer.toString(month);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        int year \u003d date.getYear();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return year + \"-\" + monthStr + \"-\" + dayStr;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Converts a 24-hr time format(HH:mm) into a 12-hr time format(hh:mm a)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param time String 24-hr time format(HH:mm)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @return String 12-hr time format(hh:mm a)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static String to12HTimeFormat(String time) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return LocalTime"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .parse(time, DateTimeFormatter.ofPattern(\"HH:mm\"))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .format(DateTimeFormatter.ofPattern(\"hh:mm a\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Converts a 24-hr time format(HH:mm) into a 12-hr time format(hh:mm a)."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param time String 12-hr time format(hh:mm a)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @return String 24-hr time format(HH:mm)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static String to24HTimeFormat(String time) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return LocalTime"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .parse(time, DateTimeFormatter.ofPattern(\"hh:mm a\"))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .format(DateTimeFormatter.ofPattern(\"HH:mm\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 68
    }
  },
  {
    "path": "src/main/java/duke/storage/DukeStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "// Class that handles the loading and saving of the save file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class DukeStorage implements Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final Path FILE_PATH;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private ArrayList\u003cString\u003e SAVE_LINES;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private boolean isActive \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public DukeStorage(Path filePath) throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.FILE_PATH \u003d filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        loadSaveFile();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            createIfNotExist();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new IOException(\"An error has occurred when trying to create the save file!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private void createIfNotExist() throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        int len \u003d FILE_PATH.getNameCount();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Path directoriesToCreate \u003d FILE_PATH.subpath(0, len - 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Files.createDirectories(directoriesToCreate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (!java.nio.file.Files.exists(FILE_PATH)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            new File(FILE_PATH.toString()).createNewFile();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private void updateSaveFile() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (!isActive) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            FileWriter myWriter \u003d new FileWriter(FILE_PATH.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            for (String line: SAVE_LINES) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                    myWriter.write(line + \"\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                    System.out.println(\"An error has occurred when updating the save file.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            myWriter.close();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            System.out.println(\"An error has occurred when updating the save file.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void addLine(String saveString) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        SAVE_LINES.add(saveString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        updateSaveFile();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void updateLine(int index, String saveString) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        SAVE_LINES.set(index, saveString);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        updateSaveFile();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void removeLine(int index) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        SAVE_LINES.remove(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        updateSaveFile();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public ArrayList\u003cString\u003e getSavedLines() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return SAVE_LINES;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private String[] loadSaveFile() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        // Prevent saving while loading"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        isActive \u003d false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] result \u003d new String[0];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            BufferedReader in \u003d new BufferedReader(new FileReader(FILE_PATH.toString()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            result \u003d in.lines().toArray(String[]::new);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            in.close();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        } catch(IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            System.out.println(\"An error has occurred when reading the save file.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            isActive \u003d true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            this.SAVE_LINES \u003d new ArrayList\u003c\u003e(Arrays.asList(result));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 95
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public interface Storage {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    void addLine(String saveString);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    void updateLine(int index, String saveString);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    void removeLine(int index);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    List\u003cString\u003e getSavedLines();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 13
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.InvalidDeadlineException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.parser.DateTimeParsing;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final String TIME12H;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final LocalDate DATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private Deadline(String description, String time12h, LocalDate date) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.TIME12H \u003d time12h;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.DATE \u003d date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Factory method for creating a deadline task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param details String details of the task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @return Deadline the deadline task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @throws InvalidDeadlineException If the format of the details is invalid"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    protected static Deadline createDeadline(String details) throws InvalidDeadlineException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] info \u003d details.split(\"/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (info.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new InvalidDeadlineException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String desc \u003d info[0];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] dateTime \u003d info[1].replaceFirst(\"by \", \"\").split(\" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            LocalDate date \u003d DateTimeParsing.parseDate(dateTime[0]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            String time12h \u003d DateTimeParsing.to12HTimeFormat(dateTime[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return new Deadline(desc, time12h, date);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        } catch(DateTimeParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new InvalidDeadlineException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public boolean isDueOn(LocalDate date) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return this.DATE.equals(date);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String date \u003d DateTimeParsing.localDateToString(DATE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String time \u003d DateTimeParsing.to24HTimeFormat(TIME12H);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return (isDone ? 1 : 0) + \"deadline \" + description + \"/by \" + date + \" \" + time;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String formattedDate \u003d DateTimeParsing.localDateToFormattedString(DATE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return \"[D]\" + super.toString() + \"(by: \" + formattedDate + \" \" + TIME12H + \")\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 60
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.InvalidEventException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.parser.DateTimeParsing;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final String TIME12H;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final LocalDate DATE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private Event(String description, String TIME12H, LocalDate DATE) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.TIME12H \u003d TIME12H;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.DATE \u003d DATE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Factory method for creating an event task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param details String details of the task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @return Event the event task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @throws InvalidEventException If the format of the details is invalid"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    protected static Event createEvent(String details) throws InvalidEventException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] info \u003d details.split(\"/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (info.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new InvalidEventException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String desc \u003d info[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] dateTime \u003d info[1].replaceFirst(\"at \", \"\").split(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            LocalDate date \u003d DateTimeParsing.parseDate(dateTime[0]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            String time12h \u003d DateTimeParsing.to12HTimeFormat(dateTime[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return new Event(desc, time12h, date);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        } catch(DateTimeParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new InvalidEventException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public boolean isDueOn(LocalDate date) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return this.DATE.equals(date);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String date \u003d DateTimeParsing.localDateToString(DATE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String time \u003d DateTimeParsing.to24HTimeFormat(TIME12H);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return (isDone ? 1 : 0) + \"event \" + description + \"/at \" + date + \" \" + time;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String formattedDate \u003d DateTimeParsing.localDateToFormattedString(DATE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return \"[E]\" + super.toString() + \"(at: \" + formattedDate + \" \" + TIME12H + \")\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 59
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "// Parent class for all types of tasks that can be created by the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    protected boolean isDone \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns an icon that represents the task status."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @return String ✘ if not done and ✓ if done"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return isDone ? \"\\u2713\" : \"\\u2718\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public boolean containsKeyword(String keyword) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return description.toLowerCase().contains(keyword.toLowerCase());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return \"[\" + getStatusIcon() + \"]\" + \" \" + description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns true or false based on whether the task is due on the date provided."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param date LocalDate the date to check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @return boolean Whether the task is due on the specified date"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public abstract boolean isDueOn(LocalDate date);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Converts the task into a string format that will be stored in the save file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @return String storage information of task"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public abstract String toSaveString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 53
    }
  },
  {
    "path": "src/main/java/duke/task/TaskArrayList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "// An implementation of the TaskList interface using an ArrayList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class TaskArrayList implements TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final ArrayList\u003cTask\u003e TASK_LIST \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final Storage STORE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public TaskArrayList(Storage store) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.STORE \u003d store;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void add(Task t, boolean shouldUpdateStorage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        TASK_LIST.add(t);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (shouldUpdateStorage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            STORE.addLine(t.toSaveString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Task get(int i) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return TASK_LIST.get(i);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Task remove(int i) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        STORE.removeLine(i);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return TASK_LIST.remove(i);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void update(int i) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        STORE.updateLine(i, TASK_LIST.get(i).toSaveString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return TASK_LIST.size();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 39
    }
  },
  {
    "path": "src/main/java/duke/task/TaskFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "// Deals with the creation of the different types of tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class TaskFactory {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Calls the factory method of each type of tasks based on the task type specified."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param type TaskType type of task to create"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param details String details of the task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @return Task the specified type of task along with the details"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @throws InvalidTaskException If the details provided have an invalid format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static Task createTask(TaskType type, String details) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            case Todo:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                return Todo.createTodo(details);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            case Deadline:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                return Deadline.createDeadline(details);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            case Event: // duke.task.Event"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                return Event.createEvent(details);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                throw new InvalidCommandException(\"Something went wrong during the creation of the task. :-(\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 29
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "// Interface for any list-like data structure for storing a list of Tasks"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public interface TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Adds the provided task to the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param t Task task to add"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param shouldUpdateStorage whether the new task should be saved"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    void add(Task t, boolean shouldUpdateStorage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns the task at the specified index."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param i int index of task to fetch"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @return Task task at specified index"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    Task get(int i);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Removes the task at the specified index."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param i int index of task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @return Task task that was removed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    Task remove(int i);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Returns the number of tasks in the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @return int number of tasks in list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    int size();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Triggers the Storage object to update a specific line."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param index int index of the task to update"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    void update(int index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 44
    }
  },
  {
    "path": "src/main/java/duke/task/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "// All the different types of tasks that a user can create, including invalid tasks."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    Event, Todo, Deadline, Invalid;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 6
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.InvalidTodoException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private Todo(String desc) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Factory method for creating a todo task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param details String details of the task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @return Todo the todo task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @throws InvalidTodoException If the format of the details is invalid"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    protected static Todo createTodo(String details) throws InvalidTodoException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (details.equals(\"\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            throw new InvalidTodoException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return new Todo(details);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return (isDone ? 1 : 0) + \"todo \" + description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public boolean isDueOn(LocalDate date) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 40
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "// Class that handle the printing and formatting of the program\u0027s response message."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final static String DIVIDER \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final static String ERROR_HEADER \u003d \"___________________________ERROR!___________________________\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Prints a formatted response message to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param msg String message to show the user"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void print(String msg) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        System.out.print(DIVIDER + \"\\n\" + msg + \"\\n\" + DIVIDER + \"\\n\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * Prints a formatted error message to the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     * @param msg String error message to show the user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void printErr(String msg) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        System.out.print(ERROR_HEADER + \"\\n\" + msg + \"\\n\" + DIVIDER + \"\\n\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 25
    }
  },
  {
    "path": "src/test/ACTUAL.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "An error has occurred when reading the save file."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "What can I do for you?"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "There are no tasks in your list!"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  [T][✘] wake up"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Now you have 1 task in the list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  [D][✘] brush teeth (by: Aug 25 2020 10:00 AM)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "___________________________ERROR!___________________________"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Please input the correct details for the event task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "todo *description*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  [E][✘] online lecture (at: Aug 25 2020 12:00 PM)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "___________________________ERROR!___________________________"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Please input the correct details for the event task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "event *description* /at *yyyy-mm-dd* *HH:mm*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  [D][✘] submit assignment (by: Aug 29 2020 05:00 PM)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "___________________________ERROR!___________________________"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Please input the correct details for the deadline task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "deadline *description* /by *yyyy-mm-dd* *HH:mm*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  [T][✘] take a nap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "1.[T][✘] wake up"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "2.[D][✘] brush teeth (by: Aug 25 2020 10:00 AM)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "3.[E][✘] online lecture (at: Aug 25 2020 12:00 PM)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "4.[D][✘] submit assignment (by: Aug 29 2020 05:00 PM)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "5.[T][✘] take a nap"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "None of the tasks matches the keyword!"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "3.[E][✘] online lecture (at: Aug 25 2020 12:00 PM)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "These are the tasks due on Aug 25 2020:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "2.[D][✘] brush teeth (by: Aug 25 2020 10:00 AM)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "3.[E][✘] online lecture (at: Aug 25 2020 12:00 PM)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  [T][✘] wake up"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  [E][✘] go for a run (at: Aug 25 2020 08:00 PM)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "___________________________ERROR!___________________________"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Please input a valid index."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "___________________________ERROR!___________________________"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Please input a valid index."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "___________________________ERROR!___________________________"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Please key in a valid date format."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "due *yyyy-mm-dd*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  [T][✘] eat lunch"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Now you have 6 tasks in the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  [E][✘] project meeting (at: Aug 30 2020 08:00 PM)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Now you have 7 tasks in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "1.[D][✘] brush teeth (by: Aug 25 2020 10:00 AM)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "2.[E][✘] online lecture (at: Aug 25 2020 12:00 PM)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "3.[D][✘] submit assignment (by: Aug 29 2020 05:00 PM)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "4.[T][✘] take a nap"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "5.[E][✘] go for a run (at: Aug 25 2020 08:00 PM)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "6.[T][✘] eat lunch"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "7.[E][✘] project meeting (at: Aug 30 2020 08:00 PM)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "5.[E][✘] go for a run (at: Aug 25 2020 08:00 PM)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "___________________________ERROR!___________________________"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "I\u0027m sorry, but I don\u0027t know what that means :-("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Nice! I\u0027ve marked this task as done"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  [D][✓] submit assignment (by: Aug 29 2020 05:00 PM)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Nice! I\u0027ve marked this task as done"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  [E][✓] online lecture (at: Aug 25 2020 12:00 PM)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "There are no tasks due on Aug 9 2018!"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "  [E][✓] online lecture (at: Aug 25 2020 12:00 PM)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Now you have 6 tasks in the list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "1.[D][✘] brush teeth (by: Aug 25 2020 10:00 AM)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "2.[D][✓] submit assignment (by: Aug 29 2020 05:00 PM)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "3.[T][✘] take a nap"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "4.[E][✘] go for a run (at: Aug 25 2020 08:00 PM)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "5.[T][✘] eat lunch"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "6.[E][✘] project meeting (at: Aug 30 2020 08:00 PM)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "____________________________________________________________"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 140
    }
  },
  {
    "path": "src/test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "todo wake up"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "deadline brush teeth /by 2020-08-25 10:00"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "todo"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "event online lecture /at 2020-08-25 12:00"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "event some event without event time"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "deadline submit assignment /by 2020-08-29 17:00"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "deadline invalid date time format /by 2020-30-29 1700"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "todo take a nap"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "find"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "find lecture"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "due 2020-08-25"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "event go for a run /at 2020-08-25 20:00"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "delete abc"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "delete 10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "due invalid date"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "todo eat lunch"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "event project meeting /at 2020-08-30 20:00"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "find run"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "some invalid command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "due 2018-08-09"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 29
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.InvalidSaveFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final Path TEST_FILE_PATH \u003d Paths.get(\"test\", \"data\", \"duke.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final ByteArrayOutputStream OUT_CONTENT \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final PrintStream ORIGINAL_OUT \u003d System.out;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final InputStream SYSIN_BACKUP \u003d System.in;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    // recursive function to delete directory that stores the save file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private void deleteDirectory(File directoryToBeDeleted) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        File[] allContents \u003d directoryToBeDeleted.listFiles();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (allContents !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            for (File file : allContents) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                deleteDirectory(file);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        directoryToBeDeleted.delete();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private void clearPath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Path topDir \u003d TEST_FILE_PATH.subpath(0, 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (!java.nio.file.Files.exists(topDir)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        File toDelete \u003d new File(String.valueOf(topDir));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        deleteDirectory(toDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    static void setUpStreams() throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        System.setOut(new PrintStream(OUT_CONTENT));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        BufferedReader reader \u003d new BufferedReader(new FileReader(Paths.get(\"input.txt\").toString()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] input \u003d reader.lines().toArray(String[]::new);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        reader.close();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        ByteArrayInputStream inputStream \u003d new ByteArrayInputStream(String.join(\"\\n\", input).getBytes());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        System.setIn(inputStream);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        System.setOut(ORIGINAL_OUT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        clearPath();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        System.setIn(SYSIN_BACKUP);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void testInputs() throws IOException, InvalidSaveFileException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Duke duke \u003d new Duke(TEST_FILE_PATH);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        File file \u003d new File(\"EXPECTED.txt\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FileInputStream fis \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        byte[] data \u003d new byte[(int) file.length()];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        fis.read(data);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        fis.close();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expectedOutput \u003d new String(data, \"UTF-8\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String actualOutput \u003d OUT_CONTENT.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FileWriter myWriter \u003d new FileWriter(\"ACTUAL.txt\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        myWriter.write(actualOutput);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        myWriter.close();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                expectedOutput,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                actualOutput"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        );"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 91
    }
  },
  {
    "path": "src/test/java/duke/command/CommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class CommandParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void parseCmdWord() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        CommandType exit \u003d CommandParser.parseCmdWord(\"bye\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(CommandType.Exit, exit);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        CommandType list \u003d CommandParser.parseCmdWord(\"list\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(CommandType.List, list);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        CommandType done \u003d CommandParser.parseCmdWord(\"done 3\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(CommandType.Done, done);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        CommandType delete \u003d CommandParser.parseCmdWord(\"delete 1\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(CommandType.Delete, delete);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        CommandType due \u003d CommandParser.parseCmdWord(\"due 2020-08-09\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(CommandType.Due, due);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        CommandType deadline \u003d CommandParser.parseCmdWord(\"deadline lorem ipsum\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(CommandType.Task, deadline);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        CommandType event \u003d CommandParser.parseCmdWord(\"event lorem ipsum\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(CommandType.Task, event);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        CommandType todo \u003d CommandParser.parseCmdWord(\"todo lorem ipsum\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(CommandType.Task, todo);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        CommandType invalid \u003d CommandParser.parseCmdWord(\"something\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(CommandType.Invalid, invalid);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void parseTaskType() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        TaskType deadline \u003d CommandParser.parseTaskType(\"deadline lorem ipsum\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(TaskType.Deadline, deadline);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        TaskType event \u003d CommandParser.parseTaskType(\"event lorem ipsum\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(TaskType.Event, event);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        TaskType todo \u003d CommandParser.parseTaskType(\"todo lorem ipsum\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(TaskType.Todo, todo);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        TaskType invalid \u003d CommandParser.parseTaskType(\"something\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(TaskType.Invalid, invalid);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 54
    }
  },
  {
    "path": "src/test/java/duke/command/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.stub.task.DeadlineStub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.stub.task.TaskListStub;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void execute() throws InvalidCommandException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        TaskList taskListStub \u003d new TaskListStub();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        int len \u003d taskListStub.size();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String actual \u003d DeleteCommand.execute(\"delete 1\", taskListStub);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expected \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \"Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                + \"  \" + new DeadlineStub() + \"\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                + \"Now you have \" + len + \" task\" + (len \u003d\u003d 1 ? \"\" : \"s\") + \" in the list.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 24
    }
  },
  {
    "path": "src/test/java/duke/command/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.stub.task.TaskListStub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.stub.task.TodoStub;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void execute() throws InvalidCommandException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        TaskList taskListStub \u003d new TaskListStub();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String actual \u003d DoneCommand.execute(\"done 3\", taskListStub);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        TodoStub todoStub \u003d new TodoStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        todoStub.markAsDone();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expected \u003d \"Nice! I\u0027ve marked this task as done\\n  \" + todoStub.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 22
    }
  },
  {
    "path": "src/test/java/duke/command/DukeCommandExecutorTestEmpty.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "// Methods are tested by the Duke test"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class DukeCommandExecutorTestEmpty {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 6
    }
  },
  {
    "path": "src/test/java/duke/command/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String actual \u003d ExitCommand.execute();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expected \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 14
    }
  },
  {
    "path": "src/test/java/duke/command/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.stub.task.TaskListStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        TaskList taskListStub \u003d new TaskListStub();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String actual \u003d FindCommand.execute(\"find event stub\", taskListStub);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expected \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \"Here are the matching tasks in your list:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                + \"8.[✘] event this is an event stub\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 19
    }
  },
  {
    "path": "src/test/java/duke/command/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.stub.task.TaskListStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        TaskList taskListStub \u003d new TaskListStub();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String actual \u003d ListCommand.execute(taskListStub);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] expected \u003d new String[]{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \"Here are the tasks in your list:\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \"1.This todo stub was not marked as done\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \"2.This todo stub was not marked as done\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \"3.This todo stub was not marked as done\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \"4.This todo stub was not marked as done\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \"5.This todo stub was not marked as done\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \"6.This todo stub was not marked as done\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \"7.This todo stub was not marked as done\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \"8.[✘] event this is an event stub\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \"9.This todo stub was not marked as done\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \"10.This deadline stub was not marked as done\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        };"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(String.join(\"\\n\", expected), actual);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 29
    }
  },
  {
    "path": "src/test/java/duke/command/TaskCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.stub.task.TaskListStub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class TaskCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        TaskList taskListStub \u003d new TaskListStub();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String actual \u003d TaskCommand.execute(\"deadline this is a test /by 2017-11-29 13:00\", taskListStub);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] expected \u003d new String[]{"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \"Got it. I\u0027ve added this task: \","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \"  [D][✘] this is a test (by: Nov 29 2017 01:00 PM)\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                \"Now you have 10 tasks in the list.\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        };"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(String.join(\"\\n\", expected), actual);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void loadSavedTasks() throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        TaskCommand.loadSavedTasks(\"1todo This is a loadSavedTasks test\", taskListStub);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Task addedTask \u003d taskListStub.getLastAddedTask();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expectedToString \u003d \"[T][✓] This is a loadSavedTasks test\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(expectedToString, addedTask.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 33
    }
  },
  {
    "path": "src/test/java/duke/input/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "todo wake up"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "deadline brush teeth /by 2020-08-25 10:00"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "todo"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "event online lecture /at 2020-08-25 12:00"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "event some event without event time"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "deadline submit assignment /by 2020-08-29 17:00"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "deadline invalid date time format /by 2020-30-29 1700"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "todo take a nap"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "find"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "find lecture"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "due 2020-08-25"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "event go for a run /at 2020-08-25 20:00"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "delete abc"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "delete 10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "due invalid date"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "todo eat lunch"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "event project meeting /at 2020-08-30 20:00"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "find run"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "some invalid command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "due 2018-08-09"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 29
    }
  },
  {
    "path": "src/test/java/duke/parser/DateTimeParsingTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class DateTimeParsingTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void parseDate_validFormat_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String date1 \u003d \"2012-12-21\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        LocalDate expected1 \u003d LocalDate.parse(date1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(expected1, DateTimeParsing.parseDate(date1));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String date2 \u003d \"2020-08-25\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        LocalDate expected2 \u003d LocalDate.parse(date2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(expected2, DateTimeParsing.parseDate(date2));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void parseDate_invalidFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            String date1 \u003d \"2012/12/21\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            LocalDate.parse(date1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        });"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void localDateToString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String date1 \u003d \"2000-05-12\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        LocalDate localDate1 \u003d LocalDate.parse(date1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(date1, DateTimeParsing.localDateToString(localDate1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String date2 \u003d \"2024-01-24\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        LocalDate localDate2 \u003d LocalDate.parse(date2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(date2, DateTimeParsing.localDateToString(localDate2));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void to12HTimeFormat_validFormat_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String time1 \u003d \"23:59\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(\"11:59 PM\", DateTimeParsing.to12HTimeFormat(time1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String time2 \u003d \"08:20\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(\"08:20 AM\", DateTimeParsing.to12HTimeFormat(time2));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void to12HTimeFormat_invalidFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            String time1 \u003d \"2359\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            DateTimeParsing.to12HTimeFormat(time1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void to24HTimeFormat_validFormat_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String time1 \u003d \"10:45 PM\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(\"22:45\", DateTimeParsing.to24HTimeFormat(time1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String time2 \u003d \"05:33 AM\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(\"05:33\", DateTimeParsing.to24HTimeFormat(time2));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void to24HTimeFormat_invalidFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            String time1 \u003d \"01:00\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            DateTimeParsing.to24HTimeFormat(time1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 75
    }
  },
  {
    "path": "src/test/java/duke/storage/DukeStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class DukeStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private static final Path TEST_FILE_PATH \u003d Paths.get(\"test\", \"data\", \"duke.txt\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    // recursive function to delete directory that stores the save file"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private void deleteDirectory(File directoryToBeDeleted) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        File[] allContents \u003d directoryToBeDeleted.listFiles();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (allContents !\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            for (File file : allContents) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                deleteDirectory(file);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        directoryToBeDeleted.delete();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private void writeLines(String[] lines) throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        FileWriter myWriter \u003d new FileWriter(TEST_FILE_PATH.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        for (String line: lines) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            myWriter.write(line + \"\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        myWriter.close();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private void createSaveFile() throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        int len \u003d TEST_FILE_PATH.getNameCount();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Path directoriesToCreate \u003d TEST_FILE_PATH.subpath(0, len - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Files.createDirectories(directoriesToCreate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (!java.nio.file.Files.exists(TEST_FILE_PATH)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            new File(TEST_FILE_PATH.toString()).createNewFile();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private void clearPath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Path topDir \u003d TEST_FILE_PATH.subpath(0, 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (!java.nio.file.Files.exists(topDir)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        File toDelete \u003d new File(String.valueOf(topDir));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        deleteDirectory(toDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void removeSaveFile() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        clearPath();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void getSavedLines_saveFileNotExist_success() throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Storage store \u003d new DukeStorage(TEST_FILE_PATH);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        List\u003cString\u003e savedLines \u003d store.getSavedLines();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        int len \u003d savedLines.size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(0, len);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void getSavedLines_saveFileExistNotEmpty_success() throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        createSaveFile();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] initialLines \u003d new String[3];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        initialLines[0] \u003d \"This is test line number 1.\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        initialLines[1] \u003d \"This is test line number 2!\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        initialLines[2] \u003d \"This is test line number 3?\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        writeLines(initialLines);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Storage store \u003d new DukeStorage(TEST_FILE_PATH);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        List\u003cString\u003e savedLines \u003d store.getSavedLines();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        int len \u003d savedLines.size();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(initialLines.length, len);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        for (int i \u003d 0; i \u003c len; i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            assertEquals(initialLines[i], savedLines.get(i));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void getSavedLines_saveFileExistEmpty_success() throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        createSaveFile();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Storage store \u003d new DukeStorage(TEST_FILE_PATH);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        List\u003cString\u003e savedLines \u003d store.getSavedLines();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        int len \u003d savedLines.size();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(0, len);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void addLine_newLinesSaved() throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        createSaveFile();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Storage store \u003d new DukeStorage(TEST_FILE_PATH);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] addedLines \u003d new String[3];"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        addedLines[0] \u003d \"This is test line number 1.\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        addedLines[1] \u003d \"This is test line number 2!\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        addedLines[2] \u003d \"This is test line number 3?\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Arrays"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .stream(addedLines)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                .forEach(store::addLine);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        BufferedReader in \u003d new BufferedReader(new FileReader(TEST_FILE_PATH.toString()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] actual \u003d in.lines().toArray(String[]::new);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        in.close();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        int len \u003d actual.length;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(addedLines.length, len);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        for (int i \u003d 0; i \u003c len; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            assertEquals(addedLines[i], actual[i]);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void updateLine_updatesSaveFile() throws IOException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        createSaveFile();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] lines \u003d new String[3];"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        lines[0] \u003d \"This is test line number 1.\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        lines[1] \u003d \"This is test line number 2!\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        lines[2] \u003d \"This is test line number 3?\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        writeLines(lines);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Storage store \u003d new DukeStorage(TEST_FILE_PATH);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        lines[1] \u003d \"Line number 2 has been updated!\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        store.updateLine(1, lines[1]);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        BufferedReader in \u003d new BufferedReader(new FileReader(TEST_FILE_PATH.toString()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] actual \u003d in.lines().toArray(String[]::new);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        in.close();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        int len \u003d actual.length;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(lines.length, len);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        for (int i \u003d 0; i \u003c len; i++) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            assertEquals(lines[i], actual[i]);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void removeLine_removesLinesFromSaveFile() throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        createSaveFile();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] lines \u003d new String[3];"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        lines[0] \u003d \"This is test line number 1.\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        lines[1] \u003d \"This is test line number 2!\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        lines[2] \u003d \"This is test line number 3?\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        writeLines(lines);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Storage store \u003d new DukeStorage(TEST_FILE_PATH);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        store.removeLine(0);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        store.removeLine(0);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        BufferedReader in \u003d new BufferedReader(new FileReader(TEST_FILE_PATH.toString()));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] actual \u003d in.lines().toArray(String[]::new);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        in.close();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String[] expected \u003d Arrays.copyOfRange(lines, 2, 3);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        int len \u003d actual.length;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(expected.length, len);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        for (int i \u003d 0; i \u003c len; i++) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            assertEquals(expected[i], actual[i]);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 183
    }
  },
  {
    "path": "src/test/java/duke/stub/command/CommandExecutorStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.stub.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.command.CommandExecutor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class CommandExecutorStub implements CommandExecutor {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public String execute(String in, TaskList taskList) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public boolean shouldExit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void loadSaveString(String in, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 22
    }
  },
  {
    "path": "src/test/java/duke/stub/storage/StorageStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.stub.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class StorageStub implements Storage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void addLine(String saveString) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void removeLine(int index) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void updateLine(int index, String saveString) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public List\u003cString\u003e getSavedLines() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 28
    }
  },
  {
    "path": "src/test/java/duke/stub/task/DeadlineStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.stub.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.parser.DateTimeParsing;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class DeadlineStub extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public DeadlineStub() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        super(\"\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return (isDone ? \"1\" : \"0\") + \"deadline this is a deadline stub /by 2000-01-01 12:00\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public boolean isDueOn(LocalDate date) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        LocalDate stubDate \u003d DateTimeParsing.parseDate(\"2000-01-01\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return date.equals(stubDate);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return \"This deadline stub was \" + (isDone ? \"\" : \"not\") + \" marked as done\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 28
    }
  },
  {
    "path": "src/test/java/duke/stub/task/EventStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.stub.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.parser.DateTimeParsing;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class EventStub extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public EventStub() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        super(\"event this is an event stub\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return (isDone ? \"1\" : \"0\") + \"event this is an event stub /at 2000-01-01 12:00\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public boolean isDueOn(LocalDate date) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        LocalDate stubDate \u003d DateTimeParsing.parseDate(\"2000-01-01\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return date.equals(stubDate);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 23
    }
  },
  {
    "path": "src/test/java/duke/stub/task/TaskListStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.stub.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class TaskListStub implements TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    protected Task lastAddedTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void add(Task t, boolean shouldUpdateStorage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        this.lastAddedTask \u003d t;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Task get(int i) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        if (i \u003d\u003d 7) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return new EventStub();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        } else if (i \u003d\u003d 9) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return new DeadlineStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            return new TodoStub();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Task getLastAddedTask() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return lastAddedTask;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public Task remove(int i) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return new DeadlineStub();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return 10;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void update(int i) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public static Task[] fillerTasks() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Task[] fillerTasks \u003d new Task[3];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        fillerTasks[0] \u003d new TodoStub();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        fillerTasks[1] \u003d new EventStub();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        fillerTasks[1].markAsDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        fillerTasks[2] \u003d new DeadlineStub();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return fillerTasks;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 47
    }
  },
  {
    "path": "src/test/java/duke/stub/task/TaskStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.stub.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class TaskStub extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public TaskStub(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public boolean isDueOn(LocalDate date) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 21
    }
  },
  {
    "path": "src/test/java/duke/stub/task/TodoStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.stub.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class TodoStub extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public TodoStub() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        super(\"\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return (isDone ? \"1\" : \"0\") + \"todo this is a todo stub\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public boolean isDueOn(LocalDate date) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        return \"This todo stub was \" + (isDone ? \"\" : \"not\") + \" marked as done\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 26
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.InvalidDeadlineException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.parser.DateTimeParsing;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toSaveString() throws InvalidDeadlineException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String description \u003d \"This is a test on toSaveString. /by 2020-03-20 12:00\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Deadline deadline \u003d Deadline.createDeadline(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String saveString \u003d deadline.toSaveString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expected \u003d \"0deadline \" + description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(expected, saveString);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void createDeadLine_invalidFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(InvalidDeadlineException.class, () -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            String description \u003d \"This is an invalid format. /by 2018/09/21 15:00\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            Deadline.createDeadline(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void isDueOn() throws InvalidDeadlineException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String description \u003d \"This is a test on isDueOn. /by 2018-09-21 15:00\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Deadline deadline \u003d Deadline.createDeadline(description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        LocalDate date1 \u003d DateTimeParsing.parseDate(\"2018-09-21\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        LocalDate date2 \u003d DateTimeParsing.parseDate(\"2019-09-21\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(deadline.isDueOn(date1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(deadline.isDueOn(date2));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toStringTest() throws InvalidDeadlineException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String description \u003d \"This is a test on toString. /by 2022-02-03 08:00\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Deadline deadline \u003d Deadline.createDeadline(description);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expected1 \u003d \"[D][\\u2718] This is a test on toString. (by: Feb 3 2022 08:00 AM)\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(expected1, deadline.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        deadline.markAsDone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expected2 \u003d \"[D][\\u2713] This is a test on toString. (by: Feb 3 2022 08:00 AM)\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(expected2, deadline.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 55
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.InvalidEventException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.parser.DateTimeParsing;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toSaveString() throws InvalidEventException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String description \u003d \"This is a test on toSaveString. /at 2020-03-20 12:00\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Event event \u003d Event.createEvent(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String saveString \u003d event.toSaveString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expected \u003d \"0event \" + description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(expected, saveString);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void createEvent_invalidFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(InvalidEventException.class, () -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            String description \u003d \"This is an invalid format. /at 2018/09/21 15:00\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            Event.createEvent(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void isDueOn() throws InvalidEventException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String description \u003d \"This is a test on isDueOn. /at 2018-09-21 15:00\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Event event \u003d Event.createEvent(description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        LocalDate date1 \u003d DateTimeParsing.parseDate(\"2018-09-21\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        LocalDate date2 \u003d DateTimeParsing.parseDate(\"2019-09-21\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(event.isDueOn(date1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(event.isDueOn(date2));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toStringTest() throws InvalidEventException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String description \u003d \"This is a test on toString. /at 2022-02-03 08:00\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Event event \u003d Event.createEvent(description);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expected1 \u003d \"[E][\\u2718] This is a test on toString. (at: Feb 3 2022 08:00 AM)\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(expected1, event.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        event.markAsDone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expected2 \u003d \"[E][\\u2713] This is a test on toString. (at: Feb 3 2022 08:00 AM)\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(expected2, event.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 55
    }
  },
  {
    "path": "src/test/java/duke/task/TaskArrayListTestEmpty.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class TaskArrayListTestEmpty {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 4
    }
  },
  {
    "path": "src/test/java/duke/task/TaskFactoryTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.InvalidDeadlineException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.InvalidEventException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.InvalidTodoException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class TaskFactoryTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void createTask_createValidTodo_success() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        TaskFactory.createTask(TaskType.Todo, \"This is a test.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void createTask_createInvalidTodo_exceptionThrown() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(InvalidTodoException.class, () -\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            TaskFactory.createTask(TaskType.Todo, \"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void createEvent_createValidEvent_success() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        TaskFactory.createTask(TaskType.Event, \"This is a test /at 2020-02-05 13:00\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void createEvent_createInvalidEvent_exceptionThrown() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(InvalidEventException.class, () -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            TaskFactory.createTask(TaskType.Event, \"This is a test /at 2020/02/05 13:00\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void createDeadline_createValidDeadline_success() throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        TaskFactory.createTask(TaskType.Deadline, \"This is a test /by 2020-02-05 13:00\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void createEvent_createInvalidDeadline_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(InvalidDeadlineException.class, () -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            TaskFactory.createTask(TaskType.Deadline, \"This is a test /at 2020-02-05 13:00\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void createEvent_invalidTaskType_exceptionThrown() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(InvalidCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            TaskFactory.createTask(TaskType.Invalid, \"This is a test\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 56
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.stub.task.TaskStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final Task TASK \u003d new TaskStub(\"This is a test\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void markAsUndone() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        TASK.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void getStatusIcon() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(\"\\u2718\", TASK.getStatusIcon());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        TASK.markAsDone();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(\"\\u2713\", TASK.getStatusIcon());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void containsKeyword() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(TASK.containsKeyword(\"test\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertTrue(TASK.containsKeyword(\"ThIs Is\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(TASK.containsKeyword(\"test.\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expected1 \u003d \"[\\u2718] This is a test\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(expected1, TASK.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        TASK.markAsDone();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expected2 \u003d \"[\\u2713] This is a test\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(expected2, TASK.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 45
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.exception.InvalidTodoException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import duke.parser.DateTimeParsing;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toSaveString() throws InvalidTodoException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String description \u003d \"This is a test on toSaveString.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Todo todo \u003d Todo.createTodo(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String saveString \u003d todo.toSaveString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expected \u003d \"0todo \" + description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(expected, saveString);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void createTodo_invalidFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertThrows(InvalidTodoException.class, () -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            String description \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            Todo.createTodo(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        });"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void isDueOn() throws InvalidTodoException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String description \u003d \"This is a test on isDueOn.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Todo todo \u003d Todo.createTodo(description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        LocalDate date1 \u003d DateTimeParsing.parseDate(\"2018-09-21\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertFalse(todo.isDueOn(date1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void toStringTest() throws InvalidTodoException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String description \u003d \"This is a test on toString.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        Todo todo \u003d Todo.createTodo(description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expected1 \u003d \"[T][\\u2718] This is a test on toString.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(expected1, todo.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        todo.markAsDone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String expected2 \u003d \"[T][\\u2713] This is a test on toString.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals(expected2, todo.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 49
    }
  },
  {
    "path": "src/test/java/duke/ui/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final ByteArrayOutputStream OUT_CONTENT \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final PrintStream ORIGINAL_OUT \u003d System.out;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final static String DIVIDER \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    private final static String ERROR_HEADER \u003d \"___________________________ERROR!___________________________\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        System.setOut(new PrintStream(OUT_CONTENT));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        System.setOut(ORIGINAL_OUT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void print() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String msgBody \u003d \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        new Ui().print(msgBody);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            DIVIDER + \"\\n\" + msgBody + \"\\n\" + DIVIDER + \"\\n\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "            OUT_CONTENT.toString()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    public void printErr() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        String msgBody \u003d \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        new Ui().printErr(msgBody);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                ERROR_HEADER + \"\\n\" + msgBody + \"\\n\" + DIVIDER + \"\\n\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "                OUT_CONTENT.toString()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 47
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "todo wake up"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "deadline brush teeth /by 2020-08-25 10:00"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "todo"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "event online lecture /at 2020-08-25 12:00"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "event some event without event time"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "deadline submit assignment /by 2020-08-29 17:00"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "deadline invalid date time format /by 2020-30-29 1700"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "todo take a nap"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "find"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "find lecture"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "due 2020-08-25"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "event go for a run /at 2020-08-25 20:00"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "delete abc"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "delete 10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "due invalid date"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "todo eat lunch"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "event project meeting /at 2020-08-30 20:00"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "find run"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "some invalid command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "due 2018-08-09"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 29
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "REM delete any exisiting save file"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "if exist data\\duke.txt del data\\duke.txt"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "if exist data rmdir data"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "dir /s /B ..\\src\\main\\java\\*.java \u003e sources.txt"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin @sources.txt"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "del sources.txt"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "del data\\duke.txt"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wong-ZZ"
        },
        "content": "rmdir data"
      }
    ],
    "authorContributionMap": {
      "Wong-ZZ": 11,
      "-": 19
    }
  }
]
